{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"concurrency\" tag",
    "description": "时雨病重症患者",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/12/20/Java/%E5%B9%B6%E5%8F%91/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87A/",
            "url": "https://cecilia.cool/2022/12/20/Java/%E5%B9%B6%E5%8F%91/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87A/",
            "title": "操作系统篇A",
            "date_published": "2022-12-20T13:49:24.000Z",
            "content_html": "<h2 id=\"并发介绍\"><a class=\"anchor\" href=\"#并发介绍\">#</a> 并发：介绍</h2>\n<p>经典观点：一个程序只有一个执行点（一个程序计数器，存放执行的指令），那么所有的执行都是顺序执行的。但是多线程（multi-threaded）程序有<strong>多个执行点</strong>，此处区别进程，多线程程序中，线程之间共享地址空间，能够访问到相同的数据。</p>\n<p>类比进程，当两个线程运行在一个处理器上，从运行 A 线程到运行 B 线程，一定会发生上下文切换（context switch），<strong>进程</strong>的状态保存到 PCB 中，<strong>线程</strong>的状态保存到 TCB（Thread Control Block）中。唯一与<strong>进程</strong>上下文切换不同的是，线程切换上下文，地址空间保持不变，也就是<strong>不需要切换当前使用的页表</strong>。</p>\n<p>在并发中最经典的程序问题就是多个线程累加同一个变量：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mythread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: begin\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \tcounter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: done\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">pthread_t</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main: begin (counter = %d)\\n\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> mythread<span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">Pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> mythread<span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// join waits for the threads to finish</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Pthread_join</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">Pthread_join</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main: done with both (counter = %d)\\n\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>希望最终 <code>counter</code>  得到的结果是 20000000，但是往往结果不是对的，而且每次都不一样。关键的指令在于：</p>\n<pre><code class=\"language-assembly\">mov 0x8049a1c, %eax\nadd $0x1, %eax\nmov %eax, 0x8049a1c\n</code></pre>\n<p>变量  <code>counter</code>  位于地址  <code>0x8049a1c</code> 。在这 3 条指令中，先用 x86 的  <code>mov</code>  指令，从内存地址处取出值，放入  <code>eax</code> 。然后，给  <code>eax</code>  寄存器的值加 1（0x1）。最后， <code>eax</code>  的值被存回内存中相同的地址。</p>\n<p>这其实就是 c 代码中的 <code>counter = counter + 1</code> ，<strong>整个程序失败的点在于这行 c 代码不是原子执行</strong>。如果线程 A 在执行完 <code>add</code>  指令后中断，此时 <code>counter</code>  还是 50，A 线程的 <code>eax=51</code> ，轮到 B 执行完这三行指令，此时 <code>counter=51</code> ，再次轮到 A，就会将 51 再次存入 <code>counter</code> ，相当于 A 线程在本次循环中并没有使 <code>counter</code>  增加。</p>\n<p>由于<strong>执行这段代码的多个线程可能导致竞争状态</strong>，因此我们将<strong>此段代码称为临界区</strong> （critical section）。<strong>临界区是访问共享变量（或更一般地说，共享资源）的代码片段，一定不能由多个线程同时执行</strong>。</p>\n<p>我们真正想要的代码就是的<strong>互斥</strong>（mutual exclusion）。这个属性保证了如果一个线程在临界区内执行，其他线程将被阻止进入临界区。</p>\n<p>这些术语都是 <code>Dijkstra</code>  创造的，此处给出一些术语补充：</p>\n<ul>\n<li><strong>临界区</strong>（critical section）是访问共享<strong>资源</strong>的一段代码，资源通常是一个变量或数据结构。</li>\n<li><strong>竞态条件</strong>（race condition）出现在多个执行线程大致同时进入临界区时，它们都试图更新共享的数据结构，导致了令人惊讶的（也许是不希望的）结果。</li>\n<li><strong>不确定性</strong>（indeterminate）程序由一个或多个竞态条件组成，程序的输出因运行而异，具体取 决于哪些线程在何时运行。这导致结果不是确定的（deterministic），而我们通常期望计算机系统给出确 定的结果。</li>\n<li>为了避免这些问题，线程应该使用某种<strong>互斥</strong>（mutual exclusion）原语。这样做可以保证只有一 个线程进入临界区，从而避免出现竞态，并产生确定的程序输出。</li>\n</ul>\n<p>为了保证安全的访问临界区，有两种方法，要么对临界区的操作是原子操作，要么就是对临界区的操作上锁。将一系列动作原子化（atomic）背后的想法可以简单用一个短语表达：“全部或没有”。要么都发生了，要么都没有发生，不会出现中间状态。</p>\n<blockquote>\n<p>本部分最重要的部分就是对临界区和资源的理解，本质上来说，我们需要锁住的不是临界区，而是临界区访问的资源，有可能很多个不同的临界区都会访问同一个资源。</p>\n</blockquote>\n<h2 id=\"并发锁\"><a class=\"anchor\" href=\"#并发锁\">#</a> 并发：锁</h2>\n<p>锁的本质就是一个变量，现实生活中，锁的状态只有打开和关闭两种状态（别和我扯什么撬开状态），锁变量其实也就是表示锁的状态，最简单的就是 0 表示打开，1 表示关闭。复杂点的，我们也可以保存：<strong>持有锁的线程</strong>，请求获取锁的<strong>线程队列</strong>，但这些信息会隐藏起来，锁的使用者不会发现。</p>\n<p>在 c 语言中， <code>lock()</code>  和 <code>unlock()</code>  函数分别表示尝试获取锁和释放锁。在其他语言中，也有类似的方法。</p>\n<h3 id=\"评价锁\"><a class=\"anchor\" href=\"#评价锁\">#</a> 评价锁</h3>\n<p>我们需要一些标准来评判一把锁的实现效果：</p>\n<ul>\n<li><strong>互斥性</strong>：这是最基本的，阻止多个线程进入临界区。</li>\n<li><strong>公平性</strong>（ <code>fairness</code> ）：当锁可用时，是否每一个竞争线程有公平的机会抢到锁？这其实考验的是等待队列的设计，像 <code>AQS</code>  使用的就是先进先出。</li>\n<li><strong>性能</strong>：是使用锁之后增加的时间开销。考虑这个是非常必要的，因为有时真的只有一个线程在执行，但是它还是要执行上锁解锁的操作，当然，还有其他需要考虑的场景。</li>\n</ul>\n<h3 id=\"控制中断\"><a class=\"anchor\" href=\"#控制中断\">#</a> 控制中断</h3>\n<p>最早的互斥方案之一就是<strong>在临界区关闭中断</strong>，也就是说，此时线程 A 在临界区不会发生上下文切换。这个解决方案是为单处理器 系统开发的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">DisableInterrupts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">EnableInterrupts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制中断是使用特殊的硬件指令，背后的实现是由硬件支持的， <code>CAS</code>  也是由硬件支持的。这种方法优点就是简单，但是缺点十分明显：</p>\n<ul>\n<li>\n<p>这种方法要求我们允许所有调用线程执行特权操作（打开 / 关闭中断），但是恶意程序一开始调用关闭中断就会一直霸占处理器。</p>\n</li>\n<li>\n<p>多处理器不适用。多个线程在多 CPU 上，每个线程都试图进入同一个临界区，关闭中断也没用。</p>\n</li>\n<li>\n<p>关闭中断导致中断丢失，可能会导致严重的系统问题。假如磁盘设备完成了读 取请求，但 CPU 错失了这一事实，那么，操作系统如何知道去唤醒等待读取的进程？</p>\n</li>\n<li>\n<p>效率低。与正常指令执行相比，现代 CPU 对于关闭和打 开中断的代码执行得较慢。</p>\n</li>\n</ul>\n<h3 id=\"原子交换\"><a class=\"anchor\" href=\"#原子交换\">#</a> 原子交换</h3>\n<p>如果<strong>不依赖硬件</strong>，我们可以这么实现一个锁：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lock_t</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">lock_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 表示没有上锁</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 什么都不做，空等待，这就叫做 spin-wait   自旋</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到这种锁有一些问题：</p>\n<ul>\n<li>正确性：你可能会觉得上述代码完全没有问题的，但是如果 AB 两个线程都调用 <code>lock</code>  函数，假设 A 先调用，然后经过了 <code>while</code>  循环，此时发生中断，轮到 B，经过 while 循环，又发生中断，那么此时两个线程相当于都拿到了锁，因为他们之后都会执行 <code>mutex-&gt;flag = 1;</code>  的操作。导致问题的本质就是 —— 上<strong>锁的过程不是原子的</strong>。</li>\n<li>性能：可以看到，如果一个线程拿不到锁，就会一直自旋，直到它的时间片执行完或者拿到锁。自旋等待在等待其他线程释放锁的 时候会浪费时间。尤其是在单处理器上，一个等待线程等待的目标线程甚至无法运行（至 少在上下文切换之前）！</li>\n</ul>\n<p>为了解决这些问题，我们需要硬件的支持 —— 原子交换。它们基本上在不同的平台上做同样的事，通常称为<strong>测试并设置指令（test-and-set）</strong>。回顾上述代码，我们在 <code>lock()</code>  函数中的行为可以归为：测试 <code>flag</code> ，设置 <code>flag</code> 。</p>\n<p>这个指令的工作内容，我们用 c 代码演示一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>old_ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> new<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>old_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>old_ptr <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只不过这个操作是<strong>原子进行</strong>的。它原子的实现了：给变量赋予新值并返回旧值。那我们的锁的实现代码就可以改为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token comment\">// spin-wait</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只有当旧值为 0 才算此次上锁成功。这样就是原子上锁了，尽管还是没有解决自旋浪费性能的问题。这样的锁就叫做自旋锁（spin lock）。</p>\n<p>自旋锁不提供公平性，在竞争状态下，自旋的线程甚至会永远自旋（回忆一下进程切换，如果不人为的设置一些 FIFO 什么的，有些进程会被饿死）。同时，自旋锁在单 CPU 下开销很大，在多 CPU 情况该性能不错。</p>\n<p>上文讲了测试并切换 <code>TAS</code> ，其实还有比较并切换 <code>CAS</code> ，c 语言伪代码为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">compareAndSwap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> expected<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> new<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> actual <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actual <span class=\"token operator\">==</span> expected<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> actual<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同样是返回旧值（你可以思考一下为什么返回的是旧值），总体思路就是，检测变量的旧值是否是期望值，如果是，就赋新值，返回旧值。如果用 <code>CAS</code>  实现上述自旋锁：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">;</span> <span class=\"token comment\">//spin-wait</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"解决自旋\"><a class=\"anchor\" href=\"#解决自旋\">#</a> 解决自旋</h3>\n<ul>\n<li><strong>让出时间片</strong>，即在要自旋的时候，放弃 CPU。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们假定操作系统提供原语  <code>yield()</code> ，线程可以调用它主动放弃 CPU， 让其他线程运行。 <code>yield()</code>  系统调用能让线程由 <code>running</code>  变为 <code>readying</code> 。但是这个方法没有处理本质问题：频繁的上下文切换。线程饿死的情况也没解决。</p>\n<ul>\n<li><strong>使用队列：休眠代替自旋</strong></li>\n</ul>\n<p>前面一些方法的真正问题是存在太多的偶然性。因此，我们必须<strong>显式</strong>地施加某种控制，<strong>决定锁释放时，谁能抢到锁</strong>（这样才能保证公平的）。</p>\n<blockquote>\n<p><strong>处于休眠状态的线程永远不会分配到 CPU 资源</strong>，当等待的事件出现，休眠状态的线程才会转换到可运行的状态。</p>\n</blockquote>\n<p>在 c 语言中，Solaris 提供了两个调用： <code>park()/unpark(ThreadID)</code> 。前者能够让调用线程休眠，后者会唤醒 ThreadID 标识的线程。使用两个调用实现锁，可以让<strong>调用者在获取不到锁时休眠</strong>，在锁可用时被唤醒，看一下《操作系统导论》里面给的例子：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lock_t</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> guard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">queue_t</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">lock_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock_init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    m<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">queue_init</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>guard<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token comment\">// spin-wait</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        m<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得锁</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">queue_add</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">,</span> <span class=\"token function\">gettid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>guard<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token comment\">// spin-wait</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">queue_empty</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有线程竞争锁</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span><span class=\"token function\">queue_remove</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从队首取出线程，不需要改变 flag</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面解释一下代码：</p>\n<ul>\n<li><code>flag</code> ：表示锁是否被占用，0 表示没有线程占用锁，1 表示有线程</li>\n<li><code>guard</code> ：注意，线程获取锁并不是一个原子过程（ <code>lock</code>  函数），但是我们应该让 <code>lock()/unlock()</code>  在某些代码保证并发安全。之前我们的做法：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">;</span> <span class=\"token comment\">//spin-wait</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>确实能保证 <code>lock</code>  内部的并发安全，但是使用 <code>flag</code>  自旋的缺点上文也详述过。所以不能用<strong>锁的状态</strong>来自旋。此处使用 <code>guard</code>  来自旋。当 <code>guard=0</code>  时，表示没有线程正在改变锁的状态；当 <code>guard=1</code>  时，表示有线程正在改变锁的状态，此时不允许任何线程也跟着来修改锁的状态。</p>\n<blockquote>\n<p>锁的状态包括了 flag，queue。</p>\n</blockquote>\n<p>所以其他线程都会先围绕 <code>guard</code>  自旋一会。这个过程非常短，<strong>因为线程修改锁的状态花费的时间也非常短</strong>。</p>\n<ul>\n<li>释放锁时，如果队列里还有线程在等待，不需要改变 <code>flag</code> 。举个例子，假设临界区代码为：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临界区</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>假设只有 AB 两个线程，线程 A 在获取锁后，B 也获取锁，失败后 B 加入等待队列。当 A 执行到 <code>unlock()</code>  代码后，唤醒 B 线程，也许 B 不会立刻被分配时间片，但是此时 flag 仍然为 1，其他线程哪怕拿到时间片获取锁，也需要休眠进入队列。直到 B 分配到时间片，B 从哪里开始继续执行呢？</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">queue_add</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">,</span> <span class=\"token function\">gettid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从这里被唤醒，也就是 lock () 函数的结尾</span></pre></td></tr></table></figure><p>相当于在 <code>lock()</code>  结束， <code>count++;</code>  之前被唤醒。在临界区被唤醒，天生自带锁。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZTc5YWUyNWJmYjY=\">https://www.jianshu.com/p/3e79ae25bfb6</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8yNi5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/26.pdf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8yOC5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/28.pdf</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/20/Java/%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB/",
            "url": "https://cecilia.cool/2022/12/20/Java/%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB/",
            "title": "并发标签导读",
            "date_published": "2022-12-20T13:41:42.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>现在你看到的并发标签是我第二次重制版，第一次的并发系列文章比较散乱，当时也是处于初学阶段，心态不够沉稳，很多东西看不清晰就写了博客，所以这次打算好好改一下。</p>\n<p>个人观点：Java 并发需要分为两个部分学习，一部分为操作系统级别的并发知识，另一部分才是 <code>j.u.c</code>  包。考虑到整个体系的知识量过于庞大，所以本系列前几篇长篇文章，都会用于简述第一部分的内容，概述操作系统的并发和 Java 为了并发而做出的努力，如内存模型，类设计，并发关键字等。然后剩下的文章才是对 <code>j.u.c</code>  包中各个类的应用解释，该部分我们会阅读大量源码，有些类我们会着重讲解，像 <code>AQS</code>  这样的重点，还会分上下来讲解，当然，有些我们也会讲得很快，比如 <code>ConcurrentHashMap</code> ，就不必停留在实现细节上，而是了解它的实现逻辑上即可。</p>\n<h1 id=\"第一部分\"><a class=\"anchor\" href=\"#第一部分\">#</a> 第一部分</h1>\n<h2 id=\"操作系统\"><a class=\"anchor\" href=\"#操作系统\">#</a> 操作系统</h2>\n<p>本部分主要讲解一个操作系统为了满足并发而做出的努力，本系列主要参考《操作系统导论》的并发主题，本书已经有中文翻译版，如果不喜欢阅读实体书， <code>github</code>  上也有对应的中文 pdf：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlbXppLWFycGFjaWR1c3NlYXUvb3N0ZXAtdHJhbnNsYXRpb25zL3RyZWUvbWFzdGVyL2NoaW5lc2U=\">https://github.com/remzi-arpacidusseau/ostep-translations/tree/master/chinese</span> 实在看不进去，你也可以看我的博客，总之，你需要花时间。</p>\n",
            "tags": [
                "Concurrency"
            ]
        }
    ]
}