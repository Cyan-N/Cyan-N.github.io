{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"java8\" tag",
    "description": "时雨病重症患者！！！",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/08/23/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A76-StampedLock/",
            "url": "https://cecilia.cool/2022/08/23/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A76-StampedLock/",
            "title": "Java8新特性--StampedLock",
            "date_published": "2022-08-23T05:54:59.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>一般应用，都是读多写少， <code>ReentrantReadWriteLock</code>  因读写互斥，故读时阻塞写，因而性能上上不去。可能会使写线程饥饿， <code>StampedLock</code>  营运而生。</p>\n<p>``StampedLock <code>并没有使用</code>  AQS <code>，</code> API <code>相对复杂，内壁实现比</code>  ReentrantReadWriteLock <code>复杂得多，所以本文就不对源码进行过多解释。有点就是吞吐量相对</code>  ReentrantReadWriteLock` 有显著提升。</p>\n<h1 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h1>\n<p>获取锁的方法都会返回一个邮戳 <code>Stamp</code> ， <code>Stamp=0</code>  表示获取失败，其余都表示成功。释放锁时，也需要一个邮戳 <code>Stamp</code> ，这个 <code>Stamp</code>  必须和获得锁时的 <code>Stamp</code>  一致。</p>\n<p>看一个简单的例子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StampedLock</span> sl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StampedLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> deltaX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> deltaY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           x <span class=\"token operator\">+=</span> deltaX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           y <span class=\"token operator\">+=</span> deltaY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockWrite</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用到了 Stamp 释放锁</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h1>\n<ul>\n<li><code>StampedLock</code>  不支持锁重入，写锁的重入会造成死锁。但是支持三种模式：写锁，悲观锁，乐观锁。</li>\n<li>只允许一个线程获取写锁，写锁和悲观读锁是互斥的。</li>\n<li>允许多 个线程同时获取乐观锁和悲观读锁。</li>\n</ul>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>我们先来看一下 <code>JDK1.8</code>  源码自带的案例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StampedLockDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StampedLock</span> sl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StampedLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//【写锁 (排它锁)】</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> deltaX<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> deltaY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/**stampedLock 调用 writeLock 和 unlockWrite 时候都会导致 stampedLock 的 stamp 值的变化</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         * 即每次 + 1（不是狭义的加一），直到加到最大值，然后从 0 重新开始 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span>sl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写锁</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            x <span class=\"token operator\">+=</span>deltaX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            y <span class=\"token operator\">+=</span>deltaY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockWrite</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放写锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//【乐观读锁】</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">distanceFromOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// A read-only method</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * tryOptimisticRead 是一个乐观的读，使用这种锁的读不阻塞写</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         * 每次读的时候得到一个当前的 stamp 值（类似时间戳的作用）</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">tryOptimisticRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 这里就是读操作，读取 x 和 y，因为读取 x 时，y 可能被写了新的值，所以下面需要判断</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">double</span> currentX <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> currentY <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/** 如果读取的时候发生了写，则 stampedLock 的 stamp 属性值会变化，此时需要重读，</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         * 再重读的时候需要加读锁（并且重读时使用的应当是悲观的读锁，即阻塞写的读锁）</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * 当然重读的时候还可以使用 tryOptimisticRead，此时需要结合循环了，即类似 CAS 方式</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         * 读锁又重新返回一个 stampe 值 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sl<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果验证失败（读之前已发生写）</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 悲观读锁</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                currentX <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                currentY <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockRead</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放读锁</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 读锁验证成功后执行计算，即读的时候没有发生写</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>currentX <span class=\"token operator\">*</span>currentX <span class=\"token operator\">+</span> currentY <span class=\"token operator\">*</span>currentY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//【悲观读锁】</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">moveIfAtOrigin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> newY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// upgrade</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 读锁（这里可用乐观锁替代）</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 循环，检查当前状态是否符合</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>             * 转换当前读戳为写戳，即上写锁</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>             * 1. 写锁戳，直接返回写锁戳</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>             * 2. 读锁戳且写锁可获得，则释放读锁，返回写锁戳</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>             * 3. 乐观读戳，当立即可用时返回写锁戳</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>             * 4. 其他情况返回 0</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">long</span> ws <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">tryConvertToWriteLock</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 如果写锁成功</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">!=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>              stamp <span class=\"token operator\">=</span> ws<span class=\"token punctuation\">;</span><span class=\"token comment\">// 替换票据为写锁</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>              x <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改数据</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              y <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 转换为写锁失败</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">// 释放读锁</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockRead</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token comment\">// 获取写锁（必要情况下阻塞一直到获取写锁成功）</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 释放锁（可能是读 / 写锁）</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>灰信网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZXNpb24uY29tL2FydGljbGUvMTcwNjIxMjU1NS8=\">https://www.freesion.com/article/1706212555/</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1zdGFtcGVkbG9jay5odG1s\">https://pdai.tech/md/java/java8/java8-stampedlock.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aXphcmRmb3JjZWwuZ2l0Ym9va3MuaW8vamF2YTgtbmV3LWZlYXR1cmVzL2NvbnRlbnQvMTAuaHRtbA==\">https://wizardforcel.gitbooks.io/java8-new-features/content/10.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aXphcmRmb3JjZWwuZ2l0Ym9va3MuaW8vamF2YTgtdHV0b3JpYWxzL2NvbnRlbnQvSmF2YSUyMDglMjAlRTUlQjklQjYlRTUlOEYlOTElRTYlOTUlOTklRTclQTglOEIlMjBUaHJlYWRzJTIwJUU1JTkyJThDJTIwRXhlY3V0b3JzLmh0bWw=\">https://wizardforcel.gitbooks.io/java8-tutorials/content/Java 8 并发教程 Threads 和 Executors.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/20/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A75-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96/",
            "url": "https://cecilia.cool/2022/08/20/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A75-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96/",
            "title": "Java8新特性(5)--类型推断优化",
            "date_published": "2022-08-20T07:17:13.000Z",
            "content_html": "<h1 id=\"泛型简介\"><a class=\"anchor\" href=\"#泛型简介\">#</a> 泛型简介</h1>\n<p>泛型是 <code>Java SE 1.5</code>  的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。理解 <code>Java</code>  泛型最简单的方法是把它看成一种便捷语法，能节省你某些 <code>Java</code>  类型转换 (casting) 上的操作。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有泛型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>box<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Apple</span> apple <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 没有泛型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Apple</span> apple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">)</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>很明显，在声明变量时已经指定了参数类型，在初始化对象时还需要再指定。在 <code>Java 7 </code> 得到改进</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意后面的 \"&lt;>\"</span></pre></td></tr></table></figure><p>编译器会根据变量声明时的泛型类型自动推断出实例化 <code>HashMap</code>  时的泛型类型。再次提醒一定要注意 new  <code>HashMap</code>  后面的 “&lt;&gt;”，只有加上这个 “&lt;&gt;” 才表示是自动类型推断，否则就是非泛型类型的 <code>HashMap</code> ，并且在使用编译器编译源代码时会给出一个警告提示。</p>\n<p>但是 <code>Java SE 7</code>  在创建泛型实例时的类型推断是有限制的：只有构造器的参数化类型在<strong>上下文中被显著的声明</strong>了，才可以使用类型推断，否则不行。例如：下面的例子在 <code>java 7</code>  无法正确编译。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 由于 addAll 期望获得 Collection&lt;? extends String > 类型的参数，因此下面的语句无法通过</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>addAll</code>  的函数原型是</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// List 就是继承了 Collection</span></pre></td></tr></table></figure><h1 id=\"java8改进\"><a class=\"anchor\" href=\"#java8改进\">#</a> Java8 改进</h1>\n<p><code>java8</code>  里面泛型的目标类型推断主要 2 个:</p>\n<ul>\n<li>\n<p>支持通过<strong>方法</strong>上下文推断泛型目标类型。</p>\n</li>\n<li>\n<p>支持在<strong>方法</strong>调用链路当中，泛型类型推断传递到最后一个方法。</p>\n</li>\n</ul>\n<p>之前的 <code>Java7</code>  是<strong>构造器</strong>上下文。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">cons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Z</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">E</span> <span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以这么使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过方法赋值的目标参数来自动推断泛型的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">nil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 而不是显示的指定类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//List&lt;String> l = List.&lt;String>nil();</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过前面方法参数类型推断泛型的类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">nil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 而不是显示的指定类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//List.cons(42, List.&lt;Integer>nil());</span></pre></td></tr></table></figure><p>你记住 <code>Java8</code>  可以从方法上下文获取目标类型即可。之前的 <code>list.addAll(new ArrayList&lt;&gt;());</code> ， <code>list</code>  这个引用就指明了类型，所以 <code>Java8</code>  编译器可以推断出。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC10eXBlLmh0bWw=\">https://pdai.tech/md/java/java8/java8-type.html</span></p>\n<p>注：网上关于 Java8 类型推断优化好多都一模一样，连吐槽都一样，一点都没有改过，由于它们都大多没写发布时间，我也不知道谁抄谁的。</p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A74-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3/",
            "url": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A74-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3/",
            "title": "Java8新特性(4)--类型注解与重复注解",
            "date_published": "2022-08-19T14:26:44.000Z",
            "content_html": "<h1 id=\"java5的注解\"><a class=\"anchor\" href=\"#java5的注解\">#</a> Java5 的注解</h1>\n<p>注解就相当于一种标记，在程序中加了注解就等于为程序加了某种标记。告诉 <code>javac</code>  编译器或者 java 开发工具…… 向其传递某种信息，作为一个标记。</p>\n<p>同时注解分为三个阶段（注解的生命周期）： <code>java</code>  源文件 --&gt;  <code>class</code>  文件 --&gt; 内存中的字节码。由元注解 <code>Retention</code>  决定，注解的默认阶段是 <code>Class</code> 。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解</th>\n<th style=\"text-align:center\">阶段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">@Retention(RetentionPolicy.SOURCE)</td>\n<td style=\"text-align:center\">源文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Retention(RetentionPolicy.CLASS)</td>\n<td style=\"text-align:center\">class 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RetentionPolicy.RUNTIME</td>\n<td style=\"text-align:center\">内存中的字节码</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"java8的注解\"><a class=\"anchor\" href=\"#java8的注解\">#</a> Java8 的注解</h1>\n<p><code>Java8</code>  主要是两点改进：类型注解和重复注解。</p>\n<h2 id=\"类型注解\"><a class=\"anchor\" href=\"#类型注解\">#</a> 类型注解</h2>\n<p>在 <code>java 8</code>  之前，注解只能是在声明的地方所使用，比如类，方法，属性； <code>java 8</code>  里面，注解可以应用在任何地方。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建类实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token annotation punctuation\">@Interned</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 类型映射</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>myString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> str<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//implements 语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnmodifiableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token annotation punctuation\">@Readonly</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@Readonly</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//throw exception 声明</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">monitorTemperature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token annotation punctuation\">@Critical</span> <span class=\"token class-name\">TemperatureException</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类型注解只是语法而不是语义，并不会影响 java 的编译时间，加载时间，以及运行时间，也就是说，编译成 <code>class</code>  文件的时候并不包含类型注解。</p>\n<p>在枚举类型 <code>ElementType</code>  中新增了两个</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Type parameter declaration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @since 1.8 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 表示该注解能写在类型变量的声明语句中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">TYPE_PARAMETER</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Use of a type</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// @since 1.8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 表示该注解能写在使用类型的任何语句中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">TYPE_USE</span></pre></td></tr></table></figure><p><code>Java8</code>  并没有集成关于类型注解的使用框架，它需要开发者自己去搭建框架来使用，比如<strong>华盛顿大学</strong>开发出来的第三方插件工具<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGVja2VyZnJhbWV3b3JrLm9yZy8=\"> Cheker Framework</span>。类型注解被用来支持在 <code>Java</code>  程序中做强类型检查，配合上述工具可以在编译时检测出 <code>runtime error</code> 。</p>\n<p>注意：使用 <code>Checker Framework</code>  可以找到类型注解出现的地方并检查。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">checkers<span class=\"token punctuation\">.</span>nullness<span class=\"token punctuation\">.</span>quals<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Object</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 使用 javac 编译，上述是通过的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>javac <span class=\"token operator\">-</span>processor <span class=\"token class-name\"><span class=\"token namespace\">checkers<span class=\"token punctuation\">.</span>nullness<span class=\"token punctuation\">.</span></span>NullnessChecker</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">.</span>java</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 但是改为下面代码就不会通过</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Object</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意 <code>java 5,6,7</code>  版本是不支持注解 <code>@NonNul</code> l，但 <code>checker framework </code> 有个向下兼容的解决方案，就是将类型注解 <code>@NonNull</code>  用 /**/ 注释起来。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">checkers<span class=\"token punctuation\">.</span>nullness<span class=\"token punctuation\">.</span>quals<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*@NonNull*/</span> <span class=\"token class-name\">Object</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有时间我再出一篇关于 <code>Checker Framework</code>  的使用文章吧，确实很简单，就是官网是英文的让我这个英语天坑看着难受。</p>\n<h2 id=\"关于jsr-308\"><a class=\"anchor\" href=\"#关于jsr-308\">#</a> 关于 JSR 308</h2>\n<p>你可以就把 <code>JSR 308</code>  与类型注解挂钩。</p>\n<p><code>JSR 308</code>  想要解决在 Java 1.5 注解中出现的两个问题:</p>\n<ul>\n<li>在句法上对注解的限制：只能把注解写在声明的地方</li>\n<li>类型系统在语义上的限制：类型系统还做不到预防所有的 bug</li>\n</ul>\n<p><code>JSR 308</code>  通过如下方法解决上述两个问题:</p>\n<ul>\n<li>对 Java 语言的句法进行扩充，允许注解出现在更多的位置上。包括：方法接收器 (method receivers，译注：例 <code>public int size() @Readonly &#123; … &#125;)</code> ，泛型参数，数组，类型转换，类型测试，对象创建，类型参数绑定，类继承和 throws 子句。其实就是类型注解，现在是 java 8 的一个特性</li>\n<li>通过引入可插拔的类型系统 (pluggable type systems) 能够创建功能更强大的注解处理器。类型检查器对带有类型限定注解的源码进行分析，一旦发现不匹配等错误之处就会产生警告信息。其实就是 check framework</li>\n</ul>\n<p>对 JSR308，有人反对，觉得更复杂更静态了，比如</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@NotEmpty</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> strings <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>换成动态语言为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有人赞成，说到底，代码才是 “最根本” 的文档。代码中包含的注解清楚表明了代码编写者的意图。当没有及时更新或者有遗漏的时候，恰恰是注解中包含的意图信息，最容易在其他文档中被丢失。而且将运行时的错误转到编译阶段，不但可以加速开发进程，还可以节省测试时检查 bug 的时间。</p>\n<p>关于 <code>JSR 308</code>  的争议，可以看这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS8yMDA4LzA1L2pzci0zMDg=\">JSR 308：Java 语言复杂度在恣意增长？</span>。</p>\n<h2 id=\"重复注解\"><a class=\"anchor\" href=\"#重复注解\">#</a> 重复注解</h2>\n<p>允许在同一申明类型 (类，属性，或方法) 的多次使用同一个注解。</p>\n<p>在 <code>JDK1.8</code>  之前使用重复注解的解决方案</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注解</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">String</span> <span class=\"token function\">role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authorities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Authority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepeatAnnotationUseOldVersion</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Authorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>由另一个注解来存储重复注解，在使用时候，用存储注解 <code>Authorities</code>  来扩展重复注解。</p>\n<p><code>Java8</code>  的做法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authorities</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">String</span> <span class=\"token function\">role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authorities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Authority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepeatAnnotationUseNewVersion</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建重复注解 <code>Authority</code>  时，加上 <code>@Repeatable</code> , 指向存储注解 <code>Authorities</code> ，在使用时候，直接可以重复使用 <code>Authority</code>  注解。从上面例子看出， <code>java 8</code>  里面做法更适合常规的思维，可读性强一点。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC10eXBlLWFubm8uaHRtbA==\">https://pdai.tech/md/java/java8/java8-type-anno.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1hbm5vLXJlcGVhdC5odG1s\">https://pdai.tech/md/java/java8/java8-anno-repeat.html</span></p>\n<p>冰河的博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmluZ2hlMDAxL3AvMTMwMzM0NDcuaHRtbA==\">https://www.cnblogs.com/binghe001/p/13033447.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A73-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/",
            "url": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A73-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/",
            "title": "Java8新特性(3)--默认方法",
            "date_published": "2022-08-19T08:00:30.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>接口可以有实现方法，而且不需要实现类实现其方法，只需要在方法名前加上 <code>default</code>  关键字。</p>\n<p>为什么要有这个特性？首先，之前的接口是个双刃剑，<strong>好处是面向抽象而不是面向具体编程</strong>，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的 java 8 之前的集合框架没有 foreach 方法，通常能想到的解决办法是在 JDK 里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。<strong>他们的目的是为了解决接口的修改与现有的实现不兼容的问题</strong>。</p>\n<p>在简单点说就是，假设我某一个接口需要定义一个新的行为，这个行为提取出来的公共行为，如果没有默认方法，就需要在所有实现类上修改，保证其完整实现其接口。</p>\n<h1 id=\"java8抽象类与接口\"><a class=\"anchor\" href=\"#java8抽象类与接口\">#</a> Java8 抽象类与接口</h1>\n<p>java 8 的接口都有实现方法了，跟抽象类还有什么区别？其实还是有的，请看下表对比。</p>\n<table>\n<thead>\n<tr>\n<th>相同点</th>\n<th>不同点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>都是抽象类型</td>\n<td><strong>抽象类不可以多重继承，接口可以</strong> (无论是多重类型继承还是多重行为继承)</td>\n</tr>\n<tr>\n<td>都可以有实现方法 (以前接口不行)</td>\n<td>抽象类和接口所反映出的设计理念不同。其实抽象类表示的是”is-a” 关系，接口表示的是”like-a” 关系</td>\n</tr>\n<tr>\n<td>都可以不需要实现类或者继承者去实现所有方法，(以前不行，现在接口中默认方法不需要实现者实现)</td>\n<td>接口中定义的变量默认是<strong> public static final</strong> 型，且必须给其初值，所以实现类中不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"多重继承冲突\"><a class=\"anchor\" href=\"#多重继承冲突\">#</a> 多重继承冲突</h1>\n<p>接口可以书写默认方法了，然后又因为接口之间是可以多继承的，因而实质上 Java 8 的接口多继承其实也会涉及到实现多继承的问题。下面我们通过一个实例来看看 <code>Java</code>  它在语法层面的解决方案</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"爸爸吃饭方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 会报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"妈妈吃饭方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"儿子自己的吃饭方式~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 注意这种语法是调用 【指定接口】的 defualt 方法：</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 若接口名字没有冲突，直接 super 调用即可～～～</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Mother</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当接口的方法前面相同时，才会出现冲突。类中的方法优先级最高。类或者父类中的方法实现优先级大于任何接口的默认方法。如果最后还是无法判断，那么实现类必须通过显示复写方式复写默认方法，再通过 <code>super</code>  调用指定接口的实现。 <code>Java8</code>  在语言层面上，对若出现接口 <code>default</code>  方法冲突的解决方案是：不作为。其实不作为也是一种作为，它让编译器去提示调用者必须显示的 <code>override</code>  这个冲突的方法，让 coder 自己去决定调用逻辑。</p>\n<p>其实，更为直白的解释，就是寻找唯一默认方法的最短路径，上述例子，从 <code>Son</code>  实现类找 <code>eat</code>  的实现，从 <code>Son</code>  到 <code>Father</code>  和 <code>Son</code>  到 <code>Mother</code>  距离是一样的，所以会报错。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A's aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C's aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从 <code>D</code>  找 <code>aa</code>  方法，从 <code>D</code>  到 <code>C</code>  是最短的。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前 java 8 的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用 Java 8 的 lambdas 表达式时，提供给我们一个平滑的过渡体验。也许将来我们会在 API 设计中看到更多的默认方法的应用。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1kZWZhdWx0Lmh0bWwj\">https://pdai.tech/md/java/java8/java8-default.html#</span></p>\n<p>聊聊 java 中的多继承：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzkxMTUxMA==\">https://developer.aliyun.com/article/911510</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/18/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A72-Optional%E7%B1%BB/",
            "url": "https://cecilia.cool/2022/08/18/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A72-Optional%E7%B1%BB/",
            "title": "Java8新特性(2)--Optional类",
            "date_published": "2022-08-18T15:40:58.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>Optional</code>  类的引入很好的解决空指针异常。它是一个可以为 <code>null</code>  的容器对象， <code>Optional</code>  本身没有引入新技术，你可以把它看作对象的包装类，通过将对象封装在 <code>Optional</code>  中，可以省去大量空指针检查。</p>\n<p>相关的方法可以快速阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmE4LW9wdGlvbmFsLWNsYXNzLmh0bWw=\">菜鸟教程</span>。这里大致提一些相关的行为：</p>\n<ul>\n<li>获取 <code>Optional</code>  里的值，如果该值为空，返回默认值（可以指定默认值，有点像 <code>HashMap</code>  中的 <code>getOrDefault</code> ）</li>\n<li>检测 <code>Optional</code>  里的值，（ <code>ifPresent</code>  方法接收 <code>Consumer</code>  接口，来对值进行操作）</li>\n<li>构造器私有，通过其他方法（静态）检测要构造对象所传入的对象是否为 <code>null</code> ，来选择调用构造器。</li>\n</ul>\n<h1 id=\"入门\"><a class=\"anchor\" href=\"#入门\">#</a> 入门</h1>\n<p>举例来说，一个人可能有车也可能没有，那么  <code>Person</code>  类内部  <code>car</code>  变量就不应该声明为  <code>Car</code> ，当变量存在时， <code>Optional</code>  类只是对  <code>Car</code>  的简单封装。变量不存在时，会使用  <code>Optional.empty()</code>  方法返回空的  <code>Optional</code>  对象。如下所示：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/19/496146745a92782a.png\" alt=\"image-20220819112640846\" /></p>\n<p>但是  <code>null</code>  引用和  <code>Optional.empty()</code>  有什么本质区别？从语义上，它们可以当成一回事儿，但实际上差别非常大：如果尝试解引用一个  <code>null</code> ，一定会触发  <code>NullPointerException</code> ，不过使用  <code>Optional.empty()</code>  是一个有效对象。</p>\n<h1 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h1>\n<p>这里有 <code>empty(),of(),ofNullable()</code>  三个静态方法，都可以用来创建 <code>Optional</code>  对象，再次强调， <code>Optional</code>  的构造器是私有的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要说明的是， <code>Optional</code>  有一个 <code>EMPTY</code>  的静态属性。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">EMPTY</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Optional</code>  是不对外提供对 <code>value==null</code>  时修改 <code>value</code>  的方法的，因为 <code>ifPresent</code>  会进行 <code>null</code>  值检测</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> consumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以一个空的 <code>Optional</code>  就永远不会被加入新的值（因为无法修改），这也就意味着，所有的空的 <code>Optional</code>  都可以指向同一个空的 <code>Optional</code> ，这就是 <code>EMPTY</code> 。</p>\n<h1 id=\"其他方法\"><a class=\"anchor\" href=\"#其他方法\">#</a> 其他方法</h1>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map</h2>\n<p>源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>它和 <code>ifPresent</code>  的区别在于， <code>map</code>  接收的时 <code>Function</code>  接口，存在返回值， <code>map</code>  会将 <code>apply</code>  的返回值封装在一个新的 <code>Optional</code>  中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//map 方法执行传入的 lambda 表达式参数对 Optional 实例的值进行修改。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 为 lambda 表达式的返回值创建新的 Optional 实例作为 map 方法的返回值。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> upperName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>upperName<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No value found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出：ABC</span></pre></td></tr></table></figure><h2 id=\"flatmap\"><a class=\"anchor\" href=\"#flatmap\">#</a> flatMap</h2>\n<p>源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，它和 <code>map</code>  的差别就是返回语句， <code>flatmap</code>  只是对 <code>apply</code>  函数返回值进行空值判断，而不将它封装在 <code>Optional</code>  中。但是，从函数定义可以看到， <code>flatMap</code>  其实返回的还是一个 <code>Optional</code> ，所以 <code>mapper.apply</code>  必须返回 <code>Optional</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upperName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>upperName<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No value found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出 SANAULLA</span></pre></td></tr></table></figure><h2 id=\"fliter\"><a class=\"anchor\" href=\"#fliter\">#</a> fliter</h2>\n<p><code>filter</code>  方法通过传入限定条件对 <code>Optional</code>  实例的值进行过滤。如果有值并且满足断言条件返回包含该值的 <code>Optional</code> ，否则返回空 <code>Optional</code> 。要加入判定条件，从这里可以知道， <code>fliter</code>  应该实现 <code>Predicate</code>  接口（断定型接口）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> predicate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果为空</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmE4LW9wdGlvbmFsLWNsYXNzLmh0bWw=\">https://www.runoob.com/java/java8-optional-class.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1vcHRpb25hbC5odG1s\">https://pdai.tech/md/java/java8/java8-optional.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/17/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A71-%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/",
            "url": "https://cecilia.cool/2022/08/17/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A71-%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/",
            "title": "Java8新特性(1)--函数编程",
            "date_published": "2022-08-17T14:12:34.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>Lambda</code>  允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用  <code>Lambda</code>  表达式可以使代码变的更加简洁紧凑。</p>\n<p>以下是 lambda 表达式的重要特征:</p>\n<ul>\n<li>** 可选类型声明：** 不需要声明参数类型，编译器可以统一识别参数值。</li>\n<li>** 可选的参数圆括号：** 一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>\n<li>** 可选的大括号：** 如果主体包含了一个语句，就不需要使用大括号。</li>\n<li>** 可选的返回关键字：** 如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li>\n</ul>\n<p>具体代码为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 不需要参数，返回值为 5  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">5</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 接收一个参数 (数字类型), 返回其 2 倍的值  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x <span class=\"token operator\">-></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 接受 2 个参数 (数字), 并返回他们的差值  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x – y  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 4. 接收 2 个 int 型整数，返回他们的和  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 5. 接受一个 string 对象，并在控制台打印，不返回任何值 (看起来像是返回 void)  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此，因此这两种编程方式我们都得学。</p>\n</blockquote>\n<h1 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h1>\n<h2 id=\"变量作用域\"><a class=\"anchor\" href=\"#变量作用域\">#</a> 变量作用域</h2>\n<p><code>Lambda</code>  使用的变量，必须被 <code>final</code>  修饰或者含有隐性 <code>final</code> 。同样的，变量在 <code>Lambda</code>  表达式中也不能被修改。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// n = 9;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// n = 9;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//n 既不能在表达式中被修改，也不能在 Lambda 表达式之外被修改。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 总之，n 是不可修改的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"方法引用\"><a class=\"anchor\" href=\"#方法引用\">#</a> 方法引用</h2>\n<p>方法引用的可以简化 <code>Lambda</code>  表达式，但是在方法引用中不能有任何参数修改</p>\n<p>构造引用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span></pre></td></tr></table></figure><p>对象 **:😗* 实例方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// public void forEach(Consumer&lt;? super E> action) </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//forEach 需要重写 Consumer 的 accept 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用方法引用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类名 **:😗* 静态方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token operator\">::</span><span class=\"token function\">random</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类名 **:😗* 实例方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*  这里如果使用第一句话，编译器会有提示: Can be replaced with Comparator.naturalOrder，这句话告诉我们</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  String 已经重写了 compareTo () 方法，在这里写是多此一举，这里为什么这么写，是因为为了体现下面</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  这句编译器的提示: Lambda can be replaced with method reference。好了，下面的这句就是改写成方法引用之后: </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  TreeSet&lt;String> set = new TreeSet&lt;>((s1,s2) -> s1.compareTo(s2));</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"注解-functioninterface\"><a class=\"anchor\" href=\"#注解-functioninterface\">#</a> 注解 @FunctionInterface</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">FunctionalInterface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该注解只能修饰接口。被 <code>FunctionalInterface</code>  注解修饰的接口，只能有一个抽象方法，被实现的方法必须被<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDg4MTEz\"> defalut</span> 修饰。</p>\n<p>如果声明的方法和 <code>java.lang.Object</code>  中的某个方法一样，它可以不当做未实现的方法，不违背这个原则:：一个被它注解的接口只能有一个抽象方法。</p>\n<p>比如 <code>java public interface Comparator&lt;T&gt; &#123; int compare(T o1, T o2); boolean equals(Object obj); &#125;</code> 。</p>\n<p>编译器会自动把满足 <code>function interface</code>  要求的接口自动识别为 <code>function interface</code> ，所以你才不需要对上面示例中的 ITest 接口增加 <code>@FunctionInterface</code>  注解。</p>\n<h2 id=\"内置四大函数接口\"><a class=\"anchor\" href=\"#内置四大函数接口\">#</a> 内置四大函数接口</h2>\n<ul>\n<li>消费型接口： <code>Consumer&lt; T&gt; void accept(T t)</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> greeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>greeter<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Luke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Skywalker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>供给型接口： <code>Supplier &lt; T&gt; T get()</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> personSupplier <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>personSupplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// new Person</span></pre></td></tr></table></figure><ul>\n<li>断定型接口： <code> Predicate&lt;T&gt; boolean test(T t)</code> 。返回值类型是固定的 <code>boolean</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redicate<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> isEmpty <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>函数型接口： <code>Function&lt;T,R&gt; R apply(T t)</code> ，有参有返回值的抽象方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> toInteger <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmE4LWxhbWJkYS1leHByZXNzaW9ucy5odG1s\">https://www.runoob.com/java/java8-lambda-expressions.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1zdHJlYW0uaHRtbA==\">https://pdai.tech/md/java/java8/java8-stream.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        }
    ]
}