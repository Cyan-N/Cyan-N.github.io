<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>慕青の迷途 • Posts by &#34;tools&#34; tag</title>
        <link>https://cecilia.cool</link>
        <description>时雨病重症患者</description>
        <language>zh-CN</language>
        <pubDate>Sun, 01 Jan 2090 15:01:00 +0800</pubDate>
        <lastBuildDate>Sun, 01 Jan 2090 15:01:00 +0800</lastBuildDate>
        <category>Docker</category>
        <category>tools</category>
        <category>云计算</category>
        <category>八股文</category>
        <category>网络协议与工具</category>
        <category>shell</category>
        <category>轻小说</category>
        <category>数据结构与算法</category>
        <category>MySQL</category>
        <category>Redis</category>
        <category>Mybatis</category>
        <category>日志框架</category>
        <category>Spring全家桶</category>
        <category>uni-app</category>
        <category>Concurrency</category>
        <category>JVM</category>
        <category>Web</category>
        <category>Java8</category>
        <category>网络编程</category>
        <category>Java基础</category>
        <category>设计模式</category>
        <item>
            <guid isPermalink="true">https://cecilia.cool/2090/01/01/Tools/%E5%8D%97%E6%85%95%E9%9D%92%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/</guid>
            <title>必读：南慕青の碎碎念</title>
            <link>https://cecilia.cool/2090/01/01/Tools/%E5%8D%97%E6%85%95%E9%9D%92%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/</link>
            <category>tools</category>
            <pubDate>Sun, 01 Jan 2090 15:01:00 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;博客置顶功能出毛病了，所以就把文章时间改成 2090，让它保持在首页最上面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;起因&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#起因&#34;&gt;#&lt;/a&gt; 起因&lt;/h1&gt;
&lt;p&gt;搭建博客是一件很麻烦的事，自己写网站代码，自己买服务器搭上去，自己写文章，有时还会遇到一些 sb 跟你玩 DDoS，md，学了点东西就违法犯罪是吧，详情&lt;strong&gt;参考《刑法》第二百八十六条破坏计算机信息系统罪&lt;/strong&gt;。当然很多 DDoS 是公司发动的。&lt;/p&gt;
&lt;p&gt;我很懒，也怕麻烦，所以选择了 Hexo 框架，在 Github 上搭了个小家。&lt;/p&gt;
&lt;p&gt;其实最开始还是看三叶姐的微信公众号的一篇&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZEVIWW1HaVprS2tyVmR3N285QWF4Zw==&#34;&gt;碎碎念&lt;/span&gt;才了解到 Hexo 这个框架，后来就开始找主题，个人体验几个主题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2xpdXlpYi9oZXhvLXRoZW1lLXN0dW4uZ2l0&#34;&gt;stun&lt;/span&gt;：简约风，好像不维护了，在 README 里面推荐 NexT 主题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/10/20/ee0a3917d638ec09.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2ZsdWlkLWRldi9oZXhvLXRoZW1lLWZsdWlk&#34;&gt;fluid&lt;/span&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=&#34;&gt;三叶姐&lt;/span&gt;用的就是这个，我也用过一段时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/10/20/f72a0febc8143ea0.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibGlua2ZveC5naXRodWIuaW8v&#34;&gt;闪烁之狐&lt;/span&gt;：其实个人感觉颜色太鲜艳了，感兴趣可以试试，链接点进去就可以看效果。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==&#34;&gt;Shoka&lt;/span&gt;：超级推荐，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv&#34;&gt;开发者&lt;/span&gt;的博客，很厉害的主题，功能点特别多，可以选择性关闭，感兴趣就去试试，超级推荐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;然后换上自己喜欢的域名，打开 Github 支持的 https，关于慕青的博客就搭建好了。&lt;/p&gt;
&lt;h1 id=&#34;感谢&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#感谢&#34;&gt;#&lt;/a&gt; 感谢&lt;/h1&gt;
&lt;p&gt;最开始的内容，路线是跟着 pdai（皮带哥）的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wZGFpLnRlY2gv&#34;&gt; Java 全栈知识体系&lt;/span&gt;写的，这位前辈给我的很深触动就是他的网站开篇的一句话：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当你将本文中知识点掌握时，你会发现那些平时高谈阔论的家伙其实都是纸老虎；但你依然要保持谦卑，闻道有先后，术业有专攻，如是而已。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;pdai&#34; style=&#34;--block-color:#38b5b2;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9wZGFpLnRlY2gv&#34; data-background-image=&#34;https://s3.bmp.ovh/imgs/2022/10/20/f7b81a3958dc4db4.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9wZGFpLnRlY2gv&#34;&gt;Java全栈知识体系&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;生活的本身才是最重要的，保持身心健康，去爱你所爱，不虚此生！&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;后来在 B 站遇到了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w&#34;&gt;青空の霞光&lt;/span&gt;，他也是一个在读大学生（当你看到这篇文章时他可能毕业了），很厉害的，然后 JavaWeb，Netty，JVM，Docker 什么的，都是跟着他写的博客，当然，中间也参考（白嫖）了 pdai 大佬的文章。&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;青空の霞光&#34; style=&#34;--block-color:#f8dada;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w&#34; data-background-image=&#34;https://s3.bmp.ovh/imgs/2022/10/20/842da9b731ec16ed.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w&#34;&gt;青空の霞光&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;白马程序员课程金牌讲师(doge)&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;之后会更新算法笔记，但都是跟着三叶姐走，我会尽量用自己的话再将透彻一点，三叶姐厉害！&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;links&#34;&gt;&lt;div class=&#34;item&#34; title=&#34;宫水三叶&#34; style=&#34;--block-color:#165e8e;&#34;&gt;&lt;span class=&#34;exturl image&#34; data-url=&#34;aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=&#34; data-background-image=&#34;https://s3.bmp.ovh/imgs/2022/10/20/c683089bcb314ca3.jpg&#34;&gt;&lt;/span&gt;
          &lt;div class=&#34;info&#34;&gt;
          &lt;span class=&#34;exturl title&#34; data-url=&#34;aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=&#34;&gt;宫水三叶の刷题日记&lt;/span&gt;
          &lt;p class=&#34;desc&#34;&gt;算法爱好者，退役Oler，现微软工程师&lt;/p&gt;
          &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;其实还有一位&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTk2NTg2MjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w&#34;&gt; Frank&lt;/span&gt; 前辈，我的 c 语言，linux，java 入门都是看他的视频，其实这都不是最重要的，而是他告诉我们（还有其他伙伴）的思想：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础最重要，不要沉迷于框架。&lt;/li&gt;
&lt;li&gt;数据结构和算法很重要，但是光刷题是不能进大厂的。&lt;/li&gt;
&lt;li&gt;好好学习，好好训练。&lt;/li&gt;
&lt;li&gt;哦，还有精髓：……&amp;amp;*￥（￥……@&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然还有些话不方便写出来，总之，我很感谢。&lt;/p&gt;
&lt;p&gt;当然我也参考了很多书：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;shell：参考《Linux 命令行与 shell 脚本编程大全》第三版，作者 Richard Blum 和 Christine Bresnahan&lt;/li&gt;
&lt;li&gt;MySQL：参考《MySQL 是怎样运行的》，作者是小孩子 4919&lt;/li&gt;
&lt;li&gt;网络协议与工具：部分参考《计算机网络自顶向下方法》，作者是 James F.Kurose 和 Keith W.Ross&lt;/li&gt;
&lt;li&gt;操作系统（还没更）：部分参考《操作系统导论》，作者是 Remzi H.Arpaci-Dusseau 和 Andrea C.Arpaci-Dusseau&lt;/li&gt;
&lt;li&gt;并发：部分参考《Java 并发编程的艺术》作者方腾飞，魏鹏，程晓明，以及《操作系统导论》&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;末了&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#末了&#34;&gt;#&lt;/a&gt; 末了&lt;/h1&gt;
&lt;p&gt;当然，每一篇文章到底参考了哪些，我都在最后的参考标题注明了的。&lt;/p&gt;
&lt;p&gt;这篇关于我的碎碎念，其实就只是向单纯向上面的大佬们说声谢谢，超级感谢。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://cecilia.cool/2022/11/01/Tools/Linus&#39;s%20Git/</guid>
            <title>Linus&#39;s Git</title>
            <link>https://cecilia.cool/2022/11/01/Tools/Linus&#39;s%20Git/</link>
            <category>tools</category>
            <pubDate>Tue, 01 Nov 2022 16:30:06 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;Linus 大佬团队俩星期写出来的 Git&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;开源发展史&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开源发展史&#34;&gt;#&lt;/a&gt; 开源发展史&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;提到 Linus，就不得不提到这段历史，这部分了解的时候真的让人激动，可以说，Linux 的发展，极大推动（开创）了开源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;强烈推荐这个视频：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpWNDExZDdMYS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT01YWNmNWE3YjIzZDI4ZTc2MzNlNWE5YjM4MWM1N2M0Mg==&#34;&gt;你不知道的「开源」60 年秘史&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;视频讲得非常清楚，所以我这里就简单的总结一点点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;贝尔实验室的&lt;strong&gt; Ken Thompson&lt;/strong&gt; 和 &lt;strong&gt;Dennis Ritchie&lt;/strong&gt; 开发了 UNICS，后来被神秘地改成了 UNIX。&lt;/li&gt;
&lt;li&gt;Unix 源码分享出去，K 神在休假时还和加州大学伯克利分校的研究小组共同改进 Unix。&lt;/li&gt;
&lt;li&gt;研究小组的 Bill Joy 开发 BSD，成为 Unix 最大分支。毕业后创建 Sun 公司，进而创建 SunOs 系统（Unix 逐步商业化）。&lt;/li&gt;
&lt;li&gt;AT&amp;amp;T 注册 Unix 商标，开启了商业化 Unix 之路，Unix 第 7 版开始，禁止大学使用 Unix 源代码。&lt;/li&gt;
&lt;li&gt;阿姆斯特丹自由大学计算机科学系教授&lt;strong&gt; Andrew Tanenbaum&lt;/strong&gt; 为了在课上更好演示操作系统细节，自己开发了 Minix，即【迷你 Unix】，并作为《操作系统设计与实现》艺术参考案例。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Richard Stallman&lt;/strong&gt; 作为 MIT 人工智能实验室研究员，推崇黑客文化，1984 年辞去 MIT 工作，随后开发类 Unix 系统 ——GNU（全称为：GNU IS NOT UNIX），次年成立自由软件基金会。&lt;/li&gt;
&lt;li&gt;《操作系统设计与实现》这本书为 Linux 之父 ——&lt;strong&gt;Linus Torvalds&lt;/strong&gt; 推向人生巅峰，之后开发出 Linux。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;开源宇宙中子星，商业软件面壁人的 Linus・你的上帝・Torvalds。美国时代周刊评价：“有些人生来就具有统率百万人的领袖风范；另一些人则是为写出颠覆世界的软件而生。唯一一个能同时做到这两者的人，就是 Linus Torvalds”。Linus 自己评价自己：“My name is Linus , and I am your God.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Linux 代码完全开源，早年参与开发的黑客水平较高，直到今天，Linux 社区内核的开发才被程序员们认为是【真正的编程】。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;基本使用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本使用&#34;&gt;#&lt;/a&gt; 基本使用&lt;/h1&gt;
&lt;p&gt;安装这么简单的事就不讲了。一些介绍就是：分布式版本控制系统，远程仓库 巴拉巴拉的。&lt;/p&gt;
&lt;h2 id=&#34;基本模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本模块&#34;&gt;#&lt;/a&gt; 基本模块&lt;/h2&gt;
&lt;p&gt;这部分一定要仔细，git 的命令与不同模块息息相关。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/5a93f2899a2cac45.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;工作目录：存放我们正在写的代码（当我们新版本开发完成之后，就可以进行新版本的提交）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;暂存区：暂时保存待提交的内容（新版本提交后会存放到本地仓库）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地仓库：位于我们电脑上的一个版本控制仓库（存放的就是当前项目各个版本代码的增删信息），可以是随便一个文件夹作为本地仓库， &lt;code&gt;git init&lt;/code&gt;  生成 &lt;code&gt;.git&lt;/code&gt;  目录，仓库目录就是工作目录。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程仓库：位于服务器上的版本控制仓库（服务器上的版本信息可以由本地仓库推送上去，也可以从服务器抓取到本地仓库）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创建仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建仓库&#34;&gt;#&lt;/a&gt; 创建仓库&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;github&lt;/code&gt;  和 &lt;code&gt;gitee&lt;/code&gt;  都可以，看自己能力创建捏，这里建议仓库私有，你拿来练手 &lt;code&gt;git&lt;/code&gt;  的仓库就没必要公开了。最近做课设，团队作业，我在 &lt;code&gt;Gitee&lt;/code&gt;  上还搜到了好几个认识的同学的仓库，还有几个老哥是实名上网，笑😥。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建好后，拿到仓库地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20veHh4L3RlYWNoLWxlYXJuaW5nLmdpdA==&#34;&gt;https://gitee.com/xxx/teach-learning.git&lt;/span&gt; （这个仓库我之后会删了。。），本地随便创建一个文件夹 &lt;code&gt;Teach-learning&lt;/code&gt; 。进入文件夹，右键 &lt;code&gt;git bash here&lt;/code&gt;  初始化仓库 &lt;code&gt;git init&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;你应该还看到了有一个 &lt;code&gt;Git GUI Here&lt;/code&gt; ， &lt;code&gt;GUI&lt;/code&gt;  就是图形化， &lt;code&gt;Bash&lt;/code&gt;  是命令行。&lt;/p&gt;
&lt;p&gt;如果从来没有配置过用户名和邮箱，先配置一下：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; user.name &lt;span class=&#34;token string&#34;&gt;&#34;Your Name&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; config &lt;span class=&#34;token parameter variable&#34;&gt;--global&lt;/span&gt; user.email &lt;span class=&#34;token string&#34;&gt;&#34;email@example.com&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;现在远程仓库和本地仓库都创建好了，但是先不需要管远程仓库，我们这里啥都没配置，本地仓库也不知道远程仓库地址。其实，你如果觉得 &lt;code&gt;git&lt;/code&gt;  提供的 UI 不好看，也可以使用 cmd 终端执行 &lt;code&gt;git&lt;/code&gt;  命令。&lt;/p&gt;
&lt;h1 id=&#34;本地操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#本地操作&#34;&gt;#&lt;/a&gt; 本地操作&lt;/h1&gt;
&lt;p&gt;现在的都做都是在和本地仓库进行交互，与远程仓库没有关系。&lt;/p&gt;
&lt;h2 id=&#34;添加与提交&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#添加与提交&#34;&gt;#&lt;/a&gt; 添加与提交&lt;/h2&gt;
&lt;p&gt;我们先看一下工作目录的文件与本地仓库：&lt;/p&gt;
&lt;p&gt;执行 &lt;code&gt;git status&lt;/code&gt;  查看本地仓库状态，结果是：&lt;strong&gt;No commits yet&lt;/strong&gt;。表示我们还没有向仓库提交任何内容。&lt;/p&gt;
&lt;p&gt;创建一个文本文件 &lt;code&gt;test.txt&lt;/code&gt; ，随便写内容: &lt;code&gt;hello world&lt;/code&gt; ，再查看状态：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;On branch master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;No commits yet&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Untracked files:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;token string&#34;&gt;&#34;git add &amp;lt;file&gt;...&#34;&lt;/span&gt; to include &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; what will be committed&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        test.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;nothing added to commit but untracked files present &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;token string&#34;&gt;&#34;git add&#34;&lt;/span&gt; to track&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;Untracked files 是未追踪文件的意思， &lt;code&gt;git&lt;/code&gt;  不会记录它的变化，始终将其当做一个新创建的文件。加入到暂存区，该文件就会自动变为追踪状态：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; test.txt &lt;span class=&#34;token comment&#34;&gt;#也可以 add . 一次性添加目录下所有的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;再次 &lt;code&gt;git status&lt;/code&gt;  发现文件颜色变成绿色了。其实在 IDEA 里面也是这样，项目中文件未追踪，颜色是红色的（前提是项目已经使用了 Git）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/1e4323523100a5bf.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.txt&lt;/code&gt;  是我新建的，此时是红色的，然后 IDEA 提醒我叫我添加该文件到 Git，&lt;strong&gt;也就是将文件交给 Git 管理&lt;/strong&gt;。选择 add 后就变绿色了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此时文件就在暂存区了&lt;/strong&gt;，使用 &lt;code&gt;commit&lt;/code&gt;  命令就可以提交到本地仓库中了：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; commit &lt;span class=&#34;token parameter variable&#34;&gt;-m&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;提交test.txt文件&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# -m 就是添加提交消息，meassage&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 提交后暂存区就没东西了，之后要提交，就必须先 commit&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# -a 选项可以将没有加入到暂存区的文件放入暂存区再提交&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;现在先不演示在 IDEA 中的样子，先把基本学明白。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看提交记录：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;C:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Users&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Cyan&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Desktop&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Teach-learning&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;git log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;commit ed549112c66212a24d659583ac2fe472eec9b378 &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;HEAD -&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; master&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Author: cyan &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;我的邮箱&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Date:   Tue Nov &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt;:15:28 &lt;span class=&#34;token number&#34;&gt;2022&lt;/span&gt; +0800&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token string&#34;&gt;&#39;提交test.txt文件&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;第一行是提交的 &lt;code&gt;commitID&lt;/code&gt; ，此时再查看状态，就会提示工作目录没有需要提交的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;git log --all --graph --oneline&lt;/code&gt;  挺好用的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尝试修改一下 &lt;code&gt;test.txt&lt;/code&gt; （删除 hello world 吧），由于当前文件已经是被追踪状态，那么 git 会去跟踪它的变化，如果说文件发生了修改，那么我们再次查看状态会得到下面的结果：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;C:&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Users&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Cyan&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Desktop&lt;span class=&#34;token punctuation&#34;&gt;\&lt;/span&gt;Teach-learning&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;git status&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;On branch master&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Changes not staged &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; commit:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;token string&#34;&gt;&#34;git add &amp;lt;file&gt;...&#34;&lt;/span&gt; to update what will be committed&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;token string&#34;&gt;&#34;git restore &amp;lt;file&gt;...&#34;&lt;/span&gt; to discard changes &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; working directory&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        modified:   test.txt	&lt;span class=&#34;token comment&#34;&gt;# 红色的&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;no changes added to commit &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;use &lt;span class=&#34;token string&#34;&gt;&#34;git add&#34;&lt;/span&gt; and/or &lt;span class=&#34;token string&#34;&gt;&#34;git commit -a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;此时修改的文件在工作目录，需要再次提交到暂存区（ &lt;code&gt;git add .&lt;/code&gt; )，然后提交 &lt;code&gt;git commit&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;可以创建一个 &lt;code&gt;.gitignore&lt;/code&gt;  文件来确定一个文件忽略列表，如果忽略列表中的文件存在且不是被追踪状态，那么 git 不会对其进行任何检查：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 这样就会匹配所有以 txt 结尾的文件&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token important&#34;&gt;*.txt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 虽然上面排除了所有 txt 结尾的文件，但是这个不排除&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;!666.txt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 也可以直接指定一个文件夹，文件夹下的所有文件将全部忽略&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;test/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 目录中所有以 txt 结尾的文件，但不包括子目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xxx/&lt;span class=&#34;token important&#34;&gt;*.txt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 目录中所有以 txt 结尾的文件，包括子目录&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;xxx/&lt;span class=&#34;token important&#34;&gt;**/*.txt&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;回滚&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#回滚&#34;&gt;#&lt;/a&gt; 回滚&lt;/h2&gt;
&lt;p&gt;每提交一次，就是一个版本，通过 &lt;code&gt;commitID&lt;/code&gt;  就可以回滚到指定版本。（ID 通过 &lt;code&gt;git log&lt;/code&gt;  查看）&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reset &lt;span class=&#34;token parameter variable&#34;&gt;--hard&lt;/span&gt; commitID&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;执行后，会直接重置为那个时候的状态。再次查看提交日志，我们发现之后的日志全部消失了。&lt;/p&gt;
&lt;p&gt;要是现在我又想回去呢？我们可以通过查看所有&lt;strong&gt;分支&lt;/strong&gt;的所有操作记录：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; reflog&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 就能找到之前的 commitID，再次重置即可&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;分支&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支&#34;&gt;#&lt;/a&gt; 分支&lt;/h2&gt;
&lt;p&gt;为什么要有分支：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于当前项目的基础功能，我们想做成不同方向的需求，开发不同方向的功能，就需要分支。&lt;/li&gt;
&lt;li&gt;像一些开源项目就有很多分支，一方面是各个分支功能实现略有不同，另一方面也方便不同人开发，也就是一部分人开发某个分支，另一部分人开发另一个分支啥的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;像有些项目一条路走到黑的，就没必要使用分支；如果是类似前后端分离，MVVM 之类的，就可以开多个分支。&lt;/p&gt;
&lt;p&gt;我的看法就是有需求就开分支，不要吃饱了撑的。&lt;/p&gt;
&lt;p&gt;查看当前分支： &lt;code&gt;git branch&lt;/code&gt; 。默认分支是 &lt;code&gt;master&lt;/code&gt; ，以前 &lt;code&gt;github&lt;/code&gt;  的默认分支我记得是 &lt;code&gt;main&lt;/code&gt; ，后来就改了。 &lt;code&gt;master&lt;/code&gt;  一般是正式版本更新。&lt;/p&gt;
&lt;p&gt;相关命令：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 基于当前分支创建一个新的分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 删除分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; branch &lt;span class=&#34;token parameter variable&#34;&gt;-d&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 切换分支&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;git&lt;/span&gt; checkout &lt;span class=&#34;token builtin class-name&#34;&gt;test&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;不同分支的文件内容是相互隔离的&lt;/p&gt;
&lt;h2 id=&#34;分支合并&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支合并&#34;&gt;#&lt;/a&gt; 分支合并&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这部分是重点难点，&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;两个分支想要合并，就不能存在冲突。假设有一个文件，在 A 分支修改提交了，在 B 分支也修改提交了，A 和 B 分支合并时，该文件哪个版本是最新的呢？哪个该被覆盖呢？&lt;/p&gt;
&lt;p&gt;我们重新建一个本地仓库演示一下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/797211819dc89825.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;目前是，有 A.txt 和 B.txt 两个文件，A，B 两个分支，两个文件写入内容后提交到 master 分支上。&lt;/p&gt;
&lt;p&gt;我们合并 AB 两个分支来演示分支合并：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;切入到 A 分支，对 A.txt 文件新增一行（就是修改）：A branch add a row， &lt;code&gt;commit&lt;/code&gt;  提交。&lt;/li&gt;
&lt;li&gt;切入到 B 分支，此时查看 A.txt 文件，并没有 A 分支修改的内容（分支之间相互隔离）。&lt;/li&gt;
&lt;li&gt;在 B 分支，对 B.txt 文件新增一行：B branch add a row， &lt;code&gt;commit&lt;/code&gt;  提交。&lt;/li&gt;
&lt;li&gt;再回到 A 分支，使用 &lt;code&gt;git log --all --graph --oneline&lt;/code&gt;  查看一下。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/1783faa4ee95c509.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;分支情况一目了然。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 A 分支查看 A.txt，B.txt 两个分支的内容，并没有 B 分支修改的内容。&lt;/li&gt;
&lt;li&gt;将 B 分支合并到 A 分支： &lt;code&gt;git merge B&lt;/code&gt; ，再看一下 &lt;code&gt;log&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/0db832aa135ba0a2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;检查 B.txt 内容，合并成功。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分支合并的时候，A，B 分支的文件修改上没有冲突 ——A 分支 A.txt 修改了，而 B 分支的 A.txt 没有修改，所以 A.txt 合并可以成功（B.txt 同理），如果 A，B 分支都对 A 文件进行修改，就有可能发生冲突。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;分支冲突&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分支冲突&#34;&gt;#&lt;/a&gt; 分支冲突&lt;/h2&gt;
&lt;p&gt;现在我们再来演示一下分支冲突：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 分支对 A.txt 再新增一行：A branch add a row again，提交。&lt;/li&gt;
&lt;li&gt;切换到 B 分支，同样在&lt;strong&gt; A.txt&lt;/strong&gt; 新增一行：B branch add a row again，提交。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在两个分支在 A.txt 的修改上发生冲突，回到 A 分支，执行 &lt;code&gt;git merge B&lt;/code&gt; ，就会出现冲突提示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/745dfafffb1deb4c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;我们调用 &lt;code&gt;git diff&lt;/code&gt;  查看一下（必须合并失败之后才有用）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/27ad3de5711579e2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解决办法就是，在当前分支下，要么回到没有冲突的版本，要么在 A.txt 文件中选定冲突的部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 分支下，回滚到修改 A.txt 之前的版本。&lt;/li&gt;
&lt;li&gt;或者是，你现在去看一下 A.txt 的内容，里面就会加入 &lt;code&gt;&amp;lt;&amp;lt;HEAD&lt;/code&gt;  之类的东西，你可以手动选择需要那部分，或者两部分都要（其实你可以随便改），然后再 commit 一下，然后在合并，就可以了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/11/01/fc46689075fb2f2d.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h1 id=&#34;远程仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#远程仓库&#34;&gt;#&lt;/a&gt; 远程仓库&lt;/h1&gt;
&lt;p&gt;之前我们的操作都是在本地操作的，最后我们可以将一个分支的结果上传到远程仓库：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先添加本地仓库： &lt;code&gt;git remote add 仓库名 远程仓库地址&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;如果你是空文件夹，是想单纯拉取那些开源项目： &lt;code&gt;git pull 仓库名 远程分支&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;然后自己修改代码后，就可以将本地的文件传过去了： &lt;code&gt;git push 远程仓库名称 本地分支名称[:远端分支名称]&lt;/code&gt; 。 &lt;code&gt;git clone&lt;/code&gt;  也可以&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一次 push 一般需要用户名和密码。每次都需要指定分支映射，我们可以绑定分支： &lt;code&gt;git push --set-upstream 仓库名 本地分支:远程仓库&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果只是一个人玩 &lt;code&gt;git&lt;/code&gt; ，那么以上命令没有任何问题，可是如果是多人开发，我们假设一个场景：&lt;/p&gt;
&lt;p&gt;AB 两人开发项目，他们在写代码时，有自己的本地仓库，然后有一天他俩都克隆了同一远程仓库，A1h 后将自己的代码交到远程仓库，再过 1h 后，B 执行 push 的话就会出错：&lt;strong&gt; &lt;code&gt;error: failed to push some refs to &#39;https://github.com/xx/xxx.git&#39; hint: Updates were rejected because the remote contains work that you do&lt;/code&gt; &lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为如果让他 push 上去，就会覆盖 A 的代码， &lt;code&gt;git push --force&lt;/code&gt;  是强制 push，那么就会真的覆盖 A 的代码。&lt;/p&gt;
&lt;p&gt;一旦一个本地仓库推送了代码，那么另一个本地仓库的推送会被拒绝，原因是当前文件已经被其他的推送给修改了，我们这边相当于是另一个版本，和之前两个分支合并一样，产生了冲突，因此我们只能去解决冲突问题。&lt;/p&gt;
&lt;p&gt;一般就是通过 fetch 拉取下来，但是没有合并，然后自己再合并（其实就是 pull），至于他人写的会不会覆盖你的代码，如果没有修改同一个文件就不会，然后合并就会冲突。&lt;/p&gt;
&lt;p&gt;一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git push&lt;/code&gt;  提示你需要先 &lt;code&gt;git pull&lt;/code&gt; ，但是拉取后把你本地的代码全部覆盖了解决：首先要回滚到未覆盖版本，先 &lt;code&gt;git reflog&lt;/code&gt;  查看之前提交的版本号，再 &lt;code&gt;git reset --hard 版本号&lt;/code&gt; 。如果你是自己开发或者远程仓库的代码可以覆盖，建议直接 &lt;code&gt;git push -f &lt;/code&gt; 强制推送，其他办法我也还没找到，因为这个情况我是使用 VS 遇到的，玄学。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://cecilia.cool/2022/10/29/Tools/Coding%E6%8A%80%E5%B7%A7/</guid>
            <title>Coding技巧</title>
            <link>https://cecilia.cool/2022/10/29/Tools/Coding%E6%8A%80%E5%B7%A7/</link>
            <category>tools</category>
            <pubDate>Sat, 29 Oct 2022 14:16:57 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;算法的技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#算法的技巧&#34;&gt;#&lt;/a&gt; 算法的技巧&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;这里写着一些平时写算法的一些比较使用的点，谈不上思路，套路，模板啥的，就是一些点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;逆推累加和： &lt;code&gt;tar = k*(k+1)/2&lt;/code&gt; ，如何逆推 k，直接 &lt;code&gt;k = Math.sqrt(2*tar)&lt;/code&gt; ，这就是 &lt;code&gt;sqrt(k*(k+1)) = k&lt;/code&gt; ，详细应用参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZWFjaC1hLW51bWJlci8=&#34;&gt;力扣 754&lt;/span&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简洁代码计算前缀和：比如给一个只有 0 和 1 的二维数组，计算连续的 1 的前缀和（从四个方向），参考&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sYXJnZXN0LXBsdXMtc2lnbi8=&#34;&gt; LeetCode764&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 初始化数组，使得下标从 1 开始&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; arr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fill&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// 将 arr 的部分元素赋值为 0&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt; mines&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mines&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;mines&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;// L=left, R=right, U=up, D=down&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;L&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;R&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;U&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;D&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; j &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; n &lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;U&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token comment&#34;&gt;// 从下向上，从右往左&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;R&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;D&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;n&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;j&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用 &lt;code&gt;Math.max()&lt;/code&gt;  兜底：举个🌰，动态规划有时不止用到前面一个状态，可能是前面三个状态同时转移到下一个状态，那么我们在转移的时候就要考虑 &lt;code&gt;i-3&lt;/code&gt; , &lt;code&gt;i-2&lt;/code&gt; , &lt;code&gt;i-1&lt;/code&gt;  的合法性，如果写三个 &lt;code&gt;if&lt;/code&gt;  语句就显得冗余，可以用 &lt;code&gt;f[Math.max(0,i-n)]&lt;/code&gt;  的写法。请注意，这种写法不是适用大多数题的，因为一旦下标不合法，一般就是不需要这个状态，而不是取 &lt;code&gt;f[0]&lt;/code&gt;  这个状态。用到这种技巧的题，可以参考 LeetCode&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zb3VwLXNlcnZpbmdzLw==&#34;&gt;808. 分汤&lt;/span&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 里面的优先队列 &lt;code&gt;PriorityQueue&lt;/code&gt;  是小根堆&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; minQueue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; a &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;// 就是默认的小根堆&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token class-name&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; maxQueue &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;PriorityQueue&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&gt;&lt;/span&gt; b &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;//b-a 才是大根堆&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://cecilia.cool/2022/07/29/Tools/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/</guid>
            <title>Hexo搭建博客指南</title>
            <link>https://cecilia.cool/2022/07/29/Tools/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/</link>
            <category>tools</category>
            <pubDate>Fri, 29 Jul 2022 14:16:57 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;使用 Hexo+Github 搭建博客，因为涉及到部分插件或者安装包的下载，&lt;sub&gt;建议使用魔法上网&lt;/sub&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;推荐文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjYyNTI0OQ==&#34;&gt;https://zhuanlan.zhihu.com/p/26625249&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;推荐视频：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1VNHkxajcybj9zcG1faWRfZnJvbT0zMzMuMzM3LnNlYXJjaC1jYXJkLmFsbC5jbGljayZhbXA7dmRfc291cmNlPTVhY2Y1YTdiMjNkMjhlNzYzM2U1YTliMzgxYzU3YzQy&#34;&gt;https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.337.search-card.all.click&amp;amp;vd_source=5acf5a7b23d28e7633e5a9b381c57c42&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h1&gt;
&lt;h2 id=&#34;下载nodejs&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载nodejs&#34;&gt;#&lt;/a&gt; 下载 Node.js&lt;/h2&gt;
&lt;p&gt;简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vdjgv&#34;&gt;Chrome V8&lt;/span&gt; 引擎的 &lt;strong&gt;JavaScript 运行环境&lt;/strong&gt;。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubnBtanMuY29tLw==&#34;&gt;npm&lt;/span&gt;，是全球最大的开源库生态系统。&lt;/p&gt;
&lt;p&gt;官网下载:&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==&#34;&gt;https://nodejs.org/en/download/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;安装完成后，可以通过命令行查看： &lt;code&gt;node -v&lt;/code&gt;  显示安装版本， &lt;code&gt;npm -v&lt;/code&gt;  显示 npm 版本。新版的 Node.js 已自带 npm，安装 Node.js 时会一起安装，&lt;strong&gt;npm 的作用就是对 Node.js 依赖的包进行管理，也可以理解为用来安装 / 卸载 Node.js 需要的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;环境配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境配置&#34;&gt;#&lt;/a&gt; 环境配置&lt;/h3&gt;
&lt;p&gt;npm 在安装 node.js 需要的依赖时，会默认放在 C 盘 &lt;code&gt;C:|Users|用户名\AppData\Roaming\npm&lt;/code&gt; ，所以此处我们需要手动设置 npm 安装的全局模块所在的路径，以及缓存 cache 得路径。&lt;/p&gt;
&lt;p&gt;在 nodejs 文件夹下创建 node_cache,node_global 即可。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/29/90aec5c64426e20a.png&#34; alt=&#34;image-20220729144241266&#34; /&gt;&lt;/p&gt;
&lt;p&gt;拿到相应的路径，在终端执行以下命令：&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; prefix &lt;span class=&#34;token string&#34;&gt;&#34;S:\DevTools\Nodejs&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;ode_global&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; config &lt;span class=&#34;token builtin class-name&#34;&gt;set&lt;/span&gt; cache &lt;span class=&#34;token string&#34;&gt;&#34;S:\DevTools\Nodejs&lt;span class=&#34;token entity&#34; title=&#34;\n&#34;&gt;\n&lt;/span&gt;ode_cache&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后再配置环境变量，先配置系统变量&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/29/b18f9f922882f863.png&#34; alt=&#34;image-20220729144419380&#34; /&gt;&lt;/p&gt;
&lt;p&gt;然后再配置用户变量中的 path，之前的值为：  &lt;code&gt;C:\Users\Cyan\AppData\Roaming\npm&lt;/code&gt; ，将其改为下面的值&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/29/71d161b1f67a1e9f.png&#34; alt=&#34;image-20220729144448110&#34; /&gt;&lt;/p&gt;
&lt;h2 id=&#34;下载git&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载git&#34;&gt;#&lt;/a&gt; 下载 Git&lt;/h2&gt;
&lt;p&gt;不多说&lt;/p&gt;
&lt;h2 id=&#34;下载hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载hexo&#34;&gt;#&lt;/a&gt; 下载 Hexo&lt;/h2&gt;
&lt;p&gt;在终端执行命令&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;figcaption data-lang=&#34;Bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;npm&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; hexo-cli &lt;span class=&#34;token parameter variable&#34;&gt;--location&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;global&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;如果下载失败，错误信息显示权限不足，那么请使用管理员身份运行 cmd。&lt;/p&gt;
&lt;p&gt;下载完成后，使用 &lt;code&gt;hexo -v&lt;/code&gt;  查看 hexo 版本&lt;/p&gt;
&lt;h2 id=&#34;github相关操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#github相关操作&#34;&gt;#&lt;/a&gt; Github 相关操作&lt;/h2&gt;
&lt;p&gt;下面操作以我的 Github 为例进行讲解。&lt;/p&gt;
&lt;h3 id=&#34;建立仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#建立仓库&#34;&gt;#&lt;/a&gt; 建立仓库&lt;/h3&gt;
&lt;p&gt;我的 Github 的昵称是 &lt;code&gt;Cyan-N&lt;/code&gt; ，所以要建立一个仓库叫做： &lt;code&gt;Cyan-N.github.io&lt;/code&gt; 。&lt;strong&gt;后缀名统一，前面必须是账号的昵称&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/29/87a0634c1fc7f4b2.png&#34; alt=&#34;image-20220729144929165&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;生成ssh密钥&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成ssh密钥&#34;&gt;#&lt;/a&gt; 生成 ssh 密钥&lt;/h3&gt;
&lt;p&gt;随便进入文件夹，然后右键进入  &lt;code&gt;Git Bash Here&lt;/code&gt; ，调用命令： &lt;code&gt;ssh-keygen -t rsa -C &amp;quot;邮箱&amp;quot;&lt;/code&gt; ，&lt;strong&gt;此时不要关闭 Git&lt;/strong&gt;。然后就会在  &lt;code&gt;C:\Users\Cyan\.ssh&lt;/code&gt;  里面生成 &lt;code&gt;id_rsa&lt;/code&gt;  和 &lt;code&gt;id_rsa.pub&lt;/code&gt;  文件，记事本进入 &lt;code&gt;id_rsa.pub&lt;/code&gt; ， &lt;code&gt;ctrl+a，ctrl+c&lt;/code&gt;  复制全部指令。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Github&lt;/code&gt;  中，进入 &lt;code&gt;setting-&amp;gt;SSH and GPG keys&lt;/code&gt;  创建 &lt;code&gt;SSH Key&lt;/code&gt; ， &lt;code&gt;title&lt;/code&gt;  随便取，然后在 &lt;code&gt;key&lt;/code&gt;  中粘贴刚才复制的内容。然后在刚才的 Git 界面输入以下命令： &lt;code&gt;ssh -T git@github.com&lt;/code&gt; 。测试 ssh 是否绑定成功。&lt;/p&gt;
&lt;p&gt;再次强调， &lt;code&gt;Github&lt;/code&gt;  是国外网站，会抽风。&lt;/p&gt;
&lt;h1 id=&#34;使用hexo&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用hexo&#34;&gt;#&lt;/a&gt; 使用 Hexo&lt;/h1&gt;
&lt;h2 id=&#34;生成本地网页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成本地网页&#34;&gt;#&lt;/a&gt; 生成本地网页&lt;/h2&gt;
&lt;p&gt;找一个文件夹，用于存放你的博客文件，此处我命名为 Blog。然后在这个界面中  &lt;code&gt;Git Bash Here&lt;/code&gt; 。其实建议以管理员身份运行 &lt;code&gt;Git&lt;/code&gt; 。然后输入命令： &lt;code&gt;hexo init&lt;/code&gt;  用于初始化。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hexo s&lt;/code&gt;  用于启动服务，此时会弹出一个网址，就可以通过浏览器来查看， &lt;code&gt;ctrl+c&lt;/code&gt;  关闭本地服务器，就不能再访问了。&lt;/p&gt;
&lt;h2 id=&#34;修改配置&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#修改配置&#34;&gt;#&lt;/a&gt; 修改配置&lt;/h2&gt;
&lt;p&gt;在存放博客文件的文件夹，找到_config.yml 文件，在最后面修改为下面代码：&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# Deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;## Docs: https://hexo.io/docs/one-command-deployment&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; git&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; https&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;//github.com/Cyan&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;N/Cyan&lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt;N.github.io.git &lt;span class=&#34;token comment&#34;&gt;#此处就是仓库地址&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;branch&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; main&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;下载工具&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#下载工具&#34;&gt;#&lt;/a&gt; 下载工具&lt;/h2&gt;
&lt;p&gt;在存放博客文件的文件夹，进入 Git，这里还是建议管理员身份。执行命令： &lt;code&gt;npm install hexo-deployer-git --save&lt;/code&gt;  安装 Git 部署插件。&lt;/p&gt;
&lt;p&gt;然后执行： &lt;code&gt;hexo g&lt;/code&gt;  生成网页文件，再执行： &lt;code&gt;hexo d&lt;/code&gt;  提交到 Github 上，这一步可能会连接超时，多试几次。&lt;/p&gt;
&lt;h1 id=&#34;结尾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#结尾&#34;&gt;#&lt;/a&gt; 结尾&lt;/h1&gt;
&lt;p&gt;现在你已经完成了博客的搭建，你可以通过访问你的仓库地址，就是&lt;strong&gt;修改配置&lt;/strong&gt;里面的那个网址来访问你的博客。其实还有一些我没有讲，比如域名替换和 https 使用，更换主题，通过修改主题中的_config.yml 实现个性化博客。&lt;/p&gt;
&lt;p&gt;还神起爪子啊，个人赶门去搜一哈（翻译：还愣着干什么，自己马上去搜一下）&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
