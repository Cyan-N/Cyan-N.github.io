{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"tools\" tag",
    "description": "时雨病重症患者",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2090/01/01/Tools/%E5%8D%97%E6%85%95%E9%9D%92%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "url": "https://cecilia.cool/2090/01/01/Tools/%E5%8D%97%E6%85%95%E9%9D%92%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "title": "必读：南慕青の碎碎念",
            "date_published": "2090-01-01T07:01:00.000Z",
            "content_html": "<blockquote>\n<p>博客置顶功能出毛病了，所以就把文章时间改成 2090，让它保持在首页最上面。</p>\n</blockquote>\n<h1 id=\"起因\"><a class=\"anchor\" href=\"#起因\">#</a> 起因</h1>\n<p>搭建博客是一件很麻烦的事，自己写网站代码，自己买服务器搭上去，自己写文章，有时还会遇到一些 sb 跟你玩 DDoS，md，学了点东西就违法犯罪是吧，详情<strong>参考《刑法》第二百八十六条破坏计算机信息系统罪</strong>。当然很多 DDoS 是公司发动的。</p>\n<p>我很懒，也怕麻烦，所以选择了 Hexo 框架，在 Github 上搭了个小家。</p>\n<p>其实最开始还是看三叶姐的微信公众号的一篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZEVIWW1HaVprS2tyVmR3N285QWF4Zw==\">碎碎念</span>才了解到 Hexo 这个框架，后来就开始找主题，个人体验几个主题：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXlpYi9oZXhvLXRoZW1lLXN0dW4uZ2l0\">stun</span>：简约风，好像不维护了，在 README 里面推荐 NexT 主题。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/20/ee0a3917d638ec09.jpg\" alt=\"\" /></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZsdWlkLWRldi9oZXhvLXRoZW1lLWZsdWlk\">fluid</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=\">三叶姐</span>用的就是这个，我也用过一段时间。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/20/f72a0febc8143ea0.jpg\" alt=\"\" /></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibGlua2ZveC5naXRodWIuaW8v\">闪烁之狐</span>：其实个人感觉颜色太鲜艳了，感兴趣可以试试，链接点进去就可以看效果。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==\">Shoka</span>：超级推荐，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\">开发者</span>的博客，很厉害的主题，功能点特别多，可以选择性关闭，感兴趣就去试试，超级推荐。</li>\n</ul>\n<p>然后换上自己喜欢的域名，打开 Github 支持的 https，关于慕青的博客就搭建好了。</p>\n<h1 id=\"感谢\"><a class=\"anchor\" href=\"#感谢\">#</a> 感谢</h1>\n<p>最开始的内容，路线是跟着 pdai（皮带哥）的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gv\"> Java 全栈知识体系</span>写的，这位前辈给我的很深触动就是他的网站开篇的一句话：</p>\n<p><strong>当你将本文中知识点掌握时，你会发现那些平时高谈阔论的家伙其实都是纸老虎；但你依然要保持谦卑，闻道有先后，术业有专攻，如是而已。</strong></p>\n<p><div class=\"links\"><div class=\"item\" title=\"pdai\" style=\"--block-color:#38b5b2;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gv\" data-background-image=\"https://s3.bmp.ovh/imgs/2022/10/20/f7b81a3958dc4db4.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gv\">Java全栈知识体系</span>\n          <p class=\"desc\">生活的本身才是最重要的，保持身心健康，去爱你所爱，不虚此生！</p>\n          </div></div></div></p>\n<p>后来在 B 站遇到了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\">青空の霞光</span>，他也是一个在读大学生（当你看到这篇文章时他可能毕业了），很厉害的，然后 JavaWeb，Netty，JVM，Docker 什么的，都是跟着他写的博客，当然，中间也参考（白嫖）了 pdai 大佬的文章。</p>\n<p><div class=\"links\"><div class=\"item\" title=\"青空の霞光\" style=\"--block-color:#f8dada;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\" data-background-image=\"https://s3.bmp.ovh/imgs/2022/10/20/842da9b731ec16ed.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\">青空の霞光</span>\n          <p class=\"desc\">白马程序员课程金牌讲师(doge)</p>\n          </div></div></div></p>\n<p>之后会更新算法笔记，但都是跟着三叶姐走，我会尽量用自己的话再将透彻一点，三叶姐厉害！</p>\n<p><div class=\"links\"><div class=\"item\" title=\"宫水三叶\" style=\"--block-color:#165e8e;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=\" data-background-image=\"https://s3.bmp.ovh/imgs/2022/10/20/c683089bcb314ca3.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=\">宫水三叶の刷题日记</span>\n          <p class=\"desc\">算法爱好者，退役Oler，现微软工程师</p>\n          </div></div></div></p>\n<p>其实还有一位<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTk2NTg2MjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\"> Frank</span> 前辈，我的 c 语言，linux，java 入门都是看他的视频，其实这都不是最重要的，而是他告诉我们（还有其他伙伴）的思想：</p>\n<ul>\n<li>基础最重要，不要沉迷于框架。</li>\n<li>数据结构和算法很重要，但是光刷题是不能进大厂的。</li>\n<li>好好学习，好好训练。</li>\n<li>哦，还有精髓：……&amp;*￥（￥……@</li>\n</ul>\n<p>当然还有些话不方便写出来，总之，我很感谢。</p>\n<p>当然我也参考了很多书：</p>\n<ul>\n<li>shell：参考《Linux 命令行与 shell 脚本编程大全》第三版，作者 Richard Blum 和 Christine Bresnahan</li>\n<li>MySQL：参考《MySQL 是怎样运行的》，作者是小孩子 4919</li>\n<li>网络协议与工具：部分参考《计算机网络自顶向下方法》，作者是 James F.Kurose 和 Keith W.Ross</li>\n<li>操作系统（还没更）：部分参考《操作系统导论》，作者是 Remzi H.Arpaci-Dusseau 和 Andrea C.Arpaci-Dusseau</li>\n<li>并发：部分参考《Java 并发编程的艺术》作者方腾飞，魏鹏，程晓明，以及《操作系统导论》</li>\n</ul>\n<h1 id=\"末了\"><a class=\"anchor\" href=\"#末了\">#</a> 末了</h1>\n<p>当然，每一篇文章到底参考了哪些，我都在最后的参考标题注明了的。</p>\n<p>这篇关于我的碎碎念，其实就只是向单纯向上面的大佬们说声谢谢，超级感谢。</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/05/23/Tools/VsCode%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/",
            "url": "https://cecilia.cool/2023/05/23/Tools/VsCode%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/",
            "title": "VsCode使用手册",
            "date_published": "2023-05-23T03:43:46.000Z",
            "content_html": "<h1 id=\"个性化设置\"><a class=\"anchor\" href=\"#个性化设置\">#</a> 个性化设置</h1>\n<h2 id=\"设置背景\"><a class=\"anchor\" href=\"#设置背景\">#</a> 设置背景</h2>\n<p>下载插件 <code>background</code> ，shalldie 那个，安装后重启，点击文件 -&gt; 首选项 -&gt; 设置 -&gt; 扩展 -&gt;background-&gt;Style 的 setting.json 钟编辑，修改为以下代码：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 是否开启背景图显示</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token property\">\"background.enabled\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">//true - 显示默认的图片  false - 显示用户自定义的图片</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token property\">\"background.useDefault\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 自定义显示的图片，(路径要用双引号 \"\" 括起来！)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token property\">\"background.customImages\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token comment\">// 最多设置三张图片，默认显示最上方的图片，当打开多个侧边栏时再依次显示后面的背景图片</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token string\">\"file:///F:/Gallery/阎魔爱2.jpg\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token property\">\"background.useFront\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token property\">\"background.style\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token property\">\"margin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0 auto\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token property\">\"top\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token property\">\"left\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token property\">\"width\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100%\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token property\">\"height\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"100%\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token property\">\"z-index\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"99999\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token property\">\"background.repeat\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-repeat\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token property\">\"background-size\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cover\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token property\">\"opacity\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 透明度</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"项目设置\"><a class=\"anchor\" href=\"#项目设置\">#</a> 项目设置</h1>\n<p>vscode 请用管理员身份运行</p>\n<h2 id=\"vue3项目\"><a class=\"anchor\" href=\"#vue3项目\">#</a> vue3 项目</h2>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20v\">https://vue3.chengpeiquan.com/</span></p>\n<p>选择一个文件夹，管理员权限打开 cmd，然后执行以下命令：</p>\n<p><code>npm install -g create-preset</code> ：尽管有很多种创建 vue 项目模式，但是这种更快，将你需要的大部分依赖包都下了，可能会提示你 <code>-g</code>  已经弃用了，叫你使用 <code>--local=global</code> ，改一下即可。 <code>-g</code>  就是全局安装，之后再希望创建项目，就有直接的模板了。</p>\n<p><code>preset -v</code> ：检查一下是否安装成功，成功的话会有一个版本号</p>\n<p><code>preset init hello-vue3 --template vue3-ts-vite</code> ： <code>init</code>  后的参数就是项目名，最后一个固定参数表示使用的是 vue3、typescript、vite 构建工具</p>\n<p><code>cd hello-vue3</code> 、 <code>npm install</code> 、 <code>npm run dev</code> ：进入项目，安装一些必要的依赖，运行。</p>\n<p>停止运行，用 vscode 打开项目，修改一下 <code>vite.config.ts</code> ：</p>\n<p>如果在 Vite 的配置文件 vite.config.ts ，或者是在 Vue CLI 的配置文件 vue.config.js 里设置了 alias 的话，因为 TypeScript 不认识里面配置的 alias 别名，所以需要再对 tsconfig.json 做一点调整，增加对应的 paths ，否则在 VSCode 里可能会路径报红，提示找不到模块或其相应的类型声明。</p>\n<p>假设在 vite.config.ts 里配置了这些 alias ：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export default defineConfig(<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//resolve () 函数在 path 包中，不要导错了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      '@'<span class=\"token operator\">:</span> resolve('src')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 源码根目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      '@img'<span class=\"token operator\">:</span> resolve('src/assets/img')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 图片</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      '@less'<span class=\"token operator\">:</span> resolve('src/assets/less')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 预处理器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      '@libs'<span class=\"token operator\">:</span> resolve('src/libs')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 本地库</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      '@plugins'<span class=\"token operator\">:</span> resolve('src/plugins')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 本地插件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      '@cp'<span class=\"token operator\">:</span> resolve('src/components')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 公共组件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      '@views'<span class=\"token operator\">:</span> resolve('src/views')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 路由组件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>)</pre></td></tr></table></figure><p>那么在该项目的 tsconfig.json 文件里就需要相应的加上这些 paths ：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"@img/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/assets/img/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"@less/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/assets/less/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"@libs/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/libs/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"@plugins/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/plugins/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"@cp/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/components/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"@views/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/views/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"项目初始化\"><a class=\"anchor\" href=\"#项目初始化\">#</a> 项目初始化</h3>\n<p>项目初始化都是在<strong>入口文件 main.ts</strong> 集中处理，在<strong> vue2</strong> 中，有些插件使用 Vue.use 激活，有些作为 <code>new Vue()</code>  入参激活。</p>\n<p>在<strong> vue3</strong> 中使用 <code>createApp</code>  执行 vue 的初始化，不管是 vue 生态的东西，还是外部插件，ui 框架，统一使用 <code>use()</code>  激活。</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/05/05/Tools/chrome%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "url": "https://cecilia.cool/2023/05/05/Tools/chrome%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "title": "chrome使用技巧",
            "date_published": "2023-05-05T07:05:30.000Z",
            "content_html": "<p>这里收录了一些配置谷歌的技巧或者好用的插件，说不定有趣的网址也会被放到这里。</p>\n<h2 id=\"暗黑模式\"><a class=\"anchor\" href=\"#暗黑模式\">#</a> 暗黑模式</h2>\n<p>这里不推荐使用插件，个人找了两个都不怎么理想，特别是刷题的时候，这种插件让我光标都找不到。</p>\n<p>直接在搜索栏输入：chrome://flags/#enable-force-dark</p>\n<p>然后选择 Auto Dark Mode for Web Contents，改为 Enable 即可，嘎嘎好用。</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/01/Tools/Linus's%20Git/",
            "url": "https://cecilia.cool/2022/11/01/Tools/Linus's%20Git/",
            "title": "Linus's Git",
            "date_published": "2022-11-01T08:30:06.000Z",
            "content_html": "<blockquote>\n<p>Linus 大佬团队俩星期写出来的 Git</p>\n</blockquote>\n<h1 id=\"开源发展史\"><a class=\"anchor\" href=\"#开源发展史\">#</a> 开源发展史</h1>\n<blockquote>\n<p>提到 Linus，就不得不提到这段历史，这部分了解的时候真的让人激动，可以说，Linux 的发展，极大推动（开创）了开源。</p>\n</blockquote>\n<p>强烈推荐这个视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXpWNDExZDdMYS8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT01YWNmNWE3YjIzZDI4ZTc2MzNlNWE5YjM4MWM1N2M0Mg==\">你不知道的「开源」60 年秘史</span>。</p>\n<p>视频讲得非常清楚，所以我这里就简单的总结一点点：</p>\n<ul>\n<li>贝尔实验室的<strong> Ken Thompson</strong> 和 <strong>Dennis Ritchie</strong> 开发了 UNICS，后来被神秘地改成了 UNIX。</li>\n<li>Unix 源码分享出去，K 神在休假时还和加州大学伯克利分校的研究小组共同改进 Unix。</li>\n<li>研究小组的 Bill Joy 开发 BSD，成为 Unix 最大分支。毕业后创建 Sun 公司，进而创建 SunOs 系统（Unix 逐步商业化）。</li>\n<li>AT&amp;T 注册 Unix 商标，开启了商业化 Unix 之路，Unix 第 7 版开始，禁止大学使用 Unix 源代码。</li>\n<li>阿姆斯特丹自由大学计算机科学系教授<strong> Andrew Tanenbaum</strong> 为了在课上更好演示操作系统细节，自己开发了 Minix，即【迷你 Unix】，并作为《操作系统设计与实现》艺术参考案例。</li>\n<li><strong>Richard Stallman</strong> 作为 MIT 人工智能实验室研究员，推崇黑客文化，1984 年辞去 MIT 工作，随后开发类 Unix 系统 ——GNU（全称为：GNU IS NOT UNIX），次年成立自由软件基金会。</li>\n<li>《操作系统设计与实现》这本书为 Linux 之父 ——<strong>Linus Torvalds</strong> 推向人生巅峰，之后开发出 Linux。</li>\n</ul>\n<blockquote>\n<p>开源宇宙中子星，商业软件面壁人的 Linus・你的上帝・Torvalds。美国时代周刊评价：“有些人生来就具有统率百万人的领袖风范；另一些人则是为写出颠覆世界的软件而生。唯一一个能同时做到这两者的人，就是 Linus Torvalds”。Linus 自己评价自己：“My name is Linus , and I am your God.”</p>\n</blockquote>\n<ul>\n<li>Linux 代码完全开源，早年参与开发的黑客水平较高，直到今天，Linux 社区内核的开发才被程序员们认为是【真正的编程】。</li>\n</ul>\n<h1 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p>安装这么简单的事就不讲了。一些介绍就是：分布式版本控制系统，远程仓库 巴拉巴拉的。</p>\n<h2 id=\"基本模块\"><a class=\"anchor\" href=\"#基本模块\">#</a> 基本模块</h2>\n<p>这部分一定要仔细，git 的命令与不同模块息息相关。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/5a93f2899a2cac45.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>工作目录：存放我们正在写的代码（当我们新版本开发完成之后，就可以进行新版本的提交）</p>\n</li>\n<li>\n<p>暂存区：暂时保存待提交的内容（新版本提交后会存放到本地仓库）</p>\n</li>\n<li>\n<p>本地仓库：位于我们电脑上的一个版本控制仓库（存放的就是当前项目各个版本代码的增删信息），可以是随便一个文件夹作为本地仓库， <code>git init</code>  生成 <code>.git</code>  目录，仓库目录就是工作目录。</p>\n</li>\n<li>\n<p>远程仓库：位于服务器上的版本控制仓库（服务器上的版本信息可以由本地仓库推送上去，也可以从服务器抓取到本地仓库）</p>\n</li>\n</ul>\n<h2 id=\"创建仓库\"><a class=\"anchor\" href=\"#创建仓库\">#</a> 创建仓库</h2>\n<blockquote>\n<p><code>github</code>  和 <code>gitee</code>  都可以，看自己能力创建捏，这里建议仓库私有，你拿来练手 <code>git</code>  的仓库就没必要公开了。最近做课设，团队作业，我在 <code>Gitee</code>  上还搜到了好几个认识的同学的仓库，还有几个老哥是实名上网，笑😥。</p>\n</blockquote>\n<p>创建好后，拿到仓库地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20veHh4L3RlYWNoLWxlYXJuaW5nLmdpdA==\">https://gitee.com/xxx/teach-learning.git</span> （这个仓库我之后会删了。。），本地随便创建一个文件夹 <code>Teach-learning</code> 。进入文件夹，右键 <code>git bash here</code>  初始化仓库 <code>git init</code> 。</p>\n<p>你应该还看到了有一个 <code>Git GUI Here</code> ， <code>GUI</code>  就是图形化， <code>Bash</code>  是命令行。</p>\n<p>如果从来没有配置过用户名和邮箱，先配置一下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.name <span class=\"token string\">\"Your Name\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config <span class=\"token parameter variable\">--global</span> user.email <span class=\"token string\">\"email@example.com\"</span></pre></td></tr></table></figure><p>现在远程仓库和本地仓库都创建好了，但是先不需要管远程仓库，我们这里啥都没配置，本地仓库也不知道远程仓库地址。其实，你如果觉得 <code>git</code>  提供的 UI 不好看，也可以使用 cmd 终端执行 <code>git</code>  命令。</p>\n<h1 id=\"本地操作\"><a class=\"anchor\" href=\"#本地操作\">#</a> 本地操作</h1>\n<p>现在的都做都是在和本地仓库进行交互，与远程仓库没有关系。</p>\n<h2 id=\"添加与提交\"><a class=\"anchor\" href=\"#添加与提交\">#</a> 添加与提交</h2>\n<p>我们先看一下工作目录的文件与本地仓库：</p>\n<p>执行 <code>git status</code>  查看本地仓库状态，结果是：<strong>No commits yet</strong>。表示我们还没有向仓库提交任何内容。</p>\n<p>创建一个文本文件 <code>test.txt</code> ，随便写内容: <code>hello world</code> ，再查看状态：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>No commits yet</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Untracked files:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to include <span class=\"token keyword\">in</span> what will be committed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        test.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>nothing added to commit but untracked files present <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> to track<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Untracked files 是未追踪文件的意思， <code>git</code>  不会记录它的变化，始终将其当做一个新创建的文件。加入到暂存区，该文件就会自动变为追踪状态：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> test.txt <span class=\"token comment\">#也可以 add . 一次性添加目录下所有的</span></pre></td></tr></table></figure><p>再次 <code>git status</code>  发现文件颜色变成绿色了。其实在 IDEA 里面也是这样，项目中文件未追踪，颜色是红色的（前提是项目已经使用了 Git）：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/1e4323523100a5bf.jpg\" alt=\"\" /></p>\n<p><code>1.txt</code>  是我新建的，此时是红色的，然后 IDEA 提醒我叫我添加该文件到 Git，<strong>也就是将文件交给 Git 管理</strong>。选择 add 后就变绿色了。</p>\n<p><strong>此时文件就在暂存区了</strong>，使用 <code>commit</code>  命令就可以提交到本地仓库中了：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-m</span> <span class=\"token string\">'提交test.txt文件'</span> <span class=\"token comment\"># -m 就是添加提交消息，meassage</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 提交后暂存区就没东西了，之后要提交，就必须先 commit</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># -a 选项可以将没有加入到暂存区的文件放入暂存区再提交</span></pre></td></tr></table></figure><blockquote>\n<p>现在先不演示在 IDEA 中的样子，先把基本学明白。</p>\n</blockquote>\n<p>查看提交记录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Cyan<span class=\"token punctuation\">\\</span>Desktop<span class=\"token punctuation\">\\</span>Teach-learning<span class=\"token operator\">></span>git log</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>commit ed549112c66212a24d659583ac2fe472eec9b378 <span class=\"token punctuation\">(</span>HEAD -<span class=\"token operator\">></span> master<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Author: cyan <span class=\"token operator\">&lt;</span>我的邮箱<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Date:   Tue Nov <span class=\"token number\">1</span> <span class=\"token number\">17</span>:15:28 <span class=\"token number\">2022</span> +0800</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">'提交test.txt文件'</span></pre></td></tr></table></figure><p>第一行是提交的 <code>commitID</code> ，此时再查看状态，就会提示工作目录没有需要提交的。</p>\n<blockquote>\n<p><code>git log --all --graph --oneline</code>  挺好用的</p>\n</blockquote>\n<p>尝试修改一下 <code>test.txt</code> （删除 hello world 吧），由于当前文件已经是被追踪状态，那么 git 会去跟踪它的变化，如果说文件发生了修改，那么我们再次查看状态会得到下面的结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>Cyan<span class=\"token punctuation\">\\</span>Desktop<span class=\"token punctuation\">\\</span>Teach-learning<span class=\"token operator\">></span>git status</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>On branch master</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Changes not staged <span class=\"token keyword\">for</span> commit:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add &lt;file>...\"</span> to update what will be committed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git restore &lt;file>...\"</span> to discard changes <span class=\"token keyword\">in</span> working directory<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        modified:   test.txt\t<span class=\"token comment\"># 红色的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>no changes added to commit <span class=\"token punctuation\">(</span>use <span class=\"token string\">\"git add\"</span> and/or <span class=\"token string\">\"git commit -a\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>此时修改的文件在工作目录，需要再次提交到暂存区（ <code>git add .</code> )，然后提交 <code>git commit</code> 。</p>\n<p>可以创建一个 <code>.gitignore</code>  文件来确定一个文件忽略列表，如果忽略列表中的文件存在且不是被追踪状态，那么 git 不会对其进行任何检查：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这样就会匹配所有以 txt 结尾的文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token important\">*.txt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 虽然上面排除了所有 txt 结尾的文件，但是这个不排除</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\">!666.txt</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 也可以直接指定一个文件夹，文件夹下的所有文件将全部忽略</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>test/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 目录中所有以 txt 结尾的文件，但不包括子目录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>xxx/<span class=\"token important\">*.txt</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># 目录中所有以 txt 结尾的文件，包括子目录</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>xxx/<span class=\"token important\">**/*.txt</span></pre></td></tr></table></figure><p>修改当前 commit 的注解：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># vim 修改第一行即可</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">--amend</span></pre></td></tr></table></figure><p>修改之前的注解：n 标识最近 n 次 <code>commit</code> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> rebase <span class=\"token parameter variable\">-i</span> HEAD~n</pre></td></tr></table></figure><p>自动进入 <code>vim</code>  之后，选择需要修改的 <code>commit</code> ，将首部的 <code>pick</code>  改为 <code>edit</code> 。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pick 0583cc1 提交注释1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>edit 4ddae1a 提交注释2\t<span class=\"token comment\"># 需要修改</span></pre></td></tr></table></figure><p>然后保存退出，再次执行 <code>git commit --amend</code>  修改即可。</p>\n<p>想要删除某一次 commit，也是进入 <code>rebase</code>  将 <code>pick</code>  改为 <code>drop</code>  即可。</p>\n<blockquote>\n<p>删除非常容易出现冲突，注意解决</p>\n</blockquote>\n<h2 id=\"回滚\"><a class=\"anchor\" href=\"#回滚\">#</a> 回滚</h2>\n<p>每提交一次，就是一个版本，通过 <code>commitID</code>  就可以回滚到指定版本。（ID 通过 <code>git log</code>  查看）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> commitID</pre></td></tr></table></figure><p>执行后，会直接重置为那个时候的状态。再次查看提交日志，我们发现之后的日志全部消失了。</p>\n<p>要是现在我又想回去呢？我们可以通过查看所有<strong>分支</strong>的所有操作记录：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> reflog</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 就能找到之前的 commitID，再次重置即可</span></pre></td></tr></table></figure><h2 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h2>\n<p>为什么要有分支：</p>\n<ul>\n<li>基于当前项目的基础功能，我们想做成不同方向的需求，开发不同方向的功能，就需要分支。</li>\n<li>像一些开源项目就有很多分支，一方面是各个分支功能实现略有不同，另一方面也方便不同人开发，也就是一部分人开发某个分支，另一部分人开发另一个分支啥的。</li>\n</ul>\n<p>像有些项目一条路走到黑的，就没必要使用分支；如果是类似前后端分离，MVVM 之类的，就可以开多个分支。</p>\n<p>我的看法就是有需求就开分支，不要吃饱了撑的。</p>\n<p>查看当前分支： <code>git branch</code> 。默认分支是 <code>master</code> ，以前 <code>github</code>  的默认分支我记得是 <code>main</code> ，后来就改了。 <code>master</code>  一般是正式版本更新。</p>\n<p>相关命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 基于当前分支创建一个新的分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 删除分支</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-d</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 切换分支</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 切出一个新分支</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token parameter variable\">-b</span> newBranch</pre></td></tr></table></figure><p>不同分支的文件内容是相互隔离的</p>\n<h2 id=\"分支合并\"><a class=\"anchor\" href=\"#分支合并\">#</a> 分支合并</h2>\n<blockquote>\n<p>这部分是重点难点，</p>\n</blockquote>\n<p>两个分支想要合并，就不能存在冲突。假设有一个文件，在 A 分支修改提交了，在 B 分支也修改提交了，A 和 B 分支合并时，该文件哪个版本是最新的呢？哪个该被覆盖呢？</p>\n<p>我们重新建一个本地仓库演示一下：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/797211819dc89825.jpg\" alt=\"\" /></p>\n<p>目前是，有 A.txt 和 B.txt 两个文件，A，B 两个分支，两个文件写入内容后提交到 master 分支上。</p>\n<p>我们合并 AB 两个分支来演示分支合并：</p>\n<ul>\n<li>切入到 A 分支，对 A.txt 文件新增一行（就是修改）：A branch add a row， <code>commit</code>  提交。</li>\n<li>切入到 B 分支，此时查看 A.txt 文件，并没有 A 分支修改的内容（分支之间相互隔离）。</li>\n<li>在 B 分支，对 B.txt 文件新增一行：B branch add a row， <code>commit</code>  提交。</li>\n<li>再回到 A 分支，使用 <code>git log --all --graph --oneline</code>  查看一下。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/1783faa4ee95c509.jpg\" alt=\"\" /></p>\n<p>分支情况一目了然。</p>\n<ul>\n<li>在 A 分支查看 A.txt，B.txt 两个分支的内容，并没有 B 分支修改的内容。</li>\n<li>将 B 分支合并到 A 分支： <code>git merge B</code> ，再看一下 <code>log</code> 。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/0db832aa135ba0a2.jpg\" alt=\"\" /></p>\n<p>检查 B.txt 内容，合并成功。</p>\n<blockquote>\n<p>分支合并的时候，A，B 分支的文件修改上没有冲突 ——A 分支 A.txt 修改了，而 B 分支的 A.txt 没有修改，所以 A.txt 合并可以成功（B.txt 同理），如果 A，B 分支都对 A 文件进行修改，就有可能发生冲突。</p>\n</blockquote>\n<h2 id=\"分支冲突\"><a class=\"anchor\" href=\"#分支冲突\">#</a> 分支冲突</h2>\n<p>现在我们再来演示一下分支冲突：</p>\n<ul>\n<li>A 分支对 A.txt 再新增一行：A branch add a row again，提交。</li>\n<li>切换到 B 分支，同样在<strong> A.txt</strong> 新增一行：B branch add a row again，提交。</li>\n</ul>\n<p>现在两个分支在 A.txt 的修改上发生冲突，回到 A 分支，执行 <code>git merge B</code> ，就会出现冲突提示：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/745dfafffb1deb4c.jpg\" alt=\"\" /></p>\n<p>我们调用 <code>git diff</code>  查看一下（必须合并失败之后才有用）：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/27ad3de5711579e2.jpg\" alt=\"\" /></p>\n<p>解决办法就是，在当前分支下，要么回到没有冲突的版本，要么在 A.txt 文件中选定冲突的部分：</p>\n<ul>\n<li>A 分支下，回滚到修改 A.txt 之前的版本。</li>\n<li>或者是，你现在去看一下 A.txt 的内容，里面就会加入 <code>&lt;&lt;HEAD</code>  之类的东西，你可以手动选择需要那部分，或者两部分都要（其实你可以随便改），然后再 commit 一下，然后在合并，就可以了。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/01/fc46689075fb2f2d.jpg\" alt=\"\" /></p>\n<h1 id=\"远程仓库\"><a class=\"anchor\" href=\"#远程仓库\">#</a> 远程仓库</h1>\n<p>之前我们的操作都是在本地操作的，最后我们可以将一个分支的结果上传到远程仓库：</p>\n<ol>\n<li>先添加本地仓库： <code>git remote add 仓库名 远程仓库地址</code> 。</li>\n<li>如果你是空文件夹，是想单纯拉取那些开源项目： <code>git pull 仓库名 远程分支</code> 。</li>\n<li>然后自己修改代码后，就可以将本地的文件传过去了： <code>git push 远程仓库名称 本地分支名称[:远端分支名称]</code> 。 <code>git clone</code>  也可以</li>\n</ol>\n<p>第一次 push 一般需要用户名和密码。每次都需要指定分支映射，我们可以绑定分支： <code>git push --set-upstream 仓库名 本地分支:远程仓库</code> 。</p>\n<p>如果只是一个人玩 <code>git</code> ，那么以上命令没有任何问题，可是如果是多人开发，我们假设一个场景：</p>\n<p>AB 两人开发项目，他们在写代码时，有自己的本地仓库，然后有一天他俩都克隆了同一远程仓库，A1h 后将自己的代码交到远程仓库，再过 1h 后，B 执行 push 的话就会出错：<strong> <code>error: failed to push some refs to 'https://github.com/xx/xxx.git' hint: Updates were rejected because the remote contains work that you do</code> </strong>。</p>\n<p>因为如果让他 push 上去，就会覆盖 A 的代码， <code>git push --force</code>  是强制 push，那么就会真的覆盖 A 的代码。</p>\n<p>一旦一个本地仓库推送了代码，那么另一个本地仓库的推送会被拒绝，原因是当前文件已经被其他的推送给修改了，我们这边相当于是另一个版本，和之前两个分支合并一样，产生了冲突，因此我们只能去解决冲突问题。</p>\n<p>一般就是通过 fetch 拉取下来，但是没有合并，然后自己再合并（其实就是 pull），至于他人写的会不会覆盖你的代码，如果没有修改同一个文件就不会，然后合并就会冲突。</p>\n<p>一些问题：</p>\n<ul>\n<li><code>git push</code>  提示你需要先 <code>git pull</code> ，但是拉取后把你本地的代码全部覆盖了解决：首先要回滚到未覆盖版本，先 <code>git reflog</code>  查看之前提交的版本号，再 <code>git reset --hard 版本号</code> 。如果你是自己开发或者远程仓库的代码可以覆盖，建议直接 <code>git push -f </code> 强制推送，其他办法我也还没找到，因为这个情况我是使用 VS 遇到的，玄学。</li>\n</ul>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/29/Tools/Coding%E6%8A%80%E5%B7%A7/",
            "url": "https://cecilia.cool/2022/10/29/Tools/Coding%E6%8A%80%E5%B7%A7/",
            "title": "Coding技巧",
            "date_published": "2022-10-29T06:16:57.000Z",
            "content_html": "<h1 id=\"算法的技巧\"><a class=\"anchor\" href=\"#算法的技巧\">#</a> 算法的技巧</h1>\n<blockquote>\n<p>这里写着一些平时写算法的一些比较使用的点，谈不上思路，套路，模板啥的，就是一些点。</p>\n</blockquote>\n<ul>\n<li>\n<p>逆推累加和： <code>tar = k*(k+1)/2</code> ，如何逆推 k，直接 <code>k = Math.sqrt(2*tar)</code> ，这就是 <code>sqrt(k*(k+1)) = k</code> ，详细应用参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9yZWFjaC1hLW51bWJlci8=\">力扣 754</span> 。</p>\n</li>\n<li>\n<p>简洁代码计算前缀和：比如给一个只有 0 和 1 的二维数组，计算连续的 1 的前缀和（从四个方向），参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9sYXJnZXN0LXBsdXMtc2lnbi8=\"> LeetCode764</span>。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 初始化数组，使得下标从 1 开始</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 将 arr 的部分元素赋值为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mines<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>mines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// L=left, R=right, U=up, D=down</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">U</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">D</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n <span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">L</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">U</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 从下向上，从右往左</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">R</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">D</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">D</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>i<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token operator\">-</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>用 <code>Math.max()</code>  兜底：举个🌰，动态规划有时不止用到前面一个状态，可能是前面三个状态同时转移到下一个状态，那么我们在转移的时候就要考虑 <code>i-3</code> , <code>i-2</code> , <code>i-1</code>  的合法性，如果写三个 <code>if</code>  语句就显得冗余，可以用 <code>f[Math.max(0,i-n)]</code>  的写法。请注意，这种写法不是适用大多数题的，因为一旦下标不合法，一般就是不需要这个状态，而不是取 <code>f[0]</code>  这个状态。用到这种技巧的题，可以参考 LeetCode<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9zb3VwLXNlcnZpbmdzLw==\">808. 分汤</span> 。</p>\n</li>\n<li>\n<p>Java 里面的优先队列 <code>PriorityQueue</code>  是小根堆</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> minQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 就是默认的小根堆</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> maxQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PriorityQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> b <span class=\"token operator\">-</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//b-a 才是大根堆</span></pre></td></tr></table></figure>",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/29/Tools/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/",
            "url": "https://cecilia.cool/2022/07/29/Tools/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/",
            "title": "Hexo搭建博客指南",
            "date_published": "2022-07-29T06:16:57.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>使用 Hexo+Github 搭建博客，因为涉及到部分插件或者安装包的下载，<sub>建议使用魔法上网</sub>。</p>\n<blockquote>\n<p>推荐文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjYyNTI0OQ==\">https://zhuanlan.zhihu.com/p/26625249</span></p>\n<p>推荐视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1VNHkxajcybj9zcG1faWRfZnJvbT0zMzMuMzM3LnNlYXJjaC1jYXJkLmFsbC5jbGljayZhbXA7dmRfc291cmNlPTVhY2Y1YTdiMjNkMjhlNzYzM2U1YTliMzgxYzU3YzQy\">https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.337.search-card.all.click&amp;vd_source=5acf5a7b23d28e7633e5a9b381c57c42</span></p>\n</blockquote>\n<h1 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<h2 id=\"下载nodejs\"><a class=\"anchor\" href=\"#下载nodejs\">#</a> 下载 Node.js</h2>\n<p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vdjgv\">Chrome V8</span> 引擎的 <strong>JavaScript 运行环境</strong>。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tLw==\">npm</span>，是全球最大的开源库生态系统。</p>\n<p>官网下载:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">https://nodejs.org/en/download/</span></p>\n<p>安装完成后，可以通过命令行查看： <code>node -v</code>  显示安装版本， <code>npm -v</code>  显示 npm 版本。新版的 Node.js 已自带 npm，安装 Node.js 时会一起安装，<strong>npm 的作用就是对 Node.js 依赖的包进行管理，也可以理解为用来安装 / 卸载 Node.js 需要的东西。</strong></p>\n<h3 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h3>\n<p>npm 在安装 node.js 需要的依赖时，会默认放在 C 盘 <code>C:|Users|用户名\\AppData\\Roaming\\npm</code> ，所以此处我们需要手动设置 npm 安装的全局模块所在的路径，以及缓存 cache 得路径。</p>\n<p>在 nodejs 文件夹下创建 node_cache,node_global 即可。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/90aec5c64426e20a.png\" alt=\"image-20220729144241266\" /></p>\n<p>拿到相应的路径，在终端执行以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> prefix <span class=\"token string\">\"S:\\DevTools\\Nodejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_global\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> cache <span class=\"token string\">\"S:\\DevTools\\Nodejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_cache\"</span></pre></td></tr></table></figure><p>然后再配置环境变量，先配置系统变量</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/b18f9f922882f863.png\" alt=\"image-20220729144419380\" /></p>\n<p>然后再配置用户变量中的 path，之前的值为：  <code>C:\\Users\\Cyan\\AppData\\Roaming\\npm</code> ，将其改为下面的值</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/71d161b1f67a1e9f.png\" alt=\"image-20220729144448110\" /></p>\n<h2 id=\"下载git\"><a class=\"anchor\" href=\"#下载git\">#</a> 下载 Git</h2>\n<p>不多说</p>\n<h2 id=\"下载hexo\"><a class=\"anchor\" href=\"#下载hexo\">#</a> 下载 Hexo</h2>\n<p>在终端执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">--location</span><span class=\"token operator\">=</span>global</pre></td></tr></table></figure><p>如果下载失败，错误信息显示权限不足，那么请使用管理员身份运行 cmd。</p>\n<p>下载完成后，使用 <code>hexo -v</code>  查看 hexo 版本</p>\n<h2 id=\"github相关操作\"><a class=\"anchor\" href=\"#github相关操作\">#</a> Github 相关操作</h2>\n<p>下面操作以我的 Github 为例进行讲解。</p>\n<h3 id=\"建立仓库\"><a class=\"anchor\" href=\"#建立仓库\">#</a> 建立仓库</h3>\n<p>我的 Github 的昵称是 <code>Cyan-N</code> ，所以要建立一个仓库叫做： <code>Cyan-N.github.io</code> 。<strong>后缀名统一，前面必须是账号的昵称</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/87a0634c1fc7f4b2.png\" alt=\"image-20220729144929165\" /></p>\n<h3 id=\"生成ssh密钥\"><a class=\"anchor\" href=\"#生成ssh密钥\">#</a> 生成 ssh 密钥</h3>\n<p>随便进入文件夹，然后右键进入  <code>Git Bash Here</code> ，调用命令： <code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> ，<strong>此时不要关闭 Git</strong>。然后就会在  <code>C:\\Users\\Cyan\\.ssh</code>  里面生成 <code>id_rsa</code>  和 <code>id_rsa.pub</code>  文件，记事本进入 <code>id_rsa.pub</code> ， <code>ctrl+a，ctrl+c</code>  复制全部指令。</p>\n<p>在 <code>Github</code>  中，进入 <code>setting-&gt;SSH and GPG keys</code>  创建 <code>SSH Key</code> ， <code>title</code>  随便取，然后在 <code>key</code>  中粘贴刚才复制的内容。然后在刚才的 Git 界面输入以下命令： <code>ssh -T git@github.com</code> 。测试 ssh 是否绑定成功。</p>\n<p>再次强调， <code>Github</code>  是国外网站，会抽风。</p>\n<h1 id=\"使用hexo\"><a class=\"anchor\" href=\"#使用hexo\">#</a> 使用 Hexo</h1>\n<h2 id=\"生成本地网页\"><a class=\"anchor\" href=\"#生成本地网页\">#</a> 生成本地网页</h2>\n<p>找一个文件夹，用于存放你的博客文件，此处我命名为 Blog。然后在这个界面中  <code>Git Bash Here</code> 。其实建议以管理员身份运行 <code>Git</code> 。然后输入命令： <code>hexo init</code>  用于初始化。</p>\n<p><code>hexo s</code>  用于启动服务，此时会弹出一个网址，就可以通过浏览器来查看， <code>ctrl+c</code>  关闭本地服务器，就不能再访问了。</p>\n<h2 id=\"修改配置\"><a class=\"anchor\" href=\"#修改配置\">#</a> 修改配置</h2>\n<p>在存放博客文件的文件夹，找到_config.yml 文件，在最后面修改为下面代码：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/Cyan<span class=\"token punctuation\">-</span>N/Cyan<span class=\"token punctuation\">-</span>N.github.io.git <span class=\"token comment\">#此处就是仓库地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure><h2 id=\"下载工具\"><a class=\"anchor\" href=\"#下载工具\">#</a> 下载工具</h2>\n<p>在存放博客文件的文件夹，进入 Git，这里还是建议管理员身份。执行命令： <code>npm install hexo-deployer-git --save</code>  安装 Git 部署插件。</p>\n<p>然后执行： <code>hexo g</code>  生成网页文件，再执行： <code>hexo d</code>  提交到 Github 上，这一步可能会连接超时，多试几次。</p>\n<h1 id=\"结尾\"><a class=\"anchor\" href=\"#结尾\">#</a> 结尾</h1>\n<p>现在你已经完成了博客的搭建，你可以通过访问你的仓库地址，就是<strong>修改配置</strong>里面的那个网址来访问你的博客。其实还有一些我没有讲，比如域名替换和 https 使用，更换主题，通过修改主题中的_config.yml 实现个性化博客。</p>\n<p>还神起爪子啊，个人赶门去搜一哈（翻译：还愣着干什么，自己马上去搜一下）</p>\n",
            "tags": [
                "tools"
            ]
        }
    ]
}