<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cecilia.cool</id>
    <title>慕青の迷途 • Posts by &#34;projects&#34; tag</title>
    <link href="https://cecilia.cool" />
    <updated>2023-06-12T02:32:33.000Z</updated>
    <category term="Docker" />
    <category term="Projects" />
    <category term="tools" />
    <category term="二次元" />
    <category term="shell" />
    <category term="云计算" />
    <category term="八股文" />
    <category term="网络协议与工具" />
    <category term="前端" />
    <category term="数据结构与算法" />
    <category term="MySQL" />
    <category term="Redis" />
    <category term="Mybatis" />
    <category term="Spring全家桶" />
    <category term="uni-app" />
    <category term="Concurrency" />
    <category term="Java8" />
    <category term="JVM" />
    <category term="设计模式" />
    <category term="网络编程" />
    <category term="Java基础" />
    <category term="Web" />
    <category term="消息队列" />
    <category term="408" />
    <entry>
        <id>https://cecilia.cool/2023/06/12/Project/cyan-log/</id>
        <title>cyan-log</title>
        <link rel="alternate" href="https://cecilia.cool/2023/06/12/Project/cyan-log/"/>
        <content type="html">&lt;h1 id=&#34;项目说明&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#项目说明&#34;&gt;#&lt;/a&gt; 项目说明&lt;/h1&gt;
&lt;p&gt;本项目以 &lt;code&gt;slf4j&lt;/code&gt;  作为日志门面，对其进行提供日志实现，以 SPI 机制为基础，提供各种日志服务。本项目主要作为学习使用，了解现代主流的日志框架提供的功能以及如何开发一个简化的日志框架。因为鄙人对并发很感兴趣，所以 &lt;code&gt;cyan-log&lt;/code&gt;  项目也主要是在并发方面花功夫，考虑将性能优化到极致，&lt;strong&gt;汇聚一点 登峰造极&lt;/strong&gt;。&lt;/p&gt;
&lt;h1 id=&#34;开源仓库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#开源仓库&#34;&gt;#&lt;/a&gt; 开源仓库&lt;/h1&gt;
&lt;p&gt;暂时还没 push&lt;/p&gt;
&lt;h1 id=&#34;cyan-log&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#cyan-log&#34;&gt;#&lt;/a&gt; cyan-log&lt;/h1&gt;
&lt;h1 id=&#34;log4j2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#log4j2&#34;&gt;#&lt;/a&gt; log4j2&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;版本：2.19.0&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;logger&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#logger&#34;&gt;#&lt;/a&gt; Logger&lt;/h2&gt;
&lt;h3 id=&#34;asynclogger&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asynclogger&#34;&gt;#&lt;/a&gt; AsyncLogger&lt;/h3&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9icnlhbnRjaGFuZy5naXRodWIuaW8vMjAxOS8wMS8xNS9sb2c0ajItYXN5bmNMb2dnZXIv&#34;&gt;https://bryantchang.github.io/2019/01/15/log4j2-asyncLogger/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;同步 &lt;code&gt;Logger&lt;/code&gt;  会直到日志都写入磁盘后才会返回，整个过程如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2023/06/20/78488842a693aa71.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;而异步 &lt;code&gt;Logger&lt;/code&gt;  引入了 &lt;code&gt;disruptor&lt;/code&gt; ，分开了 &lt;code&gt;Message-&amp;gt;config.log&lt;/code&gt;  的部分，使得用户线程只需要等待封装好 Message 即可返回，不需要等待 append 过程：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2023/06/20/278784199da59abb.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么有了 &lt;code&gt;AsyncAppender&lt;/code&gt; ，还要 &lt;code&gt;AsyncLogger&lt;/code&gt; ，这两个结合会如何，性能如何？请看该篇文章：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjQxNzc2MDEvZGlmZmVyZW5jZS1iZXR3ZWVuLWFzeW5jbG9nZ2VyLWFuZC1hc3luY2FwcGVuZGVyLWluLWxvZzRqMg==&#34;&gt;https://stackoverflow.com/questions/24177601/difference-between-asynclogger-and-asyncappender-in-log4j2&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;appender&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#appender&#34;&gt;#&lt;/a&gt; Appender&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Appender&lt;/code&gt;  是一个路由 LogEvent 的管道，他决定了日志要去哪以及怎么去。主要分为两种 &lt;code&gt;Appender&lt;/code&gt; ：同步 &lt;code&gt;Appender&lt;/code&gt;  和异步 &lt;code&gt;Appender&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;asyncappender&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#asyncappender&#34;&gt;#&lt;/a&gt; AsyncAppender&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;建议看一下源码，该类本身代码量不多，给一个参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDA0Mjg1MzQzMA==&#34;&gt;https://segmentfault.com/a/1190000042853430&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;日志记录需要进行磁盘 IO 操作，&lt;strong&gt;非常耗时&lt;/strong&gt;，同时为了保证日志记录的并发安全，在写入日志时还经常要加锁，这些导致性能严重下降。&lt;/p&gt;
&lt;p&gt;先给出一个配置 demo 来演示异步 &lt;code&gt;Appender&lt;/code&gt; ：&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;figcaption data-lang=&#34;XML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token prolog&#34;&gt;&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Configuration&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;INFO&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Appenders&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 配置两个正常的 Appender --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Console&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;MyConsole&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;SYSTEM_OUT&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ThresholdFilter&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;INFO&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onMatch&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;ACCEPT&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onMismatch&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;DENY&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;PatternLayout&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;%msg%n&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;Console&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;RollingFile&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;MyFile&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;fileName&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;mylog.log&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                     &lt;span class=&#34;token attr-name&#34;&gt;filePattern&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;mylog.log.%i&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ThresholdFilter&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;INFO&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onMatch&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;ACCEPT&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onMismatch&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;DENY&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;PatternLayout&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;%msg%n&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;SizeBasedTriggeringPolicy&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;20M&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;RollingFile&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 让异步 Appender 引用正常 Appender --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Async&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;MyAsync&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;AppenderRef&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;MyConsole&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;AppenderRef&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;MyFile&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;Async&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;Appenders&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Loggers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token comment&#34;&gt;&amp;lt;!-- 让根日志打印器引用异步 Appender --&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Root&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;level&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;INFO&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;Appender-ref&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation attr-equals&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;MyAsync&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;Root&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;29&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;Loggers&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;30&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;Configuration&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;AsyncAppender&lt;/code&gt;  类作为生产者，构建 &lt;code&gt;LogEvent&lt;/code&gt;  放到阻塞队列中，同时内部有个属性为 &lt;code&gt;AsyncAppenderEventDispatcher dispatcher&lt;/code&gt; ，该类继承了 &lt;code&gt;Log4jThread&lt;/code&gt; ，其实就是&lt;strong&gt;消费者&lt;/strong&gt;，该消费者最重要就是 &lt;code&gt;dispatch()&lt;/code&gt;  方法，该方法就是将日志事件通过循环交给各个 &lt;code&gt;AppenderRef&lt;/code&gt; 。另外两个方法就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dispatchAll()&lt;/code&gt; ：循环消费阻塞队列中的日志并打印&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dispatchRemaining()&lt;/code&gt; ：线程如果被停止，则调用 dispatchRemaining () 保证阻塞队列中的日志全部被打印&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;AsyncAppender&lt;/code&gt;  的 &lt;code&gt;start()&lt;/code&gt;  方法初始化 &lt;code&gt;AsyncAppenderEventDispatcher&lt;/code&gt; ，并在最后就会调用 &lt;code&gt;dispatcher.start()&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dispatchAll()&lt;/code&gt;  方法会把 &lt;code&gt;logEvent&lt;/code&gt;  交给 &lt;code&gt;AsyncAppender&lt;/code&gt;  关联的 &lt;code&gt;Appender&lt;/code&gt; 。上述例子中也就是将 &lt;code&gt;LogEvent&lt;/code&gt;  发送到 &lt;code&gt;MyConsole&lt;/code&gt;  和 &lt;code&gt;MyFile&lt;/code&gt; ，然后进行日志打印（都在同一个线程，而不会分别让 &lt;code&gt;MyConsole&lt;/code&gt;  和 &lt;code&gt;MyFIle&lt;/code&gt;  各自一个线程）。&lt;/p&gt;
&lt;p&gt;下面就是整个异步打印的流程（&lt;strong&gt;图片来自上文引言中的链接&lt;/strong&gt;）：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2023/06/12/39af5621bd267702.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;现在流程中的参与成员都知道了，并且我们也知道生产者何时将 &lt;code&gt;logEvent&lt;/code&gt;  加入到队列中（当 Logger 产生日志时）消费者如何进行消费，下面列出几个重要的点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Appender&lt;/code&gt;  使用 &lt;code&gt;WriterManager&lt;/code&gt;  进行日志写入，后者内部使用的是 &lt;code&gt;Writer&lt;/code&gt; ，为了保证并发安全， &lt;code&gt;WriterManager&lt;/code&gt;  在写入方法上使用了 &lt;code&gt;synchronized&lt;/code&gt;  关键字。（并发问题：多个 Logger 都使用了同一个 Appender，为了防止写入混乱，这是必要的上锁）。&lt;/li&gt;
&lt;li&gt;消费线程 &lt;code&gt;AsyncAppenderEventDispatcher&lt;/code&gt;  何时启动又如何工作的？以 xml 配置为例， &lt;code&gt;Log4j2&lt;/code&gt;  框架在首次获取 &lt;code&gt;Logger&lt;/code&gt;  时，会初始化 &lt;code&gt;LoggerContext&lt;/code&gt; ，而初始化 &lt;code&gt;LoggerContext&lt;/code&gt;  时有一个步骤就是将 &lt;code&gt;Log4j2&lt;/code&gt;  配置对象 &lt;code&gt;XmlConfiguration&lt;/code&gt;  设置给 &lt;code&gt;LoggerContext&lt;/code&gt;  并启动 &lt;code&gt;XmlConfiguration&lt;/code&gt; ，这里看一下 &lt;code&gt;XmlConfiguration&lt;/code&gt;  的 &lt;code&gt;start()&lt;/code&gt;  方法&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// ...&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token comment&#34;&gt;// 遍历配置文件中配置的 Appender 并启动&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Appender&lt;/span&gt; appender &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; appenders&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        appender&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;alreadyStarted&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;contains&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;root&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        root&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token constant&#34;&gt;LOGGER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;debug&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Started configuration &amp;#123;&amp;#125; OK.&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;code&gt;start()&lt;/code&gt;  方法的最上层定义是 &lt;code&gt;LifeCycle&lt;/code&gt;  接口，如此定义是因为不止 &lt;code&gt;Appender&lt;/code&gt;  存在异步组件， &lt;code&gt;Logger&lt;/code&gt; 、 &lt;code&gt;Filter&lt;/code&gt;  等组件也存在异步，所以大家的异步组件本质上都实现了该接口。然后在 &lt;code&gt;config&lt;/code&gt;  中启动。&lt;/p&gt;
&lt;p&gt;此时并发性能已经比较优秀了，但是我们可以看到有两个并发性能的瓶颈：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;logEvent&lt;/code&gt;  的传递还是会在阻塞队列处停住，起码我们明显可以看出，一个并发安全的队列的并发性能是限制会限制日志写入&lt;/li&gt;
&lt;li&gt;一个队列分配一个线程来消费，本质上没有问题，但是后台线程在消费日志事件时还是会遇到锁竞争，因为后台线程 &lt;code&gt;dispatch&lt;/code&gt;  会挨个将事件传给 &lt;code&gt;Appender&lt;/code&gt; ，再抢锁（synchronized）进行日志打印。造成这种原因的其实是一个队列中的事件种类不一样，所以也就需要分发器（ &lt;code&gt;dispatch&lt;/code&gt; ），而这个分发器又不是那么优秀（因为它不止需要分发，还需要打印）。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;dispatch 承担的功能：取出、分发、打印，取出和打印都会阻塞（取出是否阻塞要看选用哪种队列），如果打印阻塞时间太长，反而会导致队列中事件堆积。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题一&lt;/strong&gt;：log4j2 的异步日志是通过队列来处理的，关于队列，Log4j2 支持生成以下四种队列：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayBlockingQueue&lt;/code&gt; ：默认的队列，通过 java 原生的  &lt;code&gt;ArrayBlockingQueue&lt;/code&gt;  实现。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DisruptorBlockingQueue&lt;/code&gt; ： &lt;code&gt;disruptor&lt;/code&gt;  包实现的高性能队列，&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL0xNQVgtRXhjaGFuZ2UvZGlzcnVwdG9y&#34;&gt;开源地址&lt;/span&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;JCToolsBlockingQueue&lt;/code&gt; ： &lt;code&gt;JCTools&lt;/code&gt;  实现的无锁队列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LinkedTransferQueue&lt;/code&gt; ：通过 java7 以上原生支持的  &lt;code&gt;LinkedTransferQueue&lt;/code&gt;  实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;DisruptorBlockingQueue&lt;/code&gt;  队列，它的特点为：&lt;strong&gt;无锁&lt;/strong&gt;、&lt;strong&gt;环形空间&lt;/strong&gt;。无锁就是 &lt;code&gt;CAS&lt;/code&gt; 、环形队列使得空间循环利用，但是可能会覆盖，所以此时需要执行对应&lt;strong&gt;策略&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;关于该队列的细节介绍，之后会在数据结构与算法的 &lt;code&gt;tag&lt;/code&gt;  中开一篇，现在我们只需要知道，这个队列确实能够高效的、并发安全的传输 LogEvent，也不会导致 &lt;code&gt;dispatch&lt;/code&gt;  取出日志变得很慢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题二&lt;/strong&gt;：这正是 cyan-log 需要解决的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如何减少写入同一文件时锁的竞争：那就是只让一个线程写入文件，从开始到结束，都是它来写入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如何只让一个线程来写入文件：多个 Logger 对于同一个文件的 &lt;code&gt;LogEvent&lt;/code&gt; ，都放入通过一个队列中，然后写入线程只需要从队列中获取即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果某个文件的日志已经很久都没产生了，那么其写入线程就会一直阻塞，有点浪费，如何优化：不如使用线程池，阻塞队列提供了超时获取的方法，如果超时了就不再获取，那么线程可以复用，或者连续超时了很多次，这取决于你希望的策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我们应该如何初始化这样一个线程：这里有个子问题，也就是我如何判断线程已经初始化了？&lt;/p&gt;
&lt;p&gt;正常思维是&lt;strong&gt;为每个文件（也就是日志去向）关联一个变量 A&lt;/strong&gt;，当线程没有初始化（或者已经销毁复用）时，A 为 0，反之 A 为 1。A 涉及到原子修改，需要加锁或者 CAS，但是这并不会限制系统并发，因为这只是初始化阶段，初始化完毕就不会再执行（当然，复用还是会涉及到 A 的原子修改，还是那句话，这取决于你的策略，也就是是否要线程复用）。很遗憾，还是有点漏洞：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2023/06/12/b547dd40d12ae7e2.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;可以看出这种使用一个变量 A 来保证并发安全，是有问题的，它会使得：队列中还有消息没有消费，但是线程池中已经没有线程来消费了。当然，如果后续又来了一个日志进入队列中，那么它又会初始化一个线程，队列中的日志自然可以消费。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是这是可以允许的吗？肯定不行，写一个程序，尤其是写一个健壮的程序，这才是关键。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对于这种情况，我们可以后台单独开一个线程来检测是否有队列处于这样的情况，但是这无疑使得问题变得复杂，我们甚至无法知道线程该何时运行，运行多久。&lt;/p&gt;
&lt;p&gt;想一想，现在的情况是多个生产者，一个消费者，当消费者走到&lt;strong&gt;步骤 1&lt;/strong&gt; 时，可能会有很多个生产者走到&lt;strong&gt;步骤 3&lt;/strong&gt;，这是允许的，但不允许的是所有生产者都走到了&lt;strong&gt;步骤 3&lt;/strong&gt;，不知道你们是否想到了解决办法，我的思路是使用读写锁来避免这种情况的出现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;很遗憾，我们又无可避免的使用了锁，但是要保证并发安全，我们又无法不这么做，为了提升并发，我们采用的是读写锁，思考一下，这很合适，某种诡异的契合，不是吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现‘在引入了读写锁，我们重新来看一下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2023/06/12/17fc6db496b7f586.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;解释几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生产者使用 &lt;code&gt;tryAcquire&lt;/code&gt;  是因为如果没有获取到锁，就说明已经有线程在初始化线程池的线程了&lt;/li&gt;
&lt;li&gt;消费者使用 &lt;code&gt;tryAcquire&lt;/code&gt;  是因为没拿到锁，说明存在读锁，也就说明有日志加入到队列中了，那么自己也就不需要销毁，重新消费即可。&lt;/li&gt;
&lt;li&gt;将日志加入队列的时机，是初始化前还是初始化后，其实没有太多影响，起码对于这个问题而言。注意，如果涉及到队列的抛弃策略，也就是队列可能会满，那么加入队列就应该在初始化前（因为没必要抢锁）。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;这里要考虑的问题就是线程初始化和线程复用这段时间是否会冲突，假设线程获取事件触发了超时（或许很多次），然后准备复用了，此时另外的线程恰好有对应的日志打过来&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="Projects" />
        <updated>2023-06-12T02:32:33.000Z</updated>
    </entry>
</feed>
