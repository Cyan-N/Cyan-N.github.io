{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"concurrency\" tag",
    "description": "时雨病重症患者",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E9%9B%86%E5%90%88A(ConcurrentHashMap)/",
            "url": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E9%9B%86%E5%90%88A(ConcurrentHashMap)/",
            "title": "JUC-集合A(ConcurrentHashMap)",
            "date_published": "2023-01-19T15:05:19.000Z",
            "content_html": "",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BBB(atomic%E5%8C%85)/",
            "url": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BBB(atomic%E5%8C%85)/",
            "title": "JUC-原子类B(atomic包)",
            "date_published": "2023-01-19T09:09:39.000Z",
            "content_html": "<p><code>java.util.concurrent.atomic</code>  包，提供了很多原子操作类，这些类基本上都是使用 Unsafe 实现的<strong>包装类</strong>。</p>\n<p>注意是包装类，类属性有： <code>value</code> ， <code>value</code>  的地址偏移量等。</p>\n<h1 id=\"原子更新基本类型\"><a class=\"anchor\" href=\"#原子更新基本类型\">#</a> 原子更新基本类型</h1>\n<p><code>atomic</code>  包提供 <code>boolean</code> ， <code>int</code> ， <code>long</code>  的原子更新操作。以 <code>AtomicInteger</code>  为例讲解，常用方法为：</p>\n<ul>\n<li><code>addAndGet(int delta)</code> ：原子相加</li>\n<li><code>compareAndSet(int except, int update)</code> ： <code>cas</code>  操作</li>\n<li><code>getAndIncrement()</code> ：原子自增</li>\n<li><code>lazySet(int newValue)</code> ：最终会设置为新值，但是其他线程可能在之后一小段时间还是会看到旧值</li>\n</ul>\n<p>需要注意的是，<strong> <code>value</code>  必须被 <code>volatile</code>  修饰，保证变量被修改时对所有线程可见</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 <code>Unsafe</code>  类中，只提供了 <code>Object</code> ， <code>int</code> ， <code>long</code>  的 <code>cas</code>  操作，所以想要实现 <code>boolean</code> ， <code>float</code>  等其他类型的原子包装类，就要想着将其转为 <code>int</code>  再来实现。比如布尔可以映射为 0 和 1。</p>\n<h1 id=\"原子更新数组\"><a class=\"anchor\" href=\"#原子更新数组\">#</a> 原子更新数组</h1>\n<p>原子更新数组里的某个元素， <code>atomic</code>  提供了三个类：</p>\n<ul>\n<li><code>AtomicIntegerArray</code> ：原子更新整型数组里的某个元素</li>\n<li><code>AtomicLongArray</code> ：原子更新长整型数组里的某个元素</li>\n<li><code>AtomicReferenceArray</code> ：原子更新引用类型数组里的元素</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicIntegerArray</span> ai <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicIntegerAtomic</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>数组通过构造方法传进去时会复制一份，所以包装类对元素的修改不会影响本来的数组。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">AtomicIntegerArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// Visibility guaranteed by final field guarantees</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>array <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"原子更新引用类型\"><a class=\"anchor\" href=\"#原子更新引用类型\">#</a> 原子更新引用类型</h1>\n<p>有时需要原子更新的是一个类里面多个属性，此时就需要使用原子更新引用：</p>\n<ul>\n<li><code>AtomicReference</code> ：原子更新引用</li>\n<li><code>AtomicReferenceFieldUpdater</code> ：原子更新引用类型里面的字段</li>\n<li><code>AtomicMarkableReference</code> ：原子更新带有标记位的引用类型。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>atomic<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>oldUser<span class=\"token punctuation\">,</span>newUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其实使用的就是 <code>Unsafe</code>  类的原子更新 <code>object</code>  的方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> expect<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> update<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> valueOffset<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> update<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"原子更新字段类\"><a class=\"anchor\" href=\"#原子更新字段类\">#</a> 原子更新字段类</h1>\n<p>原子更新字段类都是抽象类，需要使用静态方法 <code>newUpdater()</code>  创建一个更新其，并设置想要更新的类和属性。同时，<strong>这个属性必须被 <code>volatile</code>  修饰</strong>。</p>\n<p><code>atomic</code>  包提供了三个类：</p>\n<ul>\n<li><code>AtomicIntegerFieldUpdater</code> ：原子更新整型字段的更新器</li>\n<li><code>AtomicLongFieldUpdater</code> ：原子更新长整型字段的更新器</li>\n<li><code>AtomicStampedFieldUpdater</code> ：原子更新带有版本号的引用类型。该类将整数值和引用关联起来，原子更新数据以及数据的版本号，解决 <code>ABA</code>  问题。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicIntegerFieldUpdater</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> updater <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">AtomicIntegerFieldUpdater</span><span class=\"token punctuation\">.</span><span class=\"token function\">newUpdater</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cyan\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        a<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span>conan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>conan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>《Java 并发编程的艺术》第 7 章</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BBA(CAS%E4%B8%8EUnsafe)/",
            "url": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E5%8E%9F%E5%AD%90%E7%B1%BBA(CAS%E4%B8%8EUnsafe)/",
            "title": "JUC-原子类A(CAS与Unsafe)",
            "date_published": "2023-01-19T05:22:07.000Z",
            "content_html": "<h1 id=\"cas\"><a class=\"anchor\" href=\"#cas\">#</a> CAS</h1>\n<p>我们希望在并发的过程中，先进行操作，如果没有其他线程争用共享数据，那么操作就成功了，否则就采取补偿措施。这种<strong>基于冲突检测的乐观的操作</strong>许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p>\n<p><strong>乐观锁</strong>需要操作和冲突检测这两个步骤具备原子性，这里的原子性不能够使用互斥同步来保证，只能靠<strong>硬件</strong>来完成。硬件支持的原子性操作最典型的是: <strong>比较并交换</strong> ( <code>Compare-and-Swap，CAS</code> )。 <code>CAS</code>  指令需要有 3 个操作数，分别是内存地址  <code>V</code> 、旧的预期值  <code>A</code>  和新值  <code>B</code> 。当执行操作时，只有当  <code>V</code>  的值等于  <code>A</code> ，才将  <code>V</code>  的值更新为  <code>B</code> 。</p>\n<p>因为 <code>CAS</code>  操作时原子性的，所以多线程并发使用 <code>CAS</code>  更新数据时不用锁。类似 <code>sql</code>  中的条件更新一样： <code>update set id=3 from table where id=2</code> 。因为单条 <code>sql</code>  执行具有原子性，如果有多个线程同时执行此 <code>sql</code>  语句，只有一条能更新成功（就是最后一个执行的那个）。</p>\n<p><code>CAS</code>  方式为乐观锁， <code>synchronized</code>  为悲观锁。因此使用  <code>CAS</code>  解决并发问题通常情况下性能更优。</p>\n<p>问题：</p>\n<ul>\n<li><code>ABA</code>  问题，如果一个变量初次读取的时候是  <code>A</code>  值，它的值被改成了  <code>B</code> ，后来又被改回为  <code>A</code> ，那  <code>CAS</code>  操作就会误认为它从来没有被改变过。 <code>J.U.C</code>  包提供了一个带有标记的原子引用类  <code>AtomicStampedReference</code>  来解决这个问题，它可以通过控制变量值的<strong>版本</strong>来保证  <code>CAS</code>  的正确性。在变量前加上版本号，每次变量更新的时候把版本加 1，那么 <code>A-&gt;B-&gt;A</code>  就会变成 <code>1A-&gt;2B-&gt;3A</code> ，从前是比较期望的旧值和当前值，现在多比较一个版本号（ <code>compareAndSet</code>  方法），更新时两个一起更新。<strong>大部分情况下 ABA 问题不会影响程序并发的正确性</strong>，如果需要解决 ABA 问题，<strong>改用传统的互斥同步可能会比原子类更高效</strong>。</li>\n<li>自旋 <code>CAS</code>  如果长时间不成功，会给 <code>CPU</code>  带来非常大的执行开销。</li>\n<li>只能保证一个共享变量的原子操作，多了就可以用锁。</li>\n</ul>\n<h1 id=\"unsafe类详解\"><a class=\"anchor\" href=\"#unsafe类详解\">#</a> Unsafe 类详解</h1>\n<p>Unsafe 是位于 <code>sun.misc</code>  包下的一个类，主要提供一些用于执行<strong>低级别</strong>、<strong>不安全</strong>操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升 Java 运行效率、增强 Java 语言底层资源操作能力方面起到了很大的作用。但由于 Unsafe 类使 Java 语言拥有了类似 C 语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用 Unsafe 类会使得程序出错的概率变大，使得 Java 这种安全的语言变得不再 “安全”，因此对 Unsafe 的使用一定要慎重。</p>\n<p>该类的构造方法是私有的，只有通过反射才能拿到其实例化对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//Unsafe 构造方法私有，不能被实例化，通过反射获得对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"theUnsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Unsafe 类提供的 API 大致可分为：内存操作，CAS，Class 相关，对象操作，线程调度，系统信息获取，内存屏障，数组操作。</p>\n<p>通过查看源码，其实 Unsafe 只提供三种 CAS 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//paramObject1:int 字段所在的对象，paramLong：该字段在该对象中的偏移量，paramObject2：期望的旧值，paramObject3：要更新的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObject1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> paramObject2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> paramObject3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> paramInt1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> paramInt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这几个都是 <code>native</code>  方法，由 C++ 代码实现，都位于 <code>unsafe.cpp</code>  文件中</p>\n<pre><code class=\"language-c++\">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))\n  //之前的代码展示我们看到，CAS函数是放在while循环中的，也就是说，返回值是一个布尔值。\n  UnsafeWrapper(&quot;Unsafe_CompareAndSwapInt&quot;);\n  oop p = JNIHandles::resolve(obj);\n\n  //该函数要更新的是一个jint,所以要先根据对象引用+偏移量得到其地址，也就是对应的指针\n  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);\n\n  //很明显，Atomic::cmpxhg才是进行CAS操作（比较+替换）的那一步，x是即将更新的值，e是期望的旧值\n  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;\nUNSAFE_END\n</code></pre>\n<p>当然，Unsafe 类还提供了许多硬件级别的操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取给定的 paramField 的内存地址偏移量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">staticFieldOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> paramField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 分配内存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">allocateMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 扩充内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">reallocateMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> paramLong1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">freeMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取数组第一个元素的偏移地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">arrayBaseOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> paramClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 <code>AQS</code>  讲解中，我们就提到过 <code>AQS</code>  的部分属性，就是 <code>cas</code>  时需要用到的偏移值。</p>\n<blockquote>\n<p>关于 Unsafe 类的更多知识，可以参考美团技术团队的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTkvMDIvMTQvdGFsay1hYm91dC1qYXZhLW1hZ2ljLWNsYXNzLXVuc2FmZS5odG1s\">Java 魔法类：Unsafe 应用解析</span></p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtQXRvbWljSW50ZWdlci5odG1s\">https://pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTkvMDIvMTQvdGFsay1hYm91dC1qYXZhLW1hZ2ljLWNsYXNzLXVuc2FmZS5odG1s\">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0E(Fork&Join)/",
            "url": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0E(Fork&Join)/",
            "title": "JUC-线程池E(Fork/Join)",
            "date_published": "2023-01-19T05:17:57.000Z",
            "content_html": "<h1 id=\"forkjoin框架\"><a class=\"anchor\" href=\"#forkjoin框架\">#</a> Fork/Join 框架</h1>\n<blockquote>\n<p>本文不会对源码部分涉及太多，主要是讲几个小例子来演示如何使用。</p>\n</blockquote>\n<p>Fork/Join 框架是 Java 并发工具包中的一种可以将<strong>一个大任务拆分为很多小任务</strong>来异步执行的工具，该技术就是分治算法的并行实现，自 JDK1.7 引入。</p>\n<p>该框架主要包含三个模块：</p>\n<ul>\n<li>任务对象： <code>ForkJoinTask</code></li>\n<li>执行 Fork/Join 任务的线程： <code>ForkJoinWorkerThread</code></li>\n<li>线程池： <code>ForkJoinPool</code></li>\n</ul>\n<p>三者关系：<strong> <code>ForkJoinPool</code>  可以通过池中的 <code>ForkJoinWorkerThread</code>  来处理 <code>ForkJoinTask</code>  任务。</strong></p>\n<p><code>ForkJoinPool</code>  只接收  <code>ForkJoinTask</code>  任务 (在实际使用中，也可以接收  <code>Runnable/Callable</code>  任务，但在真正运行时，也会把这些任务封装成  <code>ForkJoinTask</code>  类型的任务）。</p>\n<h2 id=\"工作窃取算法\"><a class=\"anchor\" href=\"#工作窃取算法\">#</a> 工作窃取算法</h2>\n<p>另一个核心思想就是分治算法，本文不加以赘述。</p>\n<p>工作窃取算法（work-stealing）： 线程池内的所有工作线程都尝试找到并执行已经提交的任务，或者是被其他活动任务创建的子任务 (如果不存在就阻塞等待)</p>\n<p>在 ForkJoinPool 中，线程池中<strong>每个工作线程 (ForkJoinWorkerThread) 都对应一个任务队列 (WorkQueue)</strong>，工作线程优先处理来自自身队列的任务 (LIFO 或 FIFO 顺序，参数 mode 决定)，然后以 FIFO 的顺序随机窃取其他队列中的任务。</p>\n<p>具体思路为：</p>\n<ul>\n<li>\n<p>每个线程都有自己的一个 <code>WorkQueue</code> ，该工作队列是一个双端队列。</p>\n</li>\n<li>\n<p>队列支持三个功能 push、pop、poll， <code>push/pop</code>  只能被队列的所有者线程调用，而 <code>poll</code>  可以被其他线程调用。</p>\n</li>\n<li>\n<p>划分的子任务调用 fork 时，都会被 push 到自己的队列中。</p>\n</li>\n<li>\n<p>默认情况下，工作线程从自己的双端队列获出任务并执行。</p>\n</li>\n<li>\n<p>当自己的队列为空时，线程随机从另一个线程的队列末尾调用 poll 方法窃取任务。</p>\n</li>\n</ul>\n<h2 id=\"forkjoinpool\"><a class=\"anchor\" href=\"#forkjoinpool\">#</a> ForkJoinPool</h2>\n<p><strong>外部程序</strong>向 <code>ForkJoinPool</code>  提交任务有三种方式：</p>\n<ul>\n<li>\n<p><code>invoke()</code>  会等待任务计算完毕并返回计算结果；</p>\n</li>\n<li>\n<p><code>execute()</code>  是直接向池提交一个任务来异步执行，无返回结果；</p>\n</li>\n<li>\n<p><code>submit()</code>  也是异步执行，但是会返回提交的任务，在适当的时候可通过 <code>task.get()</code>  获取执行结果。</p>\n</li>\n</ul>\n<p><strong>子任务提交</strong>是由 <code>fork()</code>  方法完成的，任务被分割 (fork) 之后调用了 <code>ForkJoinPool.WorkQueue.push()</code>  方法直接<strong>把任务放到队列</strong>中等待被执行（该任务可能是当前线程执行，也可能被其他线程窃取）。</p>\n<p><strong>获取任务结果</strong>：使用 <code>join()/invoke()</code>  方法， <code>join</code>  只有任务在队列 top 位（双端队列）时才会执行，所以会使当前线程阻塞，直到对应的子任务完成允许并返回执行结果； <code>invoke</code>  会直接执行当前任务。</p>\n<p>所以两个子任务同时需要提交，一般流程是：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">task1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">task2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>task2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//task2 最晚加进去，在栈顶，此时直接调用 join 就会直接执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>task1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong> <code>compute()</code>  方法其实比调用 <code>fork</code>  效率更高，它实际上会在当前工作线程进行计算（线程重用），这比” 将子任务提交到工作队列，线程又将工作队列中拿任务快得多 “。</strong></p>\n<h2 id=\"forkjoin陷阱\"><a class=\"anchor\" href=\"#forkjoin陷阱\">#</a> Fork/Join 陷阱</h2>\n<p><strong>避免不必要的 fork ()</strong>：划分两个子任务后，不要同时调用两个子任务的 <code>fork()</code> ，这当然是可以的，但是其中一个子任务调用 <code>compute()</code>  的效率更高。当一个大人物被划分位两个以上的子任务时，尽可能使用 <code>invokeAll()</code> ，它可以避免不必要的 <code>fork()</code> 。 <code>invokeAll</code>  会把传入的任务的第一个交给当前线程来执行，其他的任务都 fork 加入工作队列，这样等于利用当前线程也执行任务了。</p>\n<p><strong>注意 fork、compute、join 顺序</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 正常调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右边任务加入队列，等待计算</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token class-name\">LAns</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前线程计算左边任务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token class-name\">RAns</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (需要 compute 计算完后才会执行) 拿到右边的结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token class-name\">LAns</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">RAns</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 错误调用 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token class-name\">RAns</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 阻塞，直到拿到 R 的结果</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token class-name\">LAns</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token class-name\">LAns</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">RAns</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 错误调用 2</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">long</span> <span class=\"token class-name\">RAns</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要 RAns 拿到结果才会再执行 fork</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token class-name\">RAns</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">L</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>最后两个实际上都没有并行计算</strong>。</p>\n<h2 id=\"例子1异步计算1~n的累加和\"><a class=\"anchor\" href=\"#例子1异步计算1~n的累加和\">#</a> 例子 1：异步计算 1~n 的累加和</h2>\n<p>实际运用中，我们一般会继承  <code>RecursiveTask</code>  、 <code>RecursiveAction</code>  或  <code>CountedCompleter</code>  来实现我们的业务需求，而不会直接继承  <code>ForkJoinTask</code>  类。</p>\n<ul>\n<li><code>RecursiveTask</code>  ：是 <code>ForkJoinTask</code>  的子类，是一个可以递归执行的 <code>ForkJoinTask</code> 。</li>\n<li><code>RecursiveAction</code>  ：是一个无返回值的 <code>RecursiveTask</code>  。</li>\n<li><code>CountedCompleter</code>  ：在任务完成执行后会触发执行一个自定义的钩子函数。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 继承 RecursiveTask</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SumTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RecursiveTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 开始计算的数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后计算的数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">SumTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> end<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>start <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>end <span class=\"token operator\">=</span> end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">protected</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果计算量小于 1000，那么分配一个线程执行 if 中的代码块，并返回执行结果</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" 开始执行: \"</span> <span class=\"token operator\">+</span> start <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> start<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t\t\tsum <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token comment\">// 如果计算量大于 1000，那么拆分为两个任务</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token class-name\">SumTask</span> task1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SumTask</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token class-name\">SumTask</span> task2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SumTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\ttask1<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\ttask2<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 也可以不使用 fork, 直接使用 invokeAll ()</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token comment\">// invokeAll(task1,task2);</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 获取任务执行的结果</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t<span class=\"token keyword\">return</span> task2<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> task1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t<span class=\"token class-name\">ForkJoinPool</span> pool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForkJoinPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token class-name\">ForkJoinTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SumTask</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\tpool<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要重写 <code>compute</code>  方法，并递归下去。</p>\n<h2 id=\"例子2斐波那契数列\"><a class=\"anchor\" href=\"#例子2斐波那契数列\">#</a> 例子 2：斐波那契数列</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ForkJoinPool</span> forkJoinPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ForkJoinPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最大并发数 4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Fibonacci</span> fibonacci <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Integer</span> result <span class=\"token operator\">=</span> forkJoinPool<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>fibonacci<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">long</span> endTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Fork/join sum: \"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\" in \"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>endTime <span class=\"token operator\">-</span> startTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ms.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 以下为官方 API 文档示例</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span>  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Fibonacci</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RecursiveTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">Fibonacci</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        f1<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token class-name\">Fibonacci</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fibonacci</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> f2<span class=\"token punctuation\">.</span><span class=\"token function\">compute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> f1<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGlhb3h1ZWZlbmcuY29tL3dpa2kvMTI1MjU5OTU0ODM0Mzc0NC8xMzA2NTgxMjI2NDg3ODQy\">https://www.liaoxuefeng.com/wiki/1252599548343744/1306581226487842</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtZXhlY3V0b3ItRm9ya0pvaW5Qb29sLmh0bWw=\">https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ForkJoinPool.html</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0D(ScheduledThreadPoolExecutor)/",
            "url": "https://cecilia.cool/2023/01/19/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0D(ScheduledThreadPoolExecutor)/",
            "title": "JUC-线程池D(ScheduledThreadPoolExecutor)",
            "date_published": "2023-01-19T05:11:40.000Z",
            "content_html": "<h1 id=\"类结构\"><a class=\"anchor\" href=\"#类结构\">#</a> 类结构</h1>\n<p>线程池也可以执行定时任务，以前如果要执行一个定时任务，需要用到 <code>Timer</code>  和 <code>TimerTask</code> ，但是它只是创建一个线程执行定时任务，无法多线程调度。</p>\n<p>JDK1.5 之后可以使用 <code>ScheduledThreadPoolExecutor</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadPoolExecutor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该类所有构造方法都要求线程池最大容量为 <code>Integer.MAX_VALUE</code> ，并且均采用 <code>DelayedWorkQueue</code> （内部类）作为等待队列。</p>\n<p>之前的文章讲了 <code>ThreadPoolExecutor</code>  和 <code>ScheduledExecutorService</code> ，前者定义和实现了线程池方面的功能，后者定义了执行定时任务的方法。</p>\n<p>简单使用一下，该方法可以提交一个延时任务：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token comment\">// 直接设定核心线程数为 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ScheduledThreadPoolExecutor</span> executor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 定义一个 3 秒后执行的任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    executor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"才川晴香\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 定义一个 3 秒后开始，之后每个 1 秒执行一次的任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    executor<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">pritln</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"佐藤时雨\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    executor<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同样，我们之前讲的 <code>Executors</code>  也可以直接创建一个这样的线程池：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果要用 ScheduledThreadPoolExecutor 接收，外部需要强转一下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ScheduledExecutorService</span> <span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"源码解析\"><a class=\"anchor\" href=\"#源码解析\">#</a> 源码解析</h1>\n<blockquote>\n<p>又是大家喜闻乐见的解析源码的环节</p>\n</blockquote>\n<p><code>ScheduledThreadPoolExecutor</code>  有两个内部类：</p>\n<ul>\n<li><code>ScheduledFutureTask</code> ：继承了 <code>FutureTask</code> ，实现了 <code>RunnableScheduledFuture</code>  接口，是一个可以延迟执行的异步运算任务。</li>\n<li><code>DelayedWorkQueue</code> ：是 <code>ScheduledThreadPoolExecutor</code>  专门为了<strong>存储周期或延迟任务</strong>定义的延迟队列，继承了 <code>AbstractQueue</code> ，实现了 <code>BlockingQueue</code> 。内部只允许存储 <code>RunnableScheduledFuture</code>  对象。</li>\n</ul>\n<h2 id=\"schedulefuturetask\"><a class=\"anchor\" href=\"#schedulefuturetask\">#</a> ScheduleFutureTask</h2>\n<p>相关类结构， <code>ScheduledThreadPoolExecutor</code>  的延迟队列存放的是 <code>RunnableScheduledFuture</code> ，也就是它实现的接口。</p>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMy51dXUub3ZoL2ltZ3MvMjAyMi8xMS8yNS8yOGFkM2E3NTlhMTYzNDNmLmpwZw==\">https://s3.uuu.ovh/imgs/2022/11/25/28ad3a759a16343f.jpg</span>&quot; style=&quot;zoom: 67%;&quot; /&gt;</p>\n<p><code>ScheduledThreadPoolExecutor</code>  执行定时任务时，会将任务封装成 <code>ScheduleFutureTask</code>  对象。</p>\n<h3 id=\"属性\"><a class=\"anchor\" href=\"#属性\">#</a> 属性</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为相同延时任务提供的顺序编号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 定时任务中，一个任务是周期性执行的，但是它们的 sequenceNumber 的值相同，则被视为是同一个任务。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> sequenceNumber<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 任务可以执行的时间，纳秒级</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 重复任务的执行周期时间，纳秒级，0 表示不重复任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> period<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 重新入队的任务</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">RunnableScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> outerTask <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 延迟队列的索引，以支持更快的取消操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">int</span> heapIndex<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"核心方法\"><a class=\"anchor\" href=\"#核心方法\">#</a> 核心方法</h3>\n<p>为了对延迟队列中的 <code>ScheduleFutureTask</code>  排序， <code>ScheduleFutureTask</code>  还实现了 <code>Comparable</code>  接口，排序规则为：</p>\n<ol>\n<li>先比较延迟队列中每个任务下次执行时间，下次执行时间距离短的会排在前面。</li>\n<li>再比较 <code>sequenceNumber</code>  值，小的会在前面。</li>\n</ol>\n<p>构造方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> ns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// FutureTask 构造方法，为 Callable 和 state 赋值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>period <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sequenceNumber <span class=\"token operator\">=</span> sequencer<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 递增</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> ns<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> period<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>period <span class=\"token operator\">=</span> period<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sequenceNumber <span class=\"token operator\">=</span> sequencer<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> ns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>callable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> ns<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>period <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sequenceNumber <span class=\"token operator\">=</span> sequencer<span class=\"token punctuation\">.</span><span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>getDelay()</code>  方法：获得该任务下次执行时间对当前时间的间距，纳秒级。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取下次执行任务的时间距离当前时间的纳秒数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getDelay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">convert</span><span class=\"token punctuation\">(</span>time <span class=\"token operator\">-</span> <span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NANOSECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>run</code>  方法：先拿到任务类别，判断是否可以执行，再分开执行。</p>\n<p><strong>注意，这个 run 是 ScheduledFutureTask 的 run 方法，外部 ScheduledThreadPoolExecutor 执行一个任务时，就是从外部调用这个 run 方法</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">boolean</span> periodic <span class=\"token operator\">=</span> <span class=\"token function\">isPeriodic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 是否为周期任务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canRunInCurrentRunState</span><span class=\"token punctuation\">(</span>periodic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 当前状态是否可以执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>periodic<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 不是周期任务，直接执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAndReset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 运行后重新设置状态 NEW</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">setNextRunTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置下一次运行时间</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 这是外部类的方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">reExecutePeriodic</span><span class=\"token punctuation\">(</span>outerTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重排序一个周期任务，周期任务重新入队等待下一次执行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：</p>\n<ol>\n<li>执行任务都是调用的父类 <code>FututreTask</code>  的 <code>run</code>  和 <code>runAndReset</code> ，后者会重置当前任务的执行状态。</li>\n<li><code>reExecutePeriodic</code>  方法是 <code>ScheduledThreadPoolExecutor</code>  类的方法。会将延迟队列中任务重排序，上文说过，延迟队列只存放 <code>RunnableScheduledFuture&lt;T&gt;</code> ，所以需要将 <code>outerTask</code>  放进去，周期任务需要调用 <code>scheduleAtFixedRate</code>  和 <code>scheduleWithFixedDelay</code> 。会对该属性进行赋值操作。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">reExecutePeriodic</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RunnableScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 线程池当前状态下能够执行任务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">canRunInCurrentRunState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token comment\">// 将任务放入队列</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 线程池当前状态下不能执行任务，并且成功移除任务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">canRunInCurrentRunState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token comment\">// 取消任务</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\ttask<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token comment\">// 调用 ThreadPoolExecutor 类的 ensurePrestart () 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 启动一个新的线程等待任务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token function\">ensurePrestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"delayedworkqueue\"><a class=\"anchor\" href=\"#delayedworkqueue\">#</a> DelayedWorkQueue</h2>\n<p>线程池执行任务时需要从任务队列中拿任务，而普通的任务队列，如果里面有任务就直接拿出来了，但是延时队列不一样，它里面的任务，如果没有到时间也是拿不出来的。</p>\n<p>该队列其实是一个优先队列，利用堆的特性获取最先运行的任务，即对顶的任务：</p>\n<ol>\n<li>如果堆顶的任务到时间了，就出队。</li>\n<li>如果堆顶的任务还没到时间，就看它还有多久到时间，利用条件锁等待这段时间，时间到了后再出队；</li>\n</ol>\n<p><strong>一个小细节</strong>，先看源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将任务放入队列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果你仔细读了源码，肯定看到过这句代码，向上点进去， <code>ThreadPoolExecutor</code>  的 <code>getQueue</code>  源码为：</p>\n<pre><code>public BlockingQueue&lt;Runnable&gt; getQueue() &#123;\n\treturn workQueue;\n&#125;\n</code></pre>\n<p>诶？我们不是应该将任务放到 <code>DelayedWorkQueue</code>  里面吗，为什么现在是放到父类里的 <code>BlockingQueue</code>  了？</p>\n<p>其实看 <code>ScheduleThreadPoolExecutor</code>  的构造方法就知道：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span><span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 已经为将 BlockingQueue 定义为 DelayedWorkQueue 了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>corePoolSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NANOSECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token keyword\">new</span> <span class=\"token class-name\">DelayedWorkQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> threadFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-2\"><a class=\"anchor\" href=\"#核心方法-2\">#</a> 核心方法</h2>\n<blockquote>\n<p>现在讲的方法是 <code>ScheduledThreadPoolExecutor</code>  的方法。</p>\n</blockquote>\n<p><code>schedule()</code>  方法：主要执行一次性（延迟）任务，先将 <code>Callable/Runnable</code>  封装为 <code>RunnableScheduledFuture</code> ，再通过 <code>delayedExecute</code>  执行。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                       <span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                       <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callable <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> unit <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 构造 ScheduledFutureTask 任务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">RunnableScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token function\">decorateTask</span><span class=\"token punctuation\">(</span>callable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>callable<span class=\"token punctuation\">,</span> <span class=\"token function\">triggerTime</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">delayedExecute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 任务执行主方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delayedExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RunnableScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 池已关闭，执行拒绝策略</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 任务入队</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token operator\">!</span><span class=\"token function\">canRunInCurrentRunState</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">isPeriodic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 移除任务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            task<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token function\">ensurePrestart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 启动一个新的线程等待任务</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>scheduleAtFixedRate</code>  方法：之后每隔 period 执行一次，不等待第一次执行完成就开始计时</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                              <span class=\"token keyword\">long</span> initialDelay<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                              <span class=\"token keyword\">long</span> period<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> unit <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>period <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 构建 RunnableScheduledFuture 任务类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> sft <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                      <span class=\"token function\">triggerTime</span><span class=\"token punctuation\">(</span>initialDelay<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 计算任务的延迟时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                      unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>period<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算任务的执行周期</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">RunnableScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token function\">decorateTask</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> sft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行用户自定义逻辑</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    sft<span class=\"token punctuation\">.</span>outerTask <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值给 outerTask，准备重新入队等待下一次执行</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">delayedExecute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>scheduleWithFixedDelay</code>  方法：在第一次执行完之后延迟 delay 后开始下一次执行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">scheduleWithFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                                                 <span class=\"token keyword\">long</span> initialDelay<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                                 <span class=\"token keyword\">long</span> delay<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                                 <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> unit <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>delay <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 构建 RunnableScheduledFuture 任务类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> sft <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">ScheduledFutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                      <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                      <span class=\"token function\">triggerTime</span><span class=\"token punctuation\">(</span>initialDelay<span class=\"token punctuation\">,</span> unit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 计算任务的延迟时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                      unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算任务的执行周期</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 这个其实返回的就是 sft，你不信自己看源码，command 都没有用到</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">RunnableScheduledFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token function\">decorateTask</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> sft<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    sft<span class=\"token punctuation\">.</span>outerTask <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span><span class=\"token comment\">// 赋值给 outerTask，准备重新入队等待下一次执行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">delayedExecute</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>scheduleAtFixedRate</code>  传的是正值，而 <code>scheduleWithFixedDelay</code>  传的则是负值，这个值就是  <code>ScheduledFutureTask</code>  的 <code>period</code>  属性。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>最后浅浅地总结一下整个流程，当我们传入一个<strong>周期</strong>任务时：</p>\n<ol>\n<li><code>ScheduledThreadPoolExecutor</code>  会将 <code>Callable/Runnable</code>  封装成 <code>ScheduleFutureTask</code> ，然后进一步拿到 <code>RunnableScheduledFuture</code> 。</li>\n<li>延迟执行，如果不用拒绝的话，就加入延迟队列，启动一个新的线程执行延迟任务。</li>\n<li>执行的时候，调用的 <code>RunnableScheduledFuture</code>  的 run 方法，本质上其实是调用 <code>FutureTask</code>  的 <code>run</code> 。</li>\n</ol>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2Jub2lmNSNlNmUxYWZiZg==\">https://www.yuque.com/qingkongxiaguang/javase/bnoif5#e6e1afbf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMDI4Mzg2ODA0L2FydGljbGUvZGV0YWlscy8xMDQ1ODUyOTU=\">https://blog.csdn.net/l1028386804/article/details/104585295</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdG9uZy15dWFuL3AvMTE4MDE3NTcuaHRtbA==\">https://www.cnblogs.com/tong-yuan/p/11801757.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtZXhlY3V0b3ItU2NoZWR1bGVkVGhyZWFkUG9vbEV4ZWN1dG9yLmh0bQ==\">https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ScheduledThreadPoolExecutor.htm</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/16/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0C(ThreadPoolExecutor)/",
            "url": "https://cecilia.cool/2023/01/16/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0C(ThreadPoolExecutor)/",
            "title": "JUC-线程池C(ThreadPoolExecutor)",
            "date_published": "2023-01-16T07:14:16.000Z",
            "content_html": "<h1 id=\"工具类executors\"><a class=\"anchor\" href=\"#工具类executors\">#</a> 工具类 Executors</h1>\n<p>注意区别 <code>Executor</code>  类和 <code>ExcetorService</code> ，前者提供的是显式地创建线程运行提交过来的任务， <code>ExecutorService</code>  继承了 <code>Executor</code> ，多提供了管理终止方法和生成 <code>Future</code>  方法。但是创建出来的线程交给谁去运行的呢？接口只是规定了行为，而不会去管实现。</p>\n<p><code>Executors</code>  就实现了创建线程池的操作（真的是 <code>Executors</code>  实现的吗？），通过 <code>Executors</code>  可以创建一些特定的线程池：</p>\n<ul>\n<li><code>Executors.newCachedThreadPool()</code> ：创建一个可缓存的线程池，如果线程池的大小超过了需要，可以灵活回收空闲线程，如果没有可回收线程，则新建线程。默认线程闲置 60 秒就销毁。</li>\n<li><code>Executors.newFixedThreadPool()</code> ：创建一个定长的线程池，可以控制线程的最大并发数，超出的线程会在队列中等待</li>\n<li><code>Executors.newScheduledThreadPool()</code> ：创建一个定长的线程池，支持定时、周期性的任务执行</li>\n<li><code>Executors.newSingleThreadExecutor()</code> : 创建一个单线程化的线程池，使用一个唯一的工作线程执行任务，保证所有任务按照指 定顺序（先入先出或者优先级）执行</li>\n<li><code>Executors.newSingleThreadScheduledExecutor()</code> : 创建一个单线程化的线程池，支持定时、周期性的任务执行</li>\n<li><code>Executors.newWorkStealingPool()</code> ：创建一个具有并行级别的 work-stealing 线程池</li>\n</ul>\n<blockquote>\n<p>其实企业实际开发都不怎么使用这些线程池创建，开发人员需要根据实际开发情况自己配置线程池。</p>\n</blockquote>\n<p>讲一个例子，定时线程池：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 避免重复创建 Date 对象等</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">SimpleDateFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"YYYY-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token comment\">// 定义定时线程池，ScheduleexecutorService 接口继承了 ExecutorService 接口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ScheduledExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 任务 1：间隔两秒后秒获取当前时间，参数 2 是延时时间，参数 3 是时间单位</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 任务 2：间隔两秒后，每隔一秒打印当前时间，参数 3 是之后每个多久就执行一次</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">//executorService.shutdown();</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们随便点进去查看一下源码，可以发现这些方法实际是创建了一个 <code>ThreadPoolExecutor</code>  对象或者将 <code>ThreadPoolExecutor</code>  包装了一下，只是构造方法的参数不同，而这些<strong>参数就是配置一个线程池的重要部分</strong>。</p>\n<p>我们使用 <code>Executors</code>  创建线程池，本质上是因为 <code>Executors</code>  类提供了使用了  <code>ThreadPoolExecutor</code>  的简单的  <code>ExecutorService</code>  实现。</p>\n<h1 id=\"threadpoolexecutor\"><a class=\"anchor\" href=\"#threadpoolexecutor\">#</a> ThreadPoolExecutor</h1>\n<p>先看一下构造方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> corePoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                              <span class=\"token keyword\">int</span> maximumPoolSize<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                              <span class=\"token keyword\">long</span> keepAliveTime<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                              <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                              <span class=\"token class-name\">BlockingQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">></span></span> workQueue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                              <span class=\"token class-name\">ThreadFactory</span> threadFactory<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                              <span class=\"token class-name\">RejectedExecutionHandler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>corePoolSize <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            maximumPoolSize <span class=\"token operator\">&lt;</span> corePoolSize <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            keepAliveTime <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>workQueue <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> threadFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>acc <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSecurityManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">AccessController</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>corePoolSize <span class=\"token operator\">=</span> corePoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maximumPoolSize <span class=\"token operator\">=</span> maximumPoolSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>workQueue <span class=\"token operator\">=</span> workQueue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>keepAliveTime <span class=\"token operator\">=</span> unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>keepAliveTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadFactory <span class=\"token operator\">=</span> threadFactory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接受的参数很多，但是必须要全部知道：</p>\n<ul>\n<li>\n<p><strong> <code>corePoolSize</code> </strong>：线程池中的核心线程数，当提交一个任务时，线程池创建一个新线程执行任务，直到当前线程数等于 <code>corePoolSize</code> , <strong>即使有其他空闲线程能够执行新来的任务，也会继续创建线程</strong>；如果当前线程数为 <code>corePoolSize</code> ，继续提交的任务被保存到阻塞队列中，等待被执行；如果执行了线程池的 <code>prestartAllCoreThreads()</code>  方法，线程池会提前创建并启动所有核心线程。</p>\n</li>\n<li>\n<p><strong> <code>maximumPoolSize</code> </strong>：<strong>最大线程池大小</strong>，当目前线程池中所有的线程都处于运行状态，并且等待队列已满，那么就会直接尝试继续创建新的 <code>非核心线程</code> 运行，但是不能超过最大线程池大小。</p>\n</li>\n<li>\n<p><strong> <code>keepAliveTime</code> </strong>：<strong>非核心线程最大空闲时间</strong>，当一个 <code>非核心线程</code> 空闲超过一定时间，会自动销毁。</p>\n</li>\n<li>\n<p><strong> <code>unit</code> </strong>：<strong>时间单位</strong>。</p>\n</li>\n<li>\n<p><strong> <code>workQueue</code> </strong>：<strong>线程等待队列</strong>，当线程池中核心线程数已满时，就会将任务暂时存到等待队列中，直到有线程资源可用为止。</p>\n</li>\n<li>\n<p><strong> <code>threadFactory</code> </strong>：<strong>线程创建工厂</strong>，我们可以干涉线程池中线程的创建过程，进行自定义。</p>\n</li>\n<li>\n<p><strong> <code>handler</code> </strong>：<strong>拒绝策略</strong>，当<strong>等待队列</strong>和<strong>线程池</strong>都没有空间了，真的不能再来新的任务时，来了个新的多线程任务，那么只能拒绝了，这时就会根据当前设定的拒绝策略进行处理。</p>\n</li>\n</ul>\n<blockquote>\n<p>线程核心参数是一个重要的面试题，理解记忆，也可以从一个设计者的角度记忆，如果是你在设计线程池，哪些方面你应该考虑，池大小，池中线程存活时间，池创建线程，池拒绝策略等。</p>\n</blockquote>\n<p>为一个线程池分配大小也有讲究，针对线程执行的任务，可以分为 CPU 密集型还是 IO 密集型：</p>\n<ul>\n<li><strong>CUP 密集型</strong>：主要执行计算任务，响应时间很快，CPU 利用率很高，那么线程数应该根据 CPU 核心数决定，CPU 核心数 = 最大同时执行线程数。</li>\n<li><strong>IO 密集型</strong>：主要进行 IO 操作，而 IO 操作容易发生阻塞，时间较长，CPU 就需要等待 IO 操作结束才能继续执行，此时 CPU 就是空闲的，这是可以适当提升线程池大小，让更多的线程一起进行 IO 操作。</li>\n</ul>\n<p>一般配置核心参数：</p>\n<p>CPU 密集型任务，线程数量 = CPU 核数 + 1</p>\n<p>IO 密集型任务，线程数量 = CPU 核数 * 2</p>\n<h2 id=\"简单使用\"><a class=\"anchor\" href=\"#简单使用\">#</a> 简单使用</h2>\n<blockquote>\n<p>java 线程池的实现原理很简单，说白了就是一个线程集合 workerSet 和一个阻塞队列 workQueue。</p>\n</blockquote>\n<p>想要创建一个自定义的线程池，可以直接 <code>new ThreadPoolExecutor()</code> ，那么我们就要考虑调用哪个构造方法，传递什么参数，我们可以不传入线程创建工厂，使用它默认的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ThreadPoolExecutor</span> executor <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                    <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor<span class=\"token punctuation\">.</span>CallerRunsPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务开始执行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>解释上面代码：核心线程数为 2，最大线程数为 4，非核心线程空闲存活时间为 3s，使用 <code>SynchronousQueue</code>  阻塞队列，使用 <code>CallerRunsPolicy</code>  拒绝策略。</p>\n<p>线程池的拒绝策略默认有一下几个：</p>\n<ul>\n<li>\n<p><code>AbortPolicy</code>  (默认)：像上面一样，直接抛异常。</p>\n</li>\n<li>\n<p><code>CallerRunsPolicy</code> ：哪个线程提交的就由哪个执行</p>\n</li>\n<li>\n<p><code>DiscardOldestPolicy</code> ：丢弃队列中最近的一个任务，替换为当前任务。</p>\n</li>\n<li>\n<p><code>DiscardPolicy</code> ：什么也不用做。</p>\n</li>\n</ul>\n<p>而 <code>SynchronousQueue</code>  队列是没有容量的队列，也就是不能将任务放到阻塞队列中。不能传 <code>null</code> ，会抛出异常。</p>\n<p>有个值得注意的点，如果阻塞队列使用 <code>SynchronousQueue</code> ，而拒绝策略使用 <code>DiscardOldestPolicy</code>  的话，会 <code>StackOverflowError</code> 。</p>\n<p>我们先看一下，当提交一个任务：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>executor<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>而此时线程池执行任务的线程已经满了，就会将该任务加入到阻塞队列中，但是此时加入的时候，发现阻塞队列满了（因为本来就没有容量），就会将任务传给拒绝策略。这些都是 <code>execute()</code>  方法里做的事。</p>\n<p>看一下 <code>DiscardOldestPolicy</code>  拒绝策略的源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DiscardOldestPolicy</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RejectedExecutionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DiscardOldestPolicy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rejectedExecution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadPoolExecutor</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">isShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">getQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 出队操作，但是这对于 SynchronousQueue 来说毫无意义</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 调用 execute 方法，如果还没有线程空闲，就可以放入阻塞独队列</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>如果线程池的线程迟迟没有空闲</strong>，这两个方法就会无限递归下去，然后爆栈。</p>\n<h2 id=\"关闭线程池\"><a class=\"anchor\" href=\"#关闭线程池\">#</a> 关闭线程池</h2>\n<p>遍历线程池中的所有线程，然后<strong>逐个调用线程的 interrupt</strong> 方法来中断线程。其中涉及到两个方法：</p>\n<ul>\n<li><code>shutdown</code>  方法：将线程池的状态设置为 <code>SHUTWDOWN</code>  状态，正在<strong>执行</strong>的任务会继续执行下去，没有被<strong>执行</strong>的<strong>线程</strong>则中断。在队列中的任务会被继续执行。</li>\n<li><code>shutdownNow</code>  则是将线程池的状态设置为 <code>STOP</code> ，所有线程都被中断，正在执行的任务则被停止，没被执行的任务会形成一个任务列表被返回。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//shutdown，会将队列中的任务继续运行，而 shutdownNow 不会</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">isShutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个任务执行开始...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 输入一个字符串并打印</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个任务执行被中断...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个任务执行结束...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>需要注意的是，中断调用的方法是 <code>Thread.interrupt()</code> ，<strong>这种方法的作用有限</strong>，如果线程中没有 <code>sleep</code>  、 <code>wait</code> 、 <code>Condition</code> 、定时锁等应用， <code>interrupt()</code>  方法是无法中断当前的线程的。所以， <code>ShutdownNow()</code>  并不代表线程池就一定立即就能退出，它可能必须要等待所有正在执行的任务都执行完成了才能退出。</p>\n<p>你可以测试一下，把 <code>f(int i)</code>  方法的 <code>Thread.Sleep(1000);</code>  换成 <code>new Scanner(System.in).nextLine()</code> ，那么即使调用了 <code>shutdownNow()</code> ，程序也不会停止。</p>\n<blockquote>\n<p>你可能注意到， <code>f</code>  接收的参数被我设置成了 <code>final</code> ，为啥需要设置为 final，你可以查一下，也可以看看这篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1ODAyMDgwL2FydGljbGUvZGV0YWlscy8xMjU0NTExMjQ/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjY5Mjc5MzExMTY3ODI0MTI1Nzc5OTMlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY2OTI3OTMxMTE2NzgyNDEyNTc3OTkzJmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+dG9wX2NsaWNrfmRlZmF1bHQtMS0xMjU0NTExMjQtbnVsbC1udWxsLjE0MiU1RXY2NiU1RXBjX3JhbmtfMzRfcXVlcnlyZWxldmFudDI1LDIwMSU1RXYzJTVFY29udHJvbF8xLDIxMyU1RXYyJTVFdDNfZXNxdWVyeV92MSZhbXA7dXRtX3Rlcm09VmFyaWFibGUlMjB1c2VkJTIwaW4lMjBsYW1iZGElMjBleHByZXNzaW9uJTIwc2hvdWxkJTIwYmUlMjBmaW5hbCUyMG9yJTIwZWZmZWN0aXZlbHklMjBmaW5hbCZhbXA7c3BtPTEwMTguMjIyNi4zMDAxLjQxODc=\">文章</span></p>\n</blockquote>\n<h2 id=\"自定义拒绝策略\"><a class=\"anchor\" href=\"#自定义拒绝策略\">#</a> 自定义拒绝策略</h2>\n<p>通过查看源码可知， <code>ThreadPoolExecutor</code>  接受的拒绝策略参数是 <code>RejectedExecutionHandler</code> ，所以我们可以自己写一个决绝策略的类，继承 <code>RejectedExecutionHandler</code>  接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RejectedExecutionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">rejectedExecution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadPoolExecutor</span> executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>写一个实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RejectedExecutionHandlerImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">RejectedExecutionHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rejectedExecution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ThreadPoolExecutor</span> executor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 阿巴阿巴操作</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" is rejected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>测试一下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolExecutor</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">SynchronousQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>，                         </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">RejectedExecutionHandlerImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个任务执行开始...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个任务执行被中断...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第\"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\"个任务执行结束...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"源码解析\"><a class=\"anchor\" href=\"#源码解析\">#</a> 源码解析</h2>\n<p><code>ThreadPoolExecutor</code>  的重要属性其实就是构造函数传入的那几个参数，其他重要的还有：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 原子操作类，避免出现并发问题，低 29 位表示线程池中线程数，通过高 3 位表示线程池的运行状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicInteger</span> ctl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token function\">ctlOf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RUNNING</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//worker 的集合，用 set 来存放</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">></span></span> workers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Worker</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>看一下线程池运行状态以及转换：</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/24/a5a9bc622611371a.jpg\" alt=\"\" /></p>\n<h3 id=\"任务执行\"><a class=\"anchor\" href=\"#任务执行\">#</a> 任务执行</h3>\n<blockquote>\n<p><code>execute –&gt; addWorker –&gt;runworker (getTask)</code></p>\n</blockquote>\n<p>线程池的工作线程通过 Woker 类实现，在 ReentrantLock 锁的保证下，把 Woker 实例插入到 HashSet 后，并启动 Woker 中的线程。 从 Woker 类的构造方法实现可以发现：线程工厂在创建线程 thread 时，将 Woker 实例本身 this 作为参数传入，当执行 start 方法启动线程 thread 时，本质是执行了 Worker 的 runWorker 方法。 firstTask 执行完成之后，通过 getTask 方法从阻塞队列中获取等待的任务，如果队列中没有任务，getTask 方法会被阻塞并挂起，不会占用 cpu 资源。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>command <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> corePoolSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 线程池的当前线程数小于 corePoolSize，执行 addWorker 创建新线程执行 command 任务</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        c <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// double check: c, recheck</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 线程池处于 RUNNING 状态，把提交的任务成功放入阻塞队列中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> workQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> recheck <span class=\"token operator\">=</span> ctl<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 回滚到入队操作前，即倘若线程池 shutdown 状态，就 remove (command)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果线程池没有 RUNNING，成功从阻塞队列中删除任务，执行 reject 方法处理任务</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> <span class=\"token function\">isRunning</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 线程池处于 running 状态，但是没有线程，则创建线程</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">workerCountOf</span><span class=\"token punctuation\">(</span>recheck<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 往线程池中创建新的线程失败，则 reject 任务</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">addWorker</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在多线程环境下，线程池的状态时刻在变化，而 <code>ctl.get()</code>  是非原子操作，很有可能刚获取了线程池状态后线程池状态就改变了。判断是否将 <code>command</code>  加入 <code>workque</code>  是线程池之前的状态。倘若没有<strong> double check</strong>，万一线程池处于非 <code>running</code>  状态 (在多线程环境下很有可能发生)，那么 command 永远不会执行。在双重检查下，<strong>如果线程池状态发生变化，就可以对这个任务执行拒绝策略</strong>。</p>\n<h3 id=\"任务关闭\"><a class=\"anchor\" href=\"#任务关闭\">#</a> 任务关闭</h3>\n<p><code>shutdown()</code>  和 <code>shutdownNow()</code> ，上文也讲过了，嘿嘿😘</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2Jub2lmNSNlZjZlYmQ3MQ==\">https://www.yuque.com/qingkongxiaguang/javase/bnoif5#ef6ebd71</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtZXhlY3V0b3ItVGhyZWFkUG9vbEV4ZWN1dG9yLmh0bWw=\">https://pdai.tech/md/java/thread/java-thread-x-juc-executor-ThreadPoolExecutor.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXRleWUuY29tL2Jsb2cvanVzdHNlZS05OTkxODk=\">https://www.iteye.com/blog/justsee-999189</span></p>\n<p>《Java 并发编程的艺术》第 10 章</p>\n<p>深入理解高并发编程（第 1 版）</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/16/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0B(%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1)/",
            "url": "https://cecilia.cool/2023/01/16/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0B(%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1)/",
            "title": "JUC-线程池B(异步任务)",
            "date_published": "2023-01-16T06:51:31.000Z",
            "content_html": "<p><code>FutureTask</code>  为  <code>Future</code>  提供了<strong>基础</strong>实现（言外之意就是也提供了一些功能性函数供我们创建自定义  <code>task</code>  类使用），如获取任务执行结果 ( <code>get</code> ) 和取消任务 ( <code>cancel</code> ) 等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消 (除非使用 <code>runAndReset</code>  执行计算)。 <code>FutureTask</code>  常用来封装  <code>Callable</code>  和  <code>Runnable</code> ，也可以作为一个任务提交到线程池中执行。 <code>FutureTask</code>  的线程安全由 <code>CAS</code>  来保证。</p>\n<h1 id=\"异步模型\"><a class=\"anchor\" href=\"#异步模型\">#</a> 异步模型</h1>\n<p>在 <code>Java</code>  的并发编程中，大体上会分为两种异步编程模型，一类是以异步的形式来并行运行其他的任务，<strong>不需要</strong>返回任务的结果数据。一类是以异步的形式运行其他任务，<strong>需要</strong>返回结果。</p>\n<h2 id=\"无返回结果异步模型\"><a class=\"anchor\" href=\"#无返回结果异步模型\">#</a> 无返回结果异步模型</h2>\n<p>无返回结果的异步任务可以直接丢进线程或线程池中运行。想要获取运行结果的话，可以调用回调方法。具体实现是定义一个回调接口，并在接口中定义接收任务结果数据的方法。任务运行后调用接口方法，执行回调接口实现类中的逻辑处理结果数据</p>\n<ul>\n<li>定义回调接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义任务结果数据的封装类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">T</span> <span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>定义任务结果数据的封装类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskResult</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 任务状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> taskStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 任务消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> taskMessage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 任务结果数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> taskResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"TaskResult&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"taskStatus=\"</span> <span class=\"token operator\">+</span> taskStatus <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\", taskMessage='\"</span> <span class=\"token operator\">+</span> taskMessage <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\", taskResult='\"</span> <span class=\"token operator\">+</span> taskResult <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>创建回调接口的实现类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TaskResult</span> <span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TaskResult</span> taskResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token comment\">//TODO 拿到结果数据后进一步处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>taskResult<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">return</span> taskResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>创建任务的执行类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskExecutor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> taskCallable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> taskParameter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> taskCallable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> taskParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskCallable <span class=\"token operator\">=</span> taskCallable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskParameter <span class=\"token operator\">=</span> taskParameter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//TODO 一系列业务逻辑，将结果数据封装成 TaskResult 对象并返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">TaskResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异步回调成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        taskCallable<span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>运行一下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskCallableTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> taskCallable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TaskExecutor</span> taskExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskExecutor</span><span class=\"token punctuation\">(</span>taskCallable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"测试回调任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>taskExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 结果：TaskResult &#123;taskStatus=1, taskMessage=' 测试回调任务 ', taskResult=' 异步回调成功 '&#125;</span></pre></td></tr></table></figure><p>这种实现，主要就是可以传入不同的 <code>TaskCallable</code> ，如果回调是函数式接口，甚至不需要实现类，直接在 <code>TaskExecutor</code>  传入 <code>Lambda</code>  表达式即可。</p>\n<h2 id=\"有返回结果模型\"><a class=\"anchor\" href=\"#有返回结果模型\">#</a> 有返回结果模型</h2>\n<p>我们自己定义接口并实现回调方法比较麻烦，JDK 提供了可以直接返回异步结果的处理方案。</p>\n<ul>\n<li>使用 <code>Future</code>  接口获取异步结果，常与线程池一起使用。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//submit 提交任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"测试Future获取异步结果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取结果ing...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取结果end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程池关闭</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从执行结果看， <code>future.get()</code>  会阻塞当前线程，也就是只有拿到了结果，才会打印 <code>end...</code> 。</p>\n<ul>\n<li>使用 <code>FutureTask</code>  获取异步结果， <code>FutureTask</code>  类还实现了 <code>Runnable</code> ，所以既可以结合 <code>Thread</code>  类使用也可以结合线程池使用。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配合 Thread 使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//submit 提交任务</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"测试FutureTask获取异步结果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取结果ing...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取结果end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 配合线程池使用，和 Future 没什么区别</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//submit 提交任务</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"测试FutureTask获取异步结果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取结果ing...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取结果end...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程池关闭</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在调用 <code>get</code>  的时候都是阻塞调用。</p>\n<h1 id=\"相关类解析\"><a class=\"anchor\" href=\"#相关类解析\">#</a> 相关类解析</h1>\n<blockquote>\n<p>分析一下上面代码使用的类以及类结构。</p>\n</blockquote>\n<h2 id=\"callable\"><a class=\"anchor\" href=\"#callable\">#</a> Callable</h2>\n<p>泛型接口，对比 <code>Runnable</code>  不会返回数据，也不会抛出异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数式接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复习一下，在 <code>JDK 1.8</code>  中只声明有一个方法的接口为函数式接口，函数式接口可以使用 <code>@FunctionalInterface</code>  注解修饰，也可以不使用 <code> @FunctionalInterface</code>  注解修饰。只要一个接口中只有一个方法（可以有默认方法），那么，这个接口就是函数式接口。</p>\n<h2 id=\"future\"><a class=\"anchor\" href=\"#future\">#</a> Future</h2>\n<p>泛型接口，代表异步计算的结果，在两种异步模型中可以看出 <code>Future</code>  的使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 取消异步任务的执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 判断任务是否被取消</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 判断任务是否已经完成，如果任务被取消或者抛出异常，也是 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 带超时时间的 get () 版本，如果阻塞等待过程中超时则会抛出 TimeoutException 异常</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>cancel</code>  函数：如果异步任务已经完成或者已经被取消，或者由于某些原因不能取消，则会返回 <code>false</code> 。如果任务还没有被执行，则会返回 true 并且异步任务不会被执行。如果任务已经开始执行了但是还没有执行完成，若 <code>mayInterruptIfRunning</code> （当前传递的 <code>boolean</code>  类型参数）为 <code>true</code> ，则会立即中断执行任务的线程并返回 <code>true</code> ，若 <code>mayInterruptIfRunning</code>  为 <code>false</code> ，则会返回 <code>true</code>  且不会中断任务执行线程。</li>\n</ul>\n<h2 id=\"runnablefuture\"><a class=\"anchor\" href=\"#runnablefuture\">#</a> RunnableFuture</h2>\n<p><code>RunnableFuture</code>  继承了 <code>Runnable</code>  接口和 <code>Future</code>  接口，而 <code>FutureTask</code>  实现了 <code>RunnableFuture</code>  接口。所以它既可以作为 <code>Runnable</code>  被线程执行，又可以作为 <code>Future</code>  得到 <code>Callable</code>  的返回值。 <code>RunnableFuture</code>  接口想要其实现类实现的功能就是相当于<strong>一个拥有 <code>run</code>  方法的 <code>future</code>  接口</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"futuretask\"><a class=\"anchor\" href=\"#futuretask\">#</a> FutureTask</h1>\n<h2 id=\"关键属性\"><a class=\"anchor\" href=\"#关键属性\">#</a> 关键属性</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 内部持有的 callable 任务，运行完毕后置空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 从 get () 中返回的结果或抛出的异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> outcome<span class=\"token punctuation\">;</span> <span class=\"token comment\">// non-volatile, protected by state reads/writes</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 运行 callable 的线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Thread</span> runner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 使用 Treiber 栈保存等待线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">WaitNode</span> waiters<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FutureTask</code>  还有几个属性表示状态</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 任务状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NEW</span>          <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">COMPLETING</span>   <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NORMAL</span>       <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">EXCEPTIONAL</span>  <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANCELLED</span>    <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INTERRUPTING</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INTERRUPTED</span>  <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FutureTask</code>  的状态是非常重要的，这里详细讲一下：</p>\n<ul>\n<li>\n<p><code>state</code>  是 <code>volatile</code>  修饰，确保了其他线程对其修改的可见性。</p>\n</li>\n<li>\n<p>如果任务状态不是 <code>NEW</code> ，就说明任务已经完成了。任务如果处于取消或者中断，也被认定为完成了。</p>\n</li>\n<li>\n<p><code>COMPLETING</code>  和 <code>INTERRUPTING</code>  是中间态，只会<strong>存在短暂时间</strong>。</p>\n</li>\n</ul>\n<p>任务的<strong>初始状态</strong>都是 <code>NEW</code> ，由构造函数保证。</p>\n<p>任务的<strong>终止状态</strong>有 4 种：</p>\n<ul>\n<li><code>NORMAL</code> ：任务正常执行完毕</li>\n<li><code>EXCEPTIONAL</code> ：任务执行过程种发生异常</li>\n<li><code>CANCELLED</code> ：任务被取消</li>\n<li><code>INTERRUPTED</code> ：任务被中断</li>\n</ul>\n<p>任务的<strong>中间状态</strong>有 2 种：</p>\n<ul>\n<li><code>COMPLETING</code> ：正在设置任务结果</li>\n<li><code>INTERRUPTING</code> ：正在中断运行任务的线程</li>\n</ul>\n<p>尽管状态比较多，但是转换路径是固定的。任务的中间状态是一个瞬态，它非常的短暂。而且<strong>任务的中间态并不代表任务正在执行，而是任务已经执行完了，正在设置最终的返回结果</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/25/7faf75cf765b58ca.jpg\" alt=\"状态转换\" /></p>\n<h2 id=\"内部队列\"><a class=\"anchor\" href=\"#内部队列\">#</a> 内部队列</h2>\n<p><code>FutureTask</code>  中有一个属性是 <code>private volatile WaitNode waiters</code> 。这个类是 <code>FutureTask</code>  的静态内部类，先来看一下这个类的源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WaitNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">WaitNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">WaitNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>队列的实现是一个单向链表，它表示<strong>所有等待任务执行完毕的线程的集合</strong>。这个队列存放的不是执行任务的线程，而是获取结果的线程。我们假设执行任务的线程是线程 <code>t</code> ，获取任务结果的线程 <code>s</code> 。如果 <code>s</code>  在任务完成前就调用 <code>get</code>  方法获取结果，就会在一个等待队列中挂起，直到任务执行完毕被唤醒。</p>\n<p>值得一提的是， <code>FutureTask</code>  中的这个单向链表是当做<strong>栈</strong>来使用的，确切来说是当做 <code>Treiber</code>  栈来使用的，不了解 <code>Treiber</code>  栈是个啥的可以简单的把它当做是一个<strong>线程安全</strong>的栈，它使用 <code>CAS</code>  来完成入栈出栈操作 (想进一步了解的话可以看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjQ2MzMzMA==\">这篇文章</span>)。<strong>同一时刻可能有多个线程都在获取任务的执行结果</strong>，如果任务还在执行过程中，则这些线程就要被包装成 <code>WaitNode</code>  扔到 <code>Treiber</code>  栈的栈顶，即完成入栈操作，这样就有可能出现多个线程同时入栈的情况，因此需要使用 CAS 操作保证入栈的线程安全，对于出栈的情况也是同理。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/25/e03943daf8f237ea.jpg\" alt=\"队列\" /></p>\n<h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callable <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// ensure visibility of callable</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// ensure visibility of callable</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终所做的事情其实就是两个：初始化 <code>callable</code>  和状态 <code>state</code> ，如果不需要返回值 <code>result</code>  可以传 <code>null</code> 。我们顺便看一下 <code>Executors.callable()</code>  方法，</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 把 Runnable 转换成 Callable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RunnableAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里采用的是适配器模式，调用 <code>RunnableAdapter&lt;T&gt;(task, result)</code>  方法来适配，关于适配器模式，<a href=\"https://cecilia.cool/2022/08/24/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B-%E9%80%82%E9%85%8D%E5%99%A8/\">参考文章</a>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">RunnableAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>task <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-run\"><a class=\"anchor\" href=\"#核心方法-run\">#</a> 核心方法 - run ()</h2>\n<p>在 <code>new</code>  了一个 <code>FutureTask</code>  对象之后，接下来就是在另一个线程中执行这个 <code>Task</code> , 无论是通过直接 <code>new</code>  一个 <code>Thread</code>  还是通过线程池，执行的都是 <code>run()</code>  方法，接下来就看看 <code>run()</code>  方法的实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果不是新建任务或者 CAS 替换失败，函数执行结束</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 此处 CAS 是将 runnner 设置为当前线程，在此之前 runner 都是 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> <span class=\"token constant\">NEW</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">!</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> runnerOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                     <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> state <span class=\"token operator\">==</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">boolean</span> ran<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                result <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                ran <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                ran <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">setException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置执行结果</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        runner <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 在执行过程中被中断了，需要处理中断逻辑</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> <span class=\"token constant\">INTERRUPTING</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">handlePossibleCancellationInterrupt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 处理中断逻辑</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>run</code>  方法出现的其他方法也需要说一下，当 <code>call()</code>  函数执行成功，会通过 <code>set</code>  函数设置结果</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// CAS 更改状态 NEW --> COMPLETING</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置 FutureTask 属性 outcome 为 v，其实就是设置返回结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        outcome <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// final state</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">finishCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行完毕，唤醒等待线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>唤醒等待线程的 <code>finishCompletion</code>  源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finishCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// assert state > COMPLETING;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitNode</span> q<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> waitersOffset<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 移除等待线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 自旋遍历等待线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    q<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 唤醒等待线程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">WaitNode</span> next <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unlink to help gc</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                q <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 任务完成后调用函数，自定义扩展</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    callable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// to reduce footprint</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果在 <code>run</code>  期间发生中断，就会进入中断的处理逻辑</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handlePossibleCancellationInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 在中断者中断线程之前可能会延迟，所以我们只需要让出 CPU 时间片自旋等待</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">INTERRUPTING</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> <span class=\"token constant\">INTERRUPTING</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wait out pending interrupt</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-get\"><a class=\"anchor\" href=\"#核心方法-get\">#</a> 核心方法 - get ()</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取执行结果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 处于未完成状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token function\">awaitDone</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 该方法之后会讲到，0L 表示无限等待</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取执行结果或抛出执行期间的异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回执行结果或抛出异常</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">V</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Object</span> x <span class=\"token operator\">=</span> outcome<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// \t获得结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> <span class=\"token constant\">CANCELLED</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancellationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-cancel\"><a class=\"anchor\" href=\"#核心方法-cancel\">#</a> 核心方法 - cancel ()</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果当前 Future 状态为 NEW，根据参数修改 Future 状态为 INTERRUPTING 或 CANCELLED</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> <span class=\"token constant\">NEW</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              mayInterruptIfRunning <span class=\"token operator\">?</span> <span class=\"token constant\">INTERRUPTING</span> <span class=\"token operator\">:</span> <span class=\"token constant\">CANCELLED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mayInterruptIfRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 可以在运行时中断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> runner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    t<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// final state</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">INTERRUPTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">finishCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除并唤醒所有等待线程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-awaitdone\"><a class=\"anchor\" href=\"#核心方法-awaitdone\">#</a> 核心方法 - awaitDone ()</h2>\n<p>在具体分析它的源码之前，有一点我们先特别说明一下， <code>FutureTask</code>  中会涉及到两类线程，一类是执行任务的线程，它只有一个， <code>FutureTask</code>  的 <code>run</code>  方法就由该线程来执行；一类是<strong>获取任务执行结果的线程，它可以有多个，这些线程可以并发执行，每一个线程都是独立的</strong>，都可以调用 <code>get</code>  方法来获取任务的执行结果。如果任务还没有执行完，则这些线程就需要进入 <code>Treiber</code>  栈中挂起，直到任务执行结束，或者等待的线程自身被中断。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">awaitDone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> timed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> nanos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> deadline <span class=\"token operator\">=</span> timed <span class=\"token operator\">?</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nanos <span class=\"token operator\">:</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">WaitNode</span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> queued <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 自旋</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 获取并清除中断状态</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">removeWaiter</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除等待 WaitNode</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 置空等待节点的线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cannot time out yet</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queued<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//CAS 修改 waiter</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            queued <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> waitersOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                                 q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            nanos <span class=\"token operator\">=</span> deadline <span class=\"token operator\">-</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token function\">removeWaiter</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 超时，移除等待节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">parkNanos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞当前线程</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞当前线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该方法的大框架就是自旋，我们先检测当前线程是否被中断了，这是因为 <code>get</code>  方法是阻塞式的，如果等待的任务还没有执行完，则调用 <code>get</code>  方法的线程会被扔到 <code>Treiber</code>  栈中挂起等待，直到任务执行完毕。但是，如果任务迟迟没有执行完毕，则我们也有可能直接中断在 <code>Treiber</code>  栈中的线程，以停止等待。</p>\n<p><code>removeWaiter</code>  的作用是将参数中的 <code>node</code>  从等待队列（即 <code>Treiber</code>  栈）中移除。如果此时线程还没有进入 <code>Treiber</code>  栈，则  <code>q=null</code> ，那么 <code>removeWaiter(q)</code>  啥也不干。在这之后，我们就直接抛出了 <code>InterruptedException</code>  异常。</p>\n<p>之后</p>\n<ul>\n<li>如果任务已经进入终止态（ <code>s &gt; COMPLETING</code> ），我们就直接返回任务的状态；</li>\n<li>否则，如果任务正在设置执行结果（ <code>s == COMPLETING</code> ），我们就让出当前线程的 CPU 资源继续等待</li>\n<li>否则，就说明任务还没有执行，或者任务正在执行过程中，那么这时，如果 q 现在还为 null, 说明当前线程还没有进入等待队列，于是我们新建了一个 <code>WaitNode</code> ,  <code>WaitNode</code>  的构造函数我们之前已经看过了，就是生成了一个记录了当前线程的节点；</li>\n<li>如果 <code>q</code>  不为 <code>null</code> ，说明代表当前线程的 <code>WaitNode</code>  已经被创建出来了，则接下来如果 <code>queued=false</code> ，表示当前线程还没有入队，所以我们执行了:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>queued <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> waitersOffset<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它的等价代码就是</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前节点的 next 指向目前的栈顶元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果栈顶节点在这个过程中没有变，即没有发生并发入栈的情况</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>waiters的值还是上面q<span class=\"token punctuation\">.</span>next所使用的waiters值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    waiters <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改栈顶的指针，指向刚刚入栈的节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后就是一些超时结束等待和自行阻塞的函数。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtZXhlY3V0b3ItRnV0dXJlVGFzay5odG1s\">https://pdai.tech/md/java/thread/java-thread-x-juc-executor-FutureTask.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGluZ2h1LWphdmEvcC84OTkxODI0Lmh0bWw=\">https://www.cnblogs.com/linghu-java/p/8991824.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kNjFkN2ZmYTZhYmM=\">https://www.jianshu.com/p/d61d7ffa6abc</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmd6aG9uZzEyOC9hcnRpY2xlL2RldGFpbHMvODA1NTM3ODk=\">https://blog.csdn.net/xingzhong128/article/details/80553789</span></p>\n<p>冰河《深入理解高并发编程》（第 1 版）</p>\n<p>讲得很详细，强烈推荐：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjU3MjU5MSNpdGVtLTQ=\">https://segmentfault.com/a/1190000016572591#item-4</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/13/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0A(Executor%E6%A1%86%E6%9E%B6)/",
            "url": "https://cecilia.cool/2023/01/13/Java/Concurrency/JUC-%E7%BA%BF%E7%A8%8B%E6%B1%A0A(Executor%E6%A1%86%E6%9E%B6)/",
            "title": "JUC-线程池A(Executor框架)",
            "date_published": "2023-01-13T14:18:16.000Z",
            "content_html": "<h1 id=\"executor框架\"><a class=\"anchor\" href=\"#executor框架\">#</a> Executor 框架</h1>\n<p>Java 线程创建和销毁需要一定开销，池化技术避免了频繁的创建和销毁，通过向线程池传入<strong>任务</strong>重复利用线程。Java 的线程既是工作单元，也是执行机制。JDK1.5 开始将工作单元和执行机制分开，工作单元是 <code>Runnable</code>  和 <code>Callable</code> ，执行机制由 <code>Executor</code>  框架提供。</p>\n<p><code>Executor</code>  框架主要由三部分组成：</p>\n<ul>\n<li>任务：任务需要实现 <code>Runnable</code>  或 <code>Callable</code> 。</li>\n<li>任务的执行： <code>Executor</code>  和 <code>ExecutorService</code>  接口。</li>\n<li>异步计算的结果：接口 <code>Future</code>  和实现该接口的 <code>FutureTask</code>  类</li>\n</ul>\n<p><code>Executor</code>  框架形成的<strong>两级调度模型</strong>，上层，Java 多线程程序将应用分解为多个任务，使用用户级的调度器（ <code>Executor</code>  框架）将任务映射为固定数量的线程；底层，操作系统将线程映射到硬件处理器上。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/15/0fc50fe767c1dbe5.jpg\" alt=\"\" /></p>\n<p>整个执行流程如下：</p>\n<p>主线程创建实现 <code>Runnable</code>  或 <code>Callable</code>  接口的任务对象。 <code>Executors</code>  工具类可以把 <code>Runnable</code>  封装成 <code>Callable</code>  对象（ <code>Executors.callable(Runnable task)</code>  或 <code>Executors.callable(Runnable task, Object resule)</code> ）。然后将任务对象交给 <code>ExecutorService</code>  执行（ <code>ExecutorService.submit(Runnable task/Callable&lt;T) task</code> ）。 <code>ExecutorService</code>  会返回一个实现 <code>Future</code>  接口的对象（JDK8 是 <code>FutureTask</code>  对象）。最后主线程执行 <code>FutureTask.get()</code>  等待任务执行完成。</p>\n<h2 id=\"executor\"><a class=\"anchor\" href=\"#executor\">#</a> Executor</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>Executor</code>  接口提供一种将任务提交从任务运行分离开来的方法</strong>。通常使用  <code>Executor</code>  而不是显式地创建线程。</p>\n<p>一般来说，任务提交给 <code>Excutor</code> ，任务不会在提交线程中运行，而是交给其他线程</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPerTaskExecutor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是 <code>Excutor</code>  也不是严格异步，最简单的情况下， <code>Excutor</code>  可以在调用者线程中立即运行提交的任务</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectExecutor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        r<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实就是看实现类如何编写代码。<strong>Executor</strong> 的主要作用：提供了一种显示创建线程的方式。</p>\n<ul>\n<li><code>JDK1.5</code>  之前的方式： <code>Thread</code>  +  <code>Runnable</code></li>\n<li><code>Executor</code>  提供的的方式： <code>Executor</code>  +  <code>Runnable</code></li>\n</ul>\n<p>相关类结构</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/30/d1bcfa7989f8d9ea.jpg\" alt=\" \" /></p>\n<h1 id=\"executorservice\"><a class=\"anchor\" href=\"#executorservice\">#</a> ExecutorService</h1>\n<p><code>ExecutorService</code>  继承自 <code>Executor</code>  接口，<strong> <code>ExecutorService</code>  提供了管理终止的方法</strong>，以及可为跟踪一个或多个异步任务执行状况而生成  <code>Future</code>  的方法。 可以关闭  <code>ExecutorService</code> ，这将导致其停止接受新任务。关闭后，执行程序将最后终止，这时没有任务在执行，也没有任务在等待执行，并且无法提交新任务。</p>\n<p>详细讲解就是：</p>\n<ul>\n<li><strong>ExecutorService 接口</strong>是一个<strong>执行器</strong>，它可以终止任务。</li>\n<li><strong>ExecutorService 接口</strong>还提供了返回<strong> Future 接口</strong>的方法，这个方法可以用于追踪一个或多个异步任务的执行情况。</li>\n<li><strong>ExecutorService</strong> 可以手动关闭，这种操作会导致它拒绝新的任务。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不再接受新任务，允许之前已经提交的方法执行完毕，然后再关闭执行器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 阻止正在等待的任务开启，并且会试图停止正在执行的任务，然后关闭执行器。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 提交方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从类关系图可以看出， <code>ExecutorService</code>  扩展了 <code>Executor</code>  的功能，<strong>提供的功能逐渐向线程池靠近</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//newCachedThreadPool 就是一个线程池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// ExecutorService 通过 submit 提交任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- ExecutorService begin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- ExecutorService end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- ExecutorService is interrupted.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其他重要方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在线程池服务执行 shutdown () 或者 shutdownNow () 方法之后，所有的任务是否已经完成</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果没有执行 shutdown () 或者 shutdownNow () 方法，则永远返回 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 阻塞等待所有的任务终止</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果等待时间超时，则返回 false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 如果当前线程被 interrupt，则抛出 InterruptedException 异常</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果线程池了执行 shutdown () 或者 shutdownNow () 方法，并且所有的任务都已经完成，则返回 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 如果线程池未执行 shutdown () 或者 shutdownNow () 方法，则永远返回 false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"scheduledexecutorservice\"><a class=\"anchor\" href=\"#scheduledexecutorservice\">#</a> ScheduledExecutorService</h1>\n<p>从 <code>Scheduled</code>  可以看出与定时有关。可以在<strong>给定延时</strong>之后调度任务，也可以根据指定的周期调度任务。</p>\n<ul>\n<li><strong>schedule () 方法</strong>可以创建含有<strong>延时 (delays)<strong> 变量的任务，然后返回一个可以用于</strong>取消</strong>或<strong>检查运行状态</strong>的<strong> Future 对象</strong>。如果 <code>delays&lt;=0</code> ，则会立即执行。</li>\n<li><strong>scheduleAtFixedRate () 方法</strong>和<strong> scheduleWithFixedDelay () 方法</strong>可以创建并运行<strong>定期运行</strong>的任务。</li>\n</ul>\n<p>详细方法说明：</p>\n<p>1. <code>schedule(Runnable command,long delay, TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (delay) 之后，运行 Runnable 任务。</li>\n<li>此任务只运行一次。</li>\n</ul>\n<p>2. <code>schedule(Callable callable,long delay, TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (delay) 之后，运行 Callable 任务。</li>\n<li>此任务只运行一次。</li>\n</ul>\n<p>3. <code>scheduleWithFixedDelay(Runnable command,long initialDelay,long delay,TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (initialDelay) 之后，开始周期性的运行 Runnable 任务。</li>\n<li>周期性：上一次任务执行完成之后，等待一段时间 (delay)，然后开始下一次任务。</li>\n</ul>\n<p>4. <code>scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (initialDelay) 之后，开始周期性的运行 Runnable 任务。</li>\n<li>周期性：每过一段时间 (period)，就开始运行一次 Runnable 任务。</li>\n<li>如果任务的执行时间大于等待周期 (period)：上一次任务执行完成之后，立即开始下一次任务。也就是说：每过一段时间 (任务执行时间)，就开始运行一次 Runnable 任务。</li>\n</ul>\n<h1 id=\"abstractexecutorservice\"><a class=\"anchor\" href=\"#abstractexecutorservice\">#</a> AbstractExecutorService</h1>\n<p><code>AbstractExecutorService</code>  继承自 <code>ExecutorService</code>  接口，其提供  <code>ExecutorService</code>  执行方法的默认实现。此类使用  <code>newTaskFor()</code>  返回的 RunnableFuture 实现  <code>submit</code> 、 <code>invokeAny</code>  和  <code>invokeAll</code>  方法，默认情况下， <code>RunnableFuture</code>  是此包中提供的  <code>FutureTask</code>  类。</p>\n<p><code>invokeAny()</code>  是调用<strong> newTaskFor () 方法对任务进行了包装为 RunnableFuture 对象</strong>，然后调用了<strong>本对象的 execute () 方法提交任务</strong>，并返回异步计算结果对象。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtb3ZlcnZpZXcuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-juc-overview.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmNoYW81MjcyL2FydGljbGUvZGV0YWlscy83OTgyOTQwNw==\">https://blog.csdn.net/hanchao5272/article/details/79829407</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmNoYW81MjcyL2FydGljbGUvZGV0YWlscy83OTgzMDI0NQ==\">https://blog.csdn.net/hanchao5272/article/details/79830245</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmNoYW81MjcyL2FydGljbGUvZGV0YWlscy83OTgzNDc0NA==\">https://blog.csdn.net/hanchao5272/article/details/79834744</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NDE4YmVkZDUyMGY=\">https://www.jianshu.com/p/7418bedd520f</span></p>\n<p>《并发编程的艺术》第 10 章</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/11/Java/Concurrency/JUC-Lock%E5%8C%85C(%E4%B8%A4%E6%8A%8A%E9%94%81)/",
            "url": "https://cecilia.cool/2023/01/11/Java/Concurrency/JUC-Lock%E5%8C%85C(%E4%B8%A4%E6%8A%8A%E9%94%81)/",
            "title": "JUC-Lock包C(两把锁)",
            "date_published": "2023-01-11T14:54:31.000Z",
            "content_html": "<h1 id=\"reentrantlock\"><a class=\"anchor\" href=\"#reentrantlock\">#</a> ReentrantLock</h1>\n<p><code>Reentrantlock</code>  是可重入锁，内部实现了公平锁，也实现了非公平锁。</p>\n<p>其实之前讲解 <code>AQS</code>  中实现的自定义锁就是一个可重入非公平锁，只不过 <code>ReentrantLock</code>  内部实现了公平与非公平两种锁。</p>\n<p>一个新线程调用 <code>tryAcquire</code>  可以直接抢锁，而不需要管阻塞队列中是否有其他线程等待拿锁。这就是非公平的。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/17/1c541052a7533ea7.png\" alt=\"image-20220817141354041\" /></p>\n<p><code>ReentrantLock</code>  的<strong>公平</strong>实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> nextc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> acquires<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>公平锁在 <code>c==0</code>  时加上了对阻塞队列中线程的检查，也就是 <code>hasQueuedPredecessors()</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Node</span> h <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Node</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> h <span class=\"token operator\">!=</span> t <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> h<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">!=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个方法必须要适用于两种线程：</p>\n<ul>\n<li>被唤醒的 <code>head</code>  的后继节点：此时在 <code>acquireQueued</code>  函数中会先调用 <code>tryAcquire</code>  再将节点设为头节点。所以此时该节点的线程调用 <code>hasQueuedPredecessors</code>  返回 <code>false</code> ，可以获得锁。</li>\n<li>刚准备获取锁的新线程：这里的新指的是线程没有在阻塞队列。该线程在调用 <code>hasQueuedPredecessors</code>  时阻塞队列里面的节点会发生变化。如果 <code>h == t</code> ，说明队列没有初始化或者没有阻塞节点，直接返回 <code>false</code> 。能继续执行代码，说明 <code>h!=t</code> ，按理来说 <code>h.next</code>  是不会为 <code>null</code>  的，这个问题其实是出现在初始化队列时发生的：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 第一次入队，没有 dummy node 的存在，需先创建它</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 执行下面语句时发生中断，导致 head!=tail 且 head.next=null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时说明有个没拿到锁的线程正在初始化队列，而对于新的线程来说，要保证公平，就不能拿锁。</p>\n<blockquote>\n<p>读者可能疑惑这种情况，所有阻塞节点都出队了，假设最后一个拿到锁的线程为 t，那么 <code>head</code>  和 <code>tail</code>  都指向 t 的节点。</p>\n</blockquote>\n<p>该函数还有细节：也就是先读取 <code>tail</code>  再读取 <code>head</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Node</span> h <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>还是和之前的初始化队列代码一起看：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/12/3d1967ee95c7b93a.jpg\" alt=\"\" /></p>\n<p>如果先读取的是 <code>head</code> ，就有可能出现 <code>head==null</code>  而 <code>tail != null</code>  的情况。同时为了避免重排序， <code>head</code>  和 <code>tail</code>  都被 <code>volatile</code>  修饰。</p>\n<p>我个人有个问题就是：如果照着 <code>enq</code>  初始化队列时会中断的思路，那么如果刚执行完 <code>tail=head</code>  然后发生中断，那么此时再有线程 <code>s</code>  执行 <code>hhasQueuedPredecessors</code> ，就会判断 <code>h==t</code>  从而使得函数返回 <code>false</code> ，这不就和本意相违背了吗，明明有个线程正在进行入队操作，凭什么抢了对方的锁？</p>\n<p>我看网上大多数关于该函数的讲解都没有提到过，彷佛就是避而不谈，当然也可能是我学艺不精，如果读者有什么见解，劳烦发邮箱：laurensvfevaa@gmail.com</p>\n<h1 id=\"reentrantreadwritelock\"><a class=\"anchor\" href=\"#reentrantreadwritelock\">#</a> ReentrantReadWriteLock</h1>\n<p>该锁提供了两种锁：读锁和写锁。是为了适用于多读少写的场景，因为读操作可以共享，实现逻辑为：</p>\n<ul>\n<li>获取读锁：如果没有线程获取写锁，就可以获取读锁</li>\n<li>获取写锁：既没有读锁，也没有其他线程获得写锁，才可以获取。</li>\n</ul>\n<p>读写锁都是可重入的，和 <code>ReentrantLock</code>  一样，可以选择公平或非公平。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Cache</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">ReentrantReadWriteLock</span> rwl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> r <span class=\"token operator\">=</span> rwl<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> w <span class=\"token operator\">=</span> rwl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        r<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            r<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        w<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"内部结构\"><a class=\"anchor\" href=\"#内部结构\">#</a> 内部结构</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/12/2304dc5d402519f2.jpg\" alt=\"\" /></p>\n<p>在重写 <code>AQS</code>  方法前，需要解决的是，用一个整型同时记录读状态和写状态，一个整型变量维护多种状态的情况，一定要使用 “<strong>按位切割使用</strong>” 这个变量，此处设计为高 16 位记录读，低 16 位记录写</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/20/54200b15d89a0deb.jpg\" alt=\"\" /></p>\n<p>写线程获取锁修改 <code>state</code> ，就是正常的 <code>+1</code> ，可以理解为低 16 位 + 1；而读线程获取锁修改 <code>state</code> ，是高 16 位 + 1，即为每次 s <code>tate+=SHARED_UNIT</code> ，SHARED_UNIT 是一个很大数（ <code>1&lt;&lt;16+1</code> 。</p>\n<p>为了对之后的源码讲解减轻压力，先提前介绍几个函数</p>\n<ul>\n<li><code>sharedCount(int c)</code>  函数：标识占有<strong>读锁</strong>的线程数量</li>\n<li><code>exclusiveCount(int c)</code>  函数：表示占有<strong>写锁</strong>的线程数量</li>\n</ul>\n<h2 id=\"writelock\"><a class=\"anchor\" href=\"#writelock\">#</a> WriteLock</h2>\n<p>写锁是独占锁，所以需要重写的是 <code>tryAcquire</code> （当然，我指的是 Sync 重写该函数）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token function\">exclusiveCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写锁</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 存在读锁或者写锁，可能是自己重入锁</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 存在读锁或者写锁被其他线程占了（w=0 而 c!=0 就表示读锁不为 0）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> current <span class=\"token operator\">!=</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>w <span class=\"token operator\">+</span> <span class=\"token function\">exclusiveCount</span><span class=\"token punctuation\">(</span>acquires<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token constant\">MAX_COUNT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 重入锁，不需要 CAS</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">+</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">writerShouldBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token operator\">!</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>tryAcquire</code>  的大致流程就是，先判断有没有读锁，再判断当前写锁的独占线程是不是自己，最后判断获取的锁线程数量会不会超过 <code>MAX_COUNT</code> 。</p>\n<p>写锁的释放操作与 <code>ReentrantLock</code>  相似，每次释放减少写状态，当写状态为 0 时表示写锁被释放。</p>\n<h2 id=\"readlock\"><a class=\"anchor\" href=\"#readlock\">#</a> ReadLock</h2>\n<p><code>AQS</code>  除了独占模式，还有共享模式，需要重写 <code>tryReleaseShared</code>  和 <code>tryAcquireShared</code>  函数。而若干个线程的读操作就可以在共享模式中执行。</p>\n<p>获取读锁从 Java5 到 Java6 变得复杂了许多，主要是增加了一些新功能，如 <code>getReadHoldCount()</code>  方法，作用是返回当前线程获取读锁的次数，这种状态只能保存在 <code>ThreadLocal</code>  中，由线程自身维护，使得读锁实现变得复杂。此处给出的代码来自《Java 并发编程的艺术》代码清单 5-18，它删减了部分代码，只保留了必要的部分。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> unused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> nextc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nextc <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 高 16 位溢出了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 存在写锁并且当前线程没拿到写锁</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">exclusiveCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> owner <span class=\"token operator\">!=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// CAS 失败可能是其他线程也在拿读锁，再循环直到获得读锁</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>nextc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>读锁的释放，不仅要修改 <code>state</code> ，还要修改计数器，也就是 <code>HoldCounter</code> ，这个待会会讲解。</p>\n<h2 id=\"理解计数器\"><a class=\"anchor\" href=\"#理解计数器\">#</a> 理解计数器</h2>\n<p><code>Sync</code>  还有两个内部类： <code>HoldCounter</code>  和 <code>ThreadLocalHoldCounter</code> 。</p>\n<h3 id=\"holdcounter\"><a class=\"anchor\" href=\"#holdcounter\">#</a> HoldCounter</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// HoldCounter-- 计数器，主要与读锁配套使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HoldCounter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 计数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程的 TID 属性的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> tid <span class=\"token operator\">=</span> <span class=\"token function\">getThreadId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>count</code>  表示某个<strong>读</strong>线程<strong>重入的次数</strong>， <code>tid</code>  表示该线程的 <code>tid</code>  字段的值，该字段可以唯一标识一个线程。</p>\n<h3 id=\"threadlocalholdcounter\"><a class=\"anchor\" href=\"#threadlocalholdcounter\">#</a> ThreadLocalHoldCounter</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 本地线程计数器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalHoldCounter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HoldCounter</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 重写初始化方法，在没有进行 set 的情况下，获取的都是该 HoldCounter 值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HoldCounter</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HoldCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ThreadLocalHoldCounter</code>  重写了 <code>ThreadLocal</code>  的 <code>initialValue</code>  方法，** <code>ThreadLocal</code>  类可以将线程与对象相关联。** 在没有进行 <code>set</code>  的情况下， <code>get</code>  到的均是 <code>initialValue</code>  方法里面生成的那个 <code>HolderCounter</code>  对象。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FubGlhbjUyMy9hcnRpY2xlL2RldGFpbHMvMTA2MTczODYw\">https://blog.csdn.net/anlian523/article/details/106173860</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVlc2Y0NTYvcC81MzgzNjA5Lmh0bWw=\">https://www.cnblogs.com/leesf456/p/5383609.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLVJlZW50cmFudExvY2suaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-lock-ReentrantLock.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLVJlZW50cmFudFJlYWRXcml0ZUxvY2suaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-lock-ReentrantReadWriteLock.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9zdGVmYW54ZnkvNTA4MzM5NiNSZWVudHJhbnRSZWFkV3JpdGVMb2NrXzk=\">https://blog.51cto.com/stefanxfy/5083396#ReentrantReadWriteLock_9</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY21zYmxvZ3MuY29tL2FydGljbGUvMTM5MTI5Nzg1MzEwNzg2NzY0OA==\">https://www.cmsblogs.com/article/1391297853107867648</span></p>\n<p>《Java 并发编程的艺术》第 5 章</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/10/Java/Concurrency/JUC-Lock%E5%8C%85B(AQS)/",
            "url": "https://cecilia.cool/2023/01/10/Java/Concurrency/JUC-Lock%E5%8C%85B(AQS)/",
            "title": "JUC-Lock包B(AQS)",
            "date_published": "2023-01-10T07:49:19.000Z",
            "content_html": "<h1 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p>在 <code>locks</code>  包下有一个类是 <code>AbstractQueuedSynchronizer</code> ，其简写就是 <code>AQS</code> ， <code>AQS</code>  是一个用来构建锁和同步器的框架，使用 <code>AQS</code>  能简单且高效地构造出应用广泛的大量的同步器。</p>\n<p><code>AQS</code>  是一个提供给用户自定义同步器的简单框架。其内部严格使用先进先出的阻塞队列，并且构造出来的同步器依赖于一个 <code>int</code>  类型的 <code>state</code>  来判断是否有线程占用锁。 <code>AQS</code>  提供独占模式（ <code>exclusive</code> ）和共享模式（ <code>shared</code> ），用户自定义的同步器一般支持一种模式，当然有些同步器两种也支持。</p>\n<p>从本质上说， <code>AQS</code>  实现同步的底层<strong>逻辑</strong>原理和 <code>synchronizd</code>  是一样的，线程拿不到锁就会进入阻塞队列，需要等待某个条件时就会进入等待队列直到被唤醒。拿到锁的线程此时是线程安全的，直到其主动释放锁。当线程释放锁后，会将同步队列中的队首节点唤醒，使其重新竞争锁。当线程从等待队列中被唤醒时，会加入到阻塞队列中，等待重新竞争锁。</p>\n<p><code>AQS</code>  通过让用户重写指定的方法来实现自定义的同步器：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 前两个是独占模式需要重写的方法    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 后两个是共享模式需要重写的方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 判断是否同步只与当前线程保持一致</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继承 <code>AQS</code>  的类应该是非公有的静态内部类，实现的同步器依赖 <code>int state</code>  值判断当前锁是否被占用，这个 <code>state</code>  值代表的含义由用户自己来决定，我们这里用 0 表示没有线程占用锁，1 表示有 1 个线程占用锁，x+1 表示某个线程第 x 次重入这把锁。此次自定义同步器仅支持独占模式。</p>\n<p>外部类期望是实现了 <code>Lock</code>  接口，符合规范：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyReentrantLock</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Sync</span> sync<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sync <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当前状态表示没有线程获取锁</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 获取锁的过程必须是原子的</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">+</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁重入</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token comment\">// 如果拿到锁的线程和当前线程不同</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalMonitorStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 释放锁，反之只是一次简单的重入退出</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConditionObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        sync<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        sync<span class=\"token punctuation\">.</span><span class=\"token function\">acquireInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">tryAcquireSharedNanos</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>unit<span class=\"token punctuation\">.</span><span class=\"token function\">toNanos</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        sync<span class=\"token punctuation\">.</span><span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token keyword\">return</span> sync<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在《Java 并发编程的艺术》第 5 章，代码清单 5-2 给出的例子，其实就是来源于 <code>AQS</code>  类中第 199 行注释中给出的例子（此处仅限于 jdk1.8，其他的我没看过，不清楚），它在重写 <code>tryRelease()</code>  方法中，判断是否抛出 <code>IllegalMonitorStateException</code>  异常是 <code>getState() == 0</code> ，这里其实是有问题的，他无法判断拿到锁的是否是当前线程，释放锁的操作是否是在拿到锁之后。</p>\n<h1 id=\"实现分析\"><a class=\"anchor\" href=\"#实现分析\">#</a> 实现分析</h1>\n<h2 id=\"内部属性\"><a class=\"anchor\" href=\"#内部属性\">#</a> 内部属性</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractOwnableSynchronizer</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// part1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 版本号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7373984972572414691L</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 头节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 尾结点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> tail<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 自旋时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> spinForTimeoutThreshold <span class=\"token operator\">=</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// part2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// Unsafe 类实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//state 内存偏移地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> stateOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//head 内存偏移地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> headOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//state 内存偏移地址</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> tailOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//tail 内存偏移地址</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> waitStatusOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//next 内存偏移地址</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> nextOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 静态初始化块</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            stateOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            headOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tailOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            waitStatusOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitStatus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            nextOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>part1</code>  部分，内部要维护一个 <code>FIFO</code>  的队列，该队列其实是一个<strong>双向</strong>链表，所以 <code>AQS</code>  内部存在 <code>head,tail</code>  两个 <code>Node</code>  节点。 <code>Node</code>  是 <code>AQS</code>  的内部类， <code>AQS</code>  将一个线程封装为 <code>Node</code>  放入队列中。</p>\n<p>然后就是 <code>state</code> ， <code>AQS</code>  提供了三个方法供用户使用， <code>getState(),setState(int),compareAndSetState(int)</code> 。</p>\n<p><strong> <code>part2</code>  部分，因为 <code>AQS</code>  中有很多 <code>CAS</code>  操作，所以必须要提前拿到各个字段在其类中的地址偏移量</strong>。</p>\n<h2 id=\"node内部类\"><a class=\"anchor\" href=\"#node内部类\">#</a> Node 内部类</h2>\n<p>同步队列和等待队列都是使用 <code>Node</code>  作为节点，所以 <code>Node</code>  的主要属性为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 结点状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> waitStatus<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 前驱结点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> prev<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 后继结点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 结点所对应的线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 下一个等待者</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Node</span> nextWaiter<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其他重要的<strong>静态</strong>属性：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 共享模式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> <span class=\"token constant\">SHARED</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 静态变量，在独占模式中，t 线程拿到锁资源，EXCLUSIVE = t</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> <span class=\"token constant\">EXCLUSIVE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 结点状态</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 值为 0，表示当前节点在 sync 队列中，等待着获取锁</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 同步队列中阻塞的线程等待超时或者被中断，需要从同步队列中取消等待</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANCELLED</span> <span class=\"token operator\">=</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 当前节点的后继节点包含的线程需要被唤醒，也就是 unpark</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SIGNAL</span>    <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 当前节点在等待 condition，也就是在 condition 队列 (等待队列) 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CONDITION</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 当前场景下后续的 acquireShared 能够得以执行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATE</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>获取上一个节点的方法 <code>predecessor()</code>  和构造函数：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取前驱结点，若前驱结点为空，抛出异常</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">predecessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NullPointerException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 保存前驱结点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前驱结点为空，抛出异常</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token comment\">// 前驱结点不为空，返回</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 无参构造方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextWaiter <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> waitStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">=</span> waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Node</code>  中封装 <code>Thread</code>  属性的主要目的是，当获取锁的线程要释放锁，唤醒阻塞队列中的节点时，就需要用到被阻塞的线程。因为 <code>AQS</code>  本质上使用的是 <code>LockSupport.park()/unpark(Thread t)</code>  来实现阻塞和唤醒的，所以当需要唤醒队列中的节点时，只需要拿到节点中保存的线程，然后调用 <code>LockSupport.unpark(t)</code>  即可。</p>\n<h2 id=\"同步队列\"><a class=\"anchor\" href=\"#同步队列\">#</a> 同步队列</h2>\n<p>先讲一下双向链表的入队机制，一开始， <code>AQS</code>  的 <code>head,tail</code>  都是 <code>null</code> ，当加入第一个节点时（ <code>addWaiter</code>  方法），会检查 <code>tail==null</code> ，如果是 <code>null</code> ，就说明队列为空，就会初始化队列，让 <code>head,tail</code>  指向 <code>new Node</code> ，此时头节点和尾节点指向同一个，没有实际意义的节点。然后再把要加入的节点加入到 <code>head</code>  后面，接着 <code>tail</code>  指向新加入的节点（ <code>enq</code>  方法实现）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 暂时不用管 mode，addWaiter 是将当前线程加入同步队列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Node</span> pred <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pred <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 尾节点不为空，尝试加入同步队列</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetTail</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 队列没有初始化或者 CAS 失败，进入 enq 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 无限循环，直到节点通过 CAS 加入到队列中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 初始化队列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 新增尾节点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetTail</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                t<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结一下就是： <code>addWaiter</code>  会先尝试一下将节点加入到同步队列中，如果失败，就会进入 <code>enq</code>  函数，不断循环直到节点通过 <code>CAS</code>  加入队列中。同时 <code>enq</code>  还负责初始化队列。</p>\n<h3 id=\"acquireint\"><a class=\"anchor\" href=\"#acquireint\">#</a> acquire(int)</h3>\n<p><code>AQS</code>  中队列是双向链表，一个线程只有在通过 <code>acquire(int arg)</code>  获取资源失败后，才会被包装成 <code>Node</code>  加入队列中，该队列是 <code>FIFO</code>  的。所以我们先看一下 <code>acquire(int arg)</code>  源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span><span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EXCLUSIVE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">selfInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>acquire</code>  会先尝试获取资源，也就是 <code>tryAcquire</code> ，而这个正是<strong>我们需要重写的方法</strong>，以上面的自定义同步器重写的 <code>tryAcquire</code>  为例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当前状态表示没有线程获取锁</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 获取锁的过程必须是原子的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">+</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁重入</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>尝试获取锁失败， <code>tryAcquire</code>  就会返回 <code>false</code> ，然后就会调用 <code>addWaiter(Node.EXCLUSIVE), arg)</code>  方法，我们之前看源码，发现 <code>addWaiter</code>  传入的参数其实并不是当前线程封装的 <code>Node</code> ，参数名是 <code>mode</code> ，我们看一下官方注解：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * Creates and enqueues node for current thread and given mode.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @return the new node</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>acquire</code>  中传入的是 <code>Node.EXCLUSIVE</code> ，就表示当前节点是独占模式的节点。为什么要这么区分呢？因为有些自定义同步器既可以独占模式，又可以共享模式，而 <code>AQS</code>  只会维护一个同步队列，那么两种模式下的节点都会在同一个队列中，所以需要区分。</p>\n<blockquote>\n<p>如何将节点加入到队列中，最开始已经介绍过了。</p>\n</blockquote>\n<p>当节点加入到队列中后， <code>AQS</code>  让该线程<strong>再做一次尝试获取锁资源</strong>。但是这种尝试是有条件的，因为 <code>AQS</code>  是严格的 <code>FIFO</code> ，所以只有当该线程在同步队列中前一个节点是头节点才允许再次尝试获取资源（头节点 <code>head</code>  指向一个没有任何意义的节点或者<strong>拿到锁的节点</strong>）。只有这样，<strong>才能是公平的</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">boolean</span> failed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">boolean</span> interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">predecessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//node 的前一个节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> head <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 前一个节点是 head 并且获取资源成功</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token function\">setHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 那么 node 就不应该在同步队列中了，设置 node 为 head</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    failed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">return</span> interrupted<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">//shouldParkAfterFailedAcquire 待会介绍，此处默认返回 true 即可</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldParkAfterFailedAcquire</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token function\">parkAndCheckInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>failed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">cancelAcquire</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里需要注意，如果代码执行到 <code>return interrupted;</code> ，那么该线程一定拿到了锁，该函数返回的是 <code>interrupted</code> ，表示线程在运行过程中，<strong>是否有其他线程为该线程打上过中断标记</strong>。</p>\n<p>这里回忆一下， <code>LockSupport.park()</code>  是会被中断标记打断的，但是<strong>不会清空中断标记</strong>，如果是在 <code>park</code>  之前被打上中断标记，则不会进入阻塞。</p>\n<p>为了更加清晰演示，这里展示一段代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            t<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park调用前，此时中断标记为：\"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park调用后，此时中断标记为：\"</span> <span class=\"token operator\">+</span> t<span class=\"token punctuation\">.</span><span class=\"token function\">isInterrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 其实这句都没必要</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 结果：线程 t 不会出现阻塞  </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//park 调用前，此时中断标记为：true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//park 调用后，此时中断标记为：true</span></pre></td></tr></table></figure><p><strong>这就出现了很严重的问题</strong>，如果我希望使用 <code>park</code>  阻塞线程，但线程之前就被打上了中断标记，那无论如何都无法阻塞它，除非将中断标记清空。但是 ** <code>park</code>  不会清空中断标记 **，只能依靠 <code>Thread.interrupted()</code> , 所以 <code>parkAndCheckInterrupt()</code>  的源码如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">parkAndCheckInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 如果之前被打上中断标记，这里 park 就会失败，然后清空中断标记</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>关键点在于，这个中断标记需要恢复吗？</p>\n<p>如果外界某线程并不知道线程 <code>t</code>  在阻塞队列中，而调用了 <code>t.interrupt()</code> ，就会导致 <code>t</code>  从阻塞中恢复或者无法 <code>park</code> ，线程 <code>t</code>  都会从从 <code>parkAndCheckInterrupt()</code>  中的 <code>return</code>  继续执行。因为中断标记被清空了，所以返回 <code>true</code> ，在 <code>acquireQueued()</code>  函数中就会执行 <code>interrupted = true</code> 。直到这个线程的节点终于移动到队首（前一个节点是 <code>head</code> ），然后被释放锁后的线程调用 <code>LockSupport.unpark()</code>  唤醒，在第一个 <code>if</code>  中拿到锁资源然后 <code>return interrupted</code> 。最终 <code>acquire()</code>  函数会根据返回值决定是否为当前线程打上中断标记。</p>\n<p>为什么要这么大费周章，主要就是因为 <code>park</code>  会响应中断标记，而外界调用 <code>t.interrupt()</code>  的线程并不知道这个线程处于阻塞状态，它只是希望这个线程被打上中断标记并在一定时机根据这个标记停止某些工作，所以 <code>AQS</code>  理应为这种情况考虑，恢复希望的中断标记。</p>\n<p><code>acquireQueued()</code>  设计的绝妙之处就在于只有第一个 <code>if</code>  返回了，整个循环才会结束，而第二个 <code>if</code>  只是用来记录中断和 <code>park</code>  线程的。</p>\n<p>现在我们再来看一下 <code>shouldParkAfterFailedAcquire</code>  函数，这个函数的主要作用就是，根据前一个节点的状态判断当前节点是否该被 <code>park</code> ，先不看代码，从逻辑上来说，同步队列中的节点有三种状态： <code>signal</code> ， <code>cancelled</code> ， <code>0</code> ，如果说 <code>node</code>  前一个节点被取消了阻塞，也就是 <code>cancelled</code> ，那么 <code>node</code>  就应该此时将其从队列中删除。如果前一个节点状态是 <code>signal</code> ，那么 <code>node</code>  可以被阻塞，因为现在还轮不到 <code>node</code>  来竞争锁，如果发现前一个节点是 <code>0</code> ，那么就应该将其设置为 <code>signal</code> 。</p>\n<p>该函数的设计也十分巧妙，内部涉及到的并发考量其实非常多，但是这里不展开非常详细的探讨。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传入的前一个节点，当前节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldParkAfterFailedAcquire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> pred<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> ws <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//pred 节点的状态为 SIGNAL，SIGNAL 表示该节点的后继节点 (即将) 被阻塞 (通过 park)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">==</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 状态为 CANCELLED，需要从队列中删除</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> pred <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 为 PROPAGATE -3 或者是 0 表示无状态，(为 CONDITION -2 时，表示此节点在 condition queue 中) </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 不能进行 park 操作</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>节点会一直跳过被取消的节点，直到遇到没有取消的节点，然后退出，在外部函数循环一遍再次进入该函数，修改其为 <code>signal</code> ，然后再次退出，直到进入该函数，发现前驱节点状态为 <code>signal</code> ，可以被 <code>park</code>  才会返回 <code>true</code>  从而使线程 <code>park</code> 。</p>\n<h3 id=\"releaseint\"><a class=\"anchor\" href=\"#releaseint\">#</a> release(int)</h3>\n<p>以独占模式释放对象，先看源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 释放成功</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 保存头节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Node</span> h <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> h<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 头节点不为空并且头节点状态不为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">unparkSuccessor</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放头节点的后继结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>tryRelease</code>  需要我们手动重写，在上面自定义同步器的例子中， <code>release</code>  在锁重入时会返回 <code>false</code> 。如果 <code>tryRelease</code>  成功，那么如果头节点不为空并且头节点的状态不为 0，则释放头节点的后继节点。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放后继结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unparkSuccessor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取 node 结点的等待状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> ws <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 状态值小于 0，为 SIGNAL -1 或 CONDITION -2 或 PROPAGATE -3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 比较并且设置结点等待状态，设置为 0，这一步失败了也无所谓</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 获取 node 节点的下一个结点</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Node</span> s <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 下一个结点为空或者下一个节点的等待状态大于 0，即为 CANCELLED</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//s 赋值为空</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 从尾结点开始从后往前开始遍历</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">;</span> t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 找到等待状态小于等于 0 的结点，找到最前的状态小于等于 0 的结点</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 保存结点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                s <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 该结点不为为空，释放许可</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"等待队列\"><a class=\"anchor\" href=\"#等待队列\">#</a> 等待队列</h2>\n<p><code>AQS</code>  中等待队列和同步队列中都是 <code>Node</code>  节点，前一篇文章已经讲了 <code>Condition</code> ， <code>AQS</code>  内部定义了 <code>ConditionObject</code>  来实现 <code>Condition</code>  接口，所以该部分直接将 <code>ConditionObject</code>  的相关函数。</p>\n<h3 id=\"等待\"><a class=\"anchor\" href=\"#等待\">#</a> 等待</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 当前线程加入等待队列</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token function\">addConditionWaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> savedState <span class=\"token operator\">=</span> <span class=\"token function\">fullyRelease</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> interruptMode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 如果该节点还不存在与同步等待队列中，就阻塞掉自己  </span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  \t<span class=\"token comment\">// 这里这样判断的原因是因为 signal 方法会将条件等待队列中的相应节点转移到同步队列中。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isOnSyncQueue</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 完成进入等待队列吗，锁资源释放</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>interruptMode <span class=\"token operator\">=</span> <span class=\"token function\">checkInterruptWhileWaiting</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//acquireQueued 方法只会在成功获取到同步资源之后才会返回，返回就表明成功获取到同步资源</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> savedState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> interruptMode <span class=\"token operator\">!=</span> <span class=\"token constant\">THROW_IE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        interruptMode <span class=\"token operator\">=</span> <span class=\"token constant\">REINTERRUPT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nextWaiter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// clean up if cancelled</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">unlinkCancelledWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interruptMode <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token function\">reportInterruptAfterWait</span><span class=\"token punctuation\">(</span>interruptMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>获取了锁的线程才能调用 <code>await</code> ，而获得了锁的线程在同步队列中就是首节点。并不会将首节点直接加入到等待队列，而是会重新构建一个新的 <code>Node</code>  加入进去。</p>\n<p>又因为阻塞线程使用的还是 <code>park</code> ，所以要在循环中判断是否被唤醒，也就是检查当前线程节点是不是在同步队列中，如果不在，就是被 <code>interrupt()</code>  唤醒的。</p>\n<h3 id=\"唤醒\"><a class=\"anchor\" href=\"#唤醒\">#</a> 唤醒</h3>\n<p>主要是 <code>signal</code>  和 <code>signalAll</code> ，先看源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只有获取锁，才能调用 signal 线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalMonitorStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Node</span> first <span class=\"token operator\">=</span> firstWaiter<span class=\"token punctuation\">;</span><span class=\"token comment\">// 拿到等待队列的头节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">doSignal</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 唤醒头节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSignal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>firstWaiter <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>nextWaiter<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 等待队列头节点向下移动</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        \tlastWaiter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        first<span class=\"token punctuation\">.</span>nextWaiter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要唤醒的节点移出等待队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">transferForSignal</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">=</span> firstWaiter<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 此时 node 已经移出等待队列了，加入同步队列</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">transferForSignal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 这里如果 node 的状态是 CANCELLED，就会失败，node 也就自然而然从队列中删除，等待 GC</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONDITION</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 修改成功，加入同步队列，返回 node 的前驱节点</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> ws <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//ws > 0 是 CANCELLED</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"模板方法模式\"><a class=\"anchor\" href=\"#模板方法模式\">#</a> 模板方法模式</h1>\n<p>同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样 (模板方法模式很经典的一个应用)。 <code>AQS</code>  底层使用模板方法，使用者继承 <code>AbstractQueuedSynchronizer</code>  并重写指定的方法。(这些重写方法很简单，无非是对于共享资源 <code>state</code>  的获取和释放) 将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</p>\n<p>AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 该线程是否正在独占资源。只有用到 condition 才需要去实现它。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 独占方式。尝试获取资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 独占方式。尝试释放资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 共享方式。尝试释放资源，成功则返回 true，失败则返回 false。</span></pre></td></tr></table></figure><p>这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS 类中的其他方法都是 final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。关于模板方法，可以参考这篇文章：<a href=\"https://cecilia.cool/2022/08/07/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/\">行为型 - 模板方法</a>。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p>本篇博客更多的都是我自己的思考和阅读源码的结果，下面的参考给了我指引作用。但是其实到现在，我对 <code>AQS</code>  还有很多的细节很模糊，比如线程释放锁后，想要唤醒一个线程，而即将唤醒时，该线程被设为 <code>cancelled</code>  会发生什么，之类的。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLUFic3RyYWN0UXVldWVkU3luY2hyb25pemVyLmh0bWw=\">https://pdai.tech/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppeWFfYW5hbi9hcnRpY2xlL2RldGFpbHMvMTIyMDA5MjE1\">https://blog.csdn.net/ziya_anan/article/details/122009215</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHhtZnovcC8xNDc1NTkyMC5odG1s\">https://www.cnblogs.com/txmfz/p/14755920.html</span></p>\n<p>《Java 并发编程的艺术》第 5 章</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/06/Java/Concurrency/JUC-Lock%E5%8C%85A(LockSupport)/",
            "url": "https://cecilia.cool/2023/01/06/Java/Concurrency/JUC-Lock%E5%8C%85A(LockSupport)/",
            "title": "JUC-Lock包A(LockSupport)",
            "date_published": "2023-01-06T02:55:52.000Z",
            "content_html": "<h2 id=\"接口设计\"><a class=\"anchor\" href=\"#接口设计\">#</a> 接口设计</h2>\n<p>在讲解操作系统篇的时候，很多 c 语言的伪代码，并没有什么 <code>synchronized</code>  关键字什么的，其上锁 / 解锁的步骤就是 <code>lock/unlock</code> ，方法，等待 / 唤醒也就是 <code>wait/signal</code> ，在 <code>j.u.c</code>  包中也就提供了这样的 <code>API</code> 。</p>\n<h3 id=\"lock\"><a class=\"anchor\" href=\"#lock\">#</a> Lock</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token comment\">// 获取锁，拿不到锁会阻塞，等待其他线程释放锁，获取到锁后返回</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token comment\">// 同上，但是等待过程中会响应中断</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">lockInterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token comment\">// 尝试获取锁，但是不会阻塞，如果能获取到会返回 true，不能返回 false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \t<span class=\"token comment\">// 尝试获取锁，但是可以限定超时时间，如果超出时间还没拿到锁返回 false，否则返回 true，可以响应中断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \t<span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  \t<span class=\"token comment\">// 暂时可以理解为替代传统的 Object 的 wait ()、notify () 等操作的工具</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Condition</span> <span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>j.u.c</code>  同样提供了 <code>Lock</code>  的实现类，比如 <code>ReentrantLock</code> ，甚至你可以使用 <code>AQS</code>  框架自己定义一把锁。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Lock</span> testLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Runnable</span> action <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                testLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 加锁，加锁成功后其他线程如果也要获取锁，会阻塞，等待当前线程释放</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                testLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 解锁，释放锁之后其他线程就可以获取这把锁了（注意在这之前一定得加锁，不然报错）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 等上面两个线程跑完</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"condition\"><a class=\"anchor\" href=\"#condition\">#</a> Condition</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Condition</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token comment\">// 进入到等待状态，但是这里需要调用 Condition 的 signal 或 signalAll 方法进行唤醒，等待状态下是可以响应中断的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \t<span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t<span class=\"token comment\">// 同上，但不响应中断（看名字都能猜到）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  \t<span class=\"token keyword\">void</span> <span class=\"token function\">awaitUninterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token comment\">// 等待指定时间，如果在指定时间（纳秒）内被唤醒，会返回剩余时间，如果超时，会返回 0 或负数，可以响应中断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  \t<span class=\"token keyword\">long</span> <span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> nanosTimeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  \t<span class=\"token comment\">// 等待指定时间（可以指定时间单位），如果等待时间内被唤醒，返回 true，否则返回 false，可以响应中断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \t<span class=\"token keyword\">boolean</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  \t<span class=\"token comment\">// 可以指定一个明确的时间点，如果在时间点之前被唤醒，返回 true，否则返回 false，可以响应中断</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token keyword\">boolean</span> <span class=\"token function\">awaitUntil</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> deadline<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  \t<span class=\"token comment\">// 唤醒一个处于等待状态的线程，注意还得获得锁才能接着运行</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  \t<span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  \t<span class=\"token comment\">// 同上，但是是唤醒所有等待线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  \t<span class=\"token keyword\">void</span> <span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Condition</code>  对象通过 <code>Lock</code>  接口提供的 <code>newCondition</code>  方法获得，也就是的每个 <code>Condition</code>  对象都对应特定地 <code>Lock</code>  对象。</p>\n<p>示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Lock</span> testLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Condition</span> condition <span class=\"token operator\">=</span> testLock<span class=\"token punctuation\">.</span><span class=\"token function\">newCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        testLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 和 synchronized 一样，必须持有锁的情况下才能使用 await</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1进入等待状态！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            condition<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 进入等待状态</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程1等待结束！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        testLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 防止线程 2 先跑</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        testLock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程2开始唤醒其他等待线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        condition<span class=\"token punctuation\">.</span><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 唤醒线程 1，但是此时线程 1 还必须要拿到锁才能继续运行</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程2结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        testLock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 这里释放锁之后，线程 1 就可以拿到锁继续运行了</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"timeunit\"><a class=\"anchor\" href=\"#timeunit\">#</a> TimeUnit</h3>\n<p>这里顺便提一下 <code>TimeUnit</code>  工具类，因为 <code>Condition</code>  可以限时等待，所以可以使用 <code>TimeUnit</code>  来确定时间单位。</p>\n<ul>\n<li><code>condition.await(3,TimeUnit.SECONDS)</code>  限时等待 3 秒。</li>\n<li>支持时间转换： <code>TimeUnit.SECONDS.toMinutes(60)</code> 。</li>\n<li>直接调用等待方法：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"开始等待\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">timedWait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 直接等待 3 秒</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在源码中，本质上还是调用 <code>obj.wait</code> 。</p>\n<ul>\n<li>直接休眠： <code>TimeUnit.SECONDS.sleep(1)</code> 。</li>\n</ul>\n<h2 id=\"locksupport\"><a class=\"anchor\" href=\"#locksupport\">#</a> LockSupport</h2>\n<p><code>LockSupport</code>  提供了 <code>park/unpark</code>  方法用于上锁和解锁， <code>ReentrantLock</code>  的实现就使用了 <code>LockSupport</code></p>\n<h3 id=\"park函数\"><a class=\"anchor\" href=\"#park函数\">#</a> park 函数</h3>\n<p>有两个重载版本</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>；</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> blocker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 设置 Blocker</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">setBlocker</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> blocker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 获取许可</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 重新可运行后再此设置 Blocker</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">setBlocker</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Thread</code>  类有一个变量为 <code>parkBlocker</code> ，对应的就是 <code>LockSupport</code>  的 <code>park</code>  等方法设置进去的阻塞对象。<strong>该参数主要用于问题排查和系统监控，在线程 dump 中会显示该参数的信息，有利于问题定位。</strong></p>\n<p>调用了 <code>park</code>  函数后，会禁用当前线程，除非许可可用。在以下三种情况之一发生之前，当前线程都将处于休眠状态，即下列情况发生时，当前线程会获取许可，可以继续运行：</p>\n<ul>\n<li>其他某个线程将<strong>当前线程</strong>作为目标调用  <code>unpark</code> 。</li>\n<li>其他某个线程<strong>中断</strong>当前线程，即 <code>t.interrupt()</code> 。</li>\n<li>该调用不合逻辑地 (即毫无理由地) 返回。</li>\n</ul>\n<p>还有两个关于限时禁用的函数：</p>\n<ul>\n<li><code>parkNanos(long nanos)</code>  最多等待指定的等待时间</li>\n<li><code>parkUntil(long deadline)</code>  最多等待到指定时间， <code>deadline</code>  是绝对时间。</li>\n</ul>\n<h3 id=\"unpark函数\"><a class=\"anchor\" href=\"#unpark函数\">#</a> unpark 函数</h3>\n<p>如果线程在 park 上受阻塞，则它将解除其阻塞状态。否则，保证下一次调用 park 不会受阻塞。如果给定线程尚未启动，则无法保证此操作有任何效果。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>thread <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 线程为不空</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放该线程许可</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LockSupport</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程开始运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程进入阻塞</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程阻塞结束...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 主线程先休眠两秒，保证另一个线程一定先执行 LockSupport.park ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>main</code>  函数中的 <code>LockSupport.unpark()</code>  一行代码打断点，选择下栏的 Debug-&gt;Layout setting-&gt;Frames 查看 t 线程的状态（WAIT）</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/24/576db05114ca5c7d.png\" alt=\"image-20220724125734871\" /></p>\n<h2 id=\"深入理解\"><a class=\"anchor\" href=\"#深入理解\">#</a> 深入理解</h2>\n<p>park ()/unpark () 底层的原理是 “二元信号量”，你可以把它相像成只有一个许可证的 Semaphore，只不过这个信号量在重复执行 unpark () 的时候也不会再增加许可证，最多只有一个许可证。</p>\n<p><code>LockSuport.park()</code>  只是单独阻塞当前线程，可以被中断或者被其他线程唤醒，因为不存在获取锁，所以 <code>unpark</code>  也就不释放锁， <code>Condition.await()</code>  底层调用了 <code>LockSupport.park</code> （以 AQS 为例），实际上，他在阻塞线程前还干了两件事，一是把当前线程添加到条件队列中，二是 “完全” 释放锁，也就是让 state 状态变量变为 0，然后才是调用 <code>LockSupport.park()</code>  阻塞当前线程。</p>\n<blockquote>\n<p>至于 <code>park</code>  和 <code>sleep</code> ， <code>object.wait</code>  的区别，我觉得比较简单，而且要写的比较多，就不赘述了。</p>\n</blockquote>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2N0czJncSNhNzViOTJiNg==\">https://www.yuque.com/qingkongxiaguang/javase/cts2gq#a75b92b6</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLUxvY2tTdXBwb3J0Lmh0bWw=\">https://pdai.tech/md/java/thread/java-thread-x-lock-LockSupport.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc2V2ZS9wLzE0NTU1NzQwLmh0bWw=\">https://www.cnblogs.com/seve/p/14555740.html</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/05/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6D(ThreadLocal)/",
            "url": "https://cecilia.cool/2023/01/05/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6D(ThreadLocal)/",
            "title": "Java并发机制D(ThreadLocal)",
            "date_published": "2023-01-04T16:00:29.000Z",
            "content_html": "<h1 id=\"静态类\"><a class=\"anchor\" href=\"#静态类\">#</a> 静态类</h1>\n<p>我们先介绍一下<strong>静态类</strong>，这在之后的讲解会用到。静态类只能是内部类，如果外部类使用 <code>static</code>  会报错。</p>\n<p>首先，静态类被 <code>static</code>  修饰，静态代码（方法，属性等）的使用方式不依赖于实例对象。静态类中可以有非静态属性，要使用非静态属性就需要依赖实例对象，而且这个非静态属性并不是所有类共享。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">A</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">A</span> a2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        a1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>a2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Test</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 结果是 0，说明 a1 和 a2 不共享 count</span></pre></td></tr></table></figure><p><strong>静态类不能访问外部类的非静态成员</strong>。</p>\n<h1 id=\"threadlocal简介\"><a class=\"anchor\" href=\"#threadlocal简介\">#</a> ThreadLocal 简介</h1>\n<p><strong>线程安全</strong>的解决思路可以有：</p>\n<ul>\n<li>\n<p>互斥同步： <code>synchronized</code>  和 <code>ReentrantLock</code>  等加锁。</p>\n</li>\n<li>\n<p>非阻塞同步： <code>CAS，AtomicXXX</code>  等硬件实现原子操作。</p>\n</li>\n<li>\n<p>无同步方案：栈封闭，本地存储（ThreadLocal），可重入代码。</p>\n</li>\n</ul>\n<p>本文将会讲解本地存储 --  <code>ThreadLocal</code> 。</p>\n<p><code>ThreadLocal</code>  是一个将在多线程中为每一个线程创建单独的变量副本的类；当使用 <code>ThreadLocal</code>  来维护变量时， <code>ThreadLocal</code>  会为每个线程创建单独的变量副本，避免因多线程操作共享变量而导致的数据不一致的情况。</p>\n<p>先看一下基本的使用，<strong>一定要先看看</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建第一个线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span> threadA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadA：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程A本地变量中的值为：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"threadA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建第二个线程</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Thread</span> threadB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadB：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程B本地变量中的值为：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"threadB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 启动线程 A 和线程 B</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        threadA<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        threadB<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 每次的打印结果可能不一致</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 线程 B 本地变量中的值为：ThreadB：ThreadB</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 线程 A 本地变量中的值为：ThreadA：ThreadA</span></pre></td></tr></table></figure><p>也许你还是没理解 <code>ThreadLocal</code>  到底为我们解决了什么问题，我们以数据库连接为例讲解：</p>\n<p>直接使用 JDBC，需要你通过 <code>DriverManage</code>  手动获取 <code>Connection</code> ，有时为了方便，我们通常将这个行为封装到一个工具类中，每次需要获取一个 <code>connection</code>  时，就去调用这个类的 <code>getConnection</code> ，为了节省资源，我们还将 <code>connection</code>  设为静态的。如果这是单线程的，那自然是没有问题，如果是多线程的话，有些线程还在使用 <code>connection</code>  执行操作，而有的线程却调用 <code>close</code> ，就会出错，如果不是 <code>static</code>  的连接，又会因为频繁创建，销毁 <code>connection</code>  导致服务器压力过大。而 <code>ThreadLocal</code>  就为每一个线程创建了一个 <code>connection</code>  副本，既实现了线程安全，又避免了服务器压力过大。</p>\n<h1 id=\"相关的类\"><a class=\"anchor\" href=\"#相关的类\">#</a> 相关的类</h1>\n<h2 id=\"entry\"><a class=\"anchor\" href=\"#entry\">#</a> Entry</h2>\n<p>该类是 <code>ThreadLocalMap</code>  的内部静态类，它是实际存储单元，也就是说，线程 <code>Thread</code>  将资源存储在 <code>ThreadLocalMap</code>  属性 <code>threadLocals</code>  中，而其实真正存储的是 <code>Entry</code> ，以键值对的形式存储。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以看到， <code>Entry</code>  里面有一个<strong>非静态</strong>属性 <code>Object value</code> ，其实存储的就是资源副本。在上面的例子中， <code>value</code>  其实就是 <code>String</code>  类型，在线程 <code>A</code>  中的值就是： <code>ThreadA：Thread-0</code> ；在线程 <code>B</code>  中的值 i 就是： <code>ThreadB：Thread-1</code> 。</p>\n<p><code>Entry</code>  存储的另一个属性就是 <code>ThreadLocal</code> ，到这我们可以知道 <code>Entry</code>  是以键值对的形式存储资源的 <code>&lt;ThreadLocal,Object&gt;</code> 。所以例子中，从图像来看是这样的。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/22/90d3d2b93ed0f243.jpg\" alt=\"Entry关系图\" /></p>\n<p>查看 <code>ThreadLocalMap</code>  源码可以看到，其实其内部有一个 <code>Entry</code>  数组，查找时是根据哈希码查找的。</p>\n<h2 id=\"threadlocalmap\"><a class=\"anchor\" href=\"#threadlocalmap\">#</a> ThreadLocalMap</h2>\n<p>这是 <code>ThreadLocal</code>  的一个静态内部类，根据其给定的方法可以快速查找当前线程对应的 <code>Entry</code> 。先来看一下其相关属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INITIAL_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span> <span class=\"token comment\">// The next size value at which to resize，Default to 0</span></pre></td></tr></table></figure><p>我们再看一下 <code>ThreadLocalMap</code>  是如何查找 <code>Entry</code>  的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通过 ThreadLocal 的哈希码拿到数组下标</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取对于 Entry</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 处理哈希冲突</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 这里就是当发生哈希冲突，在 table 数组中循环向后移位查找</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getEntryAfterMiss</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后需要强调的是，我们在外部使用的是 <code>ThreadLocal</code>  的 <code>get</code>  和 <code>set</code> （以及 <code>remove</code> ），这些函数的实现其实就是调用其内部类 <code>ThreadLocalMap</code> ，所以 <code>getEntry</code>  接收的参数其实就是其外部类的实例。</p>\n<p>知道其大致结构和使用，剩下的分析方法类似，不再赘述。</p>\n<h1 id=\"threadlocal详解\"><a class=\"anchor\" href=\"#threadlocal详解\">#</a> ThreadLocal 详解</h1>\n<p>已经学习了前面两个内部类的原理，我们这里直接看源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> threadLocals <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得线程 t 的 threadLocals 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocals <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalMap<span class=\"token punctuation\">.</span>Entry</span> e <span class=\"token operator\">=</span> threadLocals<span class=\"token punctuation\">.</span><span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过 ThreadLocal 实例找到值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 线程的 ThreadLocalMap 没有初始化，就会初始化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">setInitialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化值，其实主要是因为 threadLocals==null，该函数要调用 createMap</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> <span class=\"token function\">setInitialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">T</span> value <span class=\"token operator\">=</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 null</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对线程 t 创建 ThreadLocalMap</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里重点提一下 <code>createMap</code>  函数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    t<span class=\"token punctuation\">.</span>threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>静态内部类的一个好处就是，它可以先实例化而不用管外部类是否实例化。静态类的另一个意义就是外部类需要访问内部类而内部类不需要访问外部类。从上面的讲解可以看到， <code>ThreadLocalMap</code>  唯一需要依赖的就是外部类的实例化对象。</p>\n<p>再看一下 <code>set</code>  函数，很简单，此处不再解释。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h1>\n<p>之前我对这些知识的讲解，为了更容易让读者理解，说得比较通俗，为了构建一个系统的知识体系，这里会引用其他博客对整个 <code>ThreadLocal</code>  的讲解。</p>\n<h2 id=\"threadlocalmap对象是什么\"><a class=\"anchor\" href=\"#threadlocalmap对象是什么\">#</a> ThreadLocalMap 对象是什么</h2>\n<p>本质上来讲，它就是一个 <code>Map</code> , 但是这个 <code>ThreadLocalMap</code>  与我们平时见到的 <code>Map</code>  有点不一样</p>\n<ul>\n<li>它没有实现 <code>Map</code>  接口；</li>\n<li>它没有 <code>public</code>  的方法，最多有一个 <code>default</code>  的构造方法，<strong>因为这个 <code>ThreadLocalMap</code>  的方法仅仅在 <code>ThreadLocal</code>  类中调用</strong>，属于静态内部类</li>\n<li>该类仅仅用了一个 <code>Entry</code>  数组来存储 <code>Key</code> ,  <code>Value</code> ;  <code>Entry</code>  并不是链表形式，而是每个 <code>bucket</code>  里面仅仅放一个 <code>Entry</code> ;</li>\n</ul>\n<p>上文讲到查找是与哈希码有关，这里我们可以学习一下 <code>ThreadLocalMap</code>  是怎么处理哈希冲突的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//set 函数 -- 将 & lt;k,v > 插入到数组中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 根据 threshold 可知，table 中一定有 1/3 以上为 null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果该位置的 key 相同，说明之前已经为 key 找到对应的下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//k 为 null，说明之前有 key 占有过，但是被清空了，所以当前 key 可以直接写进去</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">replaceStaleEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 此时还没将 & lt;key,value > 放入 table 中，当前 i 的 Entry 为 null，可以放进去</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 一些移出和扩容操作</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">cleanSomeSlots</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sz <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//nextIndex 函数，也就是出现了哈希冲突，如何找下一个下标 -- 直接加 1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再看一下 <code>get</code>  方法上面已经讲了，此处不再赘述。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC10aHJlYWRsb2NhbC5odG1s\">https://pdai.tech/md/java/thread/java-thread-x-threadlocal.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZraW5nX3dhbmcvYXJ0aWNsZS9kZXRhaWxzLzE0MjI1Mzc5\">https://blog.csdn.net/vking_wang/article/details/14225379</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbW8zLXktNDVfYW81NGI1VDdlejdpQQ==\">https://mp.weixin.qq.com/s/mo3-y-45_ao54b5T7ez7iA</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHR0YmxvZy5jb20vP3A9MzA4Nw==\">https://www.xttblog.com/?p=3087</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dodXQyMDEwaGovYXJ0aWNsZS9kZXRhaWxzLzgxNDEzODg3\">https://blog.csdn.net/whut2010hj/article/details/81413887</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODM5OTc5NQ==\">https://segmentfault.com/a/1190000018399795</span></p>\n<p>冰河《深入理解高并发编程》第 1 版</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/01/02/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6C(JMM)/",
            "url": "https://cecilia.cool/2023/01/02/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6C(JMM)/",
            "title": "Java并发机制C(JMM)",
            "date_published": "2023-01-02T07:50:32.000Z",
            "content_html": "<h1 id=\"java内存模型\"><a class=\"anchor\" href=\"#java内存模型\">#</a> Java 内存模型</h1>\n<p>并发编程中，线程通信一般有两种方式：共享内存和消息传递。Java 并发采用的是共享内存模型，所有实例域，静态域，数组元素都存储在堆内存中，堆内存在线程之间共享。</p>\n<p>每个线程都有一个本地内存，其实这个本地内存是一个抽象概念，它包含了缓存，写缓冲区，寄存器， <code>cache</code>  等，和 <code>volatile</code>  关键字那部分知识类似。线程之间的共享变量存储在主内存中。</p>\n<p>下图为 JMM 抽象结构：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/02/23912ba83bcf2aa0.jpg\" alt=\"\" /></p>\n<blockquote>\n<p><code>JMM</code>  通过控制主内存与每个线程的本地内存之间的交互，提供内存可见性的保证。</p>\n</blockquote>\n<h2 id=\"重排序\"><a class=\"anchor\" href=\"#重排序\">#</a> 重排序</h2>\n<p><strong>编译器</strong>和<strong>处理器</strong>常常会对指令重排序：</p>\n<ul>\n<li>编译器优化重排序：在 Java 语言层面上重新安排语句执行顺序。</li>\n<li>指令级并行重排序：将多条指令重叠执行，如果不存在数据依赖性，处理器可以改变机器指令的执行顺序。</li>\n<li>内存系统重排序</li>\n</ul>\n<p>重排序有时会导致严重的内存可见性问题，比如一个引用还没有初始化就被调用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">toSTring</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 重排序可能导致两个语句调换</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 只是一个不恰当的例子，处理器不会重排序数据依赖的操作:s 依赖 a</span></pre></td></tr></table></figure><blockquote>\n<p><code>JMM</code>  通过插入特定类型的内存屏障来禁止特定类型的处理器 / 编译器重排序来保证内存可见性。</p>\n</blockquote>\n<p>还有一个经典的例子就是：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> b <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// processorA</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// processorB</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">B</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>ab 两个变量没有使用 <code>volatile</code> ，即使被写入也不会立即刷新到主存中，所以可能 A 和 B 变量都读到了 0，所以尽管先执行了 <code>a=1</code> ，但从内存操作顺序来看，是先执行的 <code>A=b</code> ，<strong>这表示处理器 A 内存操作顺序被重排序了</strong>。</p>\n<p>所以 <code>JMM</code>  有时会插入内存屏障来保证内存可见性，对应四种内存屏障（来自《Java 并发编程的艺术》）：</p>\n<table>\n<thead>\n<tr>\n<th>屏障类型</th>\n<th>指令示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>LoadLoad Barriers</td>\n<td>Load1; LoadLoad; Load2</td>\n<td>确保 Load1 数据的装载，之前于 Load2 及所有后续装载指令的装载。</td>\n</tr>\n<tr>\n<td>StoreStore Barriers</td>\n<td>Store1; StoreStore; Store2</td>\n<td>确保 Store1 数据对其他处理器可见（刷新到内存），之前于 Store2 及所有后续存储指令的存储。</td>\n</tr>\n<tr>\n<td>LoadStore Barriers</td>\n<td>Load1; LoadStore; Store2</td>\n<td>确保 Load1 数据装载，之前于 Store2 及所有后续的存储指令刷新到内存。</td>\n</tr>\n<tr>\n<td>StoreLoad Barriers</td>\n<td>Store1; StoreLoad; Load2</td>\n<td>确保 Store1 数据对其他处理器变得可见（指刷新到内存），之前于 Load2 及所有后续装载指令的装载。该屏障会使屏障之前所有的内存访问（存储 / 装载）指令完成后才执行屏障后的内存访问指令。</td>\n</tr>\n</tbody>\n</table>\n<p>StoreLoad Barriers 是一个 “全能型” 的屏障，它同时具有其他三个屏障的效果。现代的多处理器大都支持该屏障（其他类型的屏障不一定被所有处理器支持）。执行该屏障开销会很昂贵，因为当前处理器通常要把写缓冲区中的数据全部刷新到内存中（buffer fully flush）。</p>\n<p>我们再看一个重排序对多线程的影响的例子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 代码改自《Java 并发编程的艺术》第 3 章</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ReorderExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                <span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span>  a<span class=\"token punctuation\">;</span>            <span class=\"token comment\">//4</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            ……</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假设有两个线程 A 和 B，A 首先执行 writer () 方法，随后 B 线程接着执行 reader () 方法。线程 B 在执行操作 4 时，能否看到线程 A 在操作 1 对共享变量 a 的写入？</p>\n<p>答案是：不一定能看到。我们先不考虑任何线程可能会中断的情况，操作 1，2 没有数据依赖，操作 3，4 也没有数据依赖，他们可以被重排序：</p>\n<ol>\n<li>操作 1，2 重排序： <code>flag</code>  先被设为 <code>true</code>  导致操作 3 通过，从而拿到 <code>a = 0</code> 。</li>\n<li>操作 3，4 重排序：操作 4 先拿到 <code>a=0</code> ，相当于执行 <code>tmp = 0*0</code> ，再判断 <code>flag</code>  从而 <code>i=tmp</code> 。</li>\n</ol>\n<blockquote>\n<p>重排序会导致多线程环境下的并发问题。</p>\n</blockquote>\n<p>计算机科学家提出了<strong>顺序一致性模型</strong>，一种理想的理论模型，所有操作都是原子的且对其他线程立即可见，且一个线程的操作必须按照程序的顺序执行。</p>\n<p>而 <code>JMM</code>  并没有提供这种理想化的保证，想要不出现并发问题，就必须对<strong>临界区</strong>加入监视器（锁）：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//reader () 一样的</span></pre></td></tr></table></figure><p><code>JMM</code>  对于未同步的程序，只提供最小安全性：线程执行时读取到的值，要么是之前某个线程写入的值，要么是默认值（0，null，false），JMM 保证线程读操作读取到的值不会无中生有的冒出来。为了实现最小安全性，JVM 在堆上分配对象时，首先会清零内存空间，然后才会在上面分配对象（JVM 内部会同步这两个操作）。因此，在以清零的内存空间（pre-zeroed memory）分配对象时，域的默认初始化已经完成了。</p>\n<p>上述同步代码的变量不需要加上 <code>volatile</code> ，因为 <code>synchronized</code>  也可以保证可见性：<strong>线程在加锁时，先清空本地内存→在主内存拷贝最新变量的副本到本地内存→执行完代码→刷新到主内存中→解锁。</strong></p>\n<h2 id=\"重排序volatile\"><a class=\"anchor\" href=\"#重排序volatile\">#</a> 重排序：volatile</h2>\n<p>之前在关键字篇提到的 <code>volatile</code>  关键字内容只是一部分，是关于 <code>volatile</code>  对于<strong>可见性</strong>的实现，在我们学习 JMM 中我们还需要学习它对<strong>有序性</strong>的实现。</p>\n<p>JMM 采取了保守的策略来禁止重排序：</p>\n<ul>\n<li>在每个 volatile 写操作的前面插入一个 StoreStore 屏障。</li>\n<li>在每个 volatile 写操作的后面插入一个 StoreLoad 屏障，防止上面的 volatile 写与下面可能有的 volatile 读 / 写重排序。</li>\n<li>在每个 volatile 读操作的后面插入一个 LoadLoad 屏障。</li>\n<li>在每个 volatile 读操作的后面插入一个 LoadStore 屏障。</li>\n</ul>\n<p>例子：单例模式的双重检查</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 使用了 volatile</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Singleton</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Singleton</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>singleton<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>singleton <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    singleton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> singleton<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果没有重排序，那么 <code>signleton</code>  可以不加 <code>volatile</code> 。实例化一个对象分 3 个步骤：</p>\n<ul>\n<li>分配内存空间、</li>\n<li>初始化对象</li>\n<li>内存空间地址赋给引用</li>\n</ul>\n<p>但是操作系统可以重排序，所以存在可能导致重排序为：</p>\n<ul>\n<li>分配内存空间</li>\n<li>内存空间地址赋给引用</li>\n<li>初始化对象</li>\n</ul>\n<p>尽管可能性较低，但是当这种情况发生后，就有可能将一个未初始化的对象暴露出来，所以此处需要 <code>volaitle</code>  来禁止重排序。</p>\n<h2 id=\"重排序final\"><a class=\"anchor\" href=\"#重排序final\">#</a> 重排序：final</h2>\n<p>先看一段代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> j</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Demo</code>  如果在使用时，没有被 <code>volatile</code>  修饰，那么在上文内容中，我们可以知道其他线程可能会拿到一个引用不为 <code>null</code> ，但是还没有完全初始化的实例化对象，导致出现错误，而这本质原因在于<strong>变量被重排序到构造函数外面了</strong>。</p>\n<p><code>final</code>  也可以禁止重排序， <code>final</code>  域的重排序规则为：</p>\n<ul>\n<li>构造函数中对 <code>final</code>  域的写入不能和被构造函数的引用赋给一个引用变量进行重排序。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    j <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 其实会在 j=2 与 return 语句间插入 StoreStore 屏障</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Demo</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 假设实例化的地址为 Ox111111 </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 即 d = Ox111111 不能和 j = 2 重排序</span></pre></td></tr></table></figure><ul>\n<li>初次读包含 <code>final</code>  域的对象的引用不能和初次读这个 <code>final</code>  域重排序</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> demo<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 本质是先读 demo 的地址，再读 j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 本质上会在读 j 的指令前加上 LoadLoad 屏障</span></pre></td></tr></table></figure><p>对于第二点，这两个操作是由依赖性的，编译器肯定不会重排序，大部分处理器也不会，只有小部分处理器可能会重排序。</p>\n<p>如果 <code>final</code>  修饰的是一个引用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> j</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        j <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//demo 对 AB 都可见，A 线程执行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>demo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// B 线程执行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>demo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> demo<span class=\"token punctuation\">.</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果说 B 线程拿到了 <code>demo</code> ，通过了 <code>if</code>  语句，此时 <code>demo</code>  一定被初始化了，那么 <code>j</code>  一定也被初始化了。 <code>final</code>  域如果是引用，新增了约束：</p>\n<p>构造函数内对一个 <code>final</code>  引用的对象的写入不能与被构造的函数引用赋给引用变量重排序。</p>\n<blockquote>\n<p>本质上还是保证 <code>final</code>  域不会重排序到构造函数之外。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>《Java 并发编程的艺术》第 3 章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tam1tLmh0bWw=\">https://pdai.tech/md/java/jvm/java-jvm-jmm.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1eXVlYWxpYW4vYXJ0aWNsZS9kZXRhaWxzLzUyNTI1NzI0\">https://blog.csdn.net/guyuealian/article/details/52525724</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1rZXktdm9sYXRpbGUuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-key-volatile.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1rZXktZmluYWwuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-key-final.html</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/28/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6B(%E5%85%B3%E9%94%AE%E5%AD%97)/",
            "url": "https://cecilia.cool/2022/12/28/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6B(%E5%85%B3%E9%94%AE%E5%AD%97)/",
            "title": "Java并发机制B(关键字)",
            "date_published": "2022-12-28T10:16:37.000Z",
            "content_html": "<h2 id=\"volatile关键字\"><a class=\"anchor\" href=\"#volatile关键字\">#</a> volatile 关键字</h2>\n<p>CPU 并不是和内存直接交互，而是和 <code>cache</code>  高速缓存交互，当需要访问一个内存地址时，如果这个地址之前被读到 <code>cache</code>  中，就直接从 <code>cache</code>  中拿，这叫做<strong>缓存命中</strong>。同时，如果想要修改一个数据，而这个数据被读到了 <code>cache</code>  中，处理器则会将这个操作数写回到缓存中，而不是内存中，这叫做<strong>写命中</strong>。</p>\n<p>这也导致，在多处理器中，多个线程各自运行在自己的处理器上，对共享变量各自都在 <code>cache</code>  中有一份副本，某一线程对该变量修改后是写回缓存中，而不是马上写回内存，即使写回内存，其他线程也不会读取新的值（因为自己的 <code>cache</code>  中始终处于缓存命中状态，除非该部分被其他内存地址覆盖）。</p>\n<p><code>volatile</code>  的作用有两个，假设被该关键词修饰的变量为 <code>count</code> ：</p>\n<ol>\n<li><code>count</code>  被某一个线程修改后，会立即写入内存中。</li>\n<li>这个写回操作会使其他 CPU 的 <code>cache</code>  缓存了该内存地址的数据无效。</li>\n</ol>\n<h3 id=\"实现原理\"><a class=\"anchor\" href=\"#实现原理\">#</a> 实现原理</h3>\n<p>被 <code>volatile</code>  修饰的变量在进行写操作时，JVM 会向处理器发送一条 <code>lock</code>  前缀指令，该指令就会让变量所在的缓存行的数据写回到系统内存中。</p>\n<p>在多处理器下，为了保证各个处理器的缓存是一致的，会实现<strong>缓存一致协议（MESI）</strong>：每个处理器通过嗅探总线上传播的数据来检查自己缓存的值是否过期，从而设置自己缓存中的对应的数据为无效状态。</p>\n<p>早期的 <code>lock</code>  前缀会使处理器执行当前指令时产生一个 <code>LOCK#</code> 信号，会对<strong>总线进行锁定</strong>，其他 CPU 对内存的读写请求会被阻塞，直到锁释放，但是开销比较大。后来加锁操作变成了<strong>高速缓存锁</strong>。缓存锁不是指给某一行缓存上锁，而是说<strong>某个 CPU 对缓存数据进行更改时，会通知缓存了该数据的其他 CPU 抛弃缓存的数据或者从内存重新读取。</strong></p>\n<h3 id=\"缓存一致性\"><a class=\"anchor\" href=\"#缓存一致性\">#</a> 缓存一致性</h3>\n<p>缓存是分段的，一个段对应一块存储空间，称之为<strong>缓存行</strong>，是 CPU 缓存中可分配的最小存储单元，通常是 64 字节， LOCK# 因为锁总线效率太低，因此使用了多组缓存。 为了使其行为看起来如同一组缓存那样。因而设计了 缓存一致性协议。 缓存一致性协议有多种，但是日常处理的大多数计算机设备都属于 &quot; <strong>嗅探</strong> &quot; 协议。 <strong>所有内存的传输都发生在一条共享的总线上，而所有的处理器都能看到这条总线。</strong> 缓存本身是独立的，但是内存是共享资源，所有的内存访问都要经过仲裁 (同一个指令周期中，只有一个 CPU 缓存可以读写内存)。 CPU 缓存不仅仅在做内存传输的时候才与总线打交道，而是不停在嗅探总线上发生的数据交换，跟踪其他缓存在做什么。 当一个缓存代表它所属的处理器去读写内存时，其它处理器都会得到通知，它们以此来使自己的缓存保持同步。 只要某个处理器写内存，其它处理器马上知道这块内存在它们的缓存段中已经失效。</p>\n<p>之前也提到过， <code>volatile</code>  不能保证并发安全，多个线程对共享变量进行自增的例子：线程 1 刚刚将 a 的值更新为 100，这时线程 2 可能也已经执行到更新 a 的值这条指令了，<strong>已经刹不住车了</strong>，所以依然会将 a 的值再更新为一次 100。</p>\n<h3 id=\"优化\"><a class=\"anchor\" href=\"#优化\">#</a> 优化</h3>\n<p>在 Java7 中并发包下新增了一个队列集合类 <code>LinkedTransferQueue</code> ，Doug lea 设计这个队列的节点时，用一个类将节点包装起来，再通过加入一些无用的引用 <code>reference</code>  来将包装类扩充到 64 字节大小，下面是我修改后，意思相近的代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 队列代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QNode</span><span class=\"token punctuation\">></span></span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QNode</span><span class=\"token punctuation\">></span></span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Object</span> p0<span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">,</span>p5<span class=\"token punctuation\">,</span>p6<span class=\"token punctuation\">,</span>p7<span class=\"token punctuation\">,</span>p8<span class=\"token punctuation\">,</span>p9<span class=\"token punctuation\">,</span>pa<span class=\"token punctuation\">,</span>pb<span class=\"token punctuation\">,</span>pc<span class=\"token punctuation\">,</span>pd<span class=\"token punctuation\">,</span>pe<span class=\"token punctuation\">;</span><span class=\"token comment\">// 15 个引用，一个引用占 4 字节</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>加入队列中的是 <code>Reference</code> ，这是一个很神奇的事，它将共享变量扩充到了 64 字节。因为在英特尔酷睿 i7 等处理器，缓存行是 64 字节，如果头节点和尾节点加起来都不足 <code>64byte</code> ，那么他们可能会被分配到一个缓存行，当需要入队（修改尾节点）时，就会锁定整个缓存行，导致其他处理器的对应缓存行失效，本来应该只失效尾节点数据，但是此时头节点和尾节点在同一行中，导致头节点也失效。</p>\n<p>将节点大小扩充到 64 字节后，避免了头节点和尾节点在同一缓存行中。</p>\n<h2 id=\"synchronized关键字\"><a class=\"anchor\" href=\"#synchronized关键字\">#</a> synchronized 关键字</h2>\n<p><code>synchronized</code>  是对一个 Java 对象上锁，底层原理是对一个 Java 对象的头部信息进行修改从而记录这个锁对象是否被获取，被哪个线程获取，锁类型（偏向，轻量，重量锁）等信息，因为 Java 对象中有一个很特别的 <code>Class</code>  对象，这也就导致了对象锁和类锁两种区别。</p>\n<h3 id=\"对象锁\"><a class=\"anchor\" href=\"#对象锁\">#</a> 对象锁</h3>\n<p>包括方法锁和同步代码块，因为 <code>synchronized</code>  可以修饰方法，所以有了方法锁的定义，可以理解为整个方法都包含在了同步代码块中。</p>\n<p>对于对象锁，作用范围仅在于某个实例对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Solution</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>test<span class=\"token operator\">::</span><span class=\"token function\">func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@Data</span>\t<span class=\"token comment\">// 使用了 lombok 框架</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码是方法锁的例子，如果要将其改为同步代码块，只需要将 <code>func</code>  方法改为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过引用 <code>this</code>  对象来实现同步代码块的上锁。</p>\n<h3 id=\"类锁\"><a class=\"anchor\" href=\"#类锁\">#</a> 类锁</h3>\n<p>类锁作用域整个类，方法锁用于静态方法，同步・代码块的锁对象为 <code>xxx.class</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Solution</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 实例化对象不能调用静态方法，所以需要通过另一个方法间接使用</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同步代码块此处不再演示，本质上就是获得 <code>Solution</code>  类的 <code>Class</code>  对象锁。</p>\n<p>对象锁和类锁的本质是没有什么区别的，都是将一个 Java 对象作为锁，线程去获取。我并不推荐这样的理解：</p>\n<blockquote>\n<p>对象锁作用于指定的对象，类锁作用域所有对象。</p>\n</blockquote>\n<p>读者需要理解的是，<strong> <code>synchronized</code>  到底需要拿到什么样的锁</strong>。因为 <code>Class</code>  对象全局唯一，所以所有同一个类的实例化对象调用类锁修饰的静态方法 / 同步代码块，都需要去竞争同一个 <code>Class</code>  对象，自然就导致类锁作用于所有实例化对象。</p>\n<h3 id=\"原理分析\"><a class=\"anchor\" href=\"#原理分析\">#</a> 原理分析</h3>\n<p>使用 <code>synchronized</code> ，会在底层字节码文件中产生 <code>Monitorenter</code>  和 <code>Monitorexit</code>  两个指令，对让对象在执行，使其锁计数器<strong>加 1 / 减 1</strong>，<strong>一个对象在同一时间只与一个 <code>monitor</code> （锁）相关联，而一个 monitor 在同一时间只能被一个线程获得</strong>。</p>\n<p>线程尝试获取这个 <code>Monitor</code>  锁时， <code>monitorenter</code>  指令会发生 3 种情况：</p>\n<ul>\n<li>计数器为 0，线程获取锁并将其 + 1，别的线程只能等待释放。</li>\n<li>该线程已经有了锁的所有权，重入锁，计数器加 1。</li>\n<li>等待其他线程释放锁（进入阻塞队列），线程状态变为 <code>BLOCKED</code> 。</li>\n</ul>\n<p>而 <code>monitorexit</code>  指令则是将计数器 - 1，如果之前是重入了，就不需要释放锁，如果计数器变为 0，释放锁。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/01/c60358e73ac37169.jpg\" alt=\"\" /></p>\n<blockquote>\n<p><strong>可重入</strong>一定需要保证单个线程执行时重新进入同一个子程序仍然是安全的。</p>\n</blockquote>\n<h3 id=\"锁的优化\"><a class=\"anchor\" href=\"#锁的优化\">#</a> 锁的优化</h3>\n<p>这种优化是基于一种假设：大部分同步代码一般都处于无锁竞争状态，即单线程执行环境。之前的 <code>monitorenter</code>  和 <code>monitorexit</code>  指令需要依赖底层操作系统的 <code>Mutex Lock</code>  实现，该命令需要将当前线程挂起并从<strong>用户态切换到内核态</strong>，切换的代价非常贵。基于之前优化假设，如果锁一般处于单线程获取锁的情况，也就是大部分时间都<strong>只有同一个线程反复拿到这个锁，释放锁，再次拿锁</strong>。那么每次重新拿锁就会导致状态切换，开销很大。</p>\n<p>所以之后出现了偏向锁，轻量锁来优化 <code>synchronized</code>  的性能。</p>\n<p>还有几个其他的概念：</p>\n<ul>\n<li>锁粗化：减少不必要的紧连在一起的 unlock，lock 操作，将多个连续的锁扩展成一个范围更大的锁。</li>\n<li>锁消除：通过运行时 JIT 编译器的逃逸分析来消除一些没有在当前同步块以外被其他线程共享的数据的锁保护，通过逃逸分析也可以在线程本的 Stack 上进行对象空间的分配 (同时还可以减少 Heap 上的垃圾收集开销)。</li>\n</ul>\n<p>在 jdk1.6 种， <code>synchronized</code>  同步锁一共有四种状态： <code>无锁</code> 、 <code>偏向锁</code> 、 <code>轻量级锁</code> 、 <code>重量级锁</code> ，它会随着竞争情况逐渐升级。锁可以升级但是<strong>不可以降级</strong>，目的是为了提供获取锁和释放锁的效率。</p>\n<blockquote>\n<p>锁膨胀方向： 无锁 → 偏向锁 → 轻量级锁 → 重量级锁</p>\n</blockquote>\n<h4 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h4>\n<p>在操作系统篇也讲到过这个锁的出现，它通过不断地 <code>while</code>  循环 <code>CAS</code>  操作尝试获取锁。自旋锁是最简单的锁，其缺点就是会消耗整个 CPU 时间片，直到拿到了锁。</p>\n<p>有时这样的锁是不能接受的，但是 jdk 引入自旋锁，是因为有时共享数据的锁定状态只会持续很短时间，为了这段时间<strong>挂起，恢复阻塞线程</strong>并不值得，所以完全可以让没有获取到锁的线程在外面等待一会（自旋）。</p>\n<p>自旋锁适用于竞争线程很少的情况下，如果大量线程竞争同一个自旋锁，或者同步代码块执行时间非常长，是不能接受的。所以 JDK 定义自旋锁默认自旋次数为 10 次，还没拿到锁就得去挂起线程。</p>\n<blockquote>\n<p><code>-xx:PreBlockSpin</code>  参数可以修改自旋次数。</p>\n</blockquote>\n<p>在 JDK1.6 引入了<strong>自适应自旋锁</strong>，自旋的时间不再固定了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。</p>\n<h4 id=\"偏向锁\"><a class=\"anchor\" href=\"#偏向锁\">#</a> 偏向锁</h4>\n<p>了解整个 <code>synchronized</code>  的锁膨胀过程，需要了解 <code>HotSpot</code>  虚拟机种对象头的内存布局，对象头存在两部分：</p>\n<ul>\n<li><code>Mark Word</code> ：存储对象自身的运行时数据， <code>HashCode</code> 、 <code>GC Age</code> 、锁标记位、是否为偏向锁。</li>\n<li><code>Klass Point</code> ：存储的是指向方法区对象类型数据的指针，如果对象是数组的话，还会有一个额外的部分用于存储数据的长度。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/01/e514dba9540d23bd.jpg\" alt=\"\" /></p>\n<p>在 jdk1.6 引入了偏向锁，当一个线程访问同步块并获取锁时，会在<strong>对象头</strong>和<strong>线程栈帧</strong>中的锁记录里存储锁偏向的线程 ID，以后该线程在进入和推出同步块时不需要进行 CAS 操作来加锁和解锁。只需要测试一下对象头的 <code>Mark Word</code>  里是否存储着指向当前线程的偏向锁。如果成功，表示线程已经获取到了锁。</p>\n<p>下面是《Java 并发编程的艺术》对偏向锁的解释：</p>\n<p>只有当其他线程尝试获取偏向锁时，持有偏向锁的线程才会释放锁。偏向锁的撤销需要等到 ** 全局安全点 (** 就是当前线程没有正在执行的字节码)。会首先暂停拥有偏向锁的线程，让你后检查持有偏向锁的线程是否活着。如果线程不处于活动状态，直接将对象头设置为无锁状态。如果线程活着，栈帧中的锁记录和对象头要么偏向于其他线程，要么恢复到无锁状态或者标记对象不适合作为偏向锁（升级为轻量锁）。</p>\n<p>偏向锁也可以重入，每次重入，尽管不会再次执行 <code>moniterenter</code> ，但是会在锁计数器 + 1。</p>\n<h4 id=\"轻量锁\"><a class=\"anchor\" href=\"#轻量锁\">#</a> 轻量锁</h4>\n<p>在线程执行同步块之前，JVM 会先在当前线程的栈帧中创建一个名为锁记录 ( <code>Lock Record</code> ) 的空间，用于存储锁对象目前的 <code>Mark Word</code>  的拷贝 (JVM 会将对象头中的 <code>Mark Word</code>  拷贝到锁记录中，官方称为 <code>Displaced Mark Ward</code> )</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/01/e7b5db628ab90811.jpg\" alt=\"\" /></p>\n<p>上图还没有将拷贝存储到 <code>Lock Record</code>  空间。</p>\n<p>CAS 操作将 <code>Mark Word</code>  拷贝到所记录中，同时将 <code>Mark Word</code>  更新为指向 <code>Lock Record</code>  的指针，如果更新成功了，该线程就有了该对象的锁，并且对象的 <code>Mark Word</code>  最后两位更新为<strong> 00</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/01/20cc5748bddc69b8.jpg\" alt=\"\" /></p>\n<p>如果这个更新操作失败，<strong>JVM 会检查当前的 <code>Mark Word</code>  中是否存在指向当前线程的栈帧的 <code>Lock Record</code>  的指针：</strong></p>\n<ul>\n<li>如果有，相当于锁重入，就会再创建一个 <code>Lock Record</code>  作为重入的计数</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/01/37198c41e0eea6e9.jpg\" alt=\"\" /></p>\n<ul>\n<li>没有，说明该锁被其他线程抢占，如果由两条以上的线程竞争同一个锁，就会直接膨胀为重量级锁。</li>\n</ul>\n<p>膨胀过程中，会为锁对象申请一个 <code>Monitor</code>  锁，让 <code>Mark Word</code>  指向 <code>Monitor</code>  地址。</p>\n<p>轻量锁<strong>解锁</strong>时，会使用 CAS 将 <code>Displaced Mark Word</code>  替换回到对象头中，如果成功，则没有发生竞争关系，如果失败，表示当前锁存在竞争关系，膨胀为重量级锁。</p>\n<p>下图来自《Java 并发编程的艺术》：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2023/01/01/078b3563ac71c7b4.jpg\" alt=\"\" /></p>\n<p>从上图可以看到，线程 2 不断自旋获取锁，当自旋次数过长，导致线程 2 挂起不再自旋，此时线程 2 会修改对象头的 <code>Martk Word</code>  指向 <code>Monitor</code>  锁，并阻塞自己，所以线程 1 希望通过 <code>CAS</code>  替换释放锁时，就会失败，此时线程 1 会将指向重量级锁的指针设为空，将原有的锁释放并唤醒线程 2。</p>\n<p>上述对图的解释来自于：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2suY3Nkbi5uZXQvcXVlc3Rpb25zLzQ2NDYyMjc=\">https://ask.csdn.net/questions/4646227</span> 评论区中 2022-11-03 的 **k？？** 网友提出的，我也对自己的疑问也进行了提问。</p>\n<p>作者存疑：</p>\n<p>说实话，我是没搞懂为什么线程 1 在释放轻量锁时会将指针设为空，那还怎么找到 Monitor 对象？</p>\n<p>如果读者有什么高见，劳烦发邮箱：laurensvfevaa@gmail.com 十分感谢</p>\n<blockquote>\n<p>轻量锁的一个很大的特征就是其他线程会自旋等待一段时间，而重量锁会直接阻塞。</p>\n</blockquote>\n<h2 id=\"final关键字\"><a class=\"anchor\" href=\"#final关键字\">#</a> final 关键字</h2>\n<p><code>final</code>  关键字有很多知识都和 <code>JMM</code>  有关，所以本部分不会涉及太多相关内容，到了 <code>JMM</code>  篇再详细说明。</p>\n<h3 id=\"基础使用\"><a class=\"anchor\" href=\"#基础使用\">#</a> 基础使用</h3>\n<ul>\n<li>修饰类：类不能被继承， <code>final</code>  类所有方法都是隐式为 <code>final</code> ，所以 <code>final</code>  类中的方法不需要再加 <code>final</code> 。</li>\n</ul>\n<p>如果想要扩展 <code>final</code> ，要用到的设计模式为<strong>组合</strong>，一般想要扩展一个类，就是继承 / 实现和组合。</p>\n<ul>\n<li>修饰方法：不能被重写，继承，但是可以重载， <code>private</code>  方法是隐式的 <code>final</code> 。</li>\n<li>修饰<strong>参数</strong>：无法更改参数引用所指的对象</li>\n<li>修饰<strong>变量</strong>：被 <code>final</code>  修饰的变量可以不是编译器常量，只是初始化后无法被更改。Java 允许允许生产 <code>blank final</code>  也就是空白 <code>final</code> ，被声明为 <code>final</code>  但又没有给定值的字段，但是<strong>必须在该字段被使用之前被赋值</strong>。</li>\n</ul>\n<p>如果 <code>final</code>  修饰的是一个指向对象的引用，那么该引用只是不能指向其他对象，但是当前对象的成员变量仍然可以被修改。</p>\n<p>一个有趣的现象就是：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">byte</span> b1<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">byte</span> b2<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">byte</span> b3<span class=\"token operator\">=</span>b1<span class=\"token operator\">+</span>b2<span class=\"token punctuation\">;</span><span class=\"token comment\">// 会出错，运算时 java 虚拟机对它进行了转换，结果导致把一个 int 赋值给 byte</span></pre></td></tr></table></figure><p>如果用 <code>final</code>  修饰 <code>b1</code> , <code>b2</code> ，就不会强转。</p>\n<h3 id=\"重排序规则\"><a class=\"anchor\" href=\"#重排序规则\">#</a> 重排序规则</h3>\n<ul>\n<li>基本数据类型:\n<ul>\n<li><code>final域写</code> ：禁止 <code>final</code>  域写与构造方法重排序，即禁止 <code>final</code>  域写重排序到构造方法之外，从而保证该对象对所有线程可见时，该对象的 <code>final</code>  域全部已经初始化过。</li>\n<li><code>final域读</code> ：禁止初次读对象的引用与读该对象包含的 <code>final</code>  域的重排序。</li>\n</ul>\n</li>\n<li>引用数据类型：\n<ul>\n<li><code>额外增加约束</code> ：禁止在构造函数对一个 <code>final</code>  修饰的对象的成员域的写入与随后将这个被构造的对象的引用赋值给引用变量 重排序、</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>更多细节会留到 <code>JMM</code>  篇讲解。</p>\n</blockquote>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<blockquote>\n<p>《Java 并发编程的艺术》第二章</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1rZXktdm9sYXRpbGUuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-key-volatile.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1rZXktc3luY2hyb25pemVkLmh0bWw=\">https://pdai.tech/md/java/thread/java-thread-x-key-synchronized.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2suY3Nkbi5uZXQvcXVlc3Rpb25zLzQ2NDYyMjc=\">https://ask.csdn.net/questions/4646227</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1rZXktZmluYWwuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-key-final.html</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/22/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6A(%E7%BA%BF%E7%A8%8B)/",
            "url": "https://cecilia.cool/2022/12/22/Java/Concurrency/Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6A(%E7%BA%BF%E7%A8%8B)/",
            "title": "Java并发机制A(线程)",
            "date_published": "2022-12-22T03:44:20.000Z",
            "content_html": "<h1 id=\"线程\"><a class=\"anchor\" href=\"#线程\">#</a> 线程</h1>\n<p>本篇讲解 Java 的线程基础。</p>\n<p>谈起线程的状态（生命周期），操作系统层面上和 Java 层面上是不同的：</p>\n<ul>\n<li>\n<p>操作系统：初始状态（NEW），可运行状态（READY），运行状态（RUNNING），等待（WAITING），终止状态（TERMINATED）。</p>\n</li>\n<li>\n<p>Java：新建（New），可运行（Runable），阻塞（Blocking），无限等待（Waiting），限时等待（Timed Waiting），死亡（Terminated）。</p>\n</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/12/22/db994fe0c48b9983.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>在操作系统篇中，我们提到的拿不到锁休眠（阻塞），等待条件变量进入等待队列休眠，在操作系统层面都是 WAITING。</p>\n</blockquote>\n<p>注意：</p>\n<ul>\n<li>Java 没有 Running 状态，Runnable 就包括了 Running 和 Ready 以及部分 wait。</li>\n<li>阻塞和等待的区别在于，阻塞是被动的，线程拿不到锁就会阻塞，但是等待是主动的，通过调用 <code>sleep</code>  或 <code>wait</code>  实现。</li>\n</ul>\n<h2 id=\"传入任务\"><a class=\"anchor\" href=\"#传入任务\">#</a> 传入任务</h2>\n<p>首先要构建一个线程，在 <code>Thread</code>  中的 <code>init(..)</code>  方法，会将<strong>当前线程设置为父线程</strong>，新线程是由父线程进行空间分配，子线程继承了父线程是否为 <code>Daemon</code> ，优先级，可继承的 <code>ThreadLocal</code>  等。</p>\n<p>在创建线程对象时，可以传入 <code>Runnable</code>  或者 <code>Callable</code> ，或者继承 <code>Thread</code> ，重写 <code>run</code>  方法。但是实现接口比继承好得多。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"基础机制\"><a class=\"anchor\" href=\"#基础机制\">#</a> 基础机制</h2>\n<ul>\n<li>\n<p><strong>守护线程</strong>：当所有非守护线程结束后，程序也就会终止，同时杀死所有守护线程。使用 <code>setDaemon(true)</code>  将线程设置为守护线程。如果守护线程中有 <code>finally</code> ，并且在执行 <code>finally</code>  前所有的非守护线程都结束了，虚拟机就会停止，<strong>不会执行 <code>finally</code>  语句</strong>。</p>\n</li>\n<li>\n<p><code>sleep()</code> ：休眠当前线程，如果该线程持有锁，<strong>不会释放锁</strong>。</p>\n</li>\n<li>\n<p><code>yield()</code> ：如果当前线程已经完成生命周期最重要的部分，可以切换给其他线程执行。该方法只是给调度器一个建议。</p>\n</li>\n</ul>\n<h3 id=\"线程中断\"><a class=\"anchor\" href=\"#线程中断\">#</a> 线程中断</h3>\n<p><strong>中断</strong>理解为线程的一个<strong>标识位</strong>属性，表示一个运行的线程是否被其他线程进行了中断操作，打上中断标识不会立即中断线程，而是需要线程自己来处理这个中断标识。</p>\n<p>一个线程执行完毕会自动结束，如果运行过程中<strong>发生异常</strong>也会提前结束。有时在外部我们就是希望中断某一个线程，在 Java 中专门设计了一个 <code>InterruptedException</code>  来提前结束线程。</p>\n<p>如果线程处于阻塞，限期等待或者无限期等待，此时调用 <code>interrupt()</code>  就会触发异常从而结束线程。但是不能中断<strong> I/O 阻塞</strong>和 <code>synchronized</code>  锁阻塞。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">8000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Thread run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>thread1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>thread1<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当一个线程内部是一个循环，且没有执行 <code>sleep</code>  等会抛出中断异常的操作，而我们又希望在外部控制线程中断，可以使用 <code>interrupted()</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这种设计限制还是比较大的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// ..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：</p>\n<ul>\n<li>\n<p><code>sleep()</code>  如果要抛出中断异常，会先清空中断标记，再抛出异常。</p>\n</li>\n<li>\n<p><code>interrupted</code>  会清空中断标记，而 <code>isInterrupted()</code>  不会。</p>\n</li>\n<li>\n<p>如果一个线程处于终结状态， <code>isInterrupted</code>  也返回 <code>false</code> 。</p>\n</li>\n</ul>\n<h3 id=\"线程通信\"><a class=\"anchor\" href=\"#线程通信\">#</a> 线程通信</h3>\n<ul>\n<li>使用 <code>volatile</code>  和 <code>synchronized</code>  两个关键字，前者保证共享变量的实时更新，保证了可见性，底层原理是总线嗅探机制；后者可以实现同步代码块，保证同一时间只能有一个线程处于同步代码块，保证线程对变量访问的可见性和排他性。</li>\n</ul>\n<blockquote>\n<p>需要注意的是，之前的例子，多个线程将 <code>count</code>  变量累加 10000，不能用 <code>volatile</code>  修饰 <code>count</code>  来保证线程安全。该关键字不保证线程安全。假设一下，在多 CPU 里面，已经有两个线程将要同时执行关于 <code>count</code>  的写入指令， <code>volatile</code>  对此是无法避免的。</p>\n</blockquote>\n<ul>\n<li>还有一种通信方式就是等待 / 通知机制：该部分类似于之前讲的条件变量那部分的内容，父线程等待子线程结果（<strong>Java 中也可以使用 <code>join</code>  方法</strong>）。\n<ul>\n<li><code>wait()</code> ：进入<strong>等待队列</strong>，线程放弃锁和时间片，满足某条件，才会被唤醒（ <code>notify/notifyAll</code> ）。在之前的操作系统篇提到，<strong> <code>wait</code>  应该在获得锁后才允许被调用</strong>。 <code>wait()</code>  还有两个重载函数，传入参数为等待时间。</li>\n<li><code>notify/notifyAll()</code> ：通知等待队列中的线程从 <code>wait</code>  返回，后者则是将队列中所有线程都唤醒。全部唤醒，还记得覆盖条件的概念吗？</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>其实所谓的唤醒，是将等待队列中的线程放到了同步队列中，因为线程调用了 <code>notify/notifyAll</code>  后还没有释放锁。</p>\n</blockquote>\n<ul>\n<li>管道输入 / 输出流：使用 <code>PipedOutputStream/PipedInputStream/PipedReader/PipedWriter</code>  类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 管道输入输出主要用于线程之间的数据传输</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 下面代码改编自《Java 并发编程的艺术》，书上用的是字符流，但是中文会出现乱码，所以我改成字节流了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">PipedOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PipedOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">PipedInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PipedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 输入输出流连接，不然会抛出 IOException</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Thread</span> printThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Print</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PrintThread\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        printThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> receive <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>receive <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>receive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Print</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">PipedInputStream</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Print</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PipedInputStream</span> in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>in <span class=\"token operator\">=</span> in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">int</span> receive <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>receive <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> receive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> ignored<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>ThreadLocal</code> ：该类到时候会详细讲解，此处简单介绍。它是线程变量，存储的是一个键值对，以 <code>ThreadLocal</code>  对象为键，存储指定的泛型值。每个线程都有一个 <code>ThreadLocalMap</code> ，存放的就是各种 <code>ThreadLocal-&gt;value</code>  对。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建第一个线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span> threadA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadA：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程A本地变量中的值为：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ThreadA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建第二个线程</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Thread</span> threadB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadB：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程B本地变量中的值为：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ThreadB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 启动线程 A 和线程 B</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        threadA<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        threadB<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 每次的打印结果可能不一致</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 线程 B 本地变量中的值为：ThreadB：ThreadA</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 线程 A 本地变量中的值为：ThreadA：ThreadB</span></pre></td></tr></table></figure><blockquote>\n<p>如果你此时对 <code>ThreadLocal</code>  还不熟悉（很正常），之后会有一篇文章专门讲解这个，当然，看源码也是必不可缺的。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC10aHJlYWQtYmFzaWMuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-thread-basic.html</span></p>\n<p>《Java 并发编程的艺术》第四章</p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/21/Java/Concurrency/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87C/",
            "url": "https://cecilia.cool/2022/12/21/Java/Concurrency/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87C/",
            "title": "操作系统篇C",
            "date_published": "2022-12-21T15:08:32.000Z",
            "content_html": "<h2 id=\"并发缺陷\"><a class=\"anchor\" href=\"#并发缺陷\">#</a> 并发缺陷</h2>\n<p>并发的缺陷主要分为死锁和非死锁缺陷。</p>\n<h3 id=\"非死锁缺陷\"><a class=\"anchor\" href=\"#非死锁缺陷\">#</a> 非死锁缺陷</h3>\n<p>《操作系统导论》中基于 Lu 及其同事的研究，讨论了<strong>违反原子性缺陷</strong>和<strong>错误顺序缺陷</strong>。</p>\n<ul>\n<li>违反原子性缺陷：</li>\n</ul>\n<p>mysql 中出现过的例子：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread <span class=\"token number\">1</span><span class=\"token operator\">::</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>thd<span class=\"token operator\">-></span>proc_info<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//....</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">fputs</span><span class=\"token punctuation\">(</span>thd<span class=\"token operator\">-></span>proc_info<span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread <span class=\"token number\">2</span><span class=\"token operator\">::</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>thd<span class=\"token operator\">-></span>proc_info <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果线程 1 在 <code>fputs</code>  前发生中断，线程 2 将 <code>proc_info</code>  设为空，再执行线程 1 就会出现引用空指针。通过<strong>加锁</strong>就可以解决该问题。</p>\n<ul>\n<li>违反顺序缺陷：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Thread <span class=\"token number\">1</span><span class=\"token operator\">::</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mThread <span class=\"token operator\">=</span> <span class=\"token function\">PR_CreateThred</span><span class=\"token punctuation\">(</span>mMain<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Thread <span class=\"token number\">2</span><span class=\"token operator\">::</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    mState <span class=\"token operator\">=</span> mThread<span class=\"token operator\">-></span>State<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>线程 2 默认了 <code>mState</code>  已经初始化了，如果线程 1 没有先执行，就会引用空指针。所以<strong>需要强制顺序</strong>，即引入条件变量。</p>\n<h3 id=\"死锁缺陷\"><a class=\"anchor\" href=\"#死锁缺陷\">#</a> 死锁缺陷</h3>\n<p>产生条件：</p>\n<ul>\n<li>互斥：线程对于需要的资源进行互斥的访问。</li>\n<li>持有并等待：线程持有资源，等待其他资源。</li>\n<li>非抢占：线程获取的资源不能被抢占。</li>\n<li>循环等待：线程之间存在一个环路，环路上每个线程都额外持有一个资源，而这 个资源又是下一个线程要申请的。</li>\n</ul>\n<p>总结一句话就是：死锁出现的条件就是两个线程各自持有某一资源的锁，然后再请求对方的资源。</p>\n<blockquote>\n<p>当然可能不只是两个线程，多个线程且请求形成环即可。</p>\n</blockquote>\n<p>要预防死锁，就需要避免出现死锁条件</p>\n<h4 id=\"循环等待\"><a class=\"anchor\" href=\"#循环等待\">#</a> 循环等待</h4>\n<p>如果整个系统中，对于锁获得的顺序总是相同的，那么就不会出现循环等待。比如总共有两个锁 <code>L1</code>  和 <code>L2</code> ，如果每次都先申请 L1 再申请 L2，就不会出现死锁问题。这叫做<strong>全序</strong>。</p>\n<p>全序很难做到，偏序可能更现实一点。也就是部分的锁的获取顺序是固定的。</p>\n<blockquote>\n<p>但是其实设计都很复杂，需要很仔细。</p>\n</blockquote>\n<p>当一个函数需要抢多个锁时，为了避免死锁问题而固定锁的顺序，有些人旋转根据锁的地址作为获取锁的顺序。</p>\n<h4 id=\"持有并等待\"><a class=\"anchor\" href=\"#持有并等待\">#</a> 持有并等待</h4>\n<p>通过原子抢锁避免，就是在线程抢锁的过程中不会被打断。其实相当于就是在最外部加上一个全局锁。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>prevention<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//....</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>prevention<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"非抢占\"><a class=\"anchor\" href=\"#非抢占\">#</a> 非抢占</h4>\n<p>假设 AB 两个线程各自抢了 ab 锁，然后请求对方的锁，会造成死锁。死锁的原因之一就是 AB 都不会主动释放自己的锁。</p>\n<p>在很多语言的线程库中都会提供一个 <code>trylock()</code>  函数，它会尝试抢锁，如果失败，不会阻塞而是返回 - 1，所以为了避免死锁问题，可以让线程抢对方的锁失败后主动释放自己的锁让对方抢：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>top<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">trylock</span><span class=\"token punctuation\">(</span>L2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>L1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">goto</span> top<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是也可能出现活锁，两个线程不断重复，都抢锁然后再释放锁，可以设置一个随机的等待时间，降低线程之间的相互干扰。</p>\n<blockquote>\n<p>关于 <code>trylock</code>  的使用，较为麻烦的就是 <code>goto top</code>  的实现，如果代码在中途中获取了某些资源，必须确保也能释放这些资源。</p>\n</blockquote>\n<h4 id=\"互斥\"><a class=\"anchor\" href=\"#互斥\">#</a> 互斥</h4>\n<p>使资源的访问不再互斥，更多的是使用硬件支持，从而设计出无等待的数据结构。比如使用 <code>CAS</code>  设计链表插入：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">node_t</span> <span class=\"token operator\">*</span>n <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">node_t</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    n<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        n<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>head<span class=\"token punctuation\">,</span> n<span class=\"token operator\">-></span>next<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"基于事件的并发\"><a class=\"anchor\" href=\"#基于事件的并发\">#</a> 基于事件的并发</h2>\n<p>这部分属于进阶内容，怎么说呢，如果你了解网络编程，如果你了解过 Netty，那么这部分理解起来就很简单。但是本部分要讲的内容也不会很多。</p>\n<blockquote>\n<p>所以你听过 <code>select()</code>  和 <code>poll()</code>  这两个 API 吗？</p>\n</blockquote>\n<p>基于事件的服务器，最经典的设计就是写一个死循环，然后监听是否有事件，没有事件就会一直阻塞。 <code>select/poll</code>  就是用于支持检查是否有网络数据包到达。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> rc <span class=\"token operator\">=</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用单个 CPU + 基于事件的应用程序就不会出现并发问题，因为一次只会处理一个事件（其实性能非常 <code>low</code> ，为了并发处理，也就有了 <code>Netty</code> ）。</p>\n<p>当某个事件需要程序发出阻塞的系统调用，如从磁盘读文件，再返回给客户端。这样就需要发送 <code>I/O</code>  请求，造成阻塞，整个系统处于闲置状态，所以基于事件的系统（单线程）必须遵守：不允许调用阻塞调用。</p>\n<p>许多现代操作系统都支持异步 I/O，当事件需要请求 I/O，异步 I/O 的接口使程序发送 I/O 请求，并且在 I/O 完成前将控制权立即返回给调用者，然后有其他接口轮询 I/O 是否完成。</p>\n<p>随着客户端数量连接上升，单线程的基于事件的并发是不可能满足需求的，到时候依然需要，不可避免地创建新的线程来处理：事件，I/O 请求等，详细知识可以参考网络编程标签。</p>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8zMi5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/32.pdf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8zMy5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/33.pdf</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/21/Java/Concurrency/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87B/",
            "url": "https://cecilia.cool/2022/12/21/Java/Concurrency/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87B/",
            "title": "操作系统篇B",
            "date_published": "2022-12-21T02:58:42.000Z",
            "content_html": "<h2 id=\"条件变量\"><a class=\"anchor\" href=\"#条件变量\">#</a> 条件变量</h2>\n<p>线程有时需要检查某一条件（condition）满足后才能继续运行：<strong>子线程 join 父线程</strong>。这也就意味着父线程需要等待子线程运行完才能继续运行。</p>\n<ul>\n<li>设计一个共享变量：这样父线程就需要一直自旋来等待子线程运行结束，将共享变量改为父线程可用状态。这种设计缺点就是浪费时间，某些情况甚至是错误的。</li>\n<li>加入等待队列：其实整个设计思想和 A 篇中我们讲到设计锁的思想很相似，这里的条件变量就是”<strong> 锁</strong> “。当条件不满足时，线程就将自己加入队列，等待该条件。某个线程修改了条件状态，就唤醒一个或多个等待线程。</li>\n</ul>\n<p><strong>定义：条件变量是一个显示的队列，当某些执行状态（即条件）不满足时，线程就将自己加入队列，等待条件</strong>。</p>\n<p>关于条件变量的两种操作： <code>wait()</code>  和 <code>singal()</code> 。 <code>wait()</code>  职责是释放锁，并让调用线程休眠（原子地），当线程被唤醒时，<strong>需要重新竞争锁再返回调用者</strong>，<strong>这是为了避免线程陷入休眠时产生一些竞态条件</strong>； <code>signal()</code>  唤醒等待在某个条件变量上的睡眠线程。</p>\n<blockquote>\n<p><code>wait</code>  会释放锁，牢记，实际上，在 Java 语言中， <code>Object</code>  也有 <code>await()</code>  函数，该方法也会释放锁。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> done <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_cond_t</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">,</span> <span class=\"token class-name\">pthread_mutex_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pthread_cond_t</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thread_exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 假设已经初始化了一个宏变量 m 作为锁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    done <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 假设已经初始化了一个宏变量 c 作为等待队列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">thread_exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thread_join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>done <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>agrv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent: begin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    thread p<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">thread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">thread_join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent: end\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设想如果在发送信号和等待时都不加锁会发生什么问题？在操作系统 A 篇中讲过：<strong>改变锁的状态时一定要是线程安全的</strong>。这里保证互斥除了锁，还有条件变量，也就是信号。</p>\n<blockquote>\n<p>DIjkstra 最早在 “私有信号量” 提出等待条件这个思想，Hoare 在关于观察者的工作中，将这种类似的思想称为<strong>条件变量</strong>。</p>\n</blockquote>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thr_exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    done <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">pthread_cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">thr_join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>done <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">pthread_cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设想，如果父线程调用 <code>thr_join()</code> ，检查到 <code>done==0</code> ，然后试图休眠，此时发生中断，然后子线程修改 <code>done=1</code> ，发出信号，此时子线程检查到没有等待线程。父线程再次运行，进入休眠，之后就会一直休眠，没有线程唤醒。</p>\n<p>发信号时总是持有锁，但也有一些情况可以不加锁，而这可能是你应该避免的。因此，为 了简单，请在调用  <code>signal</code>  时持有锁（<strong>hold the lock when calling signal</strong>）。同样的，在 <code>wait</code>  时也必须持有锁，这是 <code>wait</code>  语法强制要求的。因为  <code>wait</code>  调 用总是假设你调用它时已经持有锁、调用者睡眠之前会释放锁以及返回前重新持有锁。因此，这个提示 的一般化形式是正确的：调用  <code>signal</code>  和  <code>wait</code>  时要持有锁（<strong>hold the lock when calling signal or wait</strong>）。</p>\n<blockquote>\n<p>在操作系统 A 篇中我们最后给了一个设计锁的例子，结构体里面也有一个队列 <code>queue_t *q</code> ，该队列是竞争锁失败后，线程进入阻塞队列等待锁空闲。线程为了节省时间也会休眠。但是条件变量不同的是需要线程主动调用 <code>wait</code>  主动放弃锁的占用，进入等待队列从而休眠，需要等到一个指定条件发生才会被唤醒。</p>\n</blockquote>\n<h3 id=\"生产消费问题\"><a class=\"anchor\" href=\"#生产消费问题\">#</a> 生产 / 消费问题</h3>\n<p>这也是 Dijkstra 提出来的 —— 生产者消费者问题。我们回顾前面的代码，你也许认为将：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>done <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>改成：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>done <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也是符合逻辑的。在父线程 / 子线程的案例中，这确实是合理的，但是在使用条件变量时，应该总是使用 <code>while</code> ，在生产者消费者问题中就能够体现出来。</p>\n<p>先看伪代码： <code>count==1</code>  表示缓冲区有数据可以被消费，消费之后就为 0。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">producer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loops<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">consumer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loops<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码使用的就是 <code>if</code>  语句，我们假设只有一个生产者。如果只有一个消费者，那么这段代码不会出现问题。但是当出现两个消费者时，就会导致错误。</p>\n<blockquote>\n<p>首先，这个问题肯定是当缓冲区没有数据，就不应该调用 <code>get</code>  的。</p>\n</blockquote>\n<p>设想 <code>C1</code> ， <code>C2</code>  两个消费者此时都 <code>wait</code> ，等待缓冲区加入数据。生产者产生数据后，唤醒了 <code>C1</code>  并拿到了锁， <code>C1</code>  开始执行 <code>int tmp = get();</code>  这段代码。然后继续唤醒等待队列中的线程。当然有可能唤醒 <code>C2</code>  线程并且拿到锁，那么 <code>C2</code>  此时也会执行 <code>get()</code>  函数，但是此时缓冲区并没有数据，<strong>缓冲区无法消费</strong>，就会断言触发，<strong>提示整个并发环境出现了问题</strong>。所以需要将 <code>if</code>  改成 <code>while</code> ，每次被唤醒都需要重新检查一下缓冲区是否还可以消费。</p>\n<blockquote>\n<p>其实导致我们需要循环检查缓冲区消费情况的本质原因是：消费者在休眠的时候 <code>count</code>  可能会减小。</p>\n</blockquote>\n<p>但是仅仅是将 <code>if</code>  改为 <code>while</code>  还是存在问题，主要原因是生产者和消费者都位于同一个休眠（等待，阻塞）队列（这是我自己总结的原因，先不用急着反驳）。</p>\n<p>设想这种情况： <code>P1</code>  作为生产者， <code>C1</code> ， <code>C2</code>  作为两个消费者. <code>C1</code> ， <code>C2</code>  因为缓冲区没有数据先休眠，进入队列。当 <code>P1</code>  向缓冲区放入数据，然后进入队列。此时 <code>C1</code>  被唤醒，消费了数据之后，需要唤醒一个队列中的线程。</p>\n<p>此时应该唤醒一个生产者，因为缓冲区没有数据了，但是不同的队列的管理方式不同，并不是所有队列都是 <code>FIFO</code> ，所以程序运行到后期你根本不知道下一个被唤醒的是生产者还是消费者。如果恰好此时 <code>C2</code>  被唤醒了，进入 <code>while</code>  循环发现缓冲区没有数据，于是继续 <code>wait</code>  休眠，进入队列。此时三个线程都休眠了，就不会再有线程来唤醒队列中的线程了，程序崩溃。</p>\n<p>所以只需要使用两个队列即可，标准的说法就是使用两个条件变量。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">cond_t</span> empty<span class=\"token punctuation\">,</span> fill<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// producer</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>empty<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当缓冲区为空时，就需要从 empty 唤醒生产者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fill<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// consumer</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>fill<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"覆盖条件\"><a class=\"anchor\" href=\"#覆盖条件\">#</a> 覆盖条件</h3>\n<p>这其实就是 <code>signal_all()</code>  方法，将休眠的线程全部唤醒。有时这样的操作是有必要的，尽管他比较损耗性能。</p>\n<p>举个内存分配的问题，当 <code>allocate(int size)</code>  遇到了内存不足时，就会休眠等待，相应的，线程释放内存会发出信号说有更多内存空间，但是，代码中有一个问题就是，应该缓行哪个线程？</p>\n<p>极端的情况就是：共有 3 个线程，2 个都在休眠等待，最后一个线程释放了内存后，现在还有 50 的内存，线程 A 需要 100，线程 B 需要 10，但是不能够保证一定唤醒 B 线程，如果唤醒了 A 线程，那么所有线程都会进入休眠，所以有人的解决方案就是将所有线程都唤醒，这就是覆盖条件。</p>\n<blockquote>\n<p>其实单论这个问题的话，可以用优先队列来解决，当然我只是借这个问题引出覆盖条件的概念。</p>\n</blockquote>\n<h2 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h2>\n<p>信号量是有一个<strong>整数值</strong>的对象，可以用两个函数操作它。在 POSIX 标准中，是 <code>sem_wait()</code>  和 <code>sem_post()</code> 。当线程完成一次对信号量对象的等待（wait）时，计数值减一；当线程完成一次对信号量的释放（release）时，计数值加一。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/12/21/e73efde1c65e3fc7.jpg\" alt=\"\" /></p>\n<h3 id=\"应用锁\"><a class=\"anchor\" href=\"#应用锁\">#</a> 应用：锁</h3>\n<p>最简单的例子就是使用信号量作为锁，那么同时间进入临界区只能有一个线程，假设最开始 A 线程进入临界区，此时需要调用 <code>wait()</code> ，将信号量减一，如果此时不允许其他线程进入，那么信号量此时至少为 0. 因为其他线程进入临界区之前也需要调用一下 <code>wait()</code> ，此时再判断信号量为负，不能进入临界区，进入休眠。因为锁只有两种状态，所以这种用法有时也叫做<strong>二值信号量</strong>。</p>\n<blockquote>\n<p>所以信号量作为锁，初始化的计数值应该为 1。 图中的 <code>signal</code>  相当于 <code>POSIX</code>  中的 <code>sme_post()</code> 。</p>\n</blockquote>\n<h3 id=\"应用条件变量\"><a class=\"anchor\" href=\"#应用条件变量\">#</a> 应用：条件变量</h3>\n<p>本文最开始讲解条件变量时的例子是父线程创建子线程，并等待子线程执行结束。用一个显示队列作为条件变量，使用 <code>wait/signal</code>  来保证线程安全。</p>\n<p>下面讲一下如何用信号量来实现这种效果。</p>\n<p>首先要理解一个点，信号量并不是什么很特别的东西，本质就是一个整数，只是说，操作系统存在调用，如 <code>sem_wait()</code>  和 <code>sem_signal()</code> 。重要的是它能够让线程停下来等待，放弃 CPU 资源进入休眠。</p>\n<p>父线程等待子线程的例子中，逻辑为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">child</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">sem_post</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 表示同一进程所有线程都共享信号量，计数值初始化为 x</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent:begin\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">thread_create</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建子线程并运行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sem_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent:end\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用信号量代替条件变量，计数值初始化为 0。</p>\n<blockquote>\n<p>需要思考父线程先执行 <code>sem_wait()</code>  和子线程先执行 <code>sem_post()</code>  两种情况。</p>\n</blockquote>\n<h3 id=\"应用实现信号量\"><a class=\"anchor\" href=\"#应用实现信号量\">#</a> 应用：实现信号量</h3>\n<p>该部分模拟实现一下 <code>sem_wait</code>  和 <code>sem_post</code> 。《操作系统导论》一书中将这个自定义信号量称为 <code>Zemaphore</code> ，我们延用一下。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">_Zem_t</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">pthread_cond_t</span> cond<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 休眠 / 等待队列，肯定要有，不然你以为谁替你维护一个队列</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">pthread_mutex_t</span> lock<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 锁</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Zem_init</span><span class=\"token punctuation\">(</span>Zem_t <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    s<span class=\"token operator\">-></span>val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">Cond_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化阻塞队列</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化锁，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Zem_wait</span><span class=\"token punctuation\">(</span>Zem_t <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">Mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">-></span>val <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 进入队列休眠 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">Cond_wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    s<span class=\"token operator\">-></span>val<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">Mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">Zem_post</span><span class=\"token punctuation\">(</span>Zem_t <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    s<span class=\"token operator\">-></span>val<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">Cond_signal</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>cond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">Mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只用了一把锁、一个条件变量和一个状态的变量来记录信号量的值。是不是感觉信号量就是将锁和条件变量封装了一下。</p>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8zMC5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/30.pdf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8zMS5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/31.pdf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5tLndpa2lwZWRpYS5vcmcvemgtaGFucy8lRTQlQkYlQTElRTUlOEYlQjclRTklODclOEY=\">https://zh.m.wikipedia.org/zh-hans/ 信号量</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/20/Java/Concurrency/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87A/",
            "url": "https://cecilia.cool/2022/12/20/Java/Concurrency/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AF%87A/",
            "title": "操作系统篇A",
            "date_published": "2022-12-20T13:49:24.000Z",
            "content_html": "<h2 id=\"并发介绍\"><a class=\"anchor\" href=\"#并发介绍\">#</a> 并发：介绍</h2>\n<p>经典观点：一个程序只有一个执行点（一个程序计数器，存放执行的指令），那么所有的执行都是顺序执行的。但是多线程（multi-threaded）程序有<strong>多个执行点</strong>，此处区别进程，多线程程序中，线程之间共享地址空间，能够访问到相同的数据。</p>\n<p>类比进程，当两个线程运行在一个处理器上，从运行 A 线程到运行 B 线程，一定会发生上下文切换（context switch），<strong>进程</strong>的状态保存到 PCB 中，<strong>线程</strong>的状态保存到 TCB（Thread Control Block）中。唯一与<strong>进程</strong>上下文切换不同的是，线程切换上下文，地址空间保持不变，也就是<strong>不需要切换当前使用的页表</strong>。</p>\n<p>在并发中最经典的程序问题就是多个线程累加同一个变量：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mythread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: begin\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1e7</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \tcounter <span class=\"token operator\">=</span> counter <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s: done\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">int</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">pthread_t</span> p1<span class=\"token punctuation\">,</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main: begin (counter = %d)\\n\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">Pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> mythread<span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">Pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> mythread<span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// join waits for the threads to finish</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">Pthread_join</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">Pthread_join</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main: done with both (counter = %d)\\n\"</span><span class=\"token punctuation\">,</span> counter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>希望最终 <code>counter</code>  得到的结果是 20000000，但是往往结果不是对的，而且每次都不一样。关键的指令在于：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>mov <span class=\"token number\">0x8049a1c</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>eax</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>add $<span class=\"token number\">0x1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">%</span>eax</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mov <span class=\"token operator\">%</span>eax<span class=\"token punctuation\">,</span> <span class=\"token number\">0x8049a1c</span></pre></td></tr></table></figure><p>变量  <code>counter</code>  位于地址  <code>0x8049a1c</code> 。在这 3 条指令中，先用 x86 的  <code>mov</code>  指令，从内存地址处取出值，放入  <code>eax</code> 。然后，给  <code>eax</code>  寄存器的值加 1（0x1）。最后， <code>eax</code>  的值被存回内存中相同的地址。</p>\n<p>这其实就是 c 代码中的 <code>counter = counter + 1</code> ，<strong>整个程序失败的点在于这行 c 代码不是原子执行</strong>。如果线程 A 在执行完 <code>add</code>  指令后中断，此时 <code>counter</code>  还是 50，A 线程的 <code>eax=51</code> ，轮到 B 执行完这三行指令，此时 <code>counter=51</code> ，再次轮到 A，就会将 51 再次存入 <code>counter</code> ，相当于 A 线程在本次循环中并没有使 <code>counter</code>  增加。</p>\n<p>由于<strong>执行这段代码的多个线程可能导致竞争状态</strong>，因此我们将<strong>此段代码称为临界区</strong> （critical section）。<strong>临界区是访问共享变量（或更一般地说，共享资源）的代码片段，一定不能由多个线程同时执行</strong>。</p>\n<p>我们真正想要的代码就是的<strong>互斥</strong>（mutual exclusion）。这个属性保证了如果一个线程在临界区内执行，其他线程将被阻止进入临界区。</p>\n<p>这些术语都是 <code>Dijkstra</code>  创造的，此处给出一些术语补充：</p>\n<ul>\n<li><strong>临界区</strong>（critical section）是访问共享<strong>资源</strong>的一段代码，资源通常是一个变量或数据结构。</li>\n<li><strong>竞态条件</strong>（race condition）出现在多个执行线程大致同时进入临界区时，它们都试图更新共享的数据结构，导致了令人惊讶的（也许是不希望的）结果。</li>\n<li><strong>不确定性</strong>（indeterminate）程序由一个或多个竞态条件组成，程序的输出因运行而异，具体取 决于哪些线程在何时运行。这导致结果不是确定的（deterministic），而我们通常期望计算机系统给出确 定的结果。</li>\n<li>为了避免这些问题，线程应该使用某种<strong>互斥</strong>（mutual exclusion）原语。这样做可以保证只有一 个线程进入临界区，从而避免出现竞态，并产生确定的程序输出。</li>\n</ul>\n<p>为了保证安全的访问临界区，有两种方法，要么对临界区的操作是原子操作，要么就是对临界区的操作上锁。将一系列动作原子化（atomic）背后的想法可以简单用一个短语表达：“全部或没有”。要么都发生了，要么都没有发生，不会出现中间状态。</p>\n<blockquote>\n<p>本部分最重要的部分就是对临界区和资源的理解，本质上来说，我们需要锁住的不是临界区，而是临界区访问的资源，有可能很多个不同的临界区都会访问同一个资源。</p>\n</blockquote>\n<h2 id=\"并发锁\"><a class=\"anchor\" href=\"#并发锁\">#</a> 并发：锁</h2>\n<p>锁的本质就是一个变量，现实生活中，锁的状态只有打开和关闭两种状态（别和我扯什么撬开状态），锁变量其实也就是表示锁的状态，最简单的就是 0 表示打开，1 表示关闭。复杂点的，我们也可以保存：<strong>持有锁的线程</strong>，请求获取锁的<strong>线程队列</strong>，但这些信息会隐藏起来，锁的使用者不会发现。</p>\n<p>在 c 语言中， <code>lock()</code>  和 <code>unlock()</code>  函数分别表示尝试获取锁和释放锁。在其他语言中，也有类似的方法。</p>\n<h3 id=\"评价锁\"><a class=\"anchor\" href=\"#评价锁\">#</a> 评价锁</h3>\n<p>我们需要一些标准来评判一把锁的实现效果：</p>\n<ul>\n<li><strong>互斥性</strong>：这是最基本的，阻止多个线程进入临界区。</li>\n<li><strong>公平性</strong>（ <code>fairness</code> ）：当锁可用时，是否每一个竞争线程有公平的机会抢到锁？这其实考验的是等待队列的设计，像 <code>AQS</code>  使用的就是先进先出。</li>\n<li><strong>性能</strong>：是使用锁之后增加的时间开销。考虑这个是非常必要的，因为有时真的只有一个线程在执行，但是它还是要执行上锁解锁的操作，当然，还有其他需要考虑的场景。</li>\n</ul>\n<h3 id=\"控制中断\"><a class=\"anchor\" href=\"#控制中断\">#</a> 控制中断</h3>\n<p>最早的互斥方案之一就是<strong>在临界区关闭中断</strong>，也就是说，此时线程 A 在临界区不会发生上下文切换。这个解决方案是为单处理器 系统开发的。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">DisableInterrupts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">EnableInterrupts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>控制中断是使用特殊的硬件指令，背后的实现是由硬件支持的， <code>CAS</code>  也是由硬件支持的。这种方法优点就是简单，但是缺点十分明显：</p>\n<ul>\n<li>\n<p>这种方法要求我们允许所有调用线程执行特权操作（打开 / 关闭中断），但是恶意程序一开始调用关闭中断就会一直霸占处理器。</p>\n</li>\n<li>\n<p>多处理器不适用。多个线程在多 CPU 上，每个线程都试图进入同一个临界区，关闭中断也没用。</p>\n</li>\n<li>\n<p>关闭中断导致中断丢失，可能会导致严重的系统问题。假如磁盘设备完成了读 取请求，但 CPU 错失了这一事实，那么，操作系统如何知道去唤醒等待读取的进程？</p>\n</li>\n<li>\n<p>效率低。与正常指令执行相比，现代 CPU 对于关闭和打 开中断的代码执行得较慢。</p>\n</li>\n</ul>\n<h3 id=\"原子交换\"><a class=\"anchor\" href=\"#原子交换\">#</a> 原子交换</h3>\n<p>如果<strong>不依赖硬件</strong>，我们可以这么实现一个锁：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lock_t</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">lock_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0 表示没有上锁</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 什么都不做，空等待，这就叫做 spin-wait   自旋</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    mutex<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到这种锁有一些问题：</p>\n<ul>\n<li>正确性：你可能会觉得上述代码完全没有问题的，但是如果 AB 两个线程都调用 <code>lock</code>  函数，假设 A 先调用，然后经过了 <code>while</code>  循环，此时发生中断，轮到 B，经过 while 循环，又发生中断，那么此时两个线程相当于都拿到了锁，因为他们之后都会执行 <code>mutex-&gt;flag = 1;</code>  的操作。导致问题的本质就是 —— 上<strong>锁的过程不是原子的</strong>。</li>\n<li>性能：可以看到，如果一个线程拿不到锁，就会一直自旋，直到它的时间片执行完或者拿到锁。自旋等待在等待其他线程释放锁的 时候会浪费时间。尤其是在单处理器上，一个等待线程等待的目标线程甚至无法运行（至 少在上下文切换之前）！</li>\n</ul>\n<p>为了解决这些问题，我们需要硬件的支持 —— 原子交换。它们基本上在不同的平台上做同样的事，通常称为<strong>测试并设置指令（test-and-set）</strong>。回顾上述代码，我们在 <code>lock()</code>  函数中的行为可以归为：测试 <code>flag</code> ，设置 <code>flag</code> 。</p>\n<p>这个指令的工作内容，我们用 c 代码演示一下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>old_ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> new<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> old <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>old_ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">*</span>old_ptr <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> old<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只不过这个操作是<strong>原子进行</strong>的。它原子的实现了：给变量赋予新值并返回旧值。那我们的锁的实现代码就可以改为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token comment\">// spin-wait</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只有当旧值为 0 才算此次上锁成功。这样就是原子上锁了，尽管还是没有解决自旋浪费性能的问题。这样的锁就叫做自旋锁（spin lock）。</p>\n<p>自旋锁不提供公平性，在竞争状态下，自旋的线程甚至会永远自旋（回忆一下进程切换，如果不人为的设置一些 FIFO 什么的，有些进程会被饿死）。同时，自旋锁在单 CPU 下开销很大，在多 CPU 情况该性能不错。</p>\n<p>上文讲了测试并切换 <code>TAS</code> ，其实还有比较并切换 <code>CAS</code> ，c 语言伪代码为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">compareAndSwap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> expected<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> new<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> actual <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>actual <span class=\"token operator\">==</span> expected<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> new<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> actual<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同样是返回旧值（你可以思考一下为什么返回的是旧值），总体思路就是，检测变量的旧值是否是期望值，如果是，就赋新值，返回旧值。如果用 <code>CAS</code>  实现上述自旋锁：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">;</span> <span class=\"token comment\">//spin-wait</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"解决自旋\"><a class=\"anchor\" href=\"#解决自旋\">#</a> 解决自旋</h3>\n<ul>\n<li><strong>让出时间片</strong>，即在要自旋的时候，放弃 CPU。</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们假定操作系统提供原语  <code>yield()</code> ，线程可以调用它主动放弃 CPU， 让其他线程运行。 <code>yield()</code>  系统调用能让线程由 <code>running</code>  变为 <code>readying</code> 。但是这个方法没有处理本质问题：频繁的上下文切换。线程饿死的情况也没解决。</p>\n<ul>\n<li><strong>使用队列：休眠代替自旋</strong></li>\n</ul>\n<p>前面一些方法的真正问题是存在太多的偶然性。因此，我们必须<strong>显式</strong>地施加某种控制，<strong>决定锁释放时，谁能抢到锁</strong>（这样才能保证公平的）。</p>\n<blockquote>\n<p><strong>处于休眠状态的线程永远不会分配到 CPU 资源</strong>，当等待的事件出现，休眠状态的线程才会转换到可运行的状态。</p>\n</blockquote>\n<p>在 c 语言中，Solaris 提供了两个调用： <code>park()/unpark(ThreadID)</code> 。前者能够让调用线程休眠，后者会唤醒 ThreadID 标识的线程。使用两个调用实现锁，可以让<strong>调用者在获取不到锁时休眠</strong>，在锁可用时被唤醒，看一下《操作系统导论》里面给的例子：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">lock_t</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> flag<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> guard<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">queue_t</span> <span class=\"token operator\">*</span>q<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token class-name\">lock_t</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock_init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    m<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">queue_init</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>guard<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token comment\">// spin-wait</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>flag <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        m<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获得锁</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">queue_add</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">,</span> <span class=\"token function\">gettid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">TestAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>m<span class=\"token operator\">-></span>guard<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">;</span><span class=\"token comment\">// spin-wait</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">queue_empty</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        m<span class=\"token operator\">-></span>flag <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有线程竞争锁</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">else</span> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span><span class=\"token function\">queue_remove</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从队首取出线程，不需要改变 flag</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>下面解释一下代码：</p>\n<ul>\n<li><code>flag</code> ：表示锁是否被占用，0 表示没有线程占用锁，1 表示有线程</li>\n<li><code>guard</code> ：注意，线程获取锁并不是一个原子过程（ <code>lock</code>  函数），但是我们应该让 <code>lock()/unlock()</code>  在某些代码保证并发安全。之前我们的做法：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">lock_t</span> <span class=\"token operator\">*</span>mutex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">CompareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>mutex<span class=\"token operator\">-></span>flag <span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">;</span> <span class=\"token comment\">//spin-wait</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>确实能保证 <code>lock</code>  内部的并发安全，但是使用 <code>flag</code>  自旋的缺点上文也详述过。所以不能用<strong>锁的状态</strong>来自旋。此处使用 <code>guard</code>  来自旋。当 <code>guard=0</code>  时，表示没有线程正在改变锁的状态；当 <code>guard=1</code>  时，表示有线程正在改变锁的状态，此时不允许任何线程也跟着来修改锁的状态。</p>\n<blockquote>\n<p>锁的状态包括了 flag，queue。</p>\n</blockquote>\n<p>所以其他线程都会先围绕 <code>guard</code>  自旋一会。这个过程非常短，<strong>因为线程修改锁的状态花费的时间也非常短</strong>。</p>\n<ul>\n<li>释放锁时，如果队列里还有线程在等待，不需要改变 <code>flag</code> 。举个例子，假设临界区代码为：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 临界区</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>my_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>假设只有 AB 两个线程，线程 A 在获取锁后，B 也获取锁，失败后 B 加入等待队列。当 A 执行到 <code>unlock()</code>  代码后，唤醒 B 线程，也许 B 不会立刻被分配时间片，但是此时 flag 仍然为 1，其他线程哪怕拿到时间片获取锁，也需要休眠进入队列。直到 B 分配到时间片，B 从哪里开始继续执行呢？</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">queue_add</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">-></span>q<span class=\"token punctuation\">,</span> <span class=\"token function\">gettid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>m<span class=\"token operator\">-></span>guard <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 从这里被唤醒，也就是 lock () 函数的结尾</span></pre></td></tr></table></figure><p>相当于在 <code>lock()</code>  结束， <code>count++;</code>  之前被唤醒。在临界区被唤醒，天生自带锁。</p>\n<h2 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h2>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8zZTc5YWUyNWJmYjY=\">https://www.jianshu.com/p/3e79ae25bfb6</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8yNi5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/26.pdf</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYWdlcy5jcy53aXNjLmVkdS9+cmVtemkvT1NURVAvQ2hpbmVzZS8yOC5wZGY=\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/28.pdf</span></p>\n</blockquote>\n",
            "tags": [
                "Concurrency"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/12/20/Java/Concurrency/Concurrency%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB/",
            "url": "https://cecilia.cool/2022/12/20/Java/Concurrency/Concurrency%E6%A0%87%E7%AD%BE%E5%AF%BC%E8%AF%BB/",
            "title": "Concurrency标签导读",
            "date_published": "2022-12-20T13:41:42.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>现在你看到的并发标签是我第二次重制版，第一次的并发系列文章比较散乱，当时也是处于初学阶段，心态不够沉稳，很多东西看不清晰就写了博客，所以这次打算好好改一下。</p>\n<p>个人观点：Java 并发需要分为两个部分学习，一部分为操作系统级别的并发知识，另一部分才是 <code>j.u.c</code>  包。考虑到整个体系的知识量过于庞大，所以本系列前几篇长篇文章，都会用于简述第一部分的内容，概述操作系统的并发和 Java 为了并发而做出的努力，如内存模型，类设计，并发关键字等。然后剩下的文章才是对 <code>j.u.c</code>  包中各个类的应用解释，该部分我们会阅读大量源码，有些类我们会着重讲解，像 <code>AQS</code>  这样的重点，还会分上下来讲解，当然，有些我们也会讲得很快，比如 <code>ConcurrentHashMap</code> ，就不必停留在实现细节上，而是了解它的实现逻辑上即可。</p>\n<h1 id=\"第一部分\"><a class=\"anchor\" href=\"#第一部分\">#</a> 第一部分</h1>\n<p>第一部分重点是讲解操作系统底层并发实现的机制以及 Java 的一些基本并发机制。</p>\n<h2 id=\"操作系统篇\"><a class=\"anchor\" href=\"#操作系统篇\">#</a> 操作系统篇</h2>\n<p>本部分主要讲解一个操作系统为了满足并发而做出的努力，如何设计一个锁，从自旋到主动释放 CPU 资源，是如何逐步优化的以及解决一些经典的并发问题。本系列主要参考《操作系统导论》的并发主题，本书已经有中文翻译版，如果不喜欢阅读实体书， <code>github</code>  上也有对应的中文 pdf：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3JlbXppLWFycGFjaWR1c3NlYXUvb3N0ZXAtdHJhbnNsYXRpb25zL3RyZWUvbWFzdGVyL2NoaW5lc2U=\">https://github.com/remzi-arpacidusseau/ostep-translations/tree/master/chinese</span></p>\n</blockquote>\n<p>实在看不进去，你也可以看我的博客，总之，你需要花时间。</p>\n<h2 id=\"java并发机制篇\"><a class=\"anchor\" href=\"#java并发机制篇\">#</a> Java 并发机制篇</h2>\n<p>该部分不会过多涉及 <code>j.u.c</code>  包下面的类，而是会着重讲一下 Java 中的线程，并发关键字， <code>JMM</code> ，Java 中的锁， <code>ThreadLocal</code>  等重要知识。</p>\n<p>该部分主要参考了《Java 并发编程的艺术》，Java 全栈知识体系等。</p>\n",
            "tags": [
                "Concurrency"
            ]
        }
    ]
}