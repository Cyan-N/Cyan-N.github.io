{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"redis\" tag",
    "description": "时雨病重症患者",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/11/27/Database/Redis/Redis%E5%85%A5%E9%97%A8(6)-%E4%B8%BB%E4%BB%8E%E4%B8%8E%E5%93%A8%E5%85%B5/",
            "url": "https://cecilia.cool/2022/11/27/Database/Redis/Redis%E5%85%A5%E9%97%A8(6)-%E4%B8%BB%E4%BB%8E%E4%B8%8E%E5%93%A8%E5%85%B5/",
            "title": "Redis入门(6)--主从与哨兵",
            "date_published": "2022-11-27T15:59:09.000Z",
            "content_html": "<blockquote>\n<p>本章讲解 redis 配置主从复制和哨兵模式</p>\n</blockquote>\n<h1 id=\"主从复制\"><a class=\"anchor\" href=\"#主从复制\">#</a> 主从复制</h1>\n<p>主从赋值是指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为主节点 (Master)，后者称为从节点 (Slave)，<strong>数据的复制是单向的</strong>，只能由主节点到从节点。Master 以写为主，Slave 以读为主。</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/28/c643227d0a6fbb2f.jpg\" alt=\"\" /></p>\n<p>优点：</p>\n<ul>\n<li>读写分离，提高性能。</li>\n<li>主要是读多写少的场景下，可以为一个主节点安排很多个从节点，这样就能分担压力，即使挂掉一个，其他的也可以使用。</li>\n</ul>\n<p>首先要启动两个 Redis 服务器，修改以下配置文件，注意这两个配置文件的端口不能一样（因为是放在一个虚拟机上跑的），我这里是 <code>port1 = 6890 port2 = 6891</code> 。为了方便辨认，建议把文件夹名字加上端口。</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/28/63b699ea7ea4c9b9.jpg\" alt=\"\" /></p>\n<p>我们这里还是写一个启动脚本 <code>start.sh</code> ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./redis-master-6890/src/redis-server ./redis-master-6890/redis.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./redis-slave-6891/src/redis-server ./redis-slave-6891/redis.conf</pre></td></tr></table></figure><p>修改一下执行权限： <code>chmod u+x start.sh</code> ，执行文件 <code>./start.sh</code> 。</p>\n<p>启动成功后连接一下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./redis-slave-6890/src/redis-cli <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6891</span></pre></td></tr></table></figure><p>用 <code>info replication</code>  查看当前主从状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:689<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> info replication</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Replication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>role:master\t\t<span class=\"token comment\"># 现在还没有指定主从服务器，两个 redis 其实都是 master</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>connected_slaves:0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>master_replid:41fc9e87973d2d96832d3abe8485a4b13b718d00</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>master_replid2:0000000000000000000000000000000000000000</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>master_repl_offset:0</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>second_repl_offset:-1</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>repl_backlog_active:0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>repl_backlog_size:1048576</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>repl_backlog_first_byte_offset:0</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>repl_backlog_histlen:0</pre></td></tr></table></figure><p>我们现在登陆的就是我们希望作为从服务器的 redis，已知主服务器是 <code>127.0.0.1 6890</code> ，执行以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:689<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> replicaof <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6890</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 旧版本使用的命令是 slaveof，replicaof 是新版本</span></pre></td></tr></table></figure><p>现在再用 <code>info replication</code>  查看试试。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span>.0.1:689<span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> info replication</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Replication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>role:slave</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>master_host:127.0.0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>master_port:6890</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>master_link_status:up</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>master_last_io_seconds_ago:6</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>master_sync_in_progress:0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># ....</span></pre></td></tr></table></figure><p>现在测试一下，在主服务器上写入，在从服务器上读取：</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/28/35d66c109faea833.jpg\" alt=\"\" /></p>\n<p><strong>从节点压根就没办法进行数据插入，节点的模式为只读模式</strong>。如果从服务器想变回主服务器，执行 <code>replicaof no one</code>  命令。</p>\n<p>在主节点写入一些数据后，用新的服务器作为从服务器连接，从服务器会同步主节点的数据，流程为：</p>\n<ol>\n<li>从节点执行 <code>slave ip port</code>  命令后，从节点会保存主节点相关的地址信息。</li>\n<li>从节点通过每秒运行的定时任务发现配置了新的主节点后，会尝试与该节点建立网络连接，专门用于接收主节点发送的复制命令。</li>\n<li>连接成功后，第一次会将主节点的数据进行全量复制，之后采用增量复制，持续将新来的写命令同步给从节点。</li>\n</ol>\n<p>当我们的主节点关闭后，从节点依然可以读取数据，但是从节点会疯狂报错。</p>\n<p>如果不想每次都在从节点启动后使用 <code>replicaof</code>  配置主节点，可以在配置文件中写好主服务器是哪个，需要加入一行：</p>\n<pre><code>replicaof ip port\n# replicaof 127.0.0.1 6890\n# 你可以在配置文件里找到replica-read-only yes，表示从节点为读模式\n</code></pre>\n<p>此外，从节点也可以有从节点：</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/28/5507a436bff048c6.jpg\" alt=\"\" /></p>\n<p>采用这种方式，优点肯定是显而易见的，但是缺点也很明显，整个传播链路一旦中途出现问题，那么就会导致后面的从节点无法及时同步。</p>\n<h1 id=\"哨兵模式\"><a class=\"anchor\" href=\"#哨兵模式\">#</a> 哨兵模式</h1>\n<p>经过之前的学习，我们发现，实际上最关键的还是主节点，因为一旦主节点出现问题，那么整个主从系统将无法写入，因此，我们得想一个办法，处理一下主节点故障的情况。</p>\n<p>类似<strong> Nacos</strong> 和<strong> Eureka</strong>，所有的服务都会被<strong>实时监控</strong>，那么只要出现问题，肯定是可以及时发现的，并且能够采取响应的补救措施，这就是我们即将介绍的哨兵：</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/28/fe67c346f734075b.jpg\" alt=\"\" /></p>\n<p>哨兵会对所有的节点进行监控，如果发现主节点出现问题，那么会立即让从节点进行投票，<strong>选举一个新的主节点出来，这样就不会由于主节点的故障导致整个系统不可写</strong>（注意要实现这样的功能最小的系统必须是一主一从，再小的话就没有意义了）</p>\n<p>配置时需要修改一下配置文件 (主节点）：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>sentinel monitor cyan-monitor <span class=\"token number\">127.0</span>.0.1 <span class=\"token number\">6890</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p>第一个和第二个是固定，第三个是为监控对象名称，随意，后面就是主节点的相关信息，包括 IP 地址和端口，最后一个数 x 表示 x 个哨兵（可以设置多个哨兵）认为主节点挂了，主节点就真的挂了。</p>\n<p>服务器启动时需要加上 <code>xx/src/redis-server xx/reids.conf --sentinel</code> 。</p>\n<p>在哨兵模式下，从节点连接到主节点，哨兵也能检测到这一行为。当主节点挂掉了，会选择新的主节点，所有节点的主从关系会被重新分配，就连挂掉的节点也会变成新的主节点的从节点（尽管挂掉的节点还没启动），当挂掉的节点重启时，就会自动变成从节点（如果没变，估计式卡了，等一会）。</p>\n<p><strong>选举规则</strong>：</p>\n<ol>\n<li>首先会根据优先级进行选择，可以在配置文件中进行配置，添加 <code>replica-priority</code>  配置项（默认是 100），越小表示优先级越高。</li>\n<li>如果优先级一样，那就选择偏移量最大的</li>\n<li>要是还选不出来，那就选择 runid（启动时随机生成的）最小的。</li>\n</ol>\n<p>为了避免哨兵也挂了，可以多安排几个哨兵（一个哨兵就要多启动一个 redis 服务），只需要把哨兵的配置复制一下，然后修改端口，这样就可以同时启动多个哨兵了</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZmFuc2h1eWFvL3AvMTQxNTYyMDguaHRtbA==\">https://www.cnblogs.com/fanshuyao/p/14156208.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL3hvYXBxNSMwMDJmNzE5Yw==\">https://www.yuque.com/qingkongxiaguang/spring/xoapq5#002f719c</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/15/Database/Redis/Redis%E5%85%A5%E9%97%A8(5)-%E9%85%8D%E7%BD%AE%E9%9B%86%E7%BE%A4/",
            "url": "https://cecilia.cool/2022/11/15/Database/Redis/Redis%E5%85%A5%E9%97%A8(5)-%E9%85%8D%E7%BD%AE%E9%9B%86%E7%BE%A4/",
            "title": "Redis入门(5)-配置集群",
            "date_published": "2022-11-15T11:02:41.000Z",
            "content_html": "<h1 id=\"安装redis\"><a class=\"anchor\" href=\"#安装redis\">#</a> 安装 Redis</h1>\n<p>为什么第一章已经讲了安装，这里还要讲：</p>\n<ol>\n<li>第一章主要是 windows 下安装，单纯解压一个压缩包就能用，但是 Linux 方面反而没讲清楚。</li>\n<li>重新讲一下 CentOS 下安装 Redis，以及一些操作，方便我们配置 Redis 集群。</li>\n</ol>\n<blockquote>\n<p>你需要在虚拟机上多安装几个 CentOS 系统，至少两个，并且都需要装 Redis，所以请不要偷懒，本文会一步步带你操作。</p>\n</blockquote>\n<h2 id=\"安装centos\"><a class=\"anchor\" href=\"#安装centos\">#</a> 安装 CentOS</h2>\n<p>我使用的是 CentOS-7 版本，镜像源文件链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9taXJyb3JzLmFsaXl1bi5jb20vY2VudG9zLzcvaXNvcy94ODZfNjQvQ2VudE9TLTcteDg2XzY0LURWRC0yMDA5Lmlzbw==\">CentOS-7-x86_64-DVD-2009.iso</span>  4.4GB 不要下错了。</p>\n<ol>\n<li>新建虚拟机 <code>-&gt;</code>  自定义 (高级)(C)，然后点两次下一步，到选择安装程序光盘映像文件：<img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/1003d12ff9d9618d.jpg\" alt=\"\" /></li>\n<li>然后对系统命名，选择合适的文件夹存放，可以看到这将是我第三个 CentOS：<img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/ccf2923389650d5b.jpg\" alt=\"\" /></li>\n<li>分配处理器数量和内核数量，都选 2 就行，下一步分配内存，我选的是 2048MB。</li>\n<li>网络使用 NAT，它默认选好了，无脑下一步就行，磁盘大小分配 20GB（其实只是装 Redis 的话也用不了那么多🤣）。</li>\n<li>点击下一步，进入自定义硬件，移除打印机即可。</li>\n<li>直接选择 English（United States），然后有几个关键的步骤一定要跟着操作\n<ol>\n<li>进入 <code>SOFTWARE SELECTION</code> ，勾选 <code>GNOME Desktop</code> ，这是下载桌面版，不勾选的话安装好后就是命令行模式，看你喜欢哪一种咯（虽然我装好后也是本地 ssh 连接的🤣），选后点击左上角 Done：<img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/aa56274310ba017c.jpg\" alt=\"\" /></li>\n<li>进入 <code>NETWORK &amp; HOST NAME</code>  ，打开 Ethernet（ens33），一定要打开，不然 <code>ifconfig</code>  命令找不到 ip：<img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/df15644342b77a4d.jpg\" alt=\"\" /></li>\n<li>设置账户密码就行了</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"下载redis\"><a class=\"anchor\" href=\"#下载redis\">#</a> 下载 Redis</h2>\n<p>通过命令行安装即可，也可以下载压缩包，解压安装，我们这里讲后者，命令行安装虽然简单，但是不方便讲解</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 建议在根目录下创建 devtool 目录，放开发软件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> devtool</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">cd</span> devtool</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 新建 redis 目录，待会下载的东西就放到这里</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> redis</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">cd</span> redis</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 在 redis 目录下载压缩包</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">wget</span> http://download.redis.io/releases/redis-5.0.14.tar.gz</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 解压</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxf</span> redis-5.0.14.tar.gz</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token builtin class-name\">cd</span> redis-3.2.0</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 如果没有 gcc 和 vim，下载一下</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> gcc</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> <span class=\"token function\">vim</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 安装</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">make</span></pre></td></tr></table></figure><p>还是在 redis-5.0.14（解压后的目录）， <code>ls</code>  目录看到 <code>redis.conf</code>  文件，有些人喜欢个人修改配置文件，需要复制一份 <code>redis.conf</code> ，然后再修改复制文件，放到其他位置，启动 redis 时再指定该文件，总之就是避免在原文件中修改，可是我偏不，自己会用就行（当然，你要确保你在改什么，而不是说改了之后出了问题你不会解决），规矩是死的。</p>\n<p>我们直接 <code>sudo vim redis.conf</code>  修改文件：</p>\n<ol>\n<li>找到 <code>protected-mode yes</code> ，把 <code>yes</code>  改为 <code>no</code> 。保护模式是只允许主机连接 redis 服务器，改为 <code>no</code>  就能使其他设备连到 redis。</li>\n<li>找到 <code>bind 127.0.0.1</code> ，注释掉它，删了也行。默认的 bind 接口是 127.0.0.1，也就是本地回环地址。这样的话，访问 redis 服务只能通过本机的客户端连接，而无法通过远程连接。</li>\n<li>找到 <code>daemonize no</code> ，改为 <code>yes</code> ，这样启动就是后台运行。</li>\n<li><code>Esc</code> + <code>:wq</code>  退出（我默认你会使用 vim）</li>\n</ol>\n<p>现在就可以运行 redis 了， <code>redis-server</code>  放在 src 目录下，我们在运行时再指定一下配置文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>src/redis-server redis.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 我们可以看一下后台运行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> redis</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan       <span class=\"token number\">6649</span>      <span class=\"token number\">1</span>  <span class=\"token number\">0</span> 09:58 ?        00:00:00 src/redis-server *:6379</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan       <span class=\"token number\">6654</span>   <span class=\"token number\">3218</span>  <span class=\"token number\">0</span> 09:59 pts/1    00:00:00 <span class=\"token function\">grep</span> <span class=\"token parameter variable\">--color</span><span class=\"token operator\">=</span>auto redis</pre></td></tr></table></figure><h2 id=\"关闭防火墙\"><a class=\"anchor\" href=\"#关闭防火墙\">#</a> 关闭防火墙</h2>\n<p>为了保证我们本地（windows）能够连接虚拟机的 redis，除了要修改配置文件，还要把防火墙关一下（搞笑，开发者要啥防火墙，你的电脑上不会有杀毒软件吧？）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看防火墙状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl status firewalld.service</pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/ab55defcb0f5c8dd.jpg\" alt=\"\" /></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 关闭防火墙</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl stop firewalld.service</pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/6db90319eb68d7f3.jpg\" alt=\"\" /></p>\n<p>其实我建议禁止防火墙启动：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl disable firewalld.service</pre></td></tr></table></figure><p>然后就 ok 了，你可以再看一下防火墙状态。</p>\n<h2 id=\"下载redis-view\"><a class=\"anchor\" href=\"#下载redis-view\">#</a> 下载 Redis view</h2>\n<p>一个可视化工具，正好试试能不能连上虚拟机的 redis，安装包我放在阿里云盘了：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MvTmhoRFJDUjFTM3M=\">https://www.aliyundrive.com/s/NhhDRCR1S3s</span></p>\n<p>在 windows 本地安装好后打开，创建一个新的连接：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/7740ac1f62e60421.jpg\" alt=\"\" /></p>\n<p>ip 记得输你自己的，不需要密码，因为配置文件默认是不需要密码的，当然你也可以设置，那个选项是 <code>requirepasswd</code>  来着。</p>\n<p><strong>我踩过的坑，一点题外话</strong>🤣：</p>\n<p>刚开始用这个可视化工具连接的时候，总会出错，点击那个测试链接，<strong>显示 ping 不通</strong>，但是我在 cmd 里面 ping 虚拟机的 ip 又可以，就很懵逼，当时也是课上老师叫我们安装，然后我就把这问题发群（一般一门课都会有群）里求助：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/15/a8db54b8edc3bd06.jpg\" alt=\"\" /></p>\n<p>结果并没有人鸟我，我必须使用下面的 ssh 输入账户和密码（centos 账户）才能连接 redis，一开始是怎么也想不通。当时又布置个作业，叫在本地 windows 使用 springboot 连接虚拟机的 redis 做点东西，我靠，Java 咋连接 ssh 我的虚拟机的同时又连接虚拟机的 redis？？？</p>\n<p>后来查发现是防火墙的问题，但是上课时老师叫我们把防火墙关了，发了这些命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这些命令也是正确的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>systemctl status firewalld</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>systemctl stop firewalld</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>systemctl disable firewalld</pre></td></tr></table></figure><p><strong>我就一直默认我是关了防火墙的，然后就自动跳过了检查防火墙这一操作</strong>，我靠，找了一上午。后来想了一下，需要 ssh 连接才能连接 redis，其实这变相就是通过 ssh 登录了你的虚拟机账户，然后直连 redis 服务。<strong>需要 ssh 连接，是因为 centos 不信任你，那么就一定有个东西给你挡着，这才想起要改防火墙</strong>，好了，踩坑分享吐槽结束。</p>\n<h1 id=\"配置集群\"><a class=\"anchor\" href=\"#配置集群\">#</a> 配置集群</h1>\n<p>单机的内存容量有限，难以扩展，而 redis 又会大量使用内存，所以可以让多台服务器分别存储各个部分数据，实现容量横向扩展，如下图：主从节点是主从复制部分内容，可以暂时不用管。</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/27/3c3e343999725437.jpg\" alt=\"\" /></p>\n<p>那么用户如何选择写到哪个 redis 呢？这涉及到集群的机制：</p>\n<p>一个 Redis 汲取包含<strong> 16384</strong> 个插槽，集群中的每个 Redis 实例负责维护<strong>一部分</strong>插槽以及插槽所映射的键值数据。插槽是键的 Hash 计算后的一个结果，这里采用了计网的知识 ——CRC16（CRC 循环冗余校验），得到的结果<strong> 0-65535</strong> 之间，再进行取模，得到最终结果：</p>\n<p><strong>Redis key 的路由计算公式：slot = CRC16（key） % 16384</strong>。</p>\n<p>计算出来<strong> slot</strong> 是多少，就存放到对应维护的 Redis 下，所以本质就是通过哈希算法将插入的数据分摊到各个节点。</p>\n<p>我们搭建简单的 Redis 集群，创建 6 个配置（如果有主从需求，至少是 6 个 redis），首先上文提到的压缩包希望你还留着，然后再重新解压四个出来， <code>make</code>  编译一下，这四个的配置都要和上面一样，在此基础上， <code>redis.conf</code>  还需要改两个：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 四个 redis，我这边的端口是从 6980~6983 四个端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>port <span class=\"token number\">8980</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 用:/cluster-enabled 快速查找就可以</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cluster-enabled <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 取消注释，配置文件的名字根据端口名修改一下</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cluster-config-file nodes-6980.conf</pre></td></tr></table></figure><p>建议你的目录结构和我一样：</p>\n<p>然后将 6 个都启动一下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./redis-cluster-6980/src/redis-server redis-cluster-6980/redis.conf</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>./redis-cluster-6981/src/redis-server redis-cluster-6981/redis.conf</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./redis-cluster-6982/src/redis-server redis-cluster-6982/redis.conf</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>./redis-cluster-6983/src/redis-server redis-cluster-6983/redis.conf</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>./redis-cluster-6982/src/redis-server redis-cluster-6984/redis.conf</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>./redis-cluster-6983/src/redis-server redis-cluster-6985/redis.conf</pre></td></tr></table></figure><p>如果你觉得这样每次这样启动太麻烦，可以编写一个脚本：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 一定要在 redis 目录下</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost redis<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim start-cluster.sh</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 脚本内容，该注释不要复制进去</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>./redis-cluster-6980/src/redis-server redis-cluster-6980/redis.conf</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>./redis-cluster-6981/src/redis-server redis-cluster-6981/redis.conf</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>./redis-cluster-6982/src/redis-server redis-cluster-6982/redis.conf</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>./redis-cluster-6983/src/redis-server redis-cluster-6983/redis.conf</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>./redis-cluster-6982/src/redis-server redis-cluster-6984/redis.conf</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>./redis-cluster-6983/src/redis-server redis-cluster-6985/redis.conf</pre></td></tr></table></figure><p>然后添加执行权限：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> u+x start-cluster.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 之后启动：./start-cluster.sh 即可</span></pre></td></tr></table></figure><p>启动后查看一下（这是我之前的图，只有四个，应该启动六个）：</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/27/f5913c771ad50b97.jpg\" alt=\"\" /></p>\n<p>之后客户端配置集群：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cluster-6980/src/redis-cli <span class=\"token parameter variable\">--cluster</span> create --cluster-replicas <span class=\"token number\">1</span> <span class=\"token number\">127.0</span>.0.1:6980 <span class=\"token number\">127.0</span>.0.1:6981 <span class=\"token number\">127.0</span>.0.1:6982 <span class=\"token number\">127.0</span>.0.1:6983 <span class=\"token number\">127.0</span>.0.1:6984 <span class=\"token number\">127.0</span>.0.1:6985</pre></td></tr></table></figure><p>这里的 <code>--cluster-replicas 1</code>  指的是每个节点配一个从节点。</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/27/a263f650952b426c.jpg\" alt=\"\" /></p>\n<p>现在整个集群就搭建好了，使用 <code>ls</code>  命令你可以看到:</p>\n<p><img data-src=\"https://s3.uuu.ovh/imgs/2022/11/27/595bef3292092f82.jpg\" alt=\"\" /></p>\n<p>生成了一些.rdb，.conf 文件（conf 文件启动 redis 时就生成了），如果需要取消集群配置，就要先杀死这些 redis 进程，在删除这些文件即可。</p>\n<p>如果你的 redis 数目少于 6 个，就会报错：这种错是因为要配置从服务器，如果没有 <code>--cluser-replicas 1</code>  命令就不会报错。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>*** ERROR: Invalid configuration <span class=\"token keyword\">for</span> cluster creation.</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*** Redis Cluster requires at least <span class=\"token number\">3</span> master nodes.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>*** This is not possible with <span class=\"token number\">4</span> nodes and <span class=\"token number\">1</span> replicas per node.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*** At least <span class=\"token number\">6</span> nodes are required.</pre></td></tr></table></figure><p>现在连接测试以下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 6980 这个 redis 被设置为主服务器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>redis-cluster-6980/src/redis-cli <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6980</span></pre></td></tr></table></figure><p>发现可以连接，ok！</p>\n<p>一些坑：</p>\n<ul>\n<li>版本 5 以上才能使用 <code>--cluster</code>  命令，版本 5 以下会找不到该命令，当然有其他解决办法，比较麻烦，你可以看看该<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1d2hfL2FydGljbGUvZGV0YWlscy83OTI0MjYyNQ==\">文章</span>。</li>\n<li><code>--cluser-replicas 1</code>  表示每个主服务器配置一个从服务器。</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL3hvYXBxNSM5MmExZGM2MQ==\">https://www.yuque.com/qingkongxiaguang/spring/xoapq5#92a1dc61</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2h1d2hfL2FydGljbGUvZGV0YWlscy83OTI0MjYyNQ==\">https://blog.csdn.net/huwh_/article/details/79242625</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM0NzU5MTgwL2FydGljbGUvZGV0YWlscy8xMDYyNjU2MTA/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjY5NTMyNDUwMTY3ODI0MjU2OTY5NjIlMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQucGMlMjU1RmFsbC4lMjUyMiUyNTdEJmFtcDtyZXF1ZXN0X2lkPTE2Njk1MzI0NTAxNjc4MjQyNTY5Njk2MiZhbXA7Yml6X2lkPTAmYW1wO3V0bV9tZWRpdW09ZGlzdHJpYnV0ZS5wY19zZWFyY2hfcmVzdWx0Lm5vbmUtdGFzay1ibG9nLTJ+YWxsfmZpcnN0X3JhbmtfZWNwbV92MX5yYW5rX3YzMV9lY3BtLTUtMTA2MjY1NjEwLW51bGwtbnVsbC4xNDIlNUV2NjYlNUVwY19yYW5rXzM0X3F1ZXJ5cmVsZXZhbnQyNSwyMDElNUV2MyU1RWNvbnRyb2xfMSwyMTMlNUV2MiU1RXQzX2VzcXVlcnlfdjEmYW1wO3V0bV90ZXJtPVVucmVjb2duaXplZCUyMG9wdGlvbiUyMG9yJTIwYmFkJTIwbnVtYmVyJTIwb2YlMjBhcmdzJTIwZm9yJTNBJTIwLS1jbHVzdGVyJmFtcDtzcG09MTAxOC4yMjI2LjMwMDEuNDE4Nw==\">Redis5 及以下版本集群部署</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YXlpaG91c2UuY29tL3lheWlzaHV3dS9jaGFwdGVyLzI0MTc=\">http://www.yayihouse.com/yayishuwu/chapter/2417</span></p>\n<p><strong>强烈推荐</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ppYW5naHVjaHVhbmcvYXJ0aWNsZS9kZXRhaWxzLzExMzc5NTI1NT9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2Njk1MzEwODkxNjc4MjQyODY1OTM3OSUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC4uJTI1MjIlMjU3RCZhbXA7cmVxdWVzdF9pZD0xNjY5NTMxMDg5MTY3ODI0Mjg2NTkzNzkmYW1wO2Jpel9pZD0wJmFtcDt1dG1fbWVkaXVtPWRpc3RyaWJ1dGUucGNfc2VhcmNoX3Jlc3VsdC5ub25lLXRhc2stYmxvZy0yfmFsbH5zb2JhaWR1ZW5kfmRlZmF1bHQtMS0xMTM3OTUyNTUtbnVsbC1udWxsLjE0MiU1RXY2NiU1RXBjX3JhbmtfMzRfcXVlcnlyZWxldmFudDI1LDIwMSU1RXYzJTVFY29udHJvbF8xLDIxMyU1RXYyJTVFdDNfZXNxdWVyeV92MSZhbXA7dXRtX3Rlcm09Y2VudG9zJUU2JTkwJUFEJUU1JUJCJUJBcmVkaXMlRTklOUIlODYlRTclQkUlQTQmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">Centos7 搭建 Redis 集群</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/06/Database/Redis/Redis%E5%85%A5%E9%97%A8(4)-%E4%BA%8B%E5%8A%A1/",
            "url": "https://cecilia.cool/2022/11/06/Database/Redis/Redis%E5%85%A5%E9%97%A8(4)-%E4%BA%8B%E5%8A%A1/",
            "title": "Redis入门(4)--事务",
            "date_published": "2022-11-06T06:21:50.000Z",
            "content_html": "<p>事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p>\n<h1 id=\"相关命令\"><a class=\"anchor\" href=\"#相关命令\">#</a> 相关命令</h1>\n<blockquote>\n<p>MULTI 、 EXEC 、 DISCARD 和 WATCH 是 Redis 事务相关的命令。</p>\n</blockquote>\n<ul>\n<li>multi：开启事务</li>\n<li>exec：执行事务</li>\n<li>discard：取消事务</li>\n<li>watch：监视若干个 key，事务执行前，key 被其他命令修改，则事务中断（乐观锁）。</li>\n<li>unwatch：取消监视。</li>\n</ul>\n<h2 id=\"错误处理机制\"><a class=\"anchor\" href=\"#错误处理机制\">#</a> 错误处理机制</h2>\n<ul>\n<li>语法错误（编译器错误）：开启事务后，如果是命令输入错误之类的，redis 会立即提示，此时若提交事务就会失败，并且事务中其他命令改动的数据都不变。</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">set</span> k1 v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">set</span> k2 v2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> MULTI</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">set</span> k1 <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED\t\t<span class=\"token comment\">-- 事务状态下的 ml 返回 queued，表示命令进入事务队列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> sets k2 <span class=\"token number\">22</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> ERR unknown command <span class=\"token identifier\"><span class=\"token punctuation\">`</span>sets<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">with</span> args beginning <span class=\"token keyword\">with</span>: <span class=\"token identifier\"><span class=\"token punctuation\">`</span>k2<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token identifier\"><span class=\"token punctuation\">`</span>22<span class=\"token punctuation\">`</span></span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">exec</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> EXECABORT <span class=\"token keyword\">Transaction</span> discarded because <span class=\"token keyword\">of</span> previous <span class=\"token keyword\">errors</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> get k1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token string\">\"v1\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> get k2</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token string\">\"v2\"</span></pre></td></tr></table></figure><ul>\n<li>类型错误（运行时错误）：在运行时检测类型错误，最终导致事务提交失败，此时事务没有回滚，而是跳过错误命令继续执行。</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">set</span> k1 v1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">set</span> k1 v2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> MULTI</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>OK</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">set</span> k1 <span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lpush k2 <span class=\"token number\">22</span>\t\t<span class=\"token comment\">-- 将 k2 当作 list</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>QUEUED</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> <span class=\"token keyword\">EXEC</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> OK</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> WRONGTYPE Operation against a <span class=\"token keyword\">key</span> holding the wrong kind <span class=\"token keyword\">of</span> <span class=\"token keyword\">value</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> get k1</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token string\">\"11\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> get k2</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token string\">\"v2\"</span></pre></td></tr></table></figure><p>执行失败（运行错误）后会继续执行而不是回滚，是 redis 考虑到事务命令执行失败都是程序员自己写的代码有问题，即使回滚，也无法解决这些问题，程序员更应该编写正确的命令再使用到生产环境，同时 redis 因为没有回滚，也保持简洁。</p>\n<h1 id=\"乐观锁\"><a class=\"anchor\" href=\"#乐观锁\">#</a> 乐观锁</h1>\n<p>watch 命令为事务提供了 CAS 行为，之前 <code>J.U.C</code>  系列文章中讲的许多锁，利用 CAS 特性不断重试直到原子修改数据。</p>\n<p>在 WATCH 执行之后， EXEC 执行之前， 有其他客户端修改了 mykey 的值， 那么当前客户端的事务就会失败。 程序需要做的， 就是不断重试这个操作， 直到没有发生碰撞为止。大多数情况下， 不同的客户端会访问不同的键， 碰撞的情况一般都很少， 所以通常并不需要进行重试。</p>\n<p><strong>watch 实现监视</strong>：</p>\n<p>需要在 MULTI 之前使用 WATCH 来监控某些键值对，然后使用 MULTI 命令来开启事务，执行对数据结构操作的各种命令，此时这些命令入队列。</p>\n<p>当使用 EXEC 执行事务时，首先会比对 WATCH 所监控的键值对，如果没发生改变，它会执行事务队列中的命令，提交事务；如果发生变化，将不会执行事务中的任何命令，同时事务回滚。<strong>当然无论是否回滚，Redis 都会取消执行事务前的 WATCH 命令</strong>。</p>\n<h1 id=\"一些理解\"><a class=\"anchor\" href=\"#一些理解\">#</a> 一些理解</h1>\n<ul>\n<li>\n<p>redis 不支持回滚：redis 命令因为错误的语法（<strong>运行时错误</strong>）失败，然后继续执行后面的命令，redis 认为这些都是程序员可以自己规避的，错误的语法也不应该放在生产环境中，所以 redis 没有回滚机制，保持简单迅速。</p>\n</li>\n<li>\n<p>事务 ACID：ACID 就是原子性（atomicity），一致性（consistency），隔离性（isolation），持久性（durability）。</p>\n<ul>\n<li>原子性：运行期错误不会回滚。redis 认为事务仍然是原子性的，所有命令要么全部执行，要么全部不执行，而不是完全成功。之前说了，运行期错误应该在生产环境杜绝出现。</li>\n<li>一致性：事务命令失败得以回滚，保证一致性。</li>\n<li>隔离性：单进程单线程模式。</li>\n<li>持久性：RDB 和 AOF 都是异步执行（也可以阻塞，save 命令嘛）。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMteC10cmFucy5odG1s\">https://pdai.tech/md/db/nosql-redis/db-redis-x-trans.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eiMwZjIzMjQ3Yg==\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz#0f23247b</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/05/Database/Redis/Redis%E5%85%A5%E9%97%A8(3)-%E6%8C%81%E4%B9%85%E5%8C%96/",
            "url": "https://cecilia.cool/2022/11/05/Database/Redis/Redis%E5%85%A5%E9%97%A8(3)-%E6%8C%81%E4%B9%85%E5%8C%96/",
            "title": "Redis入门(3)--持久化",
            "date_published": "2022-11-05T09:13:37.000Z",
            "content_html": "<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<p>Redis 数据放在内存中所以快， 但是也容易丢失。引出两种持久化方法：</p>\n<ul>\n<li>存储数据到硬盘中。</li>\n<li>保存存放数据的过程，恢复数据时，只需要将过程执行一遍（有点 undo 日志的味道）。</li>\n</ul>\n<h2 id=\"rdb\"><a class=\"anchor\" href=\"#rdb\">#</a> RDB</h2>\n<p>就是将数据保存到硬盘中：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 会阻塞</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">save</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 创建进程负责持久化，只有 fork 才会阻塞</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bgsave</pre></td></tr></table></figure><p>执行后，会在服务端目录下生成一个 dump.rdb 文件，而这个文件中就保存了内存中存放的数据，当服务器重启后，会自动加载里面的内容到对应数据库中。保存后我们可以关闭服务器：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 也会触发 bgsave</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">shutdown</span></pre></td></tr></table></figure><p>可以在配置文件中设置自动保存功能（windows 下是 redis.windows.conf 文件）</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/05/c23c983682d34698.jpg\" alt=\"\" /></p>\n<p>以第一个为例，意思为 900 秒内有 1 个写入时，就保存。配置的 save 使用的都是 bgsave 后台执行。</p>\n<p>RDB 保证数据一致性，生产环境中内存区都比较大，将内存中的数据同步到硬盘的过程可能会持续比较长，此时 Redis 服务收到数据写请求就需要<strong>保证数据一致性</strong>。核心思路是 Copy-on-Write：</p>\n<p>我们需要保证的是，在某个数据执行写入磁盘操作时，该数据在内存中不会发生变化。</p>\n<p>在正常的快照操作中，Redis 主进程会 fork 一个新的快照进程专门来做这个事情，这样保证了 Redis 服务不会停止对客户端包括写请求在内的任何响应。子进程就不断将内存数据存入磁盘。这个过程中，主进程对于内存只有<strong> read-only</strong> 权限，当发生写请求时，会触发页异常中断，陷入内核的中断例程，此时内核就会把触发异常的页复制一份（还未修改）交给子进程。这种哪个页发生修改就复制哪个页的机制，细化了内存粒度。</p>\n<p><strong>在进行快照操作的这段时间，如果发生服务崩溃怎么办</strong>？</p>\n<p>很简单，在没有将数据全部写入到磁盘前，这次快照操作都不算成功。如果出现了服务崩溃的情况，将以上一次完整的 RDB 快照文件作为恢复内存数据的参考。也就是说，在快照操作过程中不能影响上一次的备份数据。Redis 服务会在磁盘上创建一个临时文件进行数据操作，待操作成功后才会用这个临时文件替换掉上一次的备份。</p>\n<h2 id=\"aof\"><a class=\"anchor\" href=\"#aof\">#</a> AOF</h2>\n<p>RDB 缺点在于，如果在自动保存前服务器崩溃，依然会导致少量数据丢失。AOF 就是另一种方式，它会以日志的形式将我们每次执行的命令都进行保存，服务器重启时会将所有命令依次执行，通过这种重演的方式将数据恢复，这样就能很好解决实时性存储问题。</p>\n<p>对于日志的记录，也有保存策略可以配置：</p>\n<ul>\n<li>always：每次写操作都会保存</li>\n<li>everysec：每秒保存一次（默认配置），这样丢失数据限定在一秒内。</li>\n<li>no：看系统心情</li>\n</ul>\n<p>配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 注意得改成也是</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>appendonly yes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># appendfsync always</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>appendfsync everysec</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># appendfsync no</span></pre></td></tr></table></figure><p>重启服务器后，可以看到服务器目录下多了一个 <code>appendonly.aof</code>  文件，存储的就是我们执行的命令。</p>\n<p>AOF 的同步策略涉及到操作系统的 <code>write</code>  函数和 <code>fsync</code>  函数，在《Redis 设计与实现》如此说明：</p>\n<blockquote>\n<p>为了提高文件写入效率，在现代操作系统中，当用户调用 write 函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。</p>\n<p>这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了 fsync、fdatasync 同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。</p>\n</blockquote>\n<h3 id=\"aof文件重写机制\"><a class=\"anchor\" href=\"#aof文件重写机制\">#</a> AOF 文件重写机制</h3>\n<p>如果只是傻瓜式记录操作日志。没有任何优化，就会导致 <code>appednonly.aof</code>  变得十分大，所以 Redis 有一个 AOF 重写机制进行优化（多条语句压缩），反正就是优化后的操作和原来的操作结果一致。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/06/634891d04771fda3.jpg\" alt=\"\" /></p>\n<p>输入命令执行重写操作： <code>bgrewriteaof</code> 。</p>\n<p>AOF 重写过程是由后台进程 bgrewriteaof 来完成的。主线程 fork 出后台的 bgrewriteaof 子进程，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p>\n<p>所以 aof 在重写时，在 fork 进程时是会阻塞住主线程的。</p>\n<p>或者配置文件配置自动重写：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 百分比计算，当前 aof 文件比上一次重写后 aof 文件的增量大小，和上一次重写后 aof 文件大小的比值。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>auto<span class=\"token operator\">-</span>aof<span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>percentage <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 当达到这个大小时，触发自动重写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>auto<span class=\"token operator\">-</span>aof<span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>min<span class=\"token operator\">-</span>size <span class=\"token number\">64</span>mb</pre></td></tr></table></figure><p>如何在重写时，处理写请求：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/06/0f71177930cf5ed9.jpg\" alt=\"\" /></p>\n<p>如果有新数据写入，主线程就会将命令记录到两个 aof 日志内存缓冲区中。如果 AOF 写回策略配置的是 always，则直接将命令写回旧的日志文件，并且保存一份命令至 AOF 重写缓冲区，这些操作对新的日志文件是不存在影响的。（旧的日志文件：主线程使用的日志文件，新的日志文件：bgrewriteaof 进程使用的日志文件）</p>\n<ul>\n<li>主线程 fork 出子进程重写 aof 日志</li>\n<li>子进程重写日志完成后，主线程追加 aof 日志缓冲</li>\n<li>替换日志文件</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eiNSREI=\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz#RDB</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMteC1yZGItYW9mLmh0bWw=\">https://pdai.tech/md/db/nosql-redis/db-redis-x-rdb-aof.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaW5nZy50b3AvY29tcHV0ZXItYmFzaWMtdGhlb3J5LWNvcHktb24td3JpdGUv\">https://ningg.top/computer-basic-theory-copy-on-write/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011c2NsZWFwZS9hcnRpY2xlL2RldGFpbHMvMTA1NjcwNDgx\">https://blog.csdn.net/Muscleape/article/details/105670481</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWJ5bi9wLzE0MTU3NTY4Lmh0bWw=\">https://www.cnblogs.com/ybyn/p/14157568.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNTk4MzUxOA==\">https://segmentfault.com/a/1190000015983518</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDM0NjEyL2FydGljbGUvZGV0YWlscy8xMDg3OTE0Mzc=\">https://blog.csdn.net/qq_41434612/article/details/108791437</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGlhbmcyNC9wLzE0MTgwMDM2Lmh0bWw=\">https://www.cnblogs.com/liang24/p/14180036.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2JhN2I4YWQ5NjQ=\">https://www.jianshu.com/p/d3ba7b8ad964</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXBlaWZlbmczNTE0L2FydGljbGUvZGV0YWlscy83OTA0ODc2Nw==\">https://blog.csdn.net/liupeifeng3514/article/details/79048767</span></p>\n<p>极客时间 《Redis 核心与实战》的相关内容</p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/05/Database/Redis/Redis%E5%85%A5%E9%97%A8(2)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "https://cecilia.cool/2022/11/05/Database/Redis/Redis%E5%85%A5%E9%97%A8(2)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "Redis入门(2)--数据类型",
            "date_published": "2022-11-04T16:39:36.000Z",
            "content_html": "<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>在 <code>redis</code>  中，所有 <code>key</code>  都是字符串，讨论数据结构时，都是存储值的数据类型，常见的包括：</p>\n<ul>\n<li>String：字符串、整数或浮点数。对整个字符串或字符串的一部分进行操作；对整数或浮点数进行自增或自减操作。</li>\n<li>List：对链表的两端进行 push 和 pop 操作，读取单个或多个元素；根据值查找或删除元素；</li>\n<li>Set：字符串的集合，包含基础的方法有看是否存在添加、获取、删除；还包含计算交集、并集、差集等。</li>\n<li>Zset：字符串成员与浮点数分数之间的有序映射；元素的排列顺序由分数的大小决定；包含方法有添加、获取、删除单个元素以及根据分值范围或成员来获取元素。</li>\n<li>Hash：添加、获取、删除单个元素</li>\n</ul>\n<blockquote>\n<p>关于集合的命令，有啥想不起就去搜。</p>\n</blockquote>\n<h2 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h2>\n<p>记住上一篇文章讲的几个命令即可： <code>get,set,del,incr,decr,incrby,decrby</code> 。</p>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<p>可以实现消息队列，将任务存 <code>PUSH</code>  在 List 中，工作线程再 <code>POP</code>  操作将任务取出执行。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/05/e621c88a8c58d5a8.jpg\" alt=\"\" /></p>\n<p>两边都可以增删节点，对应方法就是 <code>L/RPUSH</code>  和 <code>L/RPOP</code> ，具体使用为：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lpush mylist <span class=\"token number\">1</span> <span class=\"token number\">2</span> ll ls mem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lrange mylist <span class=\"token number\">0</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\t<span class=\"token comment\">-- lrange 获取列表所有值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mem\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ls\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ll\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lindex mylist <span class=\"token operator\">-</span><span class=\"token number\">1</span>\t<span class=\"token comment\">-- lindex 根据索引获取元素 (0 开始)，负数也可以，-1 表示最后一个</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lindex mylist <span class=\"token number\">10</span>        <span class=\"token comment\">-- index 不在 mylist 的区间范围内</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>还有一些骚操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 从前一个数组的最后取一个数出来放到另一个数组的头部，并返回元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rpoplpush 当前数组 目标数组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 如果列表中没有元素，那么就等待，如果指定时间（秒）内被添加了数据，那么就执行 pop 操作，如果超时就作废，支持同时等待多个列表，只要其中一个列表有元素了，那么就能执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>blpop <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> timeout</pre></td></tr></table></figure><h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<p>不同元素无序排列，直接看命令：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> sadd myset hao hao1 xiaohao hao\t<span class=\"token comment\">-- sadd 添加若干个成员</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> smembers myset\t<span class=\"token comment\">-- 返回所有成员</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xiaohao\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hao1\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hao\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> sismember myset hao\t<span class=\"token comment\">-- 判断集合 myset 是否有集合 hao 成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 随机移除一个幸运儿</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>spop <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 移除指定</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>srem <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>集合之间的运算：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 集合之间的差集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sdiff <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 集合之间的交集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sinter <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 求并集</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sunion <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 将集合之间的差集存到目标集合中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sdiffstore 目标 <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 同上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sinterstore 目标 <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 同上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sunionstore 目标 <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 移动指定值到另一个集合中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>smove <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> 目标 <span class=\"token keyword\">value</span></pre></td></tr></table></figure><h2 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h2>\n<p>string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/05/25fd082b2f3cc590.jpg\" alt=\"\" /></p>\n<p>假设散列表名是 user：</p>\n<ul>\n<li>添加： <code>hset user key1 val1</code> 。</li>\n<li>获取值： <code>hget user key1</code> 。</li>\n<li>获取所有键值对： <code>hgetall user</code> 。</li>\n<li>移出键： <code>hdel user key</code> 。</li>\n</ul>\n<h2 id=\"zset\"><a class=\"anchor\" href=\"#zset\">#</a> Zset</h2>\n<p>每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合是通过两种数据结构实现：</p>\n<ol>\n<li><strong>压缩列表 (ziplist)</strong>: ziplist 是为了提高存储效率而设计的一种特殊编码的双向链表。它可以存储字符串或者整数，存储整数时是采用整数的二进制而不是字符串形式存储。它能在 O (1) 的时间复杂度下完成 list 两端的 push 和 pop 操作。但是因为<strong>每次操作都需要重新分配 ziplist 的内存</strong>，所以实际复杂度和 ziplist 的内存使用量相关</li>\n<li><strong>跳跃表（zSkiplist)</strong>: 跳跃表的性能可以保证在查找，删除，添加等操作的时候在对数期望时间内完成，这个性能是可以和平衡树来相比较的，而且在实现方面比平衡树要优雅，这是采用跳跃表的主要原因。跳跃表的复杂度是 O (log (n))。</li>\n</ol>\n<p>相关命令：</p>\n<ul>\n<li>添加： <code>zadd table key1 val1 score</code> 。</li>\n<li>获取： <code>zrange table key1 </code> 。</li>\n<li>删除： <code>zrem table key1 </code> 。</li>\n</ul>\n<p>因为都有一个分数值，所以可以根据分数值操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 通过分数段查看</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zrangebyscore <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> <span class=\"token keyword\">start</span> stop <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">limit</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 统计分数段内的数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zcount <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span>  <span class=\"token keyword\">start</span> stop</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 根据分数获取指定值的排名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>zrank <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMtZGF0YS10eXBlcy5odG1s\">https://pdai.tech/md/db/nosql-redis/db-redis-data-types.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eiNMaXN0\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz#List</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/03/Database/Redis/Redis%E5%85%A5%E9%97%A8(1)-%E5%AE%89%E8%A3%85%E4%B8%8E%E6%93%8D%E4%BD%9C/",
            "url": "https://cecilia.cool/2022/11/03/Database/Redis/Redis%E5%85%A5%E9%97%A8(1)-%E5%AE%89%E8%A3%85%E4%B8%8E%E6%93%8D%E4%BD%9C/",
            "title": "Redis入门(1)--安装与操作",
            "date_published": "2022-11-03T02:57:36.000Z",
            "content_html": "<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<blockquote>\n<p>官网提供的是 Mac 和 Linux 的安装包，并没有 windows 的，但是 <code>github</code>  有相关的开源项目。</p>\n</blockquote>\n<p>开源地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Rwb3JhZG93c2tpL3JlZGlzL3JlbGVhc2Vz\">https://github.com/tporadowski/redis/releases</span></p>\n<p>直接下载 <code>zip</code>  安装包就行了，然后运行服务端打开<strong> redis-server.exe</strong> 文件即可。客户端打开<strong> redis-cli.exe</strong> 即可。</p>\n<p>如果客户端想要使用本地 cmd，则在 <code>redis</code>  根目录下执行命令： <code>redis-cli.exe -h localhost</code> 。默认是 6379 端口。</p>\n<p>如果想要远程访问，就需要将 <code>redis.windows.conf</code>  的 bind 注释掉， <code>protected-mode</code>  设为 <code>no</code> 。</p>\n<p>Linux (ubuntu) 下载 Redis：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> redis-server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看服务，按 q 退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> systemctl status redis-server</pre></td></tr></table></figure><p>可以远程访问 Redis，但是需要配置一下 <code>/etc/redis.conf</code>  文件，定位到 <code>bind 0.0.0.0 ::1</code> ，取消这行的注释，保存退出，重启 Redis 服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart redis-server</pre></td></tr></table></figure><p>配置防火墙，允许网络流量通过 TCP 端口 <code>6379</code> 。</p>\n<p>通常你想要允许从一个指定 IP 地址或者一个指定 IP 范围来访问 Redis 服务器。例如，想要允许从 <code>192.168.121.0/24</code>  的连接，运行下面的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> ufw allow proto tcp from <span class=\"token number\">192.168</span>.121.0/24 to any port <span class=\"token number\">6379</span></pre></td></tr></table></figure><p>此时，你应该可以从远程位置通过 TCP 连接到 Redis 的 6379 端口。</p>\n<p>想要验证所有设置都设置好了，你可以尝试使用 <code>redis-cli</code>  从你的远程机器上 ping 一下 Redis 服务器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">&lt;</span>REDIS_IP_ADDRESS<span class=\"token operator\">></span> <span class=\"token function\">ping</span></pre></td></tr></table></figure><p>这个命令将会返回一个响应： <code>PONG</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PONG</pre></td></tr></table></figure><p>使用： <code>redis-server&amp;</code>  置入后台，使用 ctrl+c 不会关闭 redis，然后再执行 <code>redis-cli</code>  打开客户端即可。</p>\n<p>关于 redis 可视化工具，可以使用 Redis View，我把安装包放在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWxpeXVuZHJpdmUuY29tL3MveU0xaVBrSkFXZHY=\">阿里云盘</span>了。</p>\n<h1 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h1>\n<ul>\n<li>热点数据的缓存：作为缓存使用，保存数据的方式一般是两种，读取数据前先读取 Redis，次级是数据库，并将数据拉入 Redis（可能会缓存击穿）；插入数据时同时写入 Redis。</li>\n<li>限时业务：比如验证码校验，60s 内有效。</li>\n<li>计数器：redis 的 incrby 原子递增，可以运用于高并发秒杀</li>\n<li>好友关系存储：在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。Redis 利用集合的一些命令，比如求交集、并集、差集等。</li>\n<li>简单队列：由于 Redis 有 list push 和 list pop 这样的命令，所以能够很方便的执行队列操作。</li>\n</ul>\n<h1 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p><code>Redis</code>  是一个键值数据库，因此，可以像 <code>Map</code>  一样的操作方式，通过键值对向 <code>Redis</code>  数据库中添加数据（操作起来类似于向一个 <code>HashMap</code>  中存放数据）。</p>\n<p>现在打开客户端或者使用 cmd 连接到服务端。</p>\n<p>redis 的数据库由整数索引标识（而不是名称），默认连接到 redis 使用 0 号数据库，默认 16 个数据库（可以通过配置文件修改数据库总数）。</p>\n<p>相关命令操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> 序号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 添加 / 修改数据；添加多个数据：mset key1 value1 key2 value2..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 获取数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>get <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 删除数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>del <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 设置数据过期时间，自动删除</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">value</span> EX 秒</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">value</span> PX 毫秒</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 为单独的键设置过期时间，转为永久就是 persist key</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>expire <span class=\"token keyword\">key</span> 秒</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 查询过期时间剩余 毫秒就是 pttl</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ttl <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 查询所有键值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">keys</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 某个键是否存在</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">exists</span> <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 随机拿一个键</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>randomkey</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 数据库内容迁移</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>move <span class=\"token keyword\">key</span> 数据库序号</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 修改键名 renamex 会检查新名称是否存在</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">rename</span> <span class=\"token keyword\">key</span> 新的键名</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 存放的数据是数字，自增自减操作</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>incr <span class=\"token keyword\">key</span>\t<span class=\"token comment\"># a++</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>incrby <span class=\"token keyword\">key</span> b\t<span class=\"token comment\"># a = a+b</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>decr <span class=\"token keyword\">key</span>\t<span class=\"token comment\"># a--</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 查看数据类型</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token keyword\">key</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMtaW50cm9kdWNlLmh0bWw=\">https://pdai.tech/md/db/nosql-redis/db-redis-introduce.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eg==\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjM5NjU4\">https://cloud.tencent.com/developer/article/1639658</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        }
    ]
}