<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cecilia.cool</id>
    <title>慕青の迷途 • Posts by &#34;八股文&#34; tag</title>
    <link href="https://cecilia.cool" />
    <updated>2024-03-07T02:14:42.000Z</updated>
    <category term="tools" />
    <category term="二次元" />
    <category term="Docker" />
    <category term="八股文" />
    <category term="云计算" />
    <category term="数据结构与算法" />
    <category term="网络协议与工具" />
    <category term="shell" />
    <category term="uni-app" />
    <category term="Spring全家桶" />
    <category term="Mybatis" />
    <category term="日志框架" />
    <category term="MySQL" />
    <category term="Redis" />
    <category term="Concurrency" />
    <category term="Java基础" />
    <category term="Java8" />
    <category term="网络编程" />
    <category term="设计模式" />
    <category term="Web" />
    <category term="JVM" />
    <entry>
        <id>https://cecilia.cool/2024/03/07/%E5%85%AB%E8%82%A1%E6%96%87/%E9%9D%A2%E7%BB%8F/</id>
        <title>面经</title>
        <link rel="alternate" href="https://cecilia.cool/2024/03/07/%E5%85%AB%E8%82%A1%E6%96%87/%E9%9D%A2%E7%BB%8F/"/>
        <content type="html">&lt;p&gt;本文是我在网上搜集、朋友面试、自己面试的总结，是一个持续更新的系列，所以应该会很长&lt;/p&gt;
&lt;h1 id=&#34;敖丙-读者面试&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#敖丙-读者面试&#34;&gt;#&lt;/a&gt; 敖丙 - 读者面试&lt;/h1&gt;
&lt;p&gt;资料来源：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUNFNDExRTdTRy8/dmRfc291cmNlPTVhY2Y1YTdiMjNkMjhlNzYzM2U1YTliMzgxYzU3YzQy&#34;&gt;https://www.bilibili.com/video/BV1CE411E7SG/?vd_source=5acf5a7b23d28e7633e5a9b381c57c42&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;问了好多问题，因为不是真实面试场景，所以一遇到不会的问题就换技术栈，所以涉及比较广，我选择有代表性的问题、我也不会的问题写上去。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q1： &lt;code&gt;SpringBean&lt;/code&gt;  注入过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q2：聊聊 Java8 新特性，了解过更高版本的新特性吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q3：线上 CPU100% 如何排查？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q4：InnoDB 为什么使用 B + 树而不用二叉树或者 B 树？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q5：MyISAM 和 InnoDB 的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q6：一张表最多能建多少个索引？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q7：Redis 如何保证数据高可用？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  为了保证数据高可用，引入了持久化机制， 在早期版本，还有 VM，后来版本不推荐了。现在一般都是使用 &lt;code&gt;RDB&lt;/code&gt; 、 &lt;code&gt;AOF&lt;/code&gt;  或者混合持久化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RDB&lt;/code&gt;  通过对内存数据拍摄快照来持久化数据，触发机制是在一定时间内发生一定次数的修改操作。当然也可以使用 &lt;code&gt;save/bgsave&lt;/code&gt;  主动拍摄快照，前者会阻塞线程，后者才会 &lt;code&gt;fork&lt;/code&gt;  一个子线程进行快照拍摄。因为采用了压缩算法，实际占用空间很小。异步存储为了保证数据一致性，借助了操作系统的 &lt;code&gt;Copy on Write&lt;/code&gt;  机制，主线程修改哪个页，就会先将这个页复制出来，在复制页进行修改。等快照拍摄结束，再将复制的页合并到原始内存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  通过存储执行的命令到磁盘中保证数据的持久性，可以配置多种存储方式，比如执行一条命令就存储一条，或者每秒存储一次，或者看系统心情，什么时候有空什么时候就将缓冲区的命令存进去。 &lt;code&gt;AOF&lt;/code&gt;  机制执行久了，就会导致文件保存了很多无效的命令，所以需要重写 &lt;code&gt;AOF&lt;/code&gt;  文件 —— &lt;code&gt;bgrewriteaof&lt;/code&gt; ，过程为：子线程遍历 &lt;code&gt;Redis&lt;/code&gt;  内存生成一系列指令，然后将这些指令序列化到临时文件中，过程中的增量命令会追加到临时文件中，最后替换 &lt;code&gt;AOF&lt;/code&gt;  文件。这里需要重点说一下，我们将数据写入到文件中时，其实是先写入到内核缓冲区，再到磁盘缓冲区，最后到磁盘，最后一个阶段我们是无法介入的，但是可以调用 &lt;code&gt;fsync()&lt;/code&gt;  强制将数据刷新到磁盘缓冲区。 &lt;code&gt;redis&lt;/code&gt;  默认是每秒调用一次。（有参数控制何时重写，比如文件大小超过多少，增量达到多少）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;混合持久化&lt;/code&gt; ：4.0 版本后还出现了混合持久化，该机制必须打开 &lt;code&gt;AOF&lt;/code&gt; ，隔一段时间拍摄快照，生成 &lt;code&gt;rdb&lt;/code&gt;  数据，两次快照之间的记录使用 &lt;code&gt;AOF&lt;/code&gt;  日志来记录，并追加到 &lt;code&gt;rdb&lt;/code&gt;  数据后面。恢复数据时，先回复 &lt;code&gt;rbd&lt;/code&gt;  数据，再执行 &lt;code&gt;AOF&lt;/code&gt;  日志。这种机制既解决了 &lt;code&gt;rdb&lt;/code&gt;  快照摄时突然断电导致整个快照丢失（因为还在临时文件中），也解决了 &lt;code&gt;AOF&lt;/code&gt;  文件太大，不断重写的性能消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMteC1yZGItYW9mLmh0bWwjcmRiJUU1JTkyJThDYW9mJUU2JUI3JUI3JUU1JTkwJTg4JUU2JTk2JUI5JUU1JUJDJThGLTQtMCVFNyU4OSU4OCVFNiU5QyVBQw==&#34;&gt;Redis 进阶 - 持久化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvT19xRGNvNi1EYXN1M1JvbVdJS19JZw==&#34;&gt;https://mp.weixin.qq.com/s/O_qDco6-Dasu3RomWIK_Ig&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Q8：Redis 雪崩、穿透和击穿是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;缓存雪崩&lt;/strong&gt;：是因为大量的 &lt;code&gt;Key&lt;/code&gt;  同时过期，然后又来了海量的请求，导致全部打到后端数据库，造成数据库压力甚至宕机。在主从复制中，如果主节点和从节点时间相差很大，在主节点没有过期的 &lt;code&gt;Key&lt;/code&gt;  可能从节点已经过期了，如果主节点宕机了恰好选举出这个从节点作为新的主节点，那么它可能就会面临一大批同时过期的 &lt;code&gt;Key&lt;/code&gt; ，可能就会导致缓存雪崩。上述例子提示我们应该保证主从节点时间一致。同时，&lt;strong&gt;应对缓存雪崩可以在过期时间上加一个随机值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存穿透&lt;/strong&gt;：通俗来说就是大量&lt;strong&gt;不存在数据的请求&lt;/strong&gt;直接打到后端数据库中，击穿了缓存。假设黑客攻击，请求的全是一些非法数据，比如 &lt;code&gt;id = -1、age = -1&lt;/code&gt;  什么的，后端数据库都不存在，那么缓存更不可能存在，所以请求相当于无视缓存直接请求到后端数据库。应对方法可以&lt;strong&gt;对每个不存在数据的请求在缓存中加上 &lt;code&gt;unknown&lt;/code&gt; ，这样下次相同的非法请求打过来缓存就可以拦截。&lt;strong&gt;但是这也有问题，毕竟非法、各不相同的请求有无数个，所以可以在接口层增加校验，不合法的参数直接 &lt;code&gt;return&lt;/code&gt; 。 &lt;code&gt;Redis&lt;/code&gt;  自带的&lt;/strong&gt;布隆过滤器&lt;/strong&gt;也能够很好的防止缓存穿透，它的原理就是利用高效的数据结构和算法快速判断这个 &lt;code&gt;key&lt;/code&gt;  是否在数据库中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓存击穿&lt;/strong&gt;：某个热点数据，很多请求都在访问它，但是如果该数据突然过期了，还是会导致很多请求打到后端数据库，所以可以&lt;strong&gt;设置热点数据不过期或者加上互斥锁&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3Mva256LWotbThiVGc1R25LYzdvZVpMZw==&#34;&gt;https://mp.weixin.qq.com/s/knz-j-m8bTg5GnKc7oeZLg&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q9：看你项目是涉及金融场景，是如何保证&lt;strong&gt;幂等&lt;/strong&gt;的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;朋友-腾讯云智研发&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#朋友-腾讯云智研发&#34;&gt;#&lt;/a&gt; 朋友 - 腾讯云智研发&lt;/h1&gt;
&lt;p&gt;该部分面经是我朋友面的腾讯云智研发，他在面完之后只有一个体会：计网、os 这些真的很能考研一个科班是否基础扎实。因为他被问了大量的计网知识，面试过程也是疯狂道歉。希望大家能够巩固基础，下 &lt;code&gt;offer&lt;/code&gt;  雨。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q1：TCP 与 UDP 区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TCP 是一对一建立连接的可靠传输控制协议，可以保证数据被全部有序的接收，同时还有流量控制、拥塞避免的功能。&lt;/p&gt;
&lt;p&gt;UDP 是一对多、一对一，多对一，多对多的不可靠无连接用户数据报协议，对应用层传过来的报文不合并也不拆分，只是添加 UDP 首部（TCP 会根据 MSS 拆分）。它是尽最大努力发送数据，但是不能保证数据一定会到达接收方，数据在传输过程中丢了也就丢了，不会重传，也不会根据网络拥塞情况做出优化让步。但是因为速度快，可以用于直播这种实时应用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q2：GET/POST 区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;GET&lt;/code&gt;  主要用于传输表单，会在 &lt;code&gt;URL&lt;/code&gt;  上携带参数，存在一定风险； &lt;code&gt;POST&lt;/code&gt;  主要用于传输实体对象，不会修改 &lt;code&gt;URL&lt;/code&gt; 。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q3：HTTP/HTTPS 区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;http&lt;/code&gt;  是明文传输，在数据传输的过程中容易被中间人窃取甚至替换，是不安全的。但是 &lt;code&gt;https&lt;/code&gt;  是安全的，通过非对称加密传输客户端生成的&lt;strong&gt;随机密钥&lt;/strong&gt;，再用该密钥进行对称加密传输数据。&lt;/p&gt;
&lt;p&gt;详细过程参考（我在脑海里走了一遍加密流程）：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMjFKYVh3ZGZTakl0ajVTZ093aGFwZw==&#34;&gt;https://mp.weixin.qq.com/s/21JaXwdfSjItj5SgOwhapg&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q4：SESSION/COOKIE 区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q5：TOKEN 是啥？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q6：如何实现多个设备同时登陆 ？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q7：如何实现多个设备无法同时登陆？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q8：Redis 的 hash 如何存储？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q9：Redis 的 list&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q10：Redis 持久化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;rdb&lt;/code&gt; 、 &lt;code&gt;aof&lt;/code&gt; 、混合持久化，在第一篇面试已经写了&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q11：MySQL 常用数据库引擎有哪些？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q12：InnoDB 主键索引实现方式？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q13：B + 树和散列表有什么区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q14：什么时候会索引失效？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q15：事务有哪些特性？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ACID&lt;/code&gt; ：原子性、持久性、隔离性、一致性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q16：间隙锁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q17：事务有哪些隔离级别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Q18：MVCC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔试：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9kZXNpZ24tY2lyY3VsYXItcXVldWUv&#34;&gt;设计循环队列&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="八股文" />
        <updated>2024-03-07T02:14:42.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2023/03/11/%E5%85%AB%E8%82%A1%E6%96%87/MySQL/</id>
        <title>MySQL</title>
        <link rel="alternate" href="https://cecilia.cool/2023/03/11/%E5%85%AB%E8%82%A1%E6%96%87/MySQL/"/>
        <content type="html">&lt;p&gt;本文参考网上各种博客以及《MySQL 是怎样运行的》一书，特别声明的是，我并没有看过任何关于 MySQL 的源码，我所见所学，皆是站在前人的基础。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一条 &lt;code&gt;SQL&lt;/code&gt;  查询语句在 &lt;code&gt;MySQL&lt;/code&gt;  中如何执行的？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算是一道经典面试题了，相当于计网的一条 &lt;code&gt;URL&lt;/code&gt;  从输入到界面呈现发生了什么类似。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先检查语句是否有权限，在 8.0 版本以前，有权限会先检查缓存，但是这并不是一个很好的特性，所以在 8.0 版本后删除了该操作。&lt;/li&gt;
&lt;li&gt;分析器进行词法分析，提取关键字，判断语法。&lt;/li&gt;
&lt;li&gt;优化器生成执行方案，最后交给执行器进行权限校验后执行，返回执行结果。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;一般如何对 &lt;code&gt;SQL&lt;/code&gt;  优化？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种问题把你能想到的都答上去，但是尽量要有条理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设计表方面：尽量减少字符串使用，多用数字类型；使用字符串尽量用 &lt;code&gt;varchar&lt;/code&gt;  节省空间。当索引列的重复数据占大多数时，建议删掉索引，因为使用这种索引并不会节省太多时间，相反有时回表太多导致性能下降。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQL&lt;/code&gt;  语句方面：少使用 &lt;code&gt;select *&lt;/code&gt; ，尽量避免用 &lt;code&gt;or&lt;/code&gt;  连接条件。&lt;/li&gt;
&lt;li&gt;索引方面：对要查询的条件的列， &lt;code&gt;order by&lt;/code&gt;  的字段建立索引，不要建立过多的索引，尽量使用组合索引。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;怎么看执行计划，里面的字段是什么意思？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;用 &lt;code&gt;explain&lt;/code&gt;  命令，后面跟查询语句： &lt;code&gt;explain select name from student;&lt;/code&gt; 。里面的字段，记不清，但是看到了我知道它代表什么意思。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么不用 B 树而是用 B + 树？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;B + 树是 B 树的一种优化，B + 树非叶子节点存储的不是数据记录，而是目录记录。因为不存储数据，所以可以存储更多的目录记录，对应的叶子节点就可以存储更多的数据记录，使得整棵树层数更小，一般来说，一棵树都不会超过 4 层，所以查找起来非常快。&lt;/p&gt;
&lt;p&gt;个人还有个浅显的理解，在增删记录时，B + 树一般修改的只有非叶子节点，以删除一条记录为例，如果删除的记录是该页中键值大小在中间的记录，那么直接删了就行，并不会影响上面的目录记录。但是如果是 B 树，删除的记录在往往会影响下面节点的记录的位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是最左前缀原则和最左匹配原则？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;最左前缀：创建多列索引（组合索引），应该把 &lt;code&gt;where&lt;/code&gt;  使用最频繁的列放在索引的最左边。&lt;/li&gt;
&lt;li&gt;最左匹配：创建的组合索引 &lt;code&gt;(a,b,c)&lt;/code&gt;  相当于创建了索引 &lt;code&gt;(a)、(a,b)、(a,b,c)&lt;/code&gt;  三个索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;索引下推是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;MySQL5.6&lt;/code&gt;  默认开启的索引下推，在联合索引中，比如是 &lt;code&gt;(a,b)&lt;/code&gt;  两个字段，再加上主键。假设有一条 &lt;code&gt;sql&lt;/code&gt;  语句的过滤条件涉及到 a、b 两个，那么索引下推开启后，存储引擎先找到所有符合关于 a 条件的数据，再根据索引中已经存在的 b 进行过滤。找到符合条件的数据，最后在回表查询。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvODdxc3JqLV9oRzU0dXhjT2xGcjM1UQ==&#34;&gt;https://mp.weixin.qq.com/s/87qsrj-_hG54uxcOlFr35Q&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;/code&gt;  调优你一般从哪些方面入手？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;查询 &lt;code&gt;explain&lt;/code&gt;  执行计划&lt;/li&gt;
&lt;li&gt;索引的建立一定要合适，尽量使索引满足最左前缀原则，查询过程中尽量触发索引覆盖和索引下推。&lt;/li&gt;
&lt;li&gt;在读多写少的业务场景中，建立普通索引使用 &lt;code&gt;change buffer&lt;/code&gt;  减少 IO 耗时。&lt;/li&gt;
&lt;li&gt;如果遇到很长的字符串，而这些字符串又有一些共性，可以考虑建立前缀索引。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;事物的隔离级别有哪些？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;SQL&lt;/code&gt;  标准定义的隔离级别有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读未提交：可以读到其他未提交事务修改的数据，也会导致脏读、不可重复读、幻读。&lt;/li&gt;
&lt;li&gt;读提交：可以读到其他事务提交后的数据，会导致不可重复读、幻读。&lt;/li&gt;
&lt;li&gt;可重复读：保证一个事务中同一个数据的一致性，会导致幻读&lt;/li&gt;
&lt;li&gt;串行化：性能最差，最安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;看你简历写了熟悉 &lt;code&gt;MVCC&lt;/code&gt; ，能说说是什么原理吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解释 &lt;code&gt;MVCC&lt;/code&gt;  首先要回到事务隔离级别以及如何实现这种隔离级别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读未提交&lt;/strong&gt;是事务可以读到其他事务修改但未提交的数据，会造成脏读，这种隔离级别实现直接读最新的数据即可。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;读提交&lt;/strong&gt;是事务可以读到其他事务修改并提交后的数据，&lt;strong&gt;可重复读&lt;/strong&gt;是连其他事务修改了的数据都不能读，这两者就是通过 &lt;code&gt;MVCC&lt;/code&gt;  实现的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;串行化&lt;/strong&gt;直接加锁即可，性能最低，但最安全。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以平时业务需要根据对数据一致性的不同要求设置不同的事务隔离。提到 &lt;code&gt;MVCC&lt;/code&gt; ，是基于 &lt;code&gt;undo&lt;/code&gt;  日志形成的版本链和 &lt;code&gt;ReadView&lt;/code&gt;  实现的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;版本链&lt;/strong&gt;：每条记录都有一个隐藏属性 &lt;code&gt;roll_pointer&lt;/code&gt;  可以指向上一个记录的版本，这个版本实质上就是 &lt;code&gt;undo&lt;/code&gt;  日志，而 &lt;code&gt;undo&lt;/code&gt;  日志本身也是记录，也有 &lt;code&gt;roll_pointer&lt;/code&gt; ，从而就形成了版本链。还需要提到的就是，记录还有一个隐藏属性 &lt;code&gt;trx_id&lt;/code&gt; ，表示该记录版本的事务 &lt;code&gt;id&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ReadView&lt;/strong&gt;：产生的时机待会再说，器中包括了几个重要的属性
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;m_ids&lt;/code&gt; ：生成 &lt;code&gt;ReadView&lt;/code&gt;  时，还在活跃的所有事务的 &lt;code&gt;id&lt;/code&gt; ，活跃就是指还没有提交的事务。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min_trx_id&lt;/code&gt; ：生成 &lt;code&gt;ReadView&lt;/code&gt;  时，还在活跃的最小的事务 &lt;code&gt;id&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max_trx_id&lt;/code&gt; ：生成 &lt;code&gt;ReadView&lt;/code&gt;  时，下一个事务应该被分配的 &lt;code&gt;id&lt;/code&gt; 。注意它并不是 &lt;code&gt;m_ids&lt;/code&gt;  中的最大值。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;creator_trx_id&lt;/code&gt; ：创建该 &lt;code&gt;ReadView&lt;/code&gt;  的事务的 &lt;code&gt;id&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们先看一下 &lt;code&gt;MVCC&lt;/code&gt;  如何实现&lt;strong&gt;读提交&lt;/strong&gt;的隔离性，这个级别的要求就是事务可以读到已提交的事务的修改。我们假设所有的事务都在对记录 A（此时 A 的 &lt;code&gt;trx_id&lt;/code&gt;  为 80，该事务已经提交）进行修改和读取。当事务 100 修改了两次记录 A，那么关于记录 A 的版本链 &lt;code&gt;100-&amp;gt;100-&amp;gt;80&lt;/code&gt; 。然后事务 90 要对记录 A 进行查询，此时就会响应 &lt;code&gt;select&lt;/code&gt;  生成 &lt;code&gt;ReadView&lt;/code&gt; ，那么这个 &lt;code&gt;ReadView&lt;/code&gt;  的 &lt;code&gt;m_ids&lt;/code&gt;  就包括了 100，然后先读到第一个 100，发现 100 已经在 &lt;code&gt;m_ids&lt;/code&gt;  中，表示这个事务还没有提交，就不能读到它的修改的数据，就向下查找，直到找到 80 这个版本，发现已经提交了，可以读。&lt;/p&gt;
&lt;p&gt;后来假设事务 100 已经提交了，那么事务 90 再执行查询语句，又会新生成一个 &lt;code&gt;ReadView&lt;/code&gt; ，此时 &lt;code&gt;m_ids&lt;/code&gt;  就不会包含 100 了，也就可以读到 100 的记录版本了。&lt;/p&gt;
&lt;p&gt;再看一下如何实现&lt;strong&gt;可重复读&lt;/strong&gt;的隔离级别，它要保证整个事务的数据都是一致的，其实对应的策略就是只生成一个 &lt;code&gt;ReadView&lt;/code&gt; ，而不是每次查询都生成一个 &lt;code&gt;ReadView&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;参考：《MySQL 是怎样运行的》第 21 章，作者 —— 小孩子 4919&lt;/p&gt;
</content>
        <category term="八股文" />
        <updated>2023-03-11T12:10:31.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2023/03/08/%E5%85%AB%E8%82%A1%E6%96%87/Redis/</id>
        <title>Redis</title>
        <link rel="alternate" href="https://cecilia.cool/2023/03/08/%E5%85%AB%E8%82%A1%E6%96%87/Redis/"/>
        <content type="html">&lt;p&gt;本文积累了我在（准备）面试的关于 &lt;code&gt;Redis&lt;/code&gt;  的问题，当然我不喜欢背八股文，所以就会强迫自己去系统性学习， &lt;code&gt;Redis&lt;/code&gt;  之前我开了一个 &lt;code&gt;tag&lt;/code&gt;  的，但是没更完就要准备面试了，Java 太卷了！！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  为什么这么快？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有几个方面的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单线程执行，在 6.0 版本以前处理网络请求和数据操作都是单线程，减少了上下文切换，性能对于一些中小项目是完全足够的。网络请求处理使用的 IO 多路复用，数据处理因为是在内存中操作，CPU 资源并不会限制 &lt;code&gt;Redis&lt;/code&gt;  性能。6.0 版本对网络处理使用了多线程，保留数据操作使用单线程，同时页保证不会出现并发问题。&lt;/li&gt;
&lt;li&gt;基于内存操作，不必多说，比 &lt;code&gt;MySQL&lt;/code&gt;  要请求磁盘快多了。&lt;/li&gt;
&lt;li&gt;高效的数据结构， &lt;code&gt;Redis&lt;/code&gt;  底层使用了很多高效的数据结构，比如 &lt;code&gt;SDS&lt;/code&gt; 、压缩列表、跳表、哈希表等。&lt;/li&gt;
&lt;li&gt;自定义协议：使用了高性能的自定义 &lt;code&gt;Redis&lt;/code&gt;  协议 RESP 和协议分析器。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些因素加起来使得 &lt;code&gt;Redis&lt;/code&gt;  能够达到一秒十万级别的处理。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvS3R6dmF3RG5RUXdoZmpuQ29YcGNNUQ==&#34;&gt;https://mp.weixin.qq.com/s/KtzvawDnQQwhfjnCoXpcMQ&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbXNjS0luV05BdWhDYmcxODNVbTlfZw==&#34;&gt;https://mp.weixin.qq.com/s/mscKInWNAuhCbg183Um9_g&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;刚才你提到了 &lt;code&gt;HyperLoglog&lt;/code&gt; ，知道怎么原理吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;HyperLoglog&lt;/code&gt;  是一个基于基数统计的数据结构，其实底层算法很早之前就有人提出了，但是 &lt;code&gt;Redis&lt;/code&gt;  第一次使用数据结构将其实现。说到应用，我们可以假设一个场景，有个业务需求需要每个网页都统计访问量，同一 IP 多次访问只算做一次访问。如果是在业务端实现，最先想到的就是对每一个网页加一个 &lt;code&gt;Set&lt;/code&gt; ，最后需要统计量时直接获取集合大小即可，如果访问量很大，上百万、千万什么的，就非常消耗内存，不可能为了这么小的业务需求付出这么大的内存，并且这种业务是可以容忍一定误差的，所以就可以使用 &lt;code&gt;Redis&lt;/code&gt;  里的 &lt;code&gt;HyperLoglog&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;至于原理，涉及到统计概率中的伯努利实验，以及后来者引入的桶和加权平均等修正，我还没来得及深入了解。仅仅只知道这确实可以统计去重元素个数，但是存在一点误差，如果可以容忍误差，那么性能是很高的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  如何保证数据高可用的？（变相问你持久化）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  为了保证数据高可用，引入了持久化机制， 在早期版本，还有 VM，后来版本不推荐了。现在一般都是使用 &lt;code&gt;RDB&lt;/code&gt; 、 &lt;code&gt;AOF&lt;/code&gt;  或者混合持久化。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RDB&lt;/code&gt;  通过对内存数据拍摄快照来持久化数据，触发机制是在一定时间内发生一定次数的修改操作。当然也可以使用 &lt;code&gt;save/bgsave&lt;/code&gt;  主动拍摄快照，前者会阻塞线程，后者才会 &lt;code&gt;fork&lt;/code&gt;  一个子线程进行快照拍摄。因为采用了压缩算法，实际占用空间很小。异步存储为了保证数据一致性，借助了操作系统的 &lt;code&gt;Copy on Write&lt;/code&gt;  机制，主线程修改哪个页，就会先将这个页复制出来，在复制页进行修改。等快照拍摄结束，再将复制的页合并到原始内存中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;AOF&lt;/code&gt;  通过存储执行的命令到磁盘中保证数据的持久性，可以配置多种存储方式，比如执行一条命令就存储一条，或者每秒存储一次，或者看系统心情，什么时候有空什么时候就将缓冲区的命令存进去。 &lt;code&gt;AOF&lt;/code&gt;  机制执行久了，就会导致文件保存了很多无效的命令，所以需要重写 &lt;code&gt;AOF&lt;/code&gt;  文件 —— &lt;code&gt;bgrewriteaof&lt;/code&gt; ，过程为：子线程遍历 &lt;code&gt;Redis&lt;/code&gt;  内存生成一系列指令，然后将这些指令序列化到临时文件中，过程中的增量命令会追加到临时文件中，最后替换 &lt;code&gt;AOF&lt;/code&gt;  文件。这里需要重点说一下，我们将数据写入到文件中时，其实是先写入到内核缓冲区，再到磁盘缓冲区，最后到磁盘，最后一个阶段我们是无法介入的，但是可以调用 &lt;code&gt;fsync()&lt;/code&gt;  强制将数据刷新到磁盘缓冲区。 &lt;code&gt;redis&lt;/code&gt;  默认是每秒调用一次。（有参数控制何时重写，比如文件大小超过多少，增量达到多少）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;混合持久化&lt;/code&gt; ：4.0 版本后还出现了混合持久化，该机制必须打开 &lt;code&gt;AOF&lt;/code&gt; ，隔一段时间拍摄快照，生成 &lt;code&gt;rdb&lt;/code&gt;  数据，两次快照之间的记录使用 &lt;code&gt;AOF&lt;/code&gt;  日志来记录，并追加到 &lt;code&gt;rdb&lt;/code&gt;  数据后面。恢复数据时，先回复 &lt;code&gt;rbd&lt;/code&gt;  数据，再执行 &lt;code&gt;AOF&lt;/code&gt;  日志。这种机制既解决了 &lt;code&gt;rdb&lt;/code&gt;  快照摄时突然断电导致整个快照丢失（因为还在临时文件中），也解决了 &lt;code&gt;AOF&lt;/code&gt;  文件太大，不断重写的性能消耗。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考链接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMteC1yZGItYW9mLmh0bWwjcmRiJUU1JTkyJThDYW9mJUU2JUI3JUI3JUU1JTkwJTg4JUU2JTk2JUI5JUU1JUJDJThGLTQtMCVFNyU4OSU4OCVFNiU5QyVBQw==&#34;&gt;Redis 进阶 - 持久化&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvT19xRGNvNi1EYXN1M1JvbVdJS19JZw==&#34;&gt;https://mp.weixin.qq.com/s/O_qDco6-Dasu3RomWIK_Ig&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  如何保证数据一致性？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，很难保证缓存和数据库 100% 数据一致，因为我们引入 &lt;code&gt;Redis&lt;/code&gt;  本身是为了性能，花很大代价完全保证数据一致性，有时性能反而还会下降，只能说尽量吧。&lt;/p&gt;
&lt;p&gt;考虑到并发，面对更新请求，我了解到的解决方案就是：先更新数据库再删除缓存（也有问题，但是相对概率很小）。如果是更新数据库 + 更新缓存，并发问题很大，哪怕是先删除缓存再更新数据库，也存在并发问题，因为从数据库拿数据到缓存中是两步：从数据库读取，写到缓存中。只要不是原子操作，在并发环境就可能导致数据不一致。&lt;/p&gt;
&lt;p&gt;再考虑到删除缓存操作可能会失败，现在的解决方案一般是使用消息队列或者订阅数据库变更日志再操作缓存（canal）。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvRDRJazZsVEFfeVNCT3lEM3dhTmoxdw==&#34;&gt;https://mp.weixin.qq.com/s/D4Ik6lTA_ySBOyD3waNj1w&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 的 &lt;code&gt;SDS&lt;/code&gt;  是什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;脑图：回忆一下当初学 C 语言时字符串的缺陷， &lt;code&gt;SDS&lt;/code&gt;  就是为了克服这些缺陷。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SDS&lt;/code&gt;  是 &lt;code&gt;Redis&lt;/code&gt;  自定义的简单动态字符串，也是 &lt;code&gt;Redis&lt;/code&gt;  最基本的数据结构之一。设计 &lt;code&gt;SDS&lt;/code&gt;  是因为 c 语言的字符串问题太多，性能太低了。主要问题是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取长度时间复杂度为 &lt;code&gt;O(N)&lt;/code&gt; ， &lt;code&gt;SDS&lt;/code&gt;  内部维护了当前字符串长度 &lt;code&gt;len&lt;/code&gt; ， &lt;code&gt;O(1)&lt;/code&gt;  复杂度&lt;/li&gt;
&lt;li&gt;操作不方便，容易溢出，类似 &lt;code&gt;strcat&lt;/code&gt;  这种函数，拼接两个字符串，都会默认前一个字符串剩余空间足够，所以很不方便。 &lt;code&gt;SDS&lt;/code&gt;  维护了当前分配空间大小 &lt;code&gt;alloc&lt;/code&gt; ，可以检测剩余空间。&lt;/li&gt;
&lt;li&gt;以 &lt;code&gt;\0&lt;/code&gt;  结束，需要指定编码格式。这种性质使得字符串只能存储文本文件， &lt;code&gt;SDS&lt;/code&gt;  使用了字节数组，使得可以存储任何可转为字节的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;SDS&lt;/code&gt;  还可以动态扩容，并且会还会多分配一些未使用空间，减少分配次数。 &lt;code&gt;SDS&lt;/code&gt;  设计了不同类型的结构体，区别在于 &lt;code&gt;len&lt;/code&gt;  和 &lt;code&gt;alloc&lt;/code&gt;  的大小不同，通过为不同大小字符串灵活分配，可以节省内存。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;figcaption data-lang=&#34;c&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;__attribute__&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__packed__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;sdshdr16&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;uint16_t&lt;/span&gt; alloc&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; flags&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 	&lt;span class=&#34;token comment&#34;&gt;// SDS 类型&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt; buf&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后， &lt;code&gt;SDS&lt;/code&gt;  还使用了编译优化 &lt;code&gt;__attribute__ ((__packed__))&lt;/code&gt; ，告诉编译器取消结构在编译中的对齐优化，而是实际使用多少就分配多少。比如一个结构体有 1 个 &lt;code&gt;int&lt;/code&gt;  和 1 个 &lt;code&gt;char&lt;/code&gt; ，正常的优化对齐会使 &lt;code&gt;char&lt;/code&gt;  对齐 &lt;code&gt;int&lt;/code&gt; ，也就是 &lt;code&gt;char&lt;/code&gt;  也会占 3 个字节。其实这 3 个字节就浪费了。 &lt;code&gt;SDS&lt;/code&gt;  的编译优化就可以使 &lt;code&gt;char&lt;/code&gt;  只分配一个字节。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcXB0RTE3MnNsZ182VGwxeXV6ZGJmdw==&#34;&gt;https://mp.weixin.qq.com/s/qptE172slg_6Tl1yuzdbfw&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  的压缩列表了解过吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;压缩列表是 &lt;code&gt;Redis&lt;/code&gt;  的基础数据结构，如果 &lt;code&gt;list&lt;/code&gt;  或者 &lt;code&gt;hash&lt;/code&gt;  的节点较少，且保存的项都是一些小整数或者短字符串，通常会使用压缩列表来作为列表键的底层实现。&lt;/p&gt;
&lt;p&gt;压缩列表的本质是数组，不用链表是因为链表的节点之间内存不连续，无法高效利用 &lt;code&gt;CPU&lt;/code&gt;  缓存，命中率很低。而压缩列表是内存连续的，命中率高。&lt;/p&gt;
&lt;p&gt;压缩列表前面几个字段是列表的一些信息，比如列表占用字节数，列表尾部节点的偏移量，节点数量，压缩列表结束点。而每个节点的构成为：前一个节点的长度，自身数据类型和节点长度，数据。&lt;/p&gt;
&lt;p&gt;为了尽可能节省内存，和 &lt;code&gt;MySQL&lt;/code&gt;  记录中 &lt;code&gt;varchar&lt;/code&gt;  一样，使用了不同字节来记录数据长度。前一个节点长度在 256 之内，使用 1 个字节，反之使用 5 个字节。但是这种机制会导致&lt;strong&gt;连锁更新&lt;/strong&gt;问题，比如首节点插入长度大于 256 的数据，而下一个节点之前记录长度使用的 1 字节，此时就需要扩容，扩容后可能自身也超过了 256 字节，它的下一个节点也要扩容，如此往复，直到最后一个节点扩容完成。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcXB0RTE3MnNsZ182VGwxeXV6ZGJmdw==&#34;&gt;https://mp.weixin.qq.com/s/qptE172slg_6Tl1yuzdbfw&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  的哈希表了解过吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;哈希表是 &lt;code&gt;Redis&lt;/code&gt;  的基础数据结构，数据类型 &lt;code&gt;hash&lt;/code&gt;  如果节点很多或者项是大的整数、长字符串，就会使用哈希表。哈希表底层实现使用的是数组，链式增长解决哈希冲突。当负载因子 &lt;code&gt;&amp;gt;= 1&lt;/code&gt;  时，如果没有执行 &lt;code&gt;rdb&lt;/code&gt;  或 &lt;code&gt;aof&lt;/code&gt;  就会 &lt;code&gt;rehash&lt;/code&gt; 。当负载因子 &lt;code&gt;&amp;gt;=5&lt;/code&gt;  时，不论有没有 &lt;code&gt;rdb\aof&lt;/code&gt;  都会 &lt;code&gt;rehash&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rehash&lt;/code&gt;  使用的是渐进式 &lt;code&gt;rehash&lt;/code&gt; ，假设原哈希表 1 扩容后为哈希表 2，那么在 &lt;code&gt;rehash&lt;/code&gt;  的过程中，每次有请求增删改查哈希表 1，就会把当前索引的节点转移到哈希表 2，使得整个 &lt;code&gt;rehash&lt;/code&gt;  过程分配到各个请求上，避免一次性 &lt;code&gt;rehash&lt;/code&gt;  的耗时操作。&lt;/p&gt;
&lt;p&gt;如果有一个查询请求，在哈希表 1 查不到，就会去哈希表 2 查询。在渐进式 &lt;code&gt;rehash&lt;/code&gt;  进行期间，哈希元素的操作都是在两个哈希表进行的。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvcXB0RTE3MnNsZ182VGwxeXV6ZGJmdw==&#34;&gt;https://mp.weixin.qq.com/s/qptE172slg_6Tl1yuzdbfw&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  的跳表了解过吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;跳表算是一种很优雅的实现，相较于普通链表，查询效率提升，相较于二叉树，省去了平衡、树退化的问题。比如一个链表节点为： &lt;code&gt;1 2 3 4 5 &lt;/code&gt; 那么从中挑出一半 &lt;code&gt;1 3 5&lt;/code&gt;  形成新的链表，并且将新的链表接到原来的链表上面，如此直到最上面的节点只有 1 个。这种数据结构使得查询效率为 &lt;code&gt;O(logn)&lt;/code&gt; 。但是当插入新节点时，需要调整上面的节点，严重时时间复杂度还是 &lt;code&gt;O(n)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;所以 &lt;code&gt;Redis&lt;/code&gt;  也是优化了跳表，在每次插入节点时就通过随机数决定其层数，然后提前加入到对应的层数。这样虽然不是严格的 &lt;code&gt;log2N&lt;/code&gt; ，也许要存储的节点会变多，也可能变小，但总的效率依然维持在一个很高的水平。&lt;/p&gt;
&lt;p&gt;在 &lt;code&gt;Redis&lt;/code&gt;  常用的数据类型中， &lt;code&gt;zset&lt;/code&gt;  就是通过跳表实现的。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTk9zWGRyTXJXd3E0TlRtMTgwYTZ2dw==&#34;&gt;https://mp.weixin.qq.com/s/NOsXdrMrWwq4NTm180a6vw&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;/code&gt;  内存淘汰是怎么一回事？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先 &lt;code&gt;Redis&lt;/code&gt;  对于过期了的 &lt;code&gt;key&lt;/code&gt;  采用两种策略：惰性删除和定期删除。所以当内存耗尽时， &lt;code&gt;Redis&lt;/code&gt;  存在过期 / 没过期两种键，所以删除策略也有不同，有 8 种：直接返回错误 / 删除 LRU、LFU 最早的过期（所有）key / 随机删除过期（所有）key&lt;/p&gt;
&lt;p&gt;传统的 &lt;code&gt;LRU&lt;/code&gt;  存在存储、误删的缺点，所以 &lt;code&gt;Redis&lt;/code&gt;  配置文件定义了一个属性，默认为 5，会取出 5 个过期的 &lt;code&gt;key&lt;/code&gt; ，按照 &lt;code&gt;LRU&lt;/code&gt;  算法删除对应 &lt;code&gt;key&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;至于 &lt;code&gt;LFU&lt;/code&gt; ， &lt;code&gt;Redis&lt;/code&gt;  也是采用了一些随机算法的策略，因为在 &lt;code&gt;RedisObject&lt;/code&gt;  中有个 &lt;code&gt;lru&lt;/code&gt;  属性，前 &lt;code&gt;24bit&lt;/code&gt;  用于记录 &lt;code&gt;LRU&lt;/code&gt; ，后 &lt;code&gt;8bit&lt;/code&gt;  记录 &lt;code&gt;LFU&lt;/code&gt;  的访问热度。 &lt;code&gt;8bit&lt;/code&gt;  最多表示 255，所以不能单纯的访问一次就自增，而是通过比较两个参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从 0~1 随机生成一个随机数 &lt;code&gt;R&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置中有一个 &lt;code&gt;factory&lt;/code&gt;  参数，用于计算 &lt;code&gt;P = 1 / (差值*factory+1)&lt;/code&gt; 。这里的差表示当前热度减去初始值。&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;P&amp;gt;R&lt;/code&gt; ，热度 + 1，反之 + 0。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以看出，热度越高，那么上升的概率越小。&lt;/p&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvLWNhTVRyT1hRdS1vME80NGU2STlkUQ==&#34;&gt;https://mp.weixin.qq.com/s/-caMTrOXQu-o0O44e6I9dQ&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="八股文" />
        <updated>2023-03-08T09:27:22.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2023/03/05/%E5%85%AB%E8%82%A1%E6%96%87/Java%E9%9B%86%E5%90%88/</id>
        <title>Java集合</title>
        <link rel="alternate" href="https://cecilia.cool/2023/03/05/%E5%85%AB%E8%82%A1%E6%96%87/Java%E9%9B%86%E5%90%88/"/>
        <content type="html">&lt;p&gt;本文涉及到 Java 集合部分，也包括线程安全的集合，还是以面试题的形式记录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. &lt;code&gt;ArrayList&lt;/code&gt;  和 &lt;code&gt;LinkedList&lt;/code&gt;  遍历谁更快？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt;  更快， &lt;code&gt;ArrayList&lt;/code&gt;  的优势就是内存连续，如果遍历 &lt;code&gt;LinkedList&lt;/code&gt; ，随机 IO 可能更多一些&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2. 谈谈你对 &lt;code&gt;ArrayList&lt;/code&gt;  的理解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;从我学习程度来看， &lt;code&gt;ArrayList&lt;/code&gt;  需要注意的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程不安全，如果要保证安全，可以使用 &lt;code&gt;Vector&lt;/code&gt;  或者使用 &lt;code&gt;Collections.synchronizedList(xx)&lt;/code&gt; ，前者在每个操作方法上都加了 &lt;code&gt;synchronized&lt;/code&gt;  关键字，后者内部会维护一个排他锁，每次对集合操作时，都需要先竞争锁。&lt;/li&gt;
&lt;li&gt;迭代器的 &lt;code&gt;fail-fast&lt;/code&gt;  机制：这其实是每个实现了 &lt;code&gt;iterator&lt;/code&gt;  集合都需要注意的地方，每次对数组进行增删，都会使得 &lt;code&gt;modCount++&lt;/code&gt; ，而迭代器的 &lt;code&gt;next&lt;/code&gt;  函数会检测 &lt;code&gt;modCount&lt;/code&gt;  是否和最开始的自己保存的 &lt;code&gt;modCount&lt;/code&gt;  相同，也就是检测在迭代的过程中数组是否发生了改变，&lt;strong&gt;因为这可能使得迭代过程中漏了某些元素或者重复遍历某些元素&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ArrayList&lt;/code&gt;  内部是使用 &lt;code&gt;Object&lt;/code&gt;  数组 -- &lt;code&gt;elementData&lt;/code&gt; ，但是该变量没有被 &lt;code&gt;private&lt;/code&gt;  修饰，代码注释写的是方便内部类更快的访问该属性，如果被 &lt;code&gt;private&lt;/code&gt;  修饰，那么同样的代码反编译后的字节码文件更复杂一些。&lt;/li&gt;
&lt;li&gt;扩容时，是 1.5 倍增长，而 &lt;code&gt;Vector&lt;/code&gt;  扩容默认两倍扩容。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;3. &lt;code&gt;HashMap&lt;/code&gt;  了解吗？1.7 版本和 1.8 版本都什么区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;JDK1.7&lt;/code&gt;  的 &lt;code&gt;HashMap&lt;/code&gt;  使用的是数组桶加链表，如果链表过长，那么时间复杂度会退化为 O (n)，而 1.8 使用的引入了红黑树，当链表节点为 8 时，就转为红黑树。至于为什么是 8，估计也是个统计概率值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1.7&lt;/code&gt;  节点插入时使用的是头插法，而 1.8 使用的是尾插法，头插在并发环境下容易出现环导致死循环，具体形成原因我并没有仔细研究，因为我认为 &lt;code&gt;HashMap&lt;/code&gt;  本身就是线程不安全的，无论是头插还是尾插，在并发环境下都不能使用 &lt;code&gt;HashMap&lt;/code&gt; ，曾经也有人向社区报告 &lt;code&gt;bug&lt;/code&gt;  说 1.7 的 &lt;code&gt;HashMap&lt;/code&gt;  尾插会在并发环境下出现死循环，但是社区并没有管，而是回复 “ &lt;code&gt;HashMap&lt;/code&gt;  本来就不是给你在并发环境用的，想要安全请使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; ”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4. &lt;code&gt;HashMap&lt;/code&gt;  扩容机制了解过吗，为什么容量大小必须是 2 的指数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;HashMap&lt;/code&gt;  的容量大小默认是 16，阿里巴巴开发规范插件提示在初始化 &lt;code&gt;HashMap&lt;/code&gt;  时尽量指定容量大小（预计存储个数 / 负载因子 + 1），因为没有指定可能会导致多次扩容，这个涉及到重建 &lt;code&gt;Hash&lt;/code&gt;  表，链表分拆的操作，比较耗时。如果构造函数传入的容量不是 2 的指数，那么会将容量设置为既是 2 的指数，又是大于传入参数的最小数。&lt;/p&gt;
&lt;p&gt;至于为什么是 2 的指数，涉及 &lt;code&gt;hash&lt;/code&gt;  公式，也就是 &lt;code&gt;index = hash &amp;amp; (len - 1)&lt;/code&gt; ，这个公式其实就相当于用长度取模 &lt;code&gt;index = hash % len&lt;/code&gt; ，只不过位运算快很多。扩容机制为两倍扩容，公式为 &lt;code&gt;newCap = 2 * oldCap&lt;/code&gt; ，我们假设下标为 &lt;code&gt;i&lt;/code&gt;  的那一部分，这个部分的链表的节点都满足 &lt;code&gt;hash / len = y ... i&lt;/code&gt; ，也就是说，我们假设商为 &lt;code&gt;y&lt;/code&gt; ，那么当商为奇数时（ &lt;code&gt;hash &amp;amp; oldCap == 0&lt;/code&gt; ），扩容后再使用 &lt;code&gt;hash&lt;/code&gt;  公式得到的结果就是 &lt;code&gt;i+n&lt;/code&gt; ，如果商为偶数的话，扩容后再 &lt;code&gt;hash&lt;/code&gt;  的结果还是 &lt;code&gt;i&lt;/code&gt; 。这就使得每次扩容，都将现有的链表拆为两部分，一部分留在当前下标，另一部分转移到扩容后的 &lt;code&gt;i+n&lt;/code&gt;  处，这种机制使用扩容时逻辑简单，操作迅速，还使得数组中节点分布均匀，不会出现那种节点都分布在前半部分或者后半部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5. 为什么重写 &lt;code&gt;equals&lt;/code&gt;  方法的同时建议重写 &lt;code&gt;hashCode方法&lt;/code&gt; ，能用 &lt;code&gt;HashMap&lt;/code&gt;  举个例子吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们假设一个类为 &lt;code&gt;People&lt;/code&gt; ，只有一个属性 &lt;code&gt;name&lt;/code&gt; ，那么现实情况下，两个对象相等，要么他们内存地址相同，要么 &lt;code&gt;equals&lt;/code&gt;  比较后相同，这里也就是 &lt;code&gt;name&lt;/code&gt;  相同。如果不重写 &lt;code&gt;hashCode&lt;/code&gt;  方法，也就是使用 &lt;code&gt;Object&lt;/code&gt;  内置的方法。现在有两个内存地址不同的 &lt;code&gt;People&lt;/code&gt;  对象， &lt;code&gt;name&lt;/code&gt;  相同使得 &lt;code&gt;equals&lt;/code&gt;  相同，但是 &lt;code&gt;hashCode&lt;/code&gt;  却不相同，那么当这两个对象作为 &lt;code&gt;Key&lt;/code&gt;  加入到 &lt;code&gt;HashMap&lt;/code&gt;  时，我们希望的是后加入的对象会覆盖前面加入的，因为两个对象是相同的，但是因为 &lt;code&gt;hashCode&lt;/code&gt;  不同，他们两个甚至连映射出来的数组下标都不同，是无法覆盖的。这也就导致 &lt;code&gt;HashMap&lt;/code&gt;  中有两个相同的 &lt;code&gt;key&lt;/code&gt; ，这明显不符合哈希表的定义。&lt;/p&gt;
&lt;p&gt;再来看 &lt;code&gt;HashMap&lt;/code&gt;  的源码，为了实现覆盖操作，首先就要使得 &lt;code&gt;equals&lt;/code&gt;  相同的对象 &lt;code&gt;hashCode&lt;/code&gt;  也相同才一定能映射到同样的下标，然后顺着链表向下查找，如果 &lt;code&gt;HashCode&lt;/code&gt;  相同，同时 &lt;code&gt;equals&lt;/code&gt;  也相同就会覆盖，反之如果遍历了整个链表都没有这样的节点，就算做新增节点，尾插到链表中。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6. 说说 &lt;code&gt;HashMap&lt;/code&gt;  与 &lt;code&gt;HashTable&lt;/code&gt;  的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;并发： &lt;code&gt;HashTable&lt;/code&gt;  用于并发环境，通过在方法上加入 &lt;code&gt;synchronized&lt;/code&gt;  关键字保证线程安全，但是并行度太低了，所以大多数都使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; 。而 &lt;code&gt;HashMap&lt;/code&gt;  是线程不安全的。&lt;/li&gt;
&lt;li&gt;存储： &lt;code&gt;HashTable&lt;/code&gt;  键值对不允许存储 &lt;code&gt;null&lt;/code&gt; ，而 &lt;code&gt;HashMap&lt;/code&gt;  却可以， &lt;code&gt;HashTable&lt;/code&gt;  源码中会先判断 &lt;code&gt;value&lt;/code&gt;  是不是 &lt;code&gt;null&lt;/code&gt; ，从而抛出空指针异常，并且会直接调用 &lt;code&gt;key&lt;/code&gt;  的 &lt;code&gt;hashCode&lt;/code&gt;  方法，计算比较粗暴，而 &lt;code&gt;HashMap&lt;/code&gt;  统一指定 &lt;code&gt;key==null&lt;/code&gt;  时 &lt;code&gt;hashCode&lt;/code&gt;  为 0，至于 &lt;code&gt;value&lt;/code&gt;  是否为 &lt;code&gt;null&lt;/code&gt;  完全不重要，因为插入删除过程都不会涉及到 &lt;code&gt;value&lt;/code&gt; ，只会比较 &lt;code&gt;key&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;迭代： &lt;code&gt;HashTable&lt;/code&gt;  有两个迭代器， &lt;code&gt;Enumeration&lt;/code&gt;  使用的是安全失败机制（ &lt;code&gt;fail-safe&lt;/code&gt; ），而 &lt;code&gt;Iterator&lt;/code&gt;  是快速失败机制。 &lt;code&gt;HashMap&lt;/code&gt;  使用的是快速失败机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;7. 刚才提到 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; ，你知道什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvTXk0UF9CQlhEbkFHWDFnaDYzMFpLdw==&#34;&gt;https://mp.weixin.qq.com/s/My4P_BBXDnAGX1gh630ZKw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这个也要分 &lt;code&gt;1.7&lt;/code&gt;  和 &lt;code&gt;1.8&lt;/code&gt;  两个版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;1.7&lt;/code&gt;  使用的是数组桶 + 链表，分段，段数决定并行度。通俗来讲， &lt;code&gt;1.7&lt;/code&gt;  版本维护了一个数组，数组中每个元素都是一个 &lt;code&gt;HashMap&lt;/code&gt; ，上锁就是对每个段上锁。所以并行度并不高&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1.8&lt;/code&gt;  使用的是数组桶 + 链表（升级红黑树），同时锁的粒度更小了，使用 &lt;code&gt;CAS+synchronized&lt;/code&gt;  来实现并发安全。维护的数组和 &lt;code&gt;HashMap&lt;/code&gt;  的数组是一致的，只不过每次上锁都是对要修改的下标单个元素进行上锁。由于 &lt;code&gt;Synchronized&lt;/code&gt;  的性能采用锁升级的方式优化后， &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  的性能也随之上升。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于 &lt;code&gt;CAS&lt;/code&gt;  操作，是对数组元素进行修改，也就是&lt;strong&gt;链表的表头&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;只要上了锁，保证了线程安全，其他的都和 &lt;code&gt;HashMap&lt;/code&gt;  没有太多区别，也就有些细节不同，比如 &lt;code&gt;HashMap&lt;/code&gt;  再加入一个键值对就要扩容了，它会先插入再扩容，而 &lt;code&gt;ConcurrenHashMap&lt;/code&gt;  是先扩容再插入。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;8. 这么了解 &lt;code&gt;ConcurrentHashMap&lt;/code&gt; ，你实际用过吗，或者你看源码有什么地方用过吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我倒是还没有做过并发项目，所以也就是看别人用过，这里举一个比较偏的现实例子。在日志框架中，日志门面 &lt;code&gt;slf4j-api&lt;/code&gt;  自带了一个实现，叫做 &lt;code&gt;slf4j-simple&lt;/code&gt; ，它在实现 &lt;code&gt;LoggerFactory&lt;/code&gt;  时就用到了 &lt;code&gt;ConcurrenMap&lt;/code&gt; ，键值对是 &lt;code&gt;&amp;lt;String,Logger&amp;gt;&lt;/code&gt; ，这里的 &lt;code&gt;String&lt;/code&gt;  对应的就是 &lt;code&gt;name&lt;/code&gt; 。当外界传给 &lt;code&gt;LoggerFactory&lt;/code&gt;  一个 &lt;code&gt;name&lt;/code&gt;  时，就会从 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  中找，如果有就返回，没有就新建一个，缓存起来再返回。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;figcaption data-lang=&#34;java&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleLoggerFactory&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ILoggerFactory&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token class-name&#34;&gt;ConcurrentMap&lt;/span&gt;&lt;span class=&#34;token generics&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; loggerMap &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ConcurrentHashMap&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleLoggerFactory&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;SimpleLogger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;lazyInit&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getLogger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt; name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt; simpleLogger &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loggerMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;simpleLogger &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; simpleLogger&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt; newInstance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SimpleLogger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt; oldInstance &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loggerMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;putIfAbsent&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; newInstance&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;Logger&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;oldInstance &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;null&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt; newInstance &lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt; oldInstance&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;reset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loggerMap&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;其实日志中使用 &lt;code&gt;ConcurrentHashMap&lt;/code&gt;  很正常，因为日志打印本身就经常处于并发环境中，有些甚至会专门分配线程去处理日志。有时类专门有一个 &lt;code&gt;Logger&lt;/code&gt; ，其对应键值就是类的全类限定名，多个线程可能都会请求这个 &lt;code&gt;logger&lt;/code&gt; ，自然就需要线程安全的容器来缓存。&lt;/p&gt;
</content>
        <category term="八股文" />
        <updated>2023-03-05T02:02:30.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2023/02/27/%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</id>
        <title>计算机网络</title>
        <link rel="alternate" href="https://cecilia.cool/2023/02/27/%E5%85%AB%E8%82%A1%E6%96%87/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
        <content type="html">&lt;p&gt;本文积累了作者在准备面试时学习的&lt;strong&gt;计算机网络&lt;/strong&gt;的知识与问题，作为科班出身，408 这些科目的重要性不必多说，能直接检验出你作为科班选手的水准。&lt;/p&gt;
&lt;p&gt;本 tag 的文章的问题都是本人先学习后，凭记忆写下的，相当于二次复习（复盘）了，这样有助于加深印象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1. 键入网址后依次发生了什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvSTZCTHdiSXBmR0VKbnhqRGNQWGMxQQ==&#34;&gt;https://mp.weixin.qq.com/s/I6BLwbIpfGEJnxjDcPXc1A&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览器解析 URL 生成 Http 请求。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发送 Http 请求前，会将域名解析为 IP 地址&lt;/strong&gt;，会先查询浏览器缓存、系统缓存、本机 &lt;code&gt;hosts&lt;/code&gt;  文件，如果没有，就会发送请求到本地域名服务器，通过本地域名服务器分别访问根域名服务器、顶级域名服务器、权威域名服务器，最终拿到域名映射的 IP 地址，并且缓存起来。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;建立 TCP 连接，三次握手&lt;/strong&gt;。三次握手是为了双方确定对方具有发送和接收数据的能力，所以两次握手不行&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;增加 TCP 头部&lt;/strong&gt;。如果 Http 数据太长，超过了 MSS（网络层数据大小），就需要将其切分再每个加上 TCP 头部。TCP 头部包含了源端口，目的端口，校验和，序号等信息，最后交给 IP 模块处理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加上 IP 头部&lt;/strong&gt;。IP 头部包含了源地址和目的地址，如果主机有多个网卡，会根据路由表规则来选择网卡，其实就是目的地址与网卡的掩码做&lt;strong&gt;与运算&lt;/strong&gt;从而来选择，如果都不匹配，就会走默认网卡 0.0.0.0。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;加上 MAC 头部&lt;/strong&gt;。通过 ARP 协议来获取目的地址的 MAC 地址，如果 ARP 缓存有，就直接用，如果没有，就在以太网中广播目的地址从而得到响应拿到对应的 MAC 地址。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;将给网卡，将包转为电信号，通过网线发送出去&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;交换机拿到包，通过 MAC 表将数据从对应端口发送出去&lt;/strong&gt;，如果表中没有对应映射，就对局域网所有主机发送。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路由器拿到包并根据 IP 地址进行转发&lt;/strong&gt;。MAC 头部作用就是将包送到路由器，然后 MAC 头部就会被丢弃。路由器根据路由表决定下一跳（下一跳的 IP）。通过 ARP 协议拿到下一跳的 MAC 地址，重新发送。整体传输过程只有 MAC 地址在不断变化，因为包需要不断在以太网中传输。&lt;/li&gt;
&lt;li&gt;服务器收到请求，回复 ACK 和 Http 响应。浏览器得到响应，再请求 html 中的 js，css 资源。浏览器再解析渲染，呈现网页。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;2. 谈谈 http 协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvQUsxUGI5cngwcTVIZjhkcTZITk9odw==&#34;&gt;https://mp.weixin.qq.com/s/AK1Pb9rx0q5Hf8dq6HNOhw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;http 协议是超文本传输协议，一开始用于传输 html、css、js 等资源文件，后来也可以传输图片、视频、音频等。http1.0 是无状态的，每个 http 请求都必须重新建立 TCP 连接，这导致开销较大。http1.1 通过 &lt;code&gt;Cookie&lt;/code&gt;  来管理状态，同时实现了持久化连接。&lt;/p&gt;
&lt;p&gt;http 请求由：请求行、消息头、数据组成。请求行包括请求方法、&lt;strong&gt;URI&lt;/strong&gt;、协议版本。&lt;/p&gt;
&lt;p&gt;请求方法包括 GET（表单）、POST（实体）、DELETE（删除文件）、PUT（文件）、TRACE 等组成。&lt;/p&gt;
&lt;p&gt;状态码含义分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1xx：表示请求正在处理&lt;/li&gt;
&lt;li&gt;2xx：表示请求成功处理&lt;/li&gt;
&lt;li&gt;3xx：表示重定向&lt;/li&gt;
&lt;li&gt;4xx：表示客户端错误，请求不合法&lt;/li&gt;
&lt;li&gt;5xx：表示服务器错误，不能处理合法请求&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;3. 谈谈 https 协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvMjFKYVh3ZGZTakl0ajVTZ093aGFwZw==&#34;&gt;https://mp.weixin.qq.com/s/21JaXwdfSjItj5SgOwhapg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;数据传输使用的仍然是 http 协议，只不过使用了 SSL 对数据进行了加密，保证了数据传输的安全。&lt;/p&gt;
&lt;p&gt;其过程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端发送 https 请求，服务端响应&lt;strong&gt; CA 证书和公钥&lt;/strong&gt;。（需要注意，是&lt;strong&gt;证书里面附带了公钥&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;客户端校验 CA 证书合法性，生成随机密钥 key，并使用&lt;strong&gt;公钥&lt;/strong&gt;对 key 加密，再发送给服务端。&lt;/li&gt;
&lt;li&gt;服务端收到后，使用私钥对可 key 解密，拿到真正的 key，双方之后的数据传输就用该 key 进行&lt;strong&gt;对称加密传输&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述过程，如果没有 CA 证书，那么中间人攻击可以这样：在第一步将公钥换成自己的公钥 1，这样在第二步对客户端产生的 key 使用自己的私钥 1 解密从而拿到 key。最后再将 key 使用最开始服务端发送的公钥进行加密发送给服务端，这样 MITM（中间人攻击）照样可以完成。&lt;/p&gt;
&lt;p&gt;所以需要第三方的公信认证，CA 机构有一对公钥 / 私钥，公钥是对外界公开的，而私钥必须严格保密。当服务端将&lt;strong&gt; CA 证书 + 服务端公钥&lt;/strong&gt;发送给客户端时， 会先将证书的数据（包括服务端公钥）进行哈希，得到哈希值&lt;strong&gt; H&lt;/strong&gt;，再用私钥将 H 加密，最后客户端（浏览器）拿到证书后，会使用系统 / 浏览器内置的 CA 公钥对 H 进行解密得到 H，再自己通过证书指定的哈希算法对数据进行哈希得到&lt;strong&gt; H&#39;&lt;/strong&gt;，比较&lt;strong&gt; H==H&#39;&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;私钥和公钥可以互相加密解密，非不是私钥只能解密。上述过程，假设有中间人换了证书中的服务端公钥，也会因为不知道私钥而无法加密哈希值导致客户端会检测出来。所以 CA 机构应该严格保密私钥，如果泄露，就会失去公信力。&lt;/p&gt;
&lt;p&gt;如果整个 https 通信全部用非对称加密确实可以，双方各拿一对公钥 / 私钥，然后交换公钥进行通信。至于为什么本质还是要使用对称加密，是因为非对称加密太耗时间了，仅用于传输 key 即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4. 用过 ping 吗，说说原理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvM0tGMEl4THVtOEVPdGNGMFpOSWlQQQ==&#34;&gt;https://mp.weixin.qq.com/s/3KF0IxLum8EOtcF0ZNIiPA&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ping&lt;/code&gt;  实现原理依托于 &lt;code&gt;ICMP&lt;/code&gt;  协议。该协议是互联网控制报文协议，用于报告网络错误、传送报文运输情况等。 &lt;code&gt;ICMP&lt;/code&gt;  报文被封装到 &lt;code&gt;IP&lt;/code&gt;  数据包里面。ping 使用的两种 &lt;code&gt;ICMP&lt;/code&gt;  数据包是&lt;strong&gt;回送请求&lt;/strong&gt;和&lt;strong&gt;回送响应&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;假设主机 A 对主机 B 进行了 ping 操作，那么主机 A 会封装 ** &lt;code&gt;ICMP&lt;/code&gt;  回送请求 **，此时会记录请求产生的时间，并将其封装到 IP 数据包中，再加上 MAC 头部，最后发送出去。没有缓存目的 MAC 地址，先通过 ARP 协议获取。&lt;/p&gt;
&lt;p&gt;主机 B 收到报文后，逐步拆除 MAC 和 IP 头部，经过地址检验后，将有用的信息提取交给 ICMP 协议，再发送 ** &lt;code&gt;ICMP&lt;/code&gt;  回送响应 **。主机 A 收到回送响应后，用当前时间减去 &lt;code&gt;ICMP&lt;/code&gt;  数据包发送时间，就可以得到 &lt;code&gt;RTT&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;同时， &lt;code&gt;ICMP&lt;/code&gt;  还维护了一个 &lt;code&gt;TTL&lt;/code&gt; ，每次数据包经过一个路由器，就会 - 1，直到为 0 被丢弃，TTL 就可以检测出两个主机之间经过多少跳。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tracert&lt;/code&gt;  也是借助 &lt;code&gt;ICMP&lt;/code&gt;  协议实现的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5. 聊聊 TCP 三次握手和四次挥手&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvclgzQV9GQTE5bjRwSTlIaWNJRXNYZw==&#34;&gt;https://mp.weixin.qq.com/s/rX3A_FA19n4pI9HicIEsXg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;TCP&lt;strong&gt; 三次握手&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;确认双方都有发送和接收数据的能力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;防止旧连接覆盖新连接。客户端知道自己此时应该建立哪个连接，但是网络传输过程复杂，很可能旧的连接 SYN 比新的 SYN 后到，到底建立哪个连接服务端是不知道的，所以必须有第三次握手，让客户端确认到底建立哪个连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;防止浪费资源。两次握手中，服务端不知道自己的 &lt;code&gt;ACK+SYN&lt;/code&gt;  是否被客户端收到，这会导致重复发送 &lt;code&gt;SYN+ACK&lt;/code&gt; ，建立很多个无用的连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;同步初始化序列号。同步序列号能够防止接收端接收的数据乱序。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总的来说，第三次握手是必要的，&lt;strong&gt;必须由客户端确认建立连接的各种状态信息的正确性&lt;/strong&gt;。值得一提的是，第三次握手，发送方可以顺带发送数据。&lt;/p&gt;
&lt;p&gt;TCP&lt;strong&gt; 四次挥手&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;重点：主动放弃连接的一方会进入 &lt;code&gt;Time_Wait&lt;/code&gt;  状态，在 Linux 中，会等待 2MSL（60 秒）。&lt;/p&gt;
&lt;p&gt;四次挥手的过程为（假设客户端主动断开连接）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送 &lt;code&gt;Fin&lt;/code&gt;  表示自己断开连接，不再发送数据，但是可以接收数据，进入 &lt;code&gt;FIN_WAIT_1&lt;/code&gt;  状态。&lt;/li&gt;
&lt;li&gt;服务端收到 &lt;code&gt;Fin&lt;/code&gt; ，发送 &lt;code&gt;ACK&lt;/code&gt; ，表示自己收到断开请求，需要处理剩下的数据，进入 &lt;code&gt;CLOSED_WAIT&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;服务端处理完数据，发送 &lt;code&gt;Fin&lt;/code&gt; ，进入 &lt;code&gt;LAST_ACK&lt;/code&gt;  状态。&lt;/li&gt;
&lt;li&gt;客户端收到 &lt;code&gt;Fin&lt;/code&gt; ，发送 &lt;code&gt;ACK&lt;/code&gt; ，进入 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态，等待 &lt;code&gt;2MSL&lt;/code&gt; ，最后进入 &lt;code&gt;CLOSED&lt;/code&gt;  状态。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;正是因为服务端需要处理剩下数据，所以是四次挥手，同样，如果省去最后一次挥手，那么服务端就会一直处于 &lt;code&gt;LAST_ACK&lt;/code&gt;  状态，当客户端想建立新的连接，发送 &lt;code&gt;SYN&lt;/code&gt; ，服务端就会回复 &lt;code&gt;RST&lt;/code&gt; ，建立连接的过程会终止。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6. 为什么四次挥手中要有 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态以及为什么要等 2MSL？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvclgzQV9GQTE5bjRwSTlIaWNJRXNYZw==&#34;&gt;https://mp.weixin.qq.com/s/rX3A_FA19n4pI9HicIEsXg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们这里默认主动断开连接的是客户端。首先，主动断开连接的那一方才会进入 &lt;code&gt;TIME_WAIT&lt;/code&gt; ，这个时间是 2MSL，在 Linux 中为 60s，而且这个时间是固定的，也就是在内核代码中写死了，无法修改。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;  的出现能够保证被动断开连接方（服务端）可以正常的关闭，从 &lt;code&gt;LAST_ACK&lt;/code&gt;  进入 &lt;code&gt;CLOSED&lt;/code&gt;  状态。&lt;/p&gt;
&lt;p&gt;MSL 是数据包在网络传输中存活的最长时间， &lt;code&gt;TIME_WAIT&lt;/code&gt;  设置为 2MSL，比较合理的解释为：如果服务端没有没有 ACK，超时重传 &lt;code&gt;FIN&lt;/code&gt;  后再接收 &lt;code&gt;ACK&lt;/code&gt;  的时间在 2MSL 之内。&lt;strong&gt;当客户端重新接收到 &lt;code&gt;FIN&lt;/code&gt;  时，会重置 2MSL 时间&lt;/strong&gt;。同时网络连接中的旧数据包在 2MSL 中能够被清理干净，如果客户端当前端口重新建立连接，不会有旧的数据传到当前端口，造成数据混乱。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;  出现的原因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;保证服务端正常关闭&lt;/li&gt;
&lt;li&gt;防止旧的四元组数据包影响下一次连接传输。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正因为主动断开会进入 &lt;code&gt;TIME_WAIT&lt;/code&gt; ，此时既会白白占用端口，又会无法传输数据，经历时间还非常长，对于服务端来说是很大的负担，所以这个烂摊子尽量交给对方，尽量让对方断开连接。&lt;/p&gt;
&lt;p&gt;解决 &lt;code&gt;TIME_WAIT&lt;/code&gt;  方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;tcp_rw_reuse&lt;/code&gt; + &lt;code&gt;tcp_timestamp&lt;/code&gt; ：这样可以使得处于 &lt;code&gt;TIME_WAIT&lt;/code&gt;  套接字复用，因为开启了时间戳，新的连接不会接收时间戳过期的数据。&lt;/li&gt;
&lt;li&gt;其他方法不推荐使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;7. 知道 SYN 攻击吗，说说你知道的防御手段&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbmZvLnN1cHBvcnQuaHVhd2VpLmNvbS9pbmZvLWZpbmRlci9lbmN5Y2xvcGVkaWEvemgvU1lOK0Zsb29kLmh0bWw=&#34;&gt;https://info.support.huawei.com/info-finder/encyclopedia/zh/SYN+Flood.html&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;SYN 攻击是 DDos 攻击的一种，通过程序不断发送 SYN 迅速占满服务端的 SYN 队列，使其崩溃的攻击手段。&lt;/p&gt;
&lt;p&gt;防御手段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首包丢弃：大多数 SYN 攻击都是变源的，这使得在 SYN Flood 攻击中，每个 SYN 都是首包，Anti-DDos 系统可以丢弃收到的 SYN 首包，如果对方客户端是正常的，那么基于 TCP 超时机制，一定会重传，此时 SYN 就不是首包了，可以对其进行源认证。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;源认证：Anti-DDos 系统部署在网络入口，先代替服务端发送 SYN+ACK，如果收到了客户端的 ACK，就将其 IP 加入白名单，之后一段时间都不会代替服务端对该 IP 的 SYN 进行拦截。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;源认证必须配合首包丢弃使用，不然性能瓶颈也只是从服务器转移到了 Anti-DDos 系统中。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置 TCP 参数也可以一定程度上防御 SYN 攻击，比如扩大半连接队列，开启 &lt;code&gt;syncookies&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;8.TCP 的半连接队列和全连接队列了解吗？如果队列满了怎么办？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvdFJYbHExaEVycUtRTE1NTGN4b1h2Zw==&#34;&gt;https://mp.weixin.qq.com/s/tRXlq1hErqKQLMMLcxoXvg&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;半连接队列是指 SYN 队列，服务端收到 SYN 请求，就会将其加入到 SYN 队列；全连接队列是指 Accept 队列，当服务端收到客户端的 &lt;code&gt;ACK&lt;/code&gt;  就会将 SYN 队列对应节点放到 Accept 队列中。当队列满了，Linux 默认的操作是拒绝再接收 ACK。因为队列装不下了，但是有个问题就是，客户端发送了 ACK 就会进入 &lt;code&gt;ESTABLISHED&lt;/code&gt;  状态，但是实际上服务端却没有接收。&lt;/p&gt;
&lt;p&gt;Linux 中变量 &lt;code&gt;tcp_abort_on_overflow&lt;/code&gt;  为 0，就是丢掉客户端发送的数据，为 1 就会发送一个 &lt;code&gt;reset&lt;/code&gt;  包给客户端。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;所以全连接队列满了，一般解决方法就是扩大队列长度，Accept 队列长度由两个变量决定，结果式为 &lt;code&gt;len = min(backlog, somaxconn)&lt;/code&gt; 。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;半连接队列长度 &lt;code&gt;max_qlen_log&lt;/code&gt;  取决于全连接队列长度 &lt;code&gt;len&lt;/code&gt; 、变量 &lt;code&gt;max_syn_backlog&lt;/code&gt; ： &lt;code&gt;max_qlen_log = 2 * min(len, max_syn_backlog)&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;半连接队列一般不会满，当队列中剩余长度达到某个特定值时（和 &lt;code&gt;max_syn_backlog&lt;/code&gt;  有关，但是不同 Linux 版本计算方法可能不同），就不会再接收 &lt;code&gt;SYN&lt;/code&gt;  了。其实当全连接队列满了，不论半连接队列如何，都不会再接收 &lt;code&gt;SYN&lt;/code&gt;  了。&lt;/p&gt;
&lt;p&gt;半连接队列满了（假设遇到了 &lt;code&gt;SYN&lt;/code&gt;  攻击），策略有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增大半连接队列长度，也就是增大那三个参数。&lt;/li&gt;
&lt;li&gt;打开 &lt;code&gt;syncookies&lt;/code&gt; ，将该变量设置为 1 即可（0-- 关闭，1-- 队列满了打开 &lt;code&gt;syncookies&lt;/code&gt; ，2-- 直接打开 &lt;code&gt;syncookies&lt;/code&gt; ）。开启该功能后，不会再丢弃 &lt;code&gt;SYN&lt;/code&gt;  包，而是服务器根据当前状态计算出一个值，放在 &lt;code&gt;SYN+ACK&lt;/code&gt;  中发出，当客户端返回 &lt;code&gt;ACK&lt;/code&gt;  报文时，取出该值校验合法性，建立连接。&lt;/li&gt;
&lt;li&gt;减少 &lt;code&gt;SYN+ACK&lt;/code&gt;  重发次数，使得处于 &lt;code&gt;SYN_REVC&lt;/code&gt;  状态的连接尽快断开。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;9. 谈谈 TCP 相关的参数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MveXRWN1JaU3lGWHl2UFdfbEtodjhodw==&#34;&gt;https://mp.weixin.qq.com/s/ytV7RZSyFXyvPW_lKhv8hw&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;这里讲的 TCP 参数与 TCP 三次握手和四次挥手优化有关。&lt;/p&gt;
&lt;p&gt;三次握手优化角度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;客户端（发送方）：客户端行为有发送 &lt;code&gt;SYN&lt;/code&gt;  和 &lt;code&gt;ACK&lt;/code&gt; ，以及重发 &lt;code&gt;SYN&lt;/code&gt;  和 &lt;code&gt;ACK&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tcp_syn_retries&lt;/code&gt;  参数：控制重传 &lt;code&gt;SYN&lt;/code&gt;  次数，每次超时时间为上次 2 倍，初始为 1s。&lt;strong&gt;超过次数就会断开连接&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;服务端（接收方）：服务端行为较复杂，涉及到半连接队列和全连接队列的大小以及拒绝策略
&lt;ul&gt;
&lt;li&gt;重发 &lt;code&gt;FIN+ACK&lt;/code&gt;  次数：由 &lt;code&gt;tcp_synack_retires&lt;/code&gt;  决定&lt;/li&gt;
&lt;li&gt;半连接队列：大小由 &lt;code&gt;tcp_max_syn&lt;/code&gt; 、 &lt;code&gt;backlog&lt;/code&gt; 、 &lt;code&gt;somaxconn&lt;/code&gt;  共同决定。可以通过增大这三个参数来增大半连接队列。同时 &lt;code&gt;syncookies&lt;/code&gt;  参数控制当半连接队列满了时，生成状态值校验来避免放到半连接队列中。&lt;/li&gt;
&lt;li&gt;全连接队列：大小由 &lt;code&gt;backlog&lt;/code&gt;  和 &lt;code&gt;somaxconn&lt;/code&gt;  共同决定。拒绝策略由 &lt;code&gt;tcp_abort_on_overflow&lt;/code&gt;  决定，0 表示丢弃 &lt;code&gt;ACK&lt;/code&gt; ，不让其进入全连接队列，一般用这个，还可以解决短暂的突发网络繁忙。1 表示发送 &lt;code&gt;RST&lt;/code&gt;  包使其断开连接。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;绕过三次握手：Linux 内核 3.1 版本后，出现了 &lt;code&gt;Fast Open&lt;/code&gt;  机制，通过 &lt;code&gt;Cookie&lt;/code&gt;  来绕过后面的三次握手。第一次正常三次握手，但是服务端可以在第二次握手时创建 &lt;code&gt;Cookie&lt;/code&gt;  并发送给客户端。之后就可以重用该 &lt;code&gt;TCP&lt;/code&gt;  连接，而不需要重复建立 TCP 连接。因为后续数据发送可以携带 &lt;code&gt;Cookie&lt;/code&gt; ，服务端只需要验证 &lt;code&gt;Cookie&lt;/code&gt;  即可。这种的缺点就是，如果重发，还需要重发 &lt;code&gt;Cookie&lt;/code&gt; 。该机制使用 &lt;code&gt;tcp_fastopn&lt;/code&gt; ：
&lt;ul&gt;
&lt;li&gt;0 ——  &lt;code&gt;close&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1 ——  &lt;code&gt;Client&lt;/code&gt;  打开&lt;/li&gt;
&lt;li&gt;2 ——  &lt;code&gt;Server&lt;/code&gt;  打开&lt;/li&gt;
&lt;li&gt;3 —— 双方都打开&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;四次挥手优化角度：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主动断开方：会进入 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态，接收发送 &lt;code&gt;FIN&lt;/code&gt;  和 &lt;code&gt;ACK&lt;/code&gt; 。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tcp_max_orphan&lt;/code&gt;  参数：调用 &lt;code&gt;close&lt;/code&gt;  函数后，连接就变成了&lt;strong&gt;孤儿连接&lt;/strong&gt;，该参数限制了最大孤儿连接数量，超过直接发送 &lt;code&gt;RST&lt;/code&gt;  包断开连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN_WAIT1&lt;/code&gt;  状态优化： &lt;code&gt;tcp_orphan_retries&lt;/code&gt;  参数 —— 表示处于 &lt;code&gt;FIN_WAIT1&lt;/code&gt;  状态的 &lt;code&gt;FIN&lt;/code&gt;  重传次数，超过直接关掉连接。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIN_WAIT2&lt;/code&gt;  状态优化： &lt;code&gt;tcp_fin_timeout&lt;/code&gt;  参数：表示孤儿连接等待 &lt;code&gt;FIN&lt;/code&gt;  的最长时间，默认 60s。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TIME_WAIT&lt;/code&gt;  状态优化：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tcp_max_tw_buckets&lt;/code&gt;  参数：如果处于 &lt;code&gt;TIME_WAIT&lt;/code&gt;  连接超过该参数，之后的连接不再进入该状态。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tcp_tw_reuse&lt;/code&gt;  参数：开启后可以复用处于 &lt;code&gt;TIME_WAIT&lt;/code&gt;  状态的连接，需要配合时间戳使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;被动断开方：
&lt;ul&gt;
&lt;li&gt;还是借助 &lt;code&gt;tcp_orphan_retires&lt;/code&gt;  参数限定 &lt;code&gt;FIN&lt;/code&gt;  重传次数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;小结：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;三次握手参数： &lt;code&gt;tcp_syn_retries&lt;/code&gt; 、 &lt;code&gt;somaxconn&lt;/code&gt; 、 &lt;code&gt;backlog&lt;/code&gt; 、 &lt;code&gt;tcp_max_syn&lt;/code&gt; 、 &lt;code&gt;syncookies&lt;/code&gt; 、 &lt;code&gt;tcp_abort_on_overflow&lt;/code&gt; 、 &lt;code&gt;tcp_fastopn&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;四次挥手参数： &lt;code&gt;tcp_max_orphan&lt;/code&gt; 、 &lt;code&gt;tcp_orphan_retries&lt;/code&gt; 、 &lt;code&gt;tcp_fin_timeout&lt;/code&gt; 、 &lt;code&gt;tcp_max_tw_buckets&lt;/code&gt; 、 &lt;code&gt;tcp_tw_reuse&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;10. 聊聊 TCP 的可靠传输机制，比如重传、拥塞、流量控制等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;重传机制&lt;/strong&gt;： 接收方回复 ACK 用于提醒发送方应该发那个数据包，当出现数据包丢失，接收方需要重传，分为超时重传和快速重传&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;超时重传：接收方拿不到 3 这个数据包，就不发 3 的 ACK，发送方等待 3 这个 ACK 超时，再重传，一种是只重传 3（节省带宽，慢），另一种是 3，4，5（快，浪费带宽）等都重传。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快速重传：发送方连续三次接收到同一个 ACK，则重传对应的数据报。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实重传都面临一个选择：只重传这一个还是重传后边所有数据报。这就引出&lt;strong&gt; SACK&lt;/strong&gt; 机制，接收方回复 SACK，SACK 会汇报收到的数据碎片，这个协议需要两边都支持。但是 SACK 并不能替代 ACK，&lt;strong&gt;接收方有权把已经报给发送端 SACK 里的数据给丢了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SACK&lt;/strong&gt; 有一个严重的问题，Linux 代码中，使用一个 &lt;code&gt;sk_buff&lt;/code&gt;  的数据结构，简称 &lt;code&gt;SBK&lt;/code&gt; ，用于存储&lt;strong&gt;发送、接收&lt;/strong&gt;队列等，还有一个结构体为 &lt;code&gt;skb_cb&lt;/code&gt;  用于控制缓存，记录各种&lt;strong&gt; TCP packet&lt;/strong&gt; 的各种信息，如小报文的数量 &lt;code&gt;tcp_gso_segs&lt;/code&gt; ，无符号两字节，最多表示 64K，SKB 会将小报文段分片累积成大报文段再发送，但是内部最多维护 17 个分片队列，每个队列最大 32KB，如果有恶意攻击者将 &lt;code&gt;mss&lt;/code&gt;  设置为 8，则每个小报文段大小为 8B。&lt;strong&gt;SACK&lt;/strong&gt; 机制会将许多 &lt;code&gt;SKB&lt;/code&gt;  合并填满一个 &lt;code&gt;SKB&lt;/code&gt; ，那么就可能出现： &lt;code&gt;17 * 32 * 1024 / 8 &amp;gt; 64K&lt;/code&gt;  导致 &lt;code&gt;tcp_gso_segs&lt;/code&gt;  溢出，进入 &lt;code&gt;BUG_ON&lt;/code&gt;  函数使得服务器拒绝远程连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;滑动窗口&lt;/strong&gt;：发送方和接收方都有窗口，接收方的滑动窗口可以使发送方根据接收方的接收能力来发送数据。确认机制为&lt;strong&gt;累计确认 / 累计应答&lt;/strong&gt;，假设收到序列号为 100 的 ACK，说明 100 以前的数据都收到了。&lt;/p&gt;
&lt;p&gt;如果接收方的窗口为 0 了，也会将发送方的窗口设为 0，此时不再发送数据，直到接收方窗口恢复，此时发送一个通知消息给发送方，并等待数据。如果这个通知消息因为网络拥塞丢失了，就会导致：接收方一直等待数据，发送方一直等待通知的死锁状况。所以一旦发送方窗口被置为 0，就会每隔一段时间发送探测报文，询问接收方窗口大小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Silly Window Syndrome&lt;/strong&gt; 是一种现象，会对小的 window size 做出响应，为了避免对小的 window size 做出响应，直到有足够大的 window size 再响应，如果窗口太小，发送出去的数据甚至没有 &lt;code&gt;MSS&lt;/code&gt;  高，就会先累积再发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拥塞处理&lt;/strong&gt;：名词： &lt;code&gt;ssthresh&lt;/code&gt;  是慢启动阈值， &lt;code&gt;cwnd&lt;/code&gt;  为拥塞窗口大小。&lt;/p&gt;
&lt;p&gt;三个状态，分别是慢启动，拥塞避免和快速恢复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;慢启动&lt;/strong&gt;： &lt;code&gt;cwnd&lt;/code&gt; （拥塞窗口）一开始为 &lt;code&gt;1MSS&lt;/code&gt; ，每收到 1 个 &lt;code&gt;ACK&lt;/code&gt;  就二倍上升，如果&lt;strong&gt;超时&lt;/strong&gt;， &lt;code&gt;ssthresh=cwnd/2&lt;/code&gt; ，并且 &lt;code&gt;cwnd=1&lt;/code&gt;  重新慢启动。如果之后 &lt;code&gt;cwnd &amp;gt;=  ssthresh&lt;/code&gt;  就进入&lt;strong&gt;拥塞避免&lt;/strong&gt;。如果触发快速重传，就进入&lt;strong&gt;快速恢复&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拥塞避免&lt;/strong&gt;：每一个 &lt;code&gt;RTT&lt;/code&gt;  就 &lt;code&gt;cwnd++&lt;/code&gt; ，如果超时，设置 &lt;code&gt;ssthresh=cwnd/2, cwnd = 1&lt;/code&gt; ，进入慢启动。如果触发快速重传，进入&lt;strong&gt;快速恢复&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;快速恢复&lt;/strong&gt;：如果超时，同样操作，进入慢启动；每次收到一个冗余 &lt;code&gt;ACK&lt;/code&gt; ， &lt;code&gt;cwnd++&lt;/code&gt; ，如果收到新 &lt;code&gt;ACK&lt;/code&gt; ，进入&lt;strong&gt;拥塞避免&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;进入&lt;strong&gt;快速恢复&lt;/strong&gt;之前，设置参数为 &lt;code&gt;ssthresh=cwnd/2, cwnd = ssthresh + 3&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这里的 &lt;code&gt;RTT&lt;/code&gt;  是指一个窗口的数据全部发送出去，又全部收到 &lt;code&gt;ACK&lt;/code&gt;  的时间，而不是某一个报文的往返时间&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;11.DNS 劫持和 DNS 污染&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;DNS 劫持&lt;/strong&gt;：劫持了 DNS 服务器，通过某些手段取得某域名的解析记录控制权，进而修改此域名的解析结果，导致对该域名的访问由原 IP 地址转入到修改后的指定 IP。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNS 污染&lt;/strong&gt;：通过对 UDP 端口 53 上的 DNS 查询进行入侵检测，一经发现与关键词相匹配的请求则立即伪装成目标域名的解析服务器（NS，Name Server）给查询者返回虚假结果。很难靠个人设置解决，使用 VPN 是一个方法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;12. 聊聊 IP 协议，它和 MAC 地址有什么区别，IPV4 和 IPV6 呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IP 协议用于唯一标识网络设备，属于网络层协议，传输层将数据包传到网络层后，会为数据加上 IP 首部。 &lt;code&gt;MAC&lt;/code&gt;  属于链路层，用于标识下一跳的网络设备的物理地址，数据从源主机到目的主机的过程中， &lt;code&gt;MAC&lt;/code&gt;  首部每经过一个路由器都会变换，而 IP 地址不会变换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IPv4&lt;/code&gt;  地址由 32 位组成，以前会根据前几位将其分为 &lt;code&gt;ABCDE&lt;/code&gt;  类地址，但是分类地址的局限性太多，比如 C 类 IP 数量太少，而 A 类 IP 数量有太多，所以采用了无分类 IP 地址，通过子网掩码和 IP 地址做 ** &lt;code&gt;&amp;amp;&lt;/code&gt;  运算&lt;strong&gt;来确定&lt;/strong&gt;网络号、子网号 **。在路由控制中，目的地址与路由表中的子网掩码运算并比较网络号，从而进行路由转发。&lt;/p&gt;
&lt;p&gt;IP 协议因为不能重组分片数据，所以分片会导致严重的性能损耗，一个分片丢失了，就要重发整个 IP 数据报，所以通过引入 &lt;code&gt;MSS&lt;/code&gt;  将分片操作交给 &lt;code&gt;TCP&lt;/code&gt;  处理。&lt;/p&gt;
&lt;p&gt;IPv6 相对于 IPv4 的改进：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取消了首部校验和字段：因为数据链路层和传输层都会校验&lt;/li&gt;
&lt;li&gt;取消分片 / 重组相关字段，这种操作只允许源 / 目标主机。&lt;/li&gt;
&lt;li&gt;使用了 128 位，16 进制，极大扩充了 IP 数量&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="八股文" />
        <updated>2023-02-27T09:09:36.000Z</updated>
    </entry>
</feed>
