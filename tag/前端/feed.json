{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"前端\" tag",
    "description": "时雨病重症患者",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2023/06/05/%E5%89%8D%E7%AB%AF/JEST%E6%B5%8B%E8%AF%95/",
            "url": "https://cecilia.cool/2023/06/05/%E5%89%8D%E7%AB%AF/JEST%E6%B5%8B%E8%AF%95/",
            "title": "JEST测试",
            "date_published": "2023-06-05T06:08:08.000Z",
            "content_html": "<h1 id=\"官网\"><a class=\"anchor\" href=\"#官网\">#</a> 官网</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qZXN0anMuaW8vemgtSGFucy9kb2NzL2dldHRpbmctc3RhcnRlZA==\">https://jestjs.io/zh-Hans/docs/getting-started</span></p>\n<h1 id=\"慢速上手\"><a class=\"anchor\" href=\"#慢速上手\">#</a> 慢速上手</h1>\n<p>慢点阅读文档，避免犯错</p>\n<ul>\n<li>安装：之后会用到 jest 命令，建议全局安装</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> jest <span class=\"token parameter variable\">--global</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 非全局安装</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev jest</pre></td></tr></table></figure><ul>\n<li>编写被测试文件和测试文件</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/api/sum-js.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// test/sum-js.test.js</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../src/api/sum.js'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'add 1 + 2 = 3'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>配置 <code>package.json</code> ：</li>\n</ul>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"jest\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>然后执行 <code>npm dev test</code>  即可测试。</p>\n<p>但是有些项目使用的是 <code>typescript</code> ，对这种进行测试，步骤如下：</p>\n<ul>\n<li>安装 <code>jest</code> ，之前写了，就不再写了</li>\n<li>生成基础配置文件：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>jest <span class=\"token parameter variable\">--init</span></pre></td></tr></table></figure><ul>\n<li>安装 <code>babel</code> ：</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev babel-jest @babel/core @babel/preset-env</pre></td></tr></table></figure><ul>\n<li>配置 <code>babel.config.js</code> ：这个需要注意，检查以下 <code>package.json</code>  是否有 <code>type: module</code> 。有就表示使用的是 ECMAScript 模块 (ESM) 来导入和导出模块。没有使用的就是 CJS</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">presets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'@babel/preset-env'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">targets</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">node</span><span class=\"token operator\">:</span> <span class=\"token string\">'current'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'@babel/preset-typescript'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种写法对于 CJS 是正确的，如果是在 ESM 运行环境，就要显示地将文件后缀改为 <code>cjs</code>  才不会报错。</p>\n<p>建议使用 <code>babel.config.json</code>  格式，ESM 和 CJS 都可以使用：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"presets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string\">\"@babel/preset-env\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">\"targets\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token property\">\"node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"current\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"@babel/preset-typescript\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"配置选项\"><a class=\"anchor\" href=\"#配置选项\">#</a> 配置选项</h1>\n<p>这些配置都在 <code>jest.config.ts</code>  或者 <code>jest.config.js</code>  中</p>\n<h2 id=\"modulefileextensions\"><a class=\"anchor\" href=\"#modulefileextensions\">#</a> moduleFileExtensions</h2>\n<p>用于指定 Jest 在查找测试文件时应该搜索哪些文件扩展名。默认情况下，Jest 会搜索以 .js、.jsx、.ts 和 .tsx 结尾的文件。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>moduleFileExtensions<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'js'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'jsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tsx'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'node'</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><h2 id=\"testmatch\"><a class=\"anchor\" href=\"#testmatch\">#</a> testMatch</h2>\n<p>用于指定 Jest 查找测试文件，默认情况下，Jest 会在项目根目录下查找所有以  <code>.test.js</code> 、 <code>.spec.js</code>  或  <code>.test.ts</code> 、 <code>.spec.ts</code>  结尾的文件，并运行其中的测试用例。</p>\n<p>即默认值： <code>[ &quot;**/__tests__/**/*.[jt]s?(x)&quot;, &quot;**/?(*.)+(spec|test).[jt]s?(x)&quot; ]</code> 。</p>\n<h2 id=\"coveragedirectory\"><a class=\"anchor\" href=\"#coveragedirectory\">#</a> coverageDirectory</h2>\n<p>Default:  <code>undefined</code></p>\n<p>The directory where Jest should output its coverage files.</p>\n<h1 id=\"工作改错\"><a class=\"anchor\" href=\"#工作改错\">#</a> 工作改错</h1>\n<p>背景描述：从 git 上将项目拉一下，然后 <code>npm install</code> ，安装相关依赖。然后执行 <code>jest</code>  测试，需要测试的文件是 <code>ts</code>  文件，模块为 <code>ES6</code> 。测试结果就是跑不通，报的错如下描述。</p>\n<p>总结：估计是上一个测试同学没有把他的 <code>package.json</code>  传到 git 上，我相关的依赖在 <code>install</code>  就缺失了。</p>\n<p>吐槽：上一个测试开发代码能力真的低。</p>\n<ul>\n<li>错误 1：找不到 ts 后缀的测试文件，在 <code>jest.config.js</code>  中的 <code>moduleFileExtensions</code>  中加入 <code>ts</code> 。</li>\n<li>错误 2：路径找不到，因为被测试文件是 <code>ts</code> ，这里 <code>import</code>  时是 <code>js</code> ，去掉后缀即可</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Configuration error:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Could not <span class=\"token function\">locate</span> module @/utils/index.js mapped as:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>F:<span class=\"token punctuation\">\\</span>Code<span class=\"token punctuation\">\\</span>front-end<span class=\"token punctuation\">\\</span>ssc<span class=\"token punctuation\">\\</span>business-platform-basic-frontend<span class=\"token punctuation\">\\</span>business-platform-basic-main<span class=\"token punctuation\">\\</span>src<span class=\"token punctuation\">\\</span>utils/index.js.</pre></td></tr></table></figure><ul>\n<li>错误 3：更正错误 2 后遇到了错误 3，显示为 Jest 无法解析 <code>export</code>  和 <code>import</code> 。这是因为 <code>Jest</code>  不支持 <code>es</code>  模块，需要通过 <code>babel</code>  来处理。</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Test suite failed to run</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Jest encountered an unexpected token</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>This usually means that you are trying to <span class=\"token function\">import</span> a <span class=\"token function\">file</span> <span class=\"token function\">which</span> Jest cannot parse, e.g. it's not plain JavaScript.</pre></td></tr></table></figure><p>安装 babel 以及配置 <code>babel.config.ts/js</code> ，这部分请参考上面的<strong>慢速上手</strong>（<strong>先别急着装，继续看下面的话</strong>）。如果有需要，还要配置 <code>jest.config.js</code>  中的 <code>transform</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token string-property property\">'^.+\\\\.jsx?$|^.+\\\\.tsx?$'</span><span class=\"token operator\">:</span> <span class=\"token string\">'babel-jest'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>如果你的项目版本太老了，安装 <code>@babel/preset-typescript</code>  失败了，要么把该 <code>preset</code>  版本降低，或者安装 <code>@babel/plugin-transform-typescript</code> ，他俩的关系是： <code>preset</code>  包含了 <code>plugin</code> 。该插件的功能为：添加对 TypeScript 编程语言使用的类型语法的支持。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev @babel/plugin-transform-typescript</pre></td></tr></table></figure><p>然后在 <code>babel.config.json</code>  修改：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"@babel/plugin-transform-typescript\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这部分请看<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFiZWxqcy5jbi9kb2NzL2JhYmVsLXByZXNldC10eXBlc2NyaXB0\"> babel 官网</span>。</p>\n",
            "tags": [
                "前端"
            ]
        },
        {
            "id": "https://cecilia.cool/2023/05/23/%E5%89%8D%E7%AB%AF/Vue3%E5%85%A5%E9%97%A8/",
            "url": "https://cecilia.cool/2023/05/23/%E5%89%8D%E7%AB%AF/Vue3%E5%85%A5%E9%97%A8/",
            "title": "Vue3发懵到发癫",
            "date_published": "2023-05-23T08:15:30.000Z",
            "content_html": "<p>欢迎各位后端程序员来到《Vue3 发懵到发癫》，各位在后端业务中神经百战，现在来试一下前端吧。</p>\n<h1 id=\"vue2\"><a class=\"anchor\" href=\"#vue2\">#</a> Vue2</h1>\n<p>一些老项目还在用 vue2，我真的会谢，为什么呢，因为我实习时就要用 vue2</p>\n<h1 id=\"vue3\"><a class=\"anchor\" href=\"#vue3\">#</a> Vue3</h1>\n<p>这里的技术栈主要是：Vue3-ts-vite。IDE：VSCode</p>\n<p>其实 IDEA2023 版也支持创建 vue3 项目，方便程度都差不多吧，反正都要用命令行初始化项目，嘎嘎爽。</p>\n<p>参考链接：</p>\n<ul>\n<li>首选<strong>官网</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcv\">https://cn.vuejs.org/</span></li>\n<li>快速入门（超级推荐）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20v\">https://vue3.chengpeiquan.com/</span></li>\n</ul>\n<h2 id=\"搭建项目\"><a class=\"anchor\" href=\"#搭建项目\">#</a> 搭建项目</h2>\n<p>选择一个文件夹，管理员权限打开 cmd，然后执行以下命令：</p>\n<p><code>npm install -g create-preset</code> ：尽管有很多种创建 vue 项目模式，但是这种更快，将你需要的大部分依赖包都下了，可能会提示你 <code>-g</code>  已经弃用了，叫你使用 <code>--local=global</code> ，改一下即可。 <code>-g</code>  就是全局安装，之后再希望创建项目，就有直接的模板了。</p>\n<p><code>preset -v</code> ：检查一下是否安装成功，成功的话会有一个版本号</p>\n<p><code>preset init hello-vue3 --template vue3-ts-vite</code> ： <code>init</code>  后的参数就是项目名，最后一个固定参数表示使用的是 vue3、typescript、vite 构建工具</p>\n<p><code>cd hello-vue3</code> 、 <code>npm install</code> 、 <code>npm run dev</code> ：进入项目，安装一些必要的依赖，运行。</p>\n<p>停止运行，用 vscode 打开项目，修改一下 <code>vite.config.ts</code> ：</p>\n<p>如果在 Vite 的配置文件 vite.config.ts ，或者是在 Vue CLI（CLI 是 command-line Interface 的缩写） 的配置文件 vue.config.js 里设置了 alias 的话，因为 TypeScript 不认识里面配置的 alias 别名，所以需要再对 tsconfig.json 做一点调整，增加对应的 paths ，否则在 VSCode 里可能会路径报红，提示找不到模块或其相应的类型声明。</p>\n<p>假设在 vite.config.ts 里配置了这些 alias ：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>export default defineConfig(<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//resolve () 函数在 path 包中，不要导错了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  resolve<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      '@'<span class=\"token operator\">:</span> resolve('src')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 源码根目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      '@img'<span class=\"token operator\">:</span> resolve('src/assets/img')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 图片</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      '@less'<span class=\"token operator\">:</span> resolve('src/assets/less')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 预处理器</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      '@libs'<span class=\"token operator\">:</span> resolve('src/libs')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 本地库</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      '@plugins'<span class=\"token operator\">:</span> resolve('src/plugins')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 本地插件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      '@cp'<span class=\"token operator\">:</span> resolve('src/components')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 公共组件</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      '@views'<span class=\"token operator\">:</span> resolve('src/views')<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 路由组件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span>)</pre></td></tr></table></figure><p>那么在该项目的 tsconfig.json 文件里就需要相应的加上这些 paths ：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token property\">\"@/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token property\">\"@img/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/assets/img/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token property\">\"@less/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/assets/less/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token property\">\"@libs/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/libs/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token property\">\"@plugins/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/plugins/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token property\">\"@cp/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/components/*\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token property\">\"@views/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"src/views/*\"</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"入门教程\"><a class=\"anchor\" href=\"#入门教程\">#</a> 入门教程</h2>\n<h3 id=\"虚拟dom\"><a class=\"anchor\" href=\"#虚拟dom\">#</a> 虚拟 DOM</h3>\n<p>如果说只用 js，我们想要动态的修改一个静态标签的内容，比如 h 文本等，或者动态增加一些标签之类的，必须要手撸 DOM 才行，然后重新渲染，如果在一个页面上频繁且大量的操作真实 DOM ，频繁的触发浏览器回流（ Reflow ）与重绘（ Repaint ），会带来很大的性能开销，从而造成页面卡顿，在大型项目的性能上很是致命。</p>\n<p>Vue 则是通过操作<strong>虚拟 DOM</strong> ，每一次数据更新都通过 <strong>Diff 算法</strong>找出需要更新的节点，只更新对应的虚拟 DOM ，再去映射到真实 DOM 上面渲染，以此避免频繁或大量的操作真实 DOM 。</p>\n<blockquote>\n<p>虚拟 DOM 是一种编程概念，是指将原本应该是真实 DOM 元素的 UI 界面，用数据结构来组织起完整的 DOM 结构，再同步给真实 DOM 渲染，减少浏览器的回流与重绘。在 JavaScript 里，虚拟 DOM 的表现是一个 Object 对象，其中需要包含指定的属性（例如 Vue 的虚拟 DOM 需要用  <code>type</code>  来指定当前标签是一个  <code>&lt;div /&gt;</code>  还是  <code>&lt;span /&gt;</code>  ），然后框架会根据对象的属性去转换为 DOM 结构并最终完成内容的显示。</p>\n</blockquote>\n<h3 id=\"文件结构\"><a class=\"anchor\" href=\"#文件结构\">#</a> 文件结构</h3>\n<p><code>.vue</code>  被称为单文件组件，也就是 <code>SFC</code> ：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><code>.vue</code>  文件</th>\n<th style=\"text-align:center\"><code>.html</code>  文件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><code>&lt;template /&gt;</code>  部分</td>\n<td style=\"text-align:center\">HTML 代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;style /&gt;</code>  部分</td>\n<td style=\"text-align:center\">CSS 代码</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>&lt;script /&gt;</code>  部分</td>\n<td style=\"text-align:center\">JavaScript 代码</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"mpa与spa\"><a class=\"anchor\" href=\"#mpa与spa\">#</a> MPA 与 SPA</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名词</th>\n<th style=\"text-align:center\">全称</th>\n<th style=\"text-align:center\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">MPA</td>\n<td style=\"text-align:center\">Multi-Page Application</td>\n<td style=\"text-align:center\">多页面应用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SPA</td>\n<td style=\"text-align:center\">Single-Page Application</td>\n<td style=\"text-align:center\">单页面应用</td>\n</tr>\n</tbody>\n</table>\n<p>MPA 多页面应用是最传统的网站体验，当一个网站有多个页面时，会对应有多个实际存在的 HTML 文件，访问每一个页面都需要经历一次完整的页面请求过程：</p>\n<p>从用户点击跳转开始： ---&gt; 浏览器打开新的页面 ---&gt; 请求【所有】资源 ---&gt; 加载 HTML 、CSS 、 JS 、 图片等资源 ---&gt; 完成新页面的渲染。</p>\n<p>SPA 单页面应用是现代化的网站体验，与 MPA 相反，不论站点内有多少个页面，在 SPA 项目实际上只有一个 HTML 文件，也就是  <code>index.html</code>  首页文件。</p>\n<p>它只有第一次访问的时候才需要经历一次完整的页面请求过程，之后的每个内部跳转或者数据更新操作，都是通过 AJAX 技术来获取需要呈现的内容并只<strong>更新指定的网页位置</strong>。</p>\n<p>可以把 SPA 的请求过程简化为如下步骤：</p>\n<p>SPA 页面跳转过程，从用户点击跳转开始：---&gt; 浏览器通过  <code>pushState</code>  等方法更新 URL---&gt; 请求接口数据（如果有涉及到前后端交互）---&gt; 通过 JavaScript 处理数据，拼接 HTML 片段 ---&gt; 把 HTML 片段渲染到指定位置，完成页面的 “刷新”。</p>\n<h3 id=\"csr-与-ssr\"><a class=\"anchor\" href=\"#csr-与-ssr\">#</a> CSR 与 SSR</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名词</th>\n<th style=\"text-align:center\">全称</th>\n<th style=\"text-align:center\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">CSR</td>\n<td style=\"text-align:center\">Client-Side Rendering</td>\n<td style=\"text-align:center\">客户端渲染</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">SSR</td>\n<td style=\"text-align:center\">Server-Side Rendering</td>\n<td style=\"text-align:center\">服务端渲染</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"工程化\"><a class=\"anchor\" href=\"#工程化\">#</a> 工程化</h3>\n<p>基于 Vue 3 的项目，最主流的工程化组合拳有以下两种：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">常用方案</th>\n<th style=\"text-align:center\">Runtime</th>\n<th style=\"text-align:center\">构建工具</th>\n<th style=\"text-align:center\">前端框架</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">方案一</td>\n<td style=\"text-align:center\">Node</td>\n<td style=\"text-align:center\">Webpack</td>\n<td style=\"text-align:center\">Vue</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">方案二</td>\n<td style=\"text-align:center\">Node</td>\n<td style=\"text-align:center\">Vite</td>\n<td style=\"text-align:center\">Vue</td>\n</tr>\n</tbody>\n</table>\n<p>案一是比较传统并且过去项目使用最多的方案组合，但从 2021 年初随着 Vite 2.0 的发布，伴随着更快的开发体验和日渐丰富的社区生态，新项目很多都开始迁移到方案二。</p>\n<h3 id=\"路由\"><a class=\"anchor\" href=\"#路由\">#</a> 路由</h3>\n<p>在传统的 Web 开发过程中，当需要实现多个站内页面时，以前需要写很多个 HTML 页面，然后通过  <code>&lt;a /&gt;</code>  标签来实现互相跳转。</p>\n<p>在如今工程化模式下的前端开发，像 Vue 工程，可以轻松实现只用一个 HTML 文件，却能够完成多个站内页面渲染、跳转的功能，这就是路由。</p>\n<blockquote>\n<p><code>@views</code>  是  <code>src/views</code>  的路径别名， <code>@cp</code>  是  <code>src/components</code>  的路径别名。路径别名可以在  <code>vite.config.ts</code>  等构建工具配置文件里添加  <code>alias</code>  ，在搭建项目中我们曾经提到过。</p>\n</blockquote>\n<p>文件结构：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>src</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>│ <span class=\"token comment\"># 路由目录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├─router</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   <span class=\"token comment\"># 路由入口文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├───index.ts</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   <span class=\"token comment\"># 路由配置，如果路由很多，可以再拆分模块文件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>├───routes.ts</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>│ <span class=\"token comment\"># 项目入口文件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>└─main.ts</pre></td></tr></table></figure><p>index.ts 是路由的入口文件，如果路由很少，那么可以只维护在这个文件里，如果项目比较复杂，可以像上面这个结构一样拆分成两个文件： index.ts 和 routes.ts ，在 routes.ts 里维护路由树的结构，在 index.ts 导入路由树结构并激活路由，同时可以在该文件里配置路由钩子。</p>\n<p>以 <code>typescript</code>  为例，路由文件的基础格式为三个部分：类型声明、数组结构、模块导出。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/router/routes.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 TypeScript 时需要导入路由项目的类型声明</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token keyword\">type</span> <span class=\"token punctuation\">&#123;</span> RouteRecordRaw <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 使用路由项目类型声明一个路由数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 将路由数组导出给其他模块使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> routes</pre></td></tr></table></figure><p><code>RouteRecordRaw</code>  是路由项目的 TS 类型。</p>\n<p><code>routes</code>  数组中，每一项的组成可以这么写：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    alias<span class=\"token operator\">:</span> <span class=\"token string\">'/index'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@views/home.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    children<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            path<span class=\"token operator\">:</span> <span class=\"token string\">'login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            name<span class=\"token operator\">:</span> <span class=\"token string\">'auth-login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/components/welcome/LoginPage.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            path<span class=\"token operator\">:</span> <span class=\"token string\">'register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            name<span class=\"token operator\">:</span> <span class=\"token string\">'auth-register'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/components/welcome/RegisterPage.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>path</code>  是路由的访问路径，如果域名是  <code>https://example.com</code> ， 配置为  <code>/home</code> ，那么访问路径就是  <code>https://example.com/home</code> 。</p>\n</li>\n<li>\n<p><code>alias</code>  可以为路由指定一个别名，这样用户既可以通过 <code>/</code>  访问首页，也可以通过 <code>/index</code>  访问首页。</p>\n</li>\n<li>\n<p><code>name</code>  是路由的名称，非必填，但是一般都会配置上去，这样可以很方便的通过  <code>name</code>  来代替  <code>path</code>  实现路由的跳转，因为像有时候的开发环境和生产环境的路径不一致，或者说路径变更，通过  <code>name</code>  无需调整，但如果通过  <code>path</code> ，可能就要修改很多文件里面的链接跳转目标了。</p>\n</li>\n<li>\n<p><code>component</code>  是路由的模板文件，指向一个 vue 组件，用于指定路由在浏览器端的视图渲染，这里有两种方式来指定使用哪个组件</p>\n<ul>\n<li>\n<p>同步组件：直接接收一个变量，变量的值就是对于的模板组件，在打包的时候，会把组件的所有代码都打包到一个文件里，对于大项目来说，这种方式的首屏加载是个灾难，要面对文件过大带来等待时间变长的问题。</p>\n</li>\n<li>\n<p>异步组件： <code>component</code>  接收一个<strong>函数</strong>，在 return 的时候返回模板组件，同时组件里的代码在打包的时候都会生成独立的文件，并在访问到对应路由的时候按需引入。上面的代码就是异步的路由懒加载。</p>\n</li>\n</ul>\n</li>\n<li>\n<p>然后每一项其实还有一个参数为 children，每一个 childre 的值又是一个 <code>routes</code> ，从而形成路由树。</p>\n</li>\n</ul>\n<p>路由组件必须在父级组件里带有 <code>&lt;router-view/&gt;</code>  标签中，一级路由的父级组件就是 <code>src/App.vue</code>  这个根组件，直接这么写：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;router-view /&gt;\n&lt;/template&gt;\n</code></pre>\n<p>如果站点带有全局公共组件，比如有全站统一的页头、页脚，只有中间区域才是路由，那么可以这样配置：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 全局页头 --&gt;\n  &lt;Header /&gt;\n\n  &lt;!-- 路由 --&gt;\n  &lt;router-view /&gt;\n\n  &lt;!-- 全局页脚 --&gt;\n  &lt;Footer /&gt;\n&lt;/template&gt;\n</code></pre>\n<p>如果有一部分路由带公共组件，一部分没有，比如大部分页面都需要有侧边栏，但登录页、注册页不需要，就可以这么处理：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;!-- 登录 --&gt;\n  &lt;Login v-if=&quot;route.name === 'login'&quot; /&gt;\n\n  &lt;!-- 注册 --&gt;\n  &lt;Register v-else-if=&quot;route.name === 'register'&quot; /&gt;\n\n  &lt;!-- 带有侧边栏的其他路由 --&gt;\n  &lt;div v-else&gt;\n    &lt;!-- 固定在左侧的侧边栏 --&gt;\n    &lt;Sidebar /&gt;\n\n    &lt;!-- 路由 --&gt;\n    &lt;router-view /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p>其他页面使用 <code>router</code>  来进行路由跳转：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> useRouter <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">useRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 跳转</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 或者：router.push ('/home')，直接使用 path 进行跳转</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 返回上一页</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>如果路由的 ts 文件已经定义好了 router，也可以直接导入 router，就不需要使用 <code>useRouter</code> 。</p>\n<p>除了使用 <code>router</code>  属性以外，还可以使用 <code>&lt;router-link&gt;</code>  标签：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;router-link to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;\n&lt;/template&gt;\n</code></pre>\n<p>该标签编译后会默认转换为 <code>a</code>  标签，如果想让其变为其他标签，在 vue2 中可以使用 <code>tag</code>  属性：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;router-link tag=&quot;span&quot; to=&quot;/home&quot;&gt;首页&lt;/router-link&gt;\n&lt;/template&gt;\n</code></pre>\n<p>在 vue3 中去除了 <code>tag</code>  属性，所以需要通过  <code>custom</code>  和  <code>v-slot</code>  的配合将其渲染为其他标签。</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;router-link to=&quot;/home&quot; custom v-slot=&quot;&#123; navigate &#125;&quot;&gt;\n    &lt;span class=&quot;link&quot; @click=&quot;navigate&quot;&gt; 首页 &lt;/span&gt;\n  &lt;/router-link&gt;\n&lt;/template&gt;\n</code></pre>\n<p>解释：</p>\n<ul>\n<li><code>custom</code>  ，一个布尔值，用于控制是否需要渲染为  <code>a</code>  标签，当不包含  <code>custom</code>  或者把  <code>custom</code>  设置为  <code>false</code>  时，则依然使用  <code>a</code>  标签渲染。</li>\n<li><code>v-slot</code>  是一个对象，用来决定标签的行为，它包含了：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">href</td>\n<td style=\"text-align:left\">解析后的 URL，将会作为一个  <code>a</code>  元素的  <code>href</code>  属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">route</td>\n<td style=\"text-align:left\">解析后的规范化的地址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">navigate</td>\n<td style=\"text-align:left\">触发导航的函数，会在必要时自动阻止事件，和  <code>router-link</code>  同理</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">isActive</td>\n<td style=\"text-align:left\">如果需要应用激活的  <code>class</code>  则为  <code>true</code> ，允许应用一个任意的  <code>class</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">isExactActive</td>\n<td style=\"text-align:left\">如果需要应用精确激活的  <code>class</code>  则为  <code>true</code> ，允许应用一个任意的  <code>class</code></td>\n</tr>\n</tbody>\n</table>\n<p>对于重定向，在路由数组中使用 <code>redirect</code>  属性即可：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@views/home.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">'Home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/error'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    redirect<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 访问这个路由会被重定向到首页</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>我们也可以单独写一个 404 路由页面来替代站内的跳转：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes<span class=\"token operator\">:</span> <span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>RouteRecordRaw<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 只要访问到不存在的路由，就会显示为这个 404 模板</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/:pathMatch(.*)*'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'404'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@views/404.vue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>这种重定向也可以带一些参数：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    redirect<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      name<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        from<span class=\"token operator\">:</span> <span class=\"token string\">'redirect'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 相当于访问地址为： https://example.com/home?from=redirect</span></pre></td></tr></table></figure><p><code>redirect</code>  的值也可以是一个函数：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-variable function\">redirect</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// `loginInfo` 是当前用户的登录信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 可以从 `localStorage` 或者 `Pinia` 读取</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> groupId <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> loginInfo</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 根据组别 ID 进行跳转</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>groupId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 管理员跳去仪表盘</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'/dashboard'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 普通用户跳去首页</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'/home'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 其他都认为未登录，跳去登录页</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">'/login'</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>路由中也有一些全局钩子用于在跳转（前、后）时处理一些工作：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">可用钩子</th>\n<th style=\"text-align:left\">含义</th>\n<th style=\"text-align:left\">触发时机</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">beforeEach</td>\n<td style=\"text-align:left\">全局前置守卫</td>\n<td style=\"text-align:left\">在路由跳转前触发</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">beforeResolve</td>\n<td style=\"text-align:left\">全局解析守卫</td>\n<td style=\"text-align:left\">在导航被确认前，同时在组件内守卫和异步路由组件被解析后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">afterEach</td>\n<td style=\"text-align:left\">全局后置守卫</td>\n<td style=\"text-align:left\">在路由跳转完成后触发</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建路由</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token function\">createRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 在这里调用导航守卫的钩子函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有一些参数：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">to</td>\n<td style=\"text-align:left\">即将要进入的路由对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">from</td>\n<td style=\"text-align:left\">当前导航正要离开的路由</td>\n</tr>\n</tbody>\n</table>\n<p>在 vue2 中第三个参数是 next，用于操作路由接下来的跳转，但是新版本路由里，已经通过 RFC 将其删除，虽然目前还是作为可选参数使用，但以后不确定是否会移除，不建议继续使用。新版本路由可以通过  <code>return</code>  来代替  <code>next</code> 。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> isNoLogin <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span>meta</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isNoLogin<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'/login'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>isNoLogin</code>  有 <code>&#123;&#125;</code>  是因为它是一个对象属性，需要使用解构语法来获取它的值</p>\n<p>当然也有独享的路由钩子， <code>beforeEnter</code>  和 <code>beforeResolve</code> 。</p>\n<h3 id=\"组件通信\"><a class=\"anchor\" href=\"#组件通信\">#</a> 组件通信</h3>\n<p>父子组件之间的通信方式包括：</p>\n<ul>\n<li>props/emits</li>\n<li>v-model/emits</li>\n<li>ref/emits</li>\n</ul>\n<p>第一种，子组件使用 <code>props</code>  入参来获取父组件传过来的值：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Child.vue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    title<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    index<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    userName<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    uid<span class=\"token operator\">:</span> Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 在这里需要添加一个入参</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 该入参包含了当前组件定义的所有 props</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>如果父组件 Father.vue 传进来的数据在 Child.vue 里未定义，不仅不会拿到，并且在控制台会有警告信息。</p>\n</blockquote>\n<p>v-model 更为简单，操作上简化了，但是副作用就是功能上没有 props 那么多。</p>\n<h2 id=\"nodejs入门\"><a class=\"anchor\" href=\"#nodejs入门\">#</a> Node.js 入门</h2>\n<p>Node.js （简称 Node ） 是一个基于 Chrome V8 引擎构建的 JS 运行时（ JavaScript Runtime ）。它让 JavaScript 代码不再局限于网页上，还可以跑在客户端、服务端等场景，极大的推动了前端开发的发展，现代的前端开发几乎都离不开 Node 。</p>\n<p>Runtime ，可以叫它 “运行时” 或者 “运行时环境” ，这个概念是指，项目的代码在哪里运行，哪里就是运行时。</p>\n<p>传统的 JavaScript 只能跑在浏览器上，每个浏览器都为 JS 提供了一个运行时环境，可以简单的把浏览器当成一个 Runtime ，明白了这一点，相信就能明白什么是 Node 。</p>\n<p>Node 就是一个让 JS 可以脱离浏览器运行的环境，当然，这里并不是说 Node 就是浏览器。</p>\n<p>虽然 Node 也是基于 Chrome V8 引擎构建，但它并不是一个浏览器，它提供了一个完全不一样的运行时环境，没有 Window 、没有 Document 、没有 DOM 、没有 Web API ，没有 UI 界面…</p>\n<p>但它提供了很多浏览器做不到的能力，比如和操作系统的交互，例如 “文件读写” 这样的操作在浏览器有诸多的限制，而在 Node 则轻轻松松。</p>\n<p>对于前端开发者来说， Node 的巨大优势在于，使用一种语言就可以编写所有东西（前端和后端），不再花费很多精力去学习各种各样的开发语言。</p>\n<p>哪怕仅仅只做 Web 开发，也不再需要顾虑新的语言特性在浏览器上的兼容性（ e.g. ES6 、 ES7 、 ES8 、 ES9 …）， Node 配合构建工具，以及诸如 Babel 这样的代码编译器，可以帮转换为浏览器兼容性最高的 ES5 。</p>\n<p>查看你的 node.js 版本： <code>node -v</code> 。</p>\n<h3 id=\"镜像源\"><a class=\"anchor\" href=\"#镜像源\">#</a> 镜像源</h3>\n<p>可以先在命令行输入以下命令查看当前的 npm 配置：</p>\n<p>bash</p>\n<pre><code>npm config get registry\n# https://registry.npmjs.org/\n</code></pre>\n<p>默认情况下，会输出 npm 官方的资源注册表地址，接下来在命令行上输入以下命令，进行镜像源的绑定：</p>\n<pre><code>npm config set registry https://registry.npmmirror.com\n</code></pre>\n<p>可以再次运行查询命令来查看是否设置成功：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config get registry</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># https://registry.npmmirror.com/</span></pre></td></tr></table></figure><p>可以看到已经成功更换为中国镜像站的地址了，之后在安装 npm 包的时候，速度会有很大的提升！</p>\n<p>如果需要删除自己配置的镜像源，可以输入以下命令进行移除，移除后会恢复默认设置：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token function\">rm</span> registry</pre></td></tr></table></figure><blockquote>\n<p>如果之前已经绑定过  <code>npm.taobao</code>  系列域名，也请记得更换成  <code>npmmirror</code>  这个新的域名！随着新的域名已经正式启用，老  <code>npm.taobao.org</code>  和  <code>registry.npm.taobao.org</code>  域名在 2022 年 05 月 31 日零时后不再提供服务。</p>\n</blockquote>\n<h3 id=\"初始化项目\"><a class=\"anchor\" href=\"#初始化项目\">#</a> 初始化项目</h3>\n<p>在项目所在目录打开命令行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> init</pre></td></tr></table></figure><p>之后命令行会输出一些提示，比如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>package name: <span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">)</span> hello-node</pre></td></tr></table></figure><p><code>package name</code>  是问题的题干，会询问要输入什么内容，直接回车就是默认值，等所有都填完后，会输出以下信息：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hello-node\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A demo about Node.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cyan\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Is this OK? (yes)</pre></td></tr></table></figure><p>也可以直接加上  <code>-y</code>  参数，这样会以 Node 推荐的答案帮快速生成项目信息。而这些信息就成为 json 文件，保存在项目的 package.json 文件中</p>\n<p>除了手动维护这些信息之外，在安装 npm 包等操作时， Node 也会帮写入数据到这个文件里，来了解一些常用字段的含义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字段名</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">name</td>\n<td style=\"text-align:left\">项目名称，如果打算发布成 npm 包，它将作为包的名称</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">version</td>\n<td style=\"text-align:left\">项目版本号，如果打算发布成 npm 包，这个字段是必须的，遵循 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20vZ3VpZGUuaHRtbCMlRTglQUYlQUQlRTQlQjklODklRTUlOEMlOTYlRTclODklODglRTYlOUMlQUMlRTUlOEYlQjclRTclQUUlQTElRTclOTAlODY=\">语义化版本号</span> 的要求</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">description</td>\n<td style=\"text-align:left\">项目的描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">keywords</td>\n<td style=\"text-align:left\">关键词，用于在 npm 网站上进行搜索</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">homepage</td>\n<td style=\"text-align:left\">项目的官网 URL</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">main</td>\n<td style=\"text-align:left\">项目的入口文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">scripts</td>\n<td style=\"text-align:left\">指定运行脚本的命令缩写，常见的如  <code>npm run build</code>  等命令就在这里配置，详见 <span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20vZ3VpZGUuaHRtbCMlRTglODQlOUElRTYlOUMlQUMlRTUlOTElQkQlRTQlQkIlQTQlRTclOUElODQlRTklODUlOEQlRTclQkQlQUU=\">脚本命令的配置</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">author</td>\n<td style=\"text-align:left\">作者信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">license</td>\n<td style=\"text-align:left\">许可证信息，可以选择适当的许可证进行开源</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">dependencies</td>\n<td style=\"text-align:left\">记录当前项目的生产依赖，安装 npm 包时会自动生成，详见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20vZ3VpZGUuaHRtbCMlRTQlQkUlOUQlRTglQjUlOTYlRTUlOEMlODUlRTUlOTIlOEMlRTYlOEYlOTIlRTQlQkIlQjY=\">依赖包和插件</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">devDependencies</td>\n<td style=\"text-align:left\">记录当前项目的开发依赖，安装 npm 包时会自动生成，详见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20vZ3VpZGUuaHRtbCMlRTQlQkUlOUQlRTglQjUlOTYlRTUlOEMlODUlRTUlOTIlOEMlRTYlOEYlOTIlRTQlQkIlQjY=\">依赖包和插件</span></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type</td>\n<td style=\"text-align:left\">配置 Node 对 CJS 和 ESM 的支持</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"项目命名规则\"><a class=\"anchor\" href=\"#项目命名规则\">#</a> 项目命名规则</h3>\n<p>如果打算发布成 npm 包，它将作为包的名称，可以是普通包名，也可以是范围包的包名。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:left\">释义</th>\n<th style=\"text-align:left\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">范围包</td>\n<td style=\"text-align:left\">具备  <code>@scope/project-name</code>  格式，一般有一系列相关的开发依赖之间会以相同的 scope 进行命名</td>\n<td style=\"text-align:left\">如  <code>@vue/cli</code>  、  <code>@vue/cli-service</code>  就是一系列相关的范围包</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">普通包</td>\n<td style=\"text-align:left\">其他命名都属于普通包</td>\n<td style=\"text-align:left\">如  <code>vue</code>  、  <code>vue-router</code></td>\n</tr>\n</tbody>\n</table>\n<p>包名有一定的书写规则：</p>\n<ul>\n<li>名称必须保持在 1 ~ 214 个字符之间（包括范围包的  <code>@scope/</code>  部分）</li>\n<li>只允许使用小写字母、下划线、短横线、数字、小数点（并且只有范围包可以以点或下划线开头）</li>\n<li>包名最终成为 URL 、命令行参数或者文件夹名称的一部分，所以名称不能包含任何非 URL 安全字符</li>\n</ul>\n<p>想要查询包名是否存在： <code>npm view &lt;package-name&gt;</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>vue@3.3.4 <span class=\"token operator\">|</span> MIT <span class=\"token operator\">|</span> deps: <span class=\"token number\">5</span> <span class=\"token operator\">|</span> versions: <span class=\"token number\">445</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The progressive JavaScript framework <span class=\"token keyword\">for</span> building modern web UI.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>https://github.com/vuejs/core/tree/main/packages/vue<span class=\"token comment\">#readme</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>keywords: vue</pre></td></tr></table></figure><p>如果该包名不存在，就会返回 404 信息</p>\n<h3 id=\"版本号格式与升级规则\"><a class=\"anchor\" href=\"#版本号格式与升级规则\">#</a> 版本号格式与升级规则</h3>\n<blockquote>\n<p>超级重要的常识</p>\n</blockquote>\n<p>版本号的格式为：  <code>Major.Minor.Patch</code>  （简称  <code>X.Y.Z</code>  ），它们的含义和升级规则如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">英文</th>\n<th style=\"text-align:center\">中文</th>\n<th style=\"text-align:left\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Major</td>\n<td style=\"text-align:center\">主版本号</td>\n<td style=\"text-align:left\">当项目作了大量的变更，与旧版本存在一定的不兼容问题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Minor</td>\n<td style=\"text-align:center\">次版本号</td>\n<td style=\"text-align:left\">做了向下兼容的功能改动或者少量功能更新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Patch</td>\n<td style=\"text-align:center\">修订号</td>\n<td style=\"text-align:left\">修复上一个版本的少量 BUG</td>\n</tr>\n</tbody>\n</table>\n<p>一般情况下，三者均为正整数，并且从  <code>0</code>  开始，遵循这三条注意事项：</p>\n<ul>\n<li>当主版本号升级时，次版本号和修订号归零</li>\n<li>当次版本号升级时，修订号归零，主版本号保持不变</li>\n<li>当修订号升级时，主版本号和次版本号保持不变</li>\n</ul>\n<p>下面以一些常见的例子帮助快速理解版本号的升级规则：</p>\n<ul>\n<li>如果不打算发布，可以默认为  <code>0.0.0</code>  ，代表它不是一个进入发布状态的包</li>\n<li>在正式发布之前，可以将其设置为  <code>0.1.0</code>  发布第一个<strong>测试版本</strong>，自此，代表已进入发布状态，但还处于初期开发阶段，这个阶段可能经常改变 API ，但不需要频繁的更新主版本号</li>\n<li>在  <code>0.1.0</code>  发布后，修复了 BUG ，下一个版本号将设置为  <code>0.1.1</code>  ，即更新了一个修订号</li>\n<li>在  <code>0.1.1</code>  发布后，有<strong>新的功能发布</strong>，下一个版本号可以升级为  <code>0.2.0</code>  ，即更新了一个次版本号</li>\n<li>当觉得这个项目已经功能稳定、没有什么 BUG 了，决定正式发布并给用户使用时，那么就可以进入了  <code>1.0.0</code>  正式版了</li>\n</ul>\n<p><code>npm run dev</code> 、 <code>npm run build</code>  是什么？其实就是运行 <code>package.json</code>  文件中的 <code>scripts</code>  里的内容：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"dev\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假设内容如上，执行 <code>npm run dev</code>  就会执行 <code>node index</code>  命令，执行 <code>npm run test</code>  就会执行 <code>echo</code> 。这里我们在项目下创建一个 <code>index.js</code> ，并写入：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"====\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后执行 <code>npm run  dev</code> ，就会在控制台打印 &quot;====&quot;，所以 <code>npm run</code>  后面接的参数是什么不重要，它只是 <code>scripts</code>  里对应 <code>key</code>  的 <code>value</code>  的映射。</p>\n<h3 id=\"module\"><a class=\"anchor\" href=\"#module\">#</a> Module</h3>\n<p>软工里有个原则：单一职责，一个完整业务应该是各种高内聚的模块组合到一起，每个单一职责的代码块就叫做模块（Module）。</p>\n<ul>\n<li>ESM （ ES Module ） 是 JavaScript 在 ES6（ ECMAScript 2015 ）版本推出的模块化标准，旨在成为浏览器和服务端通用的模块解决方案。</li>\n<li>CJS （ CommonJS ） 原本是服务端的模块化标准（设计之初也叫 ServerJS ），是为 JavaScript 设计的用于浏览器之外的一个模块化方案， Node 默认支持了该规范，在 Node 12 之前也只支持 CJS ，但从 Node 12 开始，已经同时支持 ES Module 的使用。（老项目还是可能会遇到）</li>\n</ul>\n<blockquote>\n<p>一个独立的文件就是一个模块，该文件内部的变量必须通过导出才能被外部访问到，而外部文件想访问这些变量，需要导入对应的模块才能生效。</p>\n</blockquote>\n<h3 id=\"cjs设计模块\"><a class=\"anchor\" href=\"#cjs设计模块\">#</a> CJS 设计模块</h3>\n<p>先调整一下目录结构：</p>\n<ol>\n<li>删掉  <code>index.js</code>  文件</li>\n<li>创建一个  <code>src</code>  文件夹，在里面再创建一个  <code>cjs</code>  文件夹</li>\n<li>在  <code>cjs</code>  文件夹里面创建两个文件：  <code>index.cjs</code>  和  <code>module.cjs</code></li>\n</ol>\n<blockquote>\n<p>使用了  <code>.cjs</code>  文件扩展名，其实它也是 JS 文件，但这个扩展名是 Node 专门为 CommonJS 规范设计的</p>\n</blockquote>\n<p>再改一下 <code>scripts</code>  里的内容：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"dev:cjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node src/cjs/index.cjs\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>cjs</code>  使用 <code>module.exports</code>  导出，使用 <code>require</code>  导入：</p>\n<ul>\n<li>在 <code>module.cjs</code>  写入代码：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/cjs/module.cjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World from bar.'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 导出</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  foo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  bar</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>在 <code>index.js</code>  写入代码：</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/cjs/index.cjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./module.cjs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>运行之后会发现 m 其实是一个对象，也就是 <code>module.cjs</code>  模块抽象出来的对象，需要通过  <code>m.foo()</code>  、  <code>m.bar</code>  的形式才可以拿到值。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./module.cjs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>m<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>m<span class=\"token punctuation\">.</span>bar <span class=\"token operator\">=</span> <span class=\"token string\">'after change bar'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>m<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 结果都是 This is bar.</span></pre></td></tr></table></figure><p>也可以这样：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/cjs/index.cjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> foo2<span class=\"token punctuation\">,</span> bar <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./module.cjs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">foo2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这里注意 <code>foo: foo2</code> ，可以直接写成 <code>foo</code> ，前者是为了重命名，避免模块多了命名冲突</p>\n<h3 id=\"esm设计模块\"><a class=\"anchor\" href=\"#esm设计模块\">#</a> ESM 设计模块</h3>\n<p>不过因为历史原因，如果要直接在浏览器里使用该方案，在不同的浏览器里会有一定的兼容问题，因此一般情况下都需要借助<strong>构建工具</strong>进行开发，工具通常会提供开箱即用的本地服务器用于开发调试，并且最终打包的时候还可以抹平不同浏览器之间的差异。</p>\n<p>esm 的默认导出为： <code>export default</code> ；命名导出为 <code>export</code> 。默认导出的意思是，一个模块只包含一个值；而导入默认值则意味着，导入时声明的变量名就是对应模块的值。</p>\n<p>使用  <code>import ... from ...</code>  导入模块，在导入的时候，如果文件扩展名是  <code>.js</code>  则可以省略文件名后缀，否则需要把扩展名也完整写出来。</p>\n<h4 id=\"默认导出和导入\"><a class=\"anchor\" href=\"#默认导出和导入\">#</a> 默认导出和导入</h4>\n<p>在 <code>module.mjs</code>  写入：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/esm/module.mjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'Hello World'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 如果是 cjs，其实就是 module.exports = 'Hello World'</span></pre></td></tr></table></figure><p>然后在 <code>index.mjs</code>  中写入：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/esm/index.mjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> m <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.mjs'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"命名导出和导入\"><a class=\"anchor\" href=\"#命名导出和导入\">#</a> 命名导出和导入</h4>\n<p>命名导出： <code>export const bar = 'xx'</code> ，不论是变量还是函数，直接加上 <code>export</code>  即可。</p>\n<p>命名导入：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/esm/index.mjs</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  foo <span class=\"token keyword\">as</span> foo2<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 这里进行了重命名</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  bar</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./module.mjs'</span></pre></td></tr></table></figure><h3 id=\"依赖包和插件\"><a class=\"anchor\" href=\"#依赖包和插件\">#</a> 依赖包和插件</h3>\n<p>项目的依赖建议优先选择本地安装（项目中的 node_module 目录），这是因为本地安装可以把依赖列表记录到 package.json 里，多人协作的时候可以减少很多问题出现，特别是当本地依赖与全局依赖版本号不一致的时候。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> <span class=\"token operator\">&lt;</span>package-name<span class=\"token operator\">></span>@<span class=\"token operator\">&lt;</span>version <span class=\"token operator\">|</span> tag<span class=\"token operator\">></span></pre></td></tr></table></figure><blockquote>\n<p>需要提前在命令行  <code>cd</code>  到的项目目录下再执行安装。另外，  <code>--save</code>  或者  <code>-S</code>  选项在实际使用的时候可以省略，因为它是默认选项。</p>\n</blockquote>\n<p>可以在项目的  <code>package.json</code>  文件里的  <code>dependencies</code>  字段查看是否已安装成功，例如：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// package.json</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 生产依赖包会被安装到项目根目录下的 node_modules 目录里。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 生产依赖包： --save</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 以 \"包名\"：\"版本号\" 的格式写入</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"vue-router\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.0.14\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 开发依赖包: --save-dev/-D</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 以 \"包名\"：\"版本号\" 的格式写入</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token property\">\"eslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^8.6.0\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>开发依赖包和生产依赖包不同的点在于，只在开发环境生效，构建部署到生产环境时可能会被抛弃，一些只在开发环境下使用的包，就可以安装到开发依赖里，比如检查代码是否正确的  <code>ESLint</code>  就可以用这个方式安装。</p>\n<p>至于<strong>全局安装</strong>，也就类似于 <code>@vue/cli</code> 、 <code>create-preset</code>  之类的脚手架会提供全局安装的服务，安装后，就可以使用  <code>vue create xxx</code>  等命令直接创建 Vue 项目了。</p>\n<h3 id=\"一些命令\"><a class=\"anchor\" href=\"#一些命令\">#</a> 一些命令</h3>\n<ul>\n<li>\n<p>版本升级： <code>npm update</code></p>\n</li>\n<li>\n<p>本地卸载： <code>npm uninstall &lt;package-name&gt;</code></p>\n</li>\n<li>\n<p>全局卸载： <code>npm uninstall --global &lt;package-name&gt;</code></p>\n</li>\n</ul>\n<h2 id=\"babel\"><a class=\"anchor\" href=\"#babel\">#</a> Babel</h2>\n<p>Babel 是一个 JavaScript 编译器，它可以让开发者仅需维护一份简单的 JSON 配置文件，即可调动一系列工具链<strong>将源代码编译为目标浏览器指定版本所支持的语法</strong>。</p>\n<p>详细参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzLmNoZW5ncGVpcXVhbi5jb20vZ3VpZGUuaHRtbCNiYWJlbC0lRTclOUElODQlRTQlQkQlQkYlRTclOTQlQTglRTUlOTIlOEMlRTklODUlOEQlRTclQkQlQUU=\">Babel 的使用和配置</span></p>\n<h2 id=\"typescript\"><a class=\"anchor\" href=\"#typescript\">#</a> TypeScript</h2>\n<p>既是一门新语言，有是 JS 的一个超集，它是在 JavaScript 的基础上增加了一套类型系统，它支持所有的 JS 语句，为工程化开发而生，最终在编译的时候去掉<strong>类型</strong>和特有的语法，生成 JS 代码。</p>\n<p>强类型语言，我焯，爽。</p>\n<h3 id=\"新建项目\"><a class=\"anchor\" href=\"#新建项目\">#</a> 新建项目</h3>\n<p><code>src</code>  文件夹下创建一个 <code>ts</code>  文件夹，并在 <code>ts</code>  下创建 <code>index.ts</code> ：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/ts/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getFirstWord</span><span class=\"token punctuation\">(</span>msg<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">getFirstWord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>然后安装两个依赖包：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> typescript ts-node</pre></td></tr></table></figure><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHlwZXNjcmlwdA==\">typescript</span> 这个包是用 TypeScript 编程的语言依赖包</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdHMtbm9kZQ==\">ts-node</span> 是让 Node 可以运行 TypeScript 的执行环境</li>\n</ul>\n<p>这次添加了一个  <code>-D</code>  参数，因为 TypeScript 和 TS-Node 是开发过程中使用的依赖，所以将其添加到 package.json 的  <code>devDependencies</code>  字段里。</p>\n<p>修改 scripts 字段，增加一个  <code>dev:ts</code>  的 script ：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"dev:cjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node src/cjs/index.cjs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"dev:esm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node src/esm/index.mjs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"dev:ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node src/ts/index.ts\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"compile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src/babel --out-dir compiled\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server/index.js\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"原始数据类型\"><a class=\"anchor\" href=\"#原始数据类型\">#</a> 原始数据类型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">原始数据类型</th>\n<th style=\"text-align:center\">JavaScript</th>\n<th style=\"text-align:center\">TypeScript</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\">String</td>\n<td style=\"text-align:center\">string</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数值</td>\n<td style=\"text-align:center\">Number</td>\n<td style=\"text-align:center\">number</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">布尔值</td>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">boolean</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">大整数</td>\n<td style=\"text-align:center\">BigInt</td>\n<td style=\"text-align:center\">bigint</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">符号</td>\n<td style=\"text-align:center\">Symbol</td>\n<td style=\"text-align:center\">symbol</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不存在</td>\n<td style=\"text-align:center\">Null</td>\n<td style=\"text-align:center\">null</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">未定义</td>\n<td style=\"text-align:center\">Undefined</td>\n<td style=\"text-align:center\">undefined</td>\n</tr>\n</tbody>\n</table>\n<p>在 ts 定义变量的类型，不是放在变量名前面，而是后面：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> str<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 数值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> num<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 布尔值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> bool<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr></table></figure><p>至于<strong>数组</strong>的定义：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">数组里的数据</th>\n<th style=\"text-align:center\">类型写法 1</th>\n<th style=\"text-align:center\">类型写法 2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">字符串</td>\n<td style=\"text-align:center\"><code>string[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;string&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数值</td>\n<td style=\"text-align:center\"><code>number[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;number&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">布尔值</td>\n<td style=\"text-align:center\"><code>boolean[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;boolean&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">大整数</td>\n<td style=\"text-align:center\"><code>bigint[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;bigint&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">符号</td>\n<td style=\"text-align:center\"><code>symbol[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;symbol&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">不存在</td>\n<td style=\"text-align:center\"><code>null[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;null&gt;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">未定义</td>\n<td style=\"text-align:center\"><code>undefined[]</code></td>\n<td style=\"text-align:center\"><code>Array&lt;undefined&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p>一开始如果没有知名数据类型，或者编译器无法通过元素推断出数组类型，比如：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这个时候会认为是 any [] 或者 never [] 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 这个时候再 push 一个 number 数据进去，也不会使其成为 number []</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nums<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"对象接口\"><a class=\"anchor\" href=\"#对象接口\">#</a> 对象（接口）</h3>\n<blockquote>\n<p>感觉就是类型的定义</p>\n</blockquote>\n<p>对象的类型定义有两个语法支持：  <code>type</code>  和  <code>interface</code>  。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义用户对象的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 这个属性变成了可选</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  age<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在声明变量的时候将其关联到类型上</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> petter<span class=\"token operator\">:</span> UserItem <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">'Petter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在实际的业务中，有可能会出现一些属性并不是必须的，就像这个年龄，可以将其设置为可选属性，通过添加  <code>?</code>  来定义。</p>\n</blockquote>\n<h3 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h3>\n<p>直接用 <code>extends</code>  即可：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里继承了 UserItem 的所有属性类型，并追加了一个权限等级属性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">UserItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  permissionLevel<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果父类有些类型用不上，可以借助 <code>Omit</code>  在继承的时候选择删除：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span></span></pre></td></tr></table></figure><p><code>T</code>  代表已有的一个对象类型，  <code>K</code>  代表要删除的属性名，如果只有一个属性就直接是一个字符串，如果有多个属性，用  <code>|</code>  来分隔开，下面的例子就是删除了两个不需要的属性：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserItem</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  enjoyFoods<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  friendList<span class=\"token operator\">?</span><span class=\"token operator\">:</span> UserItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 这里在继承 UserItem 类型的时候，删除了两个多余的属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Admin</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Omit<span class=\"token operator\">&lt;</span>UserItem<span class=\"token punctuation\">,</span> <span class=\"token string\">'enjoyFoods'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'friendList'</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  permissionLevel<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 现在的 admin 就非常精简了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">const</span> admin<span class=\"token operator\">:</span> Admin <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">'Petter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  permissionLevel<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h3>\n<p>使用 <code>class</code>  关键字：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//constructor 上的数据需要先这样定好类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 入参也要定义类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>userName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> userName</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 通过 new 这个类得到的变量，它的类型就是这个类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> petter<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Petter'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>petter<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Petter</span></pre></td></tr></table></figure><h3 id=\"联合类型\"><a class=\"anchor\" href=\"#联合类型\">#</a> 联合类型</h3>\n<p>其实就是通过 <code>|</code>  来联合多种类型：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">The current count is: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 不论传数值还是字符串，都可以达到的目的</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// The current count is: 1.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// The current count is: 2.</span></pre></td></tr></table></figure><h3 id=\"异步函数返回值\"><a class=\"anchor\" href=\"#异步函数返回值\">#</a> 异步函数返回值</h3>\n<p>对于异步函数，需要用  <code>Promise&lt;T&gt;</code>  类型来定义它的返回值，这里的  <code>T</code>  是泛型，取决于的函数最终返回一个什么样的值（  <code>async / await</code>  也适用这个类型）。</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注意这里的返回值类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">queryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">queryData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"type包\"><a class=\"anchor\" href=\"#type包\">#</a> @Type 包</h3>\n<p>有些包并不支持 ts，在 ts 文件中使用会报错：</p>\n<figure class=\"highlight ts\"><figcaption data-lang=\"TypeScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// src/ts/index.ts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> md5 <span class=\"token keyword\">from</span> <span class=\"token string\">'md5'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">md5</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这是因为缺少 md5 这个包的类型定义，根据命令行的提示，安装  <code>@types/md5</code>  这个包。这是因为这些包是很早期用 JavaScript 编写的，因为功能够用作者也没有进行维护更新，所以缺少相应的 TS 类型，因此开源社区推出了一套 @types 类型包，专门处理这样的情况。</p>\n<p>@types 类型包的命名格式为  <code>@types/&lt;package-name&gt;</code>  ，也就是在原有的包名前面拼接  <code>@types</code>  ，日常开发要用到的知名 npm 包都会有相应的类型包，只需要将其安装到 package.json 的  <code>devDependencies</code>  里即可解决该问题。</p>\n<p>以 md5 为例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-D</span> @types/md5</pre></td></tr></table></figure><h3 id=\"编译\"><a class=\"anchor\" href=\"#编译\">#</a> 编译</h3>\n<p>但最终可能需要的是一个 JS 文件，比如要通过  <code>&lt;script src&gt;</code>  来放到 HTML 页面里，这就涉及到对 TypeScript 的编译。</p>\n<p>来看看如何把一个 TS 文件编译成 JS 文件，让其从 TypeScript 变成 JavaScript 代码。</p>\n<p>在 package.json 里增加一个 build script，然后执行 <code>npm run build</code> 。</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">\"dev:cjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node src/cjs/index.cjs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">\"dev:esm\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node src/esm/index.mjs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">\"dev:ts\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ts-node src/ts/index.ts\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc src/ts/index.ts --outDir dist\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"compile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"babel src/babel --out-dir compiled\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node server/index.js\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h2 id=\"构建工具\"><a class=\"anchor\" href=\"#构建工具\">#</a> 构建工具</h2>\n<p>为什么以前的前端页面直接编写代码就可以在浏览器访问，现在却还要进行构建编译，是否 “多此一举” ？</p>\n<p>构建工具主要的功能有：</p>\n<ul>\n<li>项目中代码可以复用，抽离成模块、组件，交给构建工具合并打包</li>\n<li>npm 包开箱即用，剩下的工作交给构建工具去按需抽离与合并</li>\n<li>CSS 写起来很慢，可以使用 Sass、Less 等 CSS 预处理器，利用它们的变量支持、混合继承等功能提高开发效率，最终交给构建工具去按需抽离与合并。</li>\n</ul>\n<p>最常见的就是 webpack 和 vite 两种构建器，前者是在项目启动时就打包所有的模块，再启动开发服务器，所以随着项目的模块变多，项目启动也会越慢；Vite 则是按需打包，将打包的部分工作交给了浏览器（支持 ES Module 的浏览器），不需要预先打包，而是直接启动开发服务器，请求（http 请求）到对应的模块的时候在进行编译。所以项目启动更快。</p>\n<p>一般来说，像这种 BS 项目，上线时启动时间并不会影响生产，只是开发者很难受，Vite 是增加了开发者的幸福感。但由于 Vite 是面向现代浏览器，所以如果的项目有兼容低版本浏览器的需求的话，建议还是用 Webpack 来打包，否则，Vite 是目前的更优解。</p>\n",
            "tags": [
                "前端"
            ]
        }
    ]
}