{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"java基础\" tag",
    "description": "时雨病重症患者！！！",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/10/04/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(5)-WeakHashMap/",
            "url": "https://cecilia.cool/2022/10/04/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(5)-WeakHashMap/",
            "title": "Java集合(5)--WeakHashMap",
            "date_published": "2022-10-04T09:46:00.000Z",
            "content_html": "<h1 id=\"引用类型\"><a class=\"anchor\" href=\"#引用类型\">#</a> 引用类型</h1>\n<h2 id=\"强引用\"><a class=\"anchor\" href=\"#强引用\">#</a> 强引用</h2>\n<p>最普遍的引用，如果一个对象<strong>具有</strong>强引用，GC 绝不会回收。如果不使用，要弱化引用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>o <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>test 方法内部有一个强引用，引用保存在栈中，new 的对象保存在</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>堆中，当方法运行结束会退出方法栈，则引用内容的引用不存在，Object</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>就会被回收。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>如果 o 是全局变量，需要在不用对象时赋值为 null。</p>\n</blockquote>\n<h2 id=\"软引用\"><a class=\"anchor\" href=\"#软引用\">#</a> 软引用</h2>\n<p>一个对象只有软引用，在内存空间足够时，垃圾回收器不会回收它；当内存空间不足，就会回收这些对象的内存。</p>\n<blockquote>\n<p>软引用可以用于实现内存敏感的高速缓存。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 弱引用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> softReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>浏览器的后退按钮，后退时显示的网页应该是重新进行请求还是从缓存中取出的取决于具体的实现策略。如果将浏览的网页全部强引用存储到内存中，就会造成浪费甚至内存溢出。</p>\n<p>此时使用软引用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Browser</span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Browser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 页面浏览</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 浏览后设为软引用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">SoftReference</span> sr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sr<span class=\"token punctuation\">.</span>get <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rev <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Browser</span><span class=\"token punctuation\">)</span> sr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    prev <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Broswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 内存吃紧，软引用对象回收</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重新构建</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"弱引用\"><a class=\"anchor\" href=\"#弱引用\">#</a> 弱引用</h2>\n<p>区别于软引用，只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> abcWeakRef <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 可以恢复强引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> abc <span class=\"token operator\">=</span> abcWeakRef<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"虚引用\"><a class=\"anchor\" href=\"#虚引用\">#</a> 虚引用</h2>\n<p>虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</p>\n<p>虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。</p>\n<h1 id=\"weakhashmap\"><a class=\"anchor\" href=\"#weakhashmap\">#</a> WeakHashMap</h1>\n<p>先看一下<strong>引用队列</strong>：</p>\n<ul>\n<li>一般情况，一个对象被标记为垃圾（不代表回收了），会加入到引用队列。</li>\n<li>对于虚引用来说，它指向的对象会只有被<strong>回收后</strong>才会加入到引用队列（其他是被标记），所以可以用作记录该引用指向的对象是否被回收。</li>\n</ul>\n<p><code>WeakHashMap</code>  与 <code>HashMap</code>  没什么区别，只是引用采取的是弱引用的 <code>key</code>  存储，<strong>GC 回收的是 <code>key</code> </strong>。这种结构适合缓存处理。底层是因为 <code>Entry</code>  继承了 <code>WeakReference</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t\t\t\t\t\t\t<span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token keyword\">implements</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash  <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next  <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了将 <code>key</code>  改写为弱引用，在 <code>Entry</code>  中又调用了一个 <code>super(key, queue)</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// WeakReference 构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">WeakReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> referent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>referent<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>WeakHashMap</code>  除了 <code>WeakReference</code> ，还有 <code>ReferenceQueue</code>  重要。</p>\n<blockquote>\n<p>再次强调一下， <code>WeakHashMap</code>  基于弱引用可以淘汰内部元素，同样的， <code>LinkedHashMap</code>  也是具备淘汰机制的，只不过是通过阈值来限定节点个数的先进先出缓存。</p>\n</blockquote>\n<h2 id=\"弱引用回收\"><a class=\"anchor\" href=\"#弱引用回收\">#</a> 弱引用回收</h2>\n<p><code>Reference</code>  类有一段静态代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 有一个全局锁</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Reference</span> pending <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">ThreadGroup</span> tg <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadGroup</span> tgn <span class=\"token operator\">=</span> tg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         tgn <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         tg <span class=\"token operator\">=</span> tgn<span class=\"token punctuation\">,</span> tgn <span class=\"token operator\">=</span> tg<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Thread</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceHandler</span><span class=\"token punctuation\">(</span>tg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reference Handler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 优先级最高</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_PRIORITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假设 <code>WeakHashMap</code>  对象里面保存了很多对象引用：</p>\n<ul>\n<li>GC 时，会创建一个 CMST 线程进行 GC，该线程被创建的同时还会创建一个 SLT 线程并启动。</li>\n<li>CMST 开始 GC 时，会发送一个消息给 SLT 让他去获取 Java 层 <code>Reference</code>  对象的全局锁 <code>lock</code> 。</li>\n<li>当 GC 完毕时，JVM 会将 WeakHashMap 中所有被回收的对象所属的 <code>WeakReference</code>  容器对象放入到 <code>Reference</code>  的 <code>pending</code>  属性中（每次 GC 完毕后， <code>pending</code>  属性基本上不会为 null 了）。</li>\n<li>然后通知 SLT 释放并且 <code>notify</code>  全局锁 <code>lock</code> ，此时激活了 <code>ReferenceHandler</code>  线程的 <code>run</code>  方法，脱离 wait 状态开始运行。</li>\n<li><code>Handler</code>  线程会将 pending 中所有 <code>WeakReference</code>  对象移动到各自队列中（比如当前这个 <code>WeakReference</code>  属于某个 <code>WeakHashMap</code>  对象，那么它就会被放入相应的 <code>ReferenceQueue</code>  列队里面（该列队是链表结构））。</li>\n</ul>\n<p>最后看一下 <code>ReferenceHandler</code>  的源码，如何将 <code>WeakRenference</code>  压入队列：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReferenceHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token class-name\">ReferenceHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadGroup</span> g<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token class-name\">Reference</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pending <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>             r <span class=\"token operator\">=</span> pending<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token class-name\">Reference</span> rn <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             pending <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rn <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> rn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             r<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                 lock<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token comment\">// Fast path for cleaners</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">)</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token class-name\">ReferenceQueue</span> q <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在调用 <code>get()</code> ， <code>replaceAll()</code> ， <code>put()</code> ， <code>remove()</code>  等方法时（都需要获取 <code>table</code> ）, 不是直接拿到 <code>table</code>  数组，而是通过 <code>getTable()</code>  方法先把数组中 <code>key</code>  为 <code>null</code>  的 <code>Entry</code>  删除掉在返回。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 真正删除 Entry 的执行者 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">expungeStaleEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>expungeStaleEntries()</code>  方法中，存储被 GC 回收对象的 <code>queue</code>  会接收 GC 发送的回收消息，将 queue（通过 <code>synchronized</code>  上锁）中的 <code>key</code>  对应的 <code>value</code>  赋值为 <code>null</code> ，即 <code>help GC</code> 。</p>\n<blockquote>\n<p><code>Entry</code>  中保存了 hash 码，即使 <code>key</code>  被 GC 了，仍可以通过 hash 码来定位需要被删除的 <code>Entry</code> 。通过 <code>Entry</code>  的地址在冲突链表中定位（其实我觉得也可以判断 <code>Entry.key == null</code> 。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGhsaXZlL3AvNjAzMDQ0Ni5odG1s\">https://www.cnblogs.com/phlive/p/6030446.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yYmE1NTM0NWZkOTQ=\">https://www.jianshu.com/p/2ba55345fd94</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Noa3N0YXJ0L2FydGljbGUvZGV0YWlscy8xMDcwMTkzNzE/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NTAuMiZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQmxvZ0NvbW1lbmRGcm9tQmFpZHUlN0VSYXRlLTItMTA3MDE5MzcxLWJsb2ctMTA2NTQ1MzQwLnBjX3JlbGV2YW50X211bHRpX3BsYXRmb3JtX3doaXRlbGlzdHY0JmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUJsb2dDb21tZW5kRnJvbUJhaWR1JTdFUmF0ZS0yLTEwNzAxOTM3MS1ibG9nLTEwNjU0NTM0MC5wY19yZWxldmFudF9tdWx0aV9wbGF0Zm9ybV93aGl0ZWxpc3R2NCZhbXA7dXRtX3JlbGV2YW50X2luZGV4PTM=\">一文带你了解 WeakHashMap</span>.</p>\n<p>这篇讲得可以：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMzc3NDg4My9hcnRpY2xlL2RldGFpbHMvODk2MTMyNzE=\">https://blog.csdn.net/weixin_33774883/article/details/89613271</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/03/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(4)-TreeMap/",
            "url": "https://cecilia.cool/2022/10/03/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(4)-TreeMap/",
            "title": "Java集合(4)-TreeMap",
            "date_published": "2022-10-03T13:55:25.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>首先， <code>TreeMap</code>  与哈希没有任何关系，其次，哈希和 Map 也不是一回事，请不要先入为主。Map 只是一个键值对的数据结构，哈希是将对象计算哈希码的一种算法。 <code>TreeMap</code>  只是通过红黑树将键值对存起来，一方面实现了二叉搜索树的排序性，另一方面维护了整棵树的平衡性，防止树退化为链表增大查询 / 插入的时间复杂度。</p>\n<h1 id=\"排序方式\"><a class=\"anchor\" href=\"#排序方式\">#</a> 排序方式</h1>\n<p><code>TreeMap</code>  对插入数据实现了排序，如果是自定义数据，要么该类实现 <code>Comparable</code>  接口，要么 TreeMap 在构造方法中传入 <code>Comparator</code>  接口。</p>\n<h2 id=\"comparable\"><a class=\"anchor\" href=\"#comparable\">#</a> Comparable</h2>\n<p>以 <code>Student</code>  类来说明，继承 <code>Comparable</code>  并重写 <code>compareTo()</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">// 为了简单，就写一个 id 属性，并设为 public 方便获取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 对比方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 按照 id 从小到大排序</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>CompareTo()</code>  中，是传入的对象和当前对象进行对比：</p>\n<ul>\n<li>如果对比大于 0，降序排序。</li>\n<li>如果对比小于 0，升序。</li>\n</ul>\n<blockquote>\n<p>其实记住当前对象 - 传入对象就是升序，反之则降序。</p>\n</blockquote>\n<h2 id=\"comparator\"><a class=\"anchor\" href=\"#comparator\">#</a> Comparator</h2>\n<p>通过外部类的方式进行编写，对于 <code>Comparator</code>  接口的传入也可以用 <code>Lambda</code>  表达式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 第一个参数 - 第二个参数：升序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 也可以传入 Lambda 表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Student</span> <span class=\"token number\">02</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> o1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们看一下 <code>TreeMap</code>  的部分属性和构造方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NavigableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 传入一个 Comparator 接口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comparator <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果没有传入 <code>Comparator</code>  接口实现，那么传入的 <code>Key</code>  必须实现 <code>Comparable</code> 。</p>\n<blockquote>\n<p><code>TreeMap</code>  底层用红黑树，红黑树近似平衡，最长路径不超过最短路径的 2 倍。</p>\n</blockquote>\n<h1 id=\"treemap\"><a class=\"anchor\" href=\"#treemap\">#</a> TreeMap</h1>\n<p><code>TreeMap</code>  的 UML 类图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/03/a6778fc1ccf85111.jpg\" alt=\"\" /></p>\n<p>因为底层使用了红黑树，所以节点就是 <code>Entry</code> ，记录了左右节点和父节点指针，以及节点颜色。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 构造方法，此处不写</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于红黑树，详细的实现，也就是节点如何变色，如何左旋右旋来维持近似平衡，可以看《算法导论》，本文不会详细去讲，作者曾经也自己看着书写过红黑树，当成 C++ 期末作业交上去了，但是过了两三天又忘了，这玩意吧，看个人兴趣吧，hhhhhh。</p>\n</blockquote>\n<h2 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put()</h2>\n<p>直接给出 <code>put</code>  的执行流程：</p>\n<ul>\n<li>判断当前根节点为 null，那么插入的第一个元素就是根节点。</li>\n<li>如果存在根节点，判断插入元素在左侧还是右侧，如果对比为 0，说明当前元素存在于 <code>TreeMap</code>  中，将其覆盖：<strong>在 TreeMap 中，不会存在重复元素</strong>。</li>\n<li>找到插入位置，插入。</li>\n<li>节点变色和旋转操作。</li>\n</ul>\n<blockquote>\n<p>代码太长了，要看源码自己打开 IDEA 查看。从 <code>put</code>  流程也可知，时间复杂度为<em> logN</em>。</p>\n</blockquote>\n<h2 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> get()</h2>\n<p>也就是不断地对比，在红黑树中查找节点。</p>\n<h1 id=\"treeset\"><a class=\"anchor\" href=\"#treeset\">#</a> TreeSet</h1>\n<p>这个就是对 TreeMap 进行了简单包装，不过多讲解</p>\n<blockquote>\n<p>额，其实关于 <code>TreeMap</code>  的详解应该是对红黑树的详解，但是我真的不想写，啊啊啊啊啊，以后有时间就单独写一篇博客解释一下红黑树，顺便放一个源码模板方便各位使用（等我想起了再说吧）。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTE5MjUwNC9hcnRpY2xlL2RldGFpbHMvMTA5Nzc1Nzk3\">https://blog.csdn.net/weixin_51192504/article/details/109775797</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtbWFwLVRyZWVNYXAmYW1wO1RyZWVTZXQuaHRtbA==\">https://pdai.tech/md/java/collection/java-map-TreeMap&amp;TreeSet.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(3)-LinkedHashMap/",
            "url": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(3)-LinkedHashMap/",
            "title": "Java集合3-LinkedHashMap",
            "date_published": "2022-10-02T13:36:18.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>LinkedHashSet</code>  也是用了适配器模式，对 <code>LinkedHashMap</code>  进行包装，所以本文主要分析 <code>LinkedHashMap</code> 。</p>\n<p>从名字上可以看出容器是<em> Linked list</em> 和<em> HashMap</em> 的混合体，<strong>可以将<em> LinkedHashMap</em> 看作采用<em> linked list</em> 增强的<em> HashMap</em></strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>LinkedHashMap</code>  是 <code>HashMap</code>  的直接子类，它的区别在于在 <code>HashMap</code>  的基础上采用双向链表将所有的数据节点都链接起来了，就是为了<strong>保证元素的迭代顺序和插入顺序相同</strong>。</p>\n<p>还有个好处就是集合迭代时不需要遍历整个 <code>table</code> ，逮着双向链表的 <code>header</code>  遍历即可。</p>\n<blockquote>\n<p><code>LinkedHashMap</code>  为了性能，是非同步的，多线程下需要手动同步</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 也可以打包成同步的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"方法剖析\"><a class=\"anchor\" href=\"#方法剖析\">#</a> 方法剖析</h1>\n<blockquote>\n<p><code>get</code>  方法和 <code>HashMap</code>  里的没什么区别，不多说。</p>\n</blockquote>\n<h2 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put()</h2>\n<p>插入分为两部分：</p>\n<ul>\n<li>将元素插入 <code>table</code>  中，如果有哈希冲突，头插法插入到头部。</li>\n<li>将元素插入双向链表中，链表尾部。</li>\n</ul>\n<p>其实就是在 <code>HashMap</code>  上加入链表的引用的修改。</p>\n<p><code>LinkedHashMap</code>  使用的节点是 <code>Entrty</code> ，该类继承了 <code>HashMap</code>  的 <code>Node</code>  类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"remove\"><a class=\"anchor\" href=\"#remove\">#</a> remove()</h2>\n<p>删除也有两部分：</p>\n<ul>\n<li>将元素从 <code>table</code>  中删除。</li>\n<li>将元素从双向链表中删除。</li>\n</ul>\n<h1 id=\"经典用法\"><a class=\"anchor\" href=\"#经典用法\">#</a> 经典用法</h1>\n<p>实现 FIFO 替换策略的缓存， <code>LinkedHashMap</code>  有一个方法，作用是告诉 Map 删除最老的 <code>Entry</code> ，也就是最早插入 Map 的 Entry。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每次插入新元素时 <code>LinkedHashMap</code>  都会询问该函数是否要删除最老的元素，</p>\n<blockquote>\n<p><code>LinkedHashMap</code>  并没有重写 <code>put</code>  方法，而是重写的 <code>newNode</code>  方法，因为 <code>newNode</code>  就是将要插入的键值对插放到新创建的节点中，在创建节点后马上将其加入到双向链表中即可。</p>\n</blockquote>\n<p>只要在子类中重载该方法，当元素个数超过一定数量时让 <code>removeEldestEntry</code>  返回 <code>true</code> ，就能实现一个固定大小的 FIFO 策略的缓存。其实我们写个子类继承 <code>LinkedList</code>  并重写一下 <code>add</code>  方法也是可以实现的，只是说，是哟个 <code>LinkedHashMap</code>  更加方便。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** 一个固定大小的 FIFO 替换策略的缓存 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FIFOCache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> cacheSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FIFOCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cacheSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheSize <span class=\"token operator\">=</span> cacheSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 当 Entry 个数超过 cacheSize 时，删除最老的 Entry</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> cacheSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtbWFwLUxpbmtlZEhhc2hNYXAmYW1wO0xpbmtlZEhhc2hTZXQuaHRtbA==\">https://pdai.tech/md/java/collection/java-map-LinkedHashMap&amp;LinkedHashSet.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMDM0NDkvYXJ0aWNsZS9kZXRhaWxzLzgwMTk0NzA0\">https://blog.csdn.net/u014203449/article/details/80194704</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(2)-HashMap/",
            "url": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(2)-HashMap/",
            "title": "Java集合(2)--HashMap",
            "date_published": "2022-10-02T07:59:51.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>关于这些集合的讲解，作者默认读者都知道该如何使用，所以不会从最基础的开始讲起，会直接跳过什么是映射关系，哈希值等概念的讲解。对于源码的解析也是最主要使用的那些方法。</p>\n<h1 id=\"一些概念\"><a class=\"anchor\" href=\"#一些概念\">#</a> 一些概念</h1>\n<ul>\n<li>负载因子：集合容量都有上限，如果加入集合的数量超过一定允许值，集合就会扩容。负载因子就是衡量当前情况是否需要进行扩容的标准。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果数据占用率达到 75%，就会扩容，扩容会重新计算哈希值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>红黑树：一种数据结构，在 <code>HashMap</code>  里面查询效率是<em> logN</em>，整棵树在插入数据时始终保持近似平衡（不是真的平衡）。JDK1.8 后就用红黑树代替 <code>HashMap</code>  里面的长度超过 8 的冲突链表了。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/02/760aca61cab61cfc.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>TreeNode</code>  就是为了实现红黑树而设计的内部类。</p>\n<blockquote>\n<p><code>HashMap</code>  的初始容量是否应该设的比较大，在 JDK1.7 以前，HashMap 用的是冲突链表，HashMap 在迭代时，需要遍历整个数组和冲突链表。如果迭代频繁的话，就不宜将初始大小设的过大。</p>\n</blockquote>\n<ul>\n<li><code>modCount</code> ：集合只要可以使用迭代器，都需要 <code>modCount</code>  来记录修改次数。</li>\n<li>实现 <code>Map</code>  接口：允许 <code>key</code>  和 <code>value</code>  都是 <code>null</code> 。</li>\n</ul>\n<h1 id=\"核心方法\"><a class=\"anchor\" href=\"#核心方法\">#</a> 核心方法</h1>\n<p>有时会将 Java7 的方法拿出来和 Java8 作比较。</p>\n<p>在 Java7 使用 Entry 代表数据节点，Java8 使用 Node，基本没有区别，都是 <code>key</code> ， <code>value</code> ， <code>hash</code> ， <code>next</code>  四个属性。 <code>Node</code>  只能适用于链表， <code>TreeNode</code>  用于红黑树。</p>\n<h2 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put()</h2>\n<blockquote>\n<p><code>put</code>  方法重点也是在于得到哈希值，然后就是处理一下<strong>扩容</strong>，<strong>哈希冲突</strong>，<strong>链表转化红黑树</strong>等问题。</p>\n</blockquote>\n<p>Java7 是先扩容再插入值，Java8 是先插入值再扩容。第一次 <code>put</code>  需要初始化一下 <code>table</code>  数组（从 <code>null</code>  初始化到默认容量 16 或者自定义容量），才能加入数据。</p>\n<p>需要注意的是，如果两次使用 <code>put</code>  时，加入的 <code>key</code>  都是相同的，那么第二次的 <code>value</code>  应该覆盖第一次的，所以在 <code>put</code>  时也应该考虑到这一点，<strong>发生哈希冲突应该首先检查 Key 是不是相同的再进行下一步操作</strong>。</p>\n<p>重点讲一下扩容操作：扩容时需要重新 <code>hash</code> ，并不是说要重新调用 <code>hash</code>  这个函数， <code>Node(TreeNode)</code>  节点之前就保存了 <code>hash</code>  值的。</p>\n<p>如果 <code>hash</code>  值超过了容量 <code>cap</code> ，需要取余操作，因为 <code>cap</code>  都是 2 的指数，所以 <code>cap-1</code> （最大下标）的低位就全是 1，取余操作就可以为： <code>hash &amp; (cap - 1)</code> 。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/02/d1b17259fca6ec00.jpg\" alt=\"\" /></p>\n<p>所以一条冲突链表上的数据节点的哈希值并不一定都是相同的，可能是取余后才导致下标相同。所以在重新哈希的过程中，就需要对冲突链表拆分为两条链表，一条链表是哈希值本来就是当前下标，另一个是哈希值被取余了的（这条链表上也并不是哈希值都相同，只是取余后值都相同，5 和 7 被 2 取余值也相同嘛）。</p>\n<p>因为每次扩容都是容量乘 2，所以后一条链表的新下标就是 <code>i+cap</code> 。</p>\n<blockquote>\n<p><code>i&lt;cap，(i+cap) % 2cap = i+cap</code> 。</p>\n</blockquote>\n<h2 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> get()</h2>\n<blockquote>\n<p><code>get</code>  方法内部最重要的就是 <code>hash()</code>  得到其哈希值，然后再通过 <code>equals()</code>  找到对应的值。</p>\n</blockquote>\n<p>理解了 <code>put</code>  的机制和哈希值取余原理后， <code>get</code>  分析就比较简单了。</p>\n<ul>\n<li>\n<p>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)。</p>\n</li>\n<li>\n<p>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步。</p>\n</li>\n<li>\n<p>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步。</p>\n</li>\n<li>\n<p>遍历链表，直到找到相等 (== 或 equals) 的 key。</p>\n</li>\n</ul>\n<h1 id=\"hashset\"><a class=\"anchor\" href=\"#hashset\">#</a> HashSet</h1>\n<p><code>HashSet</code>  使用了适配器模式，对 <code>HashMap</code>  进行了简单的包装，对 <code>HashSet</code>  的函数调用都会转换成合适的 <code>HashMap</code>  方法。这里提一下，不需要过多赘述。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//HashSet 是对 HashMap 的简单包装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span><span class=\"token comment\">//HashSet 里面有一个 HashMap</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// Dummy value to associate with an Object in the backing Map</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> <span class=\"token constant\">PRESENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 简单的方法转换</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtbWFwLUhhc2hNYXAmYW1wO0hhc2hTZXQuaHRtbA==\">https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL3N5eTRyeiNiMmI1MWU0MQ==\">https://www.yuque.com/qingkongxiaguang/javase/syy4rz#b2b51e41</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NhcnBlbnRlckxlZS9KQ0ZJbnRlcm5hbHMvYmxvYi9tYXN0ZXIvbWFya2Rvd24vNi1IYXNoU2V0JTIwYW5kJTIwSGFzaE1hcC5tZCNnZXQ=\">https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet and HashMap.md#get</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/29/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(1)-PriorityQueue/",
            "url": "https://cecilia.cool/2022/09/29/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(1)-PriorityQueue/",
            "title": "Java集合(1)--PriorityQueue",
            "date_published": "2022-09-29T07:07:41.000Z",
            "content_html": "<h1 id=\"其他集合\"><a class=\"anchor\" href=\"#其他集合\">#</a> 其他集合</h1>\n<p>因为像 ArrayList，LinkedList 之类的容器比较简单，此处不会过多解释，只会列出一些需要注意的点。</p>\n<p><strong>ArrayList</strong>：</p>\n<ul>\n<li>ArrayList 为了效率没有实现同步，有需求的情况下需要自己实现。</li>\n<li>向 ArrayList 中加入元素（add）时，都会进行容量检查，扩容都会交给 grow 方法。</li>\n<li><code>remove</code>  函数中，删除中间某一个元素会导致后面的元素向前移动，需要将最后一个位置赋为 null（为了让 GC 起作用）。</li>\n<li><code>tirmToSize()</code> ，将数组容量修改为当前元素个数大小； <code>indexOf()</code>  与 <code>lastIndexOf()</code> <br />\n 就是获取元素第一次 / 最后一次出现的 index。</li>\n<li><code>modCount</code>  是指集合创建以来修改的次数，他保证在迭代器循环中，如果出现集合的修改就停止迭代。</li>\n</ul>\n<p><strong>LinkedList</strong>：</p>\n<ul>\n<li>LinkedList 可以考虑作为栈 / 队列，Java 官方不建议使用 Stack。但是 ArrayDeque 是栈或者队列的<br />\n首选，性能更好。</li>\n<li>LinkedList 没有哑节点，当链表为空的时候 first 和 last 都指向 null。</li>\n</ul>\n<p><strong>ArrayDeque</strong>：</p>\n<ul>\n<li>\n<p><code>Deque</code>  是 &quot;double ended queue&quot;, 表示双向的队列，英文读作 &quot;deck&quot;.。</p>\n</li>\n<li>\n<p>ArrayDeque 是非线程安全的，不允许加入 null。</p>\n</li>\n</ul>\n<h1 id=\"priorityqueue\"><a class=\"anchor\" href=\"#priorityqueue\">#</a> PriorityQueue</h1>\n<p>优先队列保证每次取出的元素都是队列中最小的（构造时可以传入比较器 <code>Comparator</code> ，所以想要每次取出都是最大的，只需要反过来即可）。</p>\n<p>PriorityQueue 不允许放入 <code>null</code>  元素，<strong>内部通过数组实现小根堆</strong>，小根堆抽象上可以理解为完全二叉树。</p>\n<p>数组映射完全二叉树的算数关系为：</p>\n<ul>\n<li><code>leftNode = ParentNode*2 + 1</code></li>\n<li><code>rightNode = ParentNode*2 + 2</code></li>\n<li><code>ParentNode = (node - 1)/2</code></li>\n</ul>\n<blockquote>\n<p><em>PriorityQueue</em> 的 <code>peek()</code>  和 <code>element</code>  操作是常数时间， <code>add()</code> ,  <code>offer()</code> , 无参数的 <code>remove()</code>  以及 <code>poll()</code>  方法的时间复杂度都是<em> log (N)</em>。</p>\n</blockquote>\n<p><code>add()</code>  和 <code>remove()</code>  失败后就会抛出异常，而 <code>offer()</code>  和 <code>poll()</code>  就是返回 <code>false</code> 。</p>\n<h2 id=\"小根堆解析\"><a class=\"anchor\" href=\"#小根堆解析\">#</a> 小根堆解析</h2>\n<p>此处不讲解 PriorityQueue 源码，而是理解小根堆的维护流程</p>\n<p><strong>加入节点</strong>：队列只允许从队尾加入元素，大致流程如下图。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/29/a2497ab926b94de8.jpg\" alt=\"\" /></p>\n<p>删除节点：</p>\n<ul>\n<li>优先队列出队操作会导致根节点被删除，此时需要将最后一个节点放到根节点的位置在进行下降调整。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/29/0681d1a809288d78.jpg\" alt=\"\" /></p>\n<ul>\n<li>如果是其他关于小根堆的删除，当删除节点是尾节点时，直接删除即可。</li>\n<li>当节点在中间，我们就只看以该节点尾根节点的子树，将数组最后一个节点移到当前节点，再调整。</li>\n</ul>\n<h1 id=\"小根堆代码\"><a class=\"anchor\" href=\"#小根堆代码\">#</a> 小根堆代码</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模拟小根堆的增加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> minHeap <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 假设参数合法，数组不出现越界</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> minHeap<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 当前父节点，index 是当前 val 位于的位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            index <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        minHeap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> minHeap <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>minHeap<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 假设 - 1 为 null</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/** 小根堆是完全二叉树，左节点下标为奇数，右节点为偶数</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            一直向下找右节点直到到达最后一层，在倒数第二层会出现</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            1） 该层不存在右孩子</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            2） 该层存在右孩子</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 权值大的节点向下沉</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                index <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>r <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                index <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>r <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 如果当前节点小于左右子节点，则完成</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9DYXJwZW50ZXJMZWUvcC81NDg4MDcwLmh0bWw=\">http://www.cnblogs.com/CarpenterLee/p/5488070.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtY29sbGVjdGlvbi1Qcmlvcml0eVF1ZXVlLmh0bWw=\">https://pdai.tech/md/java/collection/java-collection-PriorityQueue.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        }
    ]
}