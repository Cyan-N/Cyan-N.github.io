{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"redis\" tag",
    "description": "时雨病重症患者！！！",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/11/05/Database/Redis/Redis(3)-%E6%8C%81%E4%B9%85%E5%8C%96/",
            "url": "https://cecilia.cool/2022/11/05/Database/Redis/Redis(3)-%E6%8C%81%E4%B9%85%E5%8C%96/",
            "title": "Redis(3)--持久化",
            "date_published": "2022-11-05T09:13:37.000Z",
            "content_html": "<h1 id=\"持久化\"><a class=\"anchor\" href=\"#持久化\">#</a> 持久化</h1>\n<p>Redis 数据放在内存中所以快， 但是也容易丢失。引出两种持久化方法：</p>\n<ul>\n<li>存储数据到硬盘中。</li>\n<li>保存存放数据的过程，恢复数据时，只需要将过程执行一遍（有点 undo 日志的味道）。</li>\n</ul>\n<h2 id=\"rdb\"><a class=\"anchor\" href=\"#rdb\">#</a> RDB</h2>\n<p>就是将数据保存到硬盘中：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 会阻塞</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">save</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 创建进程负责持久化，只有 fork 才会阻塞</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>bgsave</pre></td></tr></table></figure><p>执行后，会在服务端目录下生成一个 dump.rdb 文件，而这个文件中就保存了内存中存放的数据，当服务器重启后，会自动加载里面的内容到对应数据库中。保存后我们可以关闭服务器：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 也会触发 bgsave</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">shutdown</span></pre></td></tr></table></figure><p>可以在配置文件中设置自动保存功能（windows 下是 redis.windows.conf 文件）</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/05/c23c983682d34698.jpg\" alt=\"\" /></p>\n<p>以第一个为例，意思为 900 秒内有 1 个写入时，就保存。配置的 save 使用的都是 bgsave 后台执行。</p>\n<p>RDB 保证数据一致性，生产环境中内存区都比较大，将内存中的数据同步到硬盘的过程可能会持续比较长，此时 Redis 服务收到数据写请求就需要<strong>保证数据一致性</strong>。核心思路是 Copy-on-Write：</p>\n<p>我们需要保证的是，在某个数据执行写入磁盘操作时，该数据在内存中不会发生变化。</p>\n<p>在正常的快照操作中，Redis 主进程会 fork 一个新的快照进程专门来做这个事情，这样保证了 Redis 服务不会停止对客户端包括写请求在内的任何响应。子进程就不断将内存数据存入磁盘。这个过程中，主进程对于内存只有<strong> read-only</strong> 权限，当发生写请求时，会触发页异常中断，陷入内核的中断例程，此时内核就会把触发异常的页复制一份（还未修改）交给子进程。这种哪个页发生修改就复制哪个页的机制，细化了内存粒度。</p>\n<p><strong>在进行快照操作的这段时间，如果发生服务崩溃怎么办</strong>？</p>\n<p>很简单，在没有将数据全部写入到磁盘前，这次快照操作都不算成功。如果出现了服务崩溃的情况，将以上一次完整的 RDB 快照文件作为恢复内存数据的参考。也就是说，在快照操作过程中不能影响上一次的备份数据。Redis 服务会在磁盘上创建一个临时文件进行数据操作，待操作成功后才会用这个临时文件替换掉上一次的备份。</p>\n<h2 id=\"aof\"><a class=\"anchor\" href=\"#aof\">#</a> AOF</h2>\n<p>RDB 缺点在于，如果在自动保存前服务器崩溃，依然会导致少量数据丢失。AOF 就是另一种方式，它会以日志的形式将我们每次执行的命令都进行保存，服务器重启时会将所有命令依次执行，通过这种重演的方式将数据恢复，这样就能很好解决实时性存储问题。</p>\n<p>对于日志的记录，也有保存策略可以配置：</p>\n<ul>\n<li>always：每次写操作都会保存</li>\n<li>everysec：每秒保存一次（默认配置），这样丢失数据限定在一秒内。</li>\n<li>no：看系统心情</li>\n</ul>\n<p>配置文件：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 注意得改成也是</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>appendonly yes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># appendfsync always</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>appendfsync everysec</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># appendfsync no</span></pre></td></tr></table></figure><p>重启服务器后，可以看到服务器目录下多了一个 <code>appendonly.aof</code>  文件，存储的就是我们执行的命令。</p>\n<p>AOF 的同步策略涉及到操作系统的 <code>write</code>  函数和 <code>fsync</code>  函数，在《Redis 设计与实现》如此说明：</p>\n<blockquote>\n<p>为了提高文件写入效率，在现代操作系统中，当用户调用 write 函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。</p>\n<p>这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了 fsync、fdatasync 同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。</p>\n</blockquote>\n<h3 id=\"aof文件重写机制\"><a class=\"anchor\" href=\"#aof文件重写机制\">#</a> AOF 文件重写机制</h3>\n<p>如果只是傻瓜式记录操作日志。没有任何优化，就会导致 <code>appednonly.aof</code>  变得十分大，所以 Redis 有一个 AOF 重写机制进行优化（多条语句压缩），反正就是优化后的操作和原来的操作结果一致。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/06/634891d04771fda3.jpg\" alt=\"\" /></p>\n<p>输入命令执行重写操作： <code>bgrewriteaof</code> 。</p>\n<p>AOF 重写过程是由后台进程 bgrewriteaof 来完成的。主线程 fork 出后台的 bgrewriteaof 子进程，fork 会把主线程的内存拷贝一份给 bgrewriteaof 子进程，这里面就包含了数据库的最新数据。然后，bgrewriteaof 子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p>\n<p>所以 aof 在重写时，在 fork 进程时是会阻塞住主线程的。</p>\n<p>或者配置文件配置自动重写：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 百分比计算，当前 aof 文件比上一次重写后 aof 文件的增量大小，和上一次重写后 aof 文件大小的比值。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>auto<span class=\"token operator\">-</span>aof<span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>percentage <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 当达到这个大小时，触发自动重写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>auto<span class=\"token operator\">-</span>aof<span class=\"token operator\">-</span>rewrite<span class=\"token operator\">-</span>min<span class=\"token operator\">-</span>size <span class=\"token number\">64</span>mb</pre></td></tr></table></figure><p>如何在重写时，处理写请求：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/06/0f71177930cf5ed9.jpg\" alt=\"\" /></p>\n<p>如果有新数据写入，主线程就会将命令记录到两个 aof 日志内存缓冲区中。如果 AOF 写回策略配置的是 always，则直接将命令写回旧的日志文件，并且保存一份命令至 AOF 重写缓冲区，这些操作对新的日志文件是不存在影响的。（旧的日志文件：主线程使用的日志文件，新的日志文件：bgrewriteaof 进程使用的日志文件）</p>\n<ul>\n<li>主线程 fork 出子进程重写 aof 日志</li>\n<li>子进程重写日志完成后，主线程追加 aof 日志缓冲</li>\n<li>替换日志文件</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eiNSREI=\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz#RDB</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMteC1yZGItYW9mLmh0bWw=\">https://pdai.tech/md/db/nosql-redis/db-redis-x-rdb-aof.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uaW5nZy50b3AvY29tcHV0ZXItYmFzaWMtdGhlb3J5LWNvcHktb24td3JpdGUv\">https://ningg.top/computer-basic-theory-copy-on-write/</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L011c2NsZWFwZS9hcnRpY2xlL2RldGFpbHMvMTA1NjcwNDgx\">https://blog.csdn.net/Muscleape/article/details/105670481</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veWJ5bi9wLzE0MTU3NTY4Lmh0bWw=\">https://www.cnblogs.com/ybyn/p/14157568.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNTk4MzUxOA==\">https://segmentfault.com/a/1190000015983518</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNDM0NjEyL2FydGljbGUvZGV0YWlscy8xMDg3OTE0Mzc=\">https://blog.csdn.net/qq_41434612/article/details/108791437</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGlhbmcyNC9wLzE0MTgwMDM2Lmh0bWw=\">https://www.cnblogs.com/liang24/p/14180036.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2JhN2I4YWQ5NjQ=\">https://www.jianshu.com/p/d3ba7b8ad964</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpdXBlaWZlbmczNTE0L2FydGljbGUvZGV0YWlscy83OTA0ODc2Nw==\">https://blog.csdn.net/liupeifeng3514/article/details/79048767</span></p>\n<p>极客时间 《Redis 核心与实战》的相关内容</p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/05/Database/Redis/Redis(2)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "https://cecilia.cool/2022/11/05/Database/Redis/Redis(2)-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "Redis(2)--数据类型",
            "date_published": "2022-11-04T16:39:36.000Z",
            "content_html": "<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<p>在 <code>redis</code>  中，所有 <code>key</code>  都是字符串，讨论数据结构时，都是存储值的数据类型，常见的包括：</p>\n<ul>\n<li>String：字符串、整数或浮点数。对整个字符串或字符串的一部分进行操作；对整数或浮点数进行自增或自减操作。</li>\n<li>List：对链表的两端进行 push 和 pop 操作，读取单个或多个元素；根据值查找或删除元素；</li>\n<li>Set：字符串的集合，包含基础的方法有看是否存在添加、获取、删除；还包含计算交集、并集、差集等。</li>\n<li>Zset：字符串成员与浮点数分数之间的有序映射；元素的排列顺序由分数的大小决定；包含方法有添加、获取、删除单个元素以及根据分值范围或成员来获取元素。</li>\n<li>Hash：添加、获取、删除单个元素</li>\n</ul>\n<blockquote>\n<p>关于集合的命令，有啥想不起就去搜。</p>\n</blockquote>\n<h2 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h2>\n<p>记住上一篇文章讲的几个命令即可： <code>get,set,del,incr,decr,incrby,decrby</code> 。</p>\n<h2 id=\"list\"><a class=\"anchor\" href=\"#list\">#</a> List</h2>\n<p>可以实现消息队列，将任务存 <code>PUSH</code>  在 List 中，工作线程再 <code>POP</code>  操作将任务取出执行。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/05/e621c88a8c58d5a8.jpg\" alt=\"\" /></p>\n<p>两边都可以增删节点，对应方法就是 <code>L/RPUSH</code>  和 <code>L/RPOP</code> ，具体使用为：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lpush mylist <span class=\"token number\">1</span> <span class=\"token number\">2</span> ll ls mem</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lrange mylist <span class=\"token number\">0</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\t<span class=\"token comment\">-- lrange 获取列表所有值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"mem\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ls\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ll\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"2\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lindex mylist <span class=\"token operator\">-</span><span class=\"token number\">1</span>\t<span class=\"token comment\">-- lindex 根据索引获取元素 (0 开始)，负数也可以，-1 表示最后一个</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> lindex mylist <span class=\"token number\">10</span>        <span class=\"token comment\">-- index 不在 mylist 的区间范围内</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span>nil<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>还有一些骚操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 从前一个数组的最后取一个数出来放到另一个数组的头部，并返回元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rpoplpush 当前数组 目标数组</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 如果列表中没有元素，那么就等待，如果指定时间（秒）内被添加了数据，那么就执行 pop 操作，如果超时就作废，支持同时等待多个列表，只要其中一个列表有元素了，那么就能执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>blpop <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> timeout</pre></td></tr></table></figure><h2 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h2>\n<p>不同元素无序排列，直接看命令：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> sadd myset hao hao1 xiaohao hao\t<span class=\"token comment\">-- sadd 添加若干个成员</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> smembers myset\t<span class=\"token comment\">-- 返回所有成员</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"xiaohao\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hao1\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"hao\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>:<span class=\"token number\">6379</span><span class=\"token operator\">></span> sismember myset hao\t<span class=\"token comment\">-- 判断集合 myset 是否有集合 hao 成员</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">integer</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 随机移除一个幸运儿</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>spop <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 移除指定</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>srem <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>集合之间的运算：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 集合之间的差集</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sdiff <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 集合之间的交集</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sinter <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 求并集</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>sunion <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 将集合之间的差集存到目标集合中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>sdiffstore 目标 <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 同上</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sinterstore 目标 <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 同上</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>sunionstore 目标 <span class=\"token operator\">&lt;</span>key1<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>key2<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 移动指定值到另一个集合中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>smove <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> 目标 <span class=\"token keyword\">value</span></pre></td></tr></table></figure><h2 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h2>\n<p>string 类型的 field（字段） 和 value（值） 的映射表，hash 特别适合用于存储对象。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/11/05/25fd082b2f3cc590.jpg\" alt=\"\" /></p>\n<p>假设散列表名是 user：</p>\n<ul>\n<li>添加： <code>hset user key1 val1</code> 。</li>\n<li>获取值： <code>hget user key1</code> 。</li>\n<li>获取所有键值对： <code>hgetall user</code> 。</li>\n<li>移出键： <code>hdel user key</code> 。</li>\n</ul>\n<h2 id=\"zset\"><a class=\"anchor\" href=\"#zset\">#</a> Zset</h2>\n<p>每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p>\n<p>有序集合是通过两种数据结构实现：</p>\n<ol>\n<li><strong>压缩列表 (ziplist)</strong>: ziplist 是为了提高存储效率而设计的一种特殊编码的双向链表。它可以存储字符串或者整数，存储整数时是采用整数的二进制而不是字符串形式存储。它能在 O (1) 的时间复杂度下完成 list 两端的 push 和 pop 操作。但是因为<strong>每次操作都需要重新分配 ziplist 的内存</strong>，所以实际复杂度和 ziplist 的内存使用量相关</li>\n<li><strong>跳跃表（zSkiplist)</strong>: 跳跃表的性能可以保证在查找，删除，添加等操作的时候在对数期望时间内完成，这个性能是可以和平衡树来相比较的，而且在实现方面比平衡树要优雅，这是采用跳跃表的主要原因。跳跃表的复杂度是 O (log (n))。</li>\n</ol>\n<p>相关命令：</p>\n<ul>\n<li>添加： <code>zadd table key1 val1 score</code> 。</li>\n<li>获取： <code>zrange table key1 </code> 。</li>\n<li>删除： <code>zrem table key1 </code> 。</li>\n</ul>\n<p>因为都有一个分数值，所以可以根据分数值操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 通过分数段查看</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>zrangebyscore <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> <span class=\"token keyword\">start</span> stop <span class=\"token punctuation\">[</span>withscores<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">limit</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">-- 统计分数段内的数量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>zcount <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span>  <span class=\"token keyword\">start</span> stop</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 根据分数获取指定值的排名</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>zrank <span class=\"token operator\">&lt;</span><span class=\"token keyword\">key</span><span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">value</span><span class=\"token operator\">></span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMtZGF0YS10eXBlcy5odG1s\">https://pdai.tech/md/db/nosql-redis/db-redis-data-types.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eiNMaXN0\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz#List</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/11/03/Database/Redis/Redis(1)-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "url": "https://cecilia.cool/2022/11/03/Database/Redis/Redis(1)-%E5%AE%89%E8%A3%85%E4%B8%8E%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/",
            "title": "Redis(1)--安装与基本操作",
            "date_published": "2022-11-03T02:57:36.000Z",
            "content_html": "<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<blockquote>\n<p>官网提供的是 Mac 和 Linux 的安装包，并没有 windows 的，但是 <code>github</code>  有相关的开源项目。</p>\n</blockquote>\n<p>开源地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Rwb3JhZG93c2tpL3JlZGlzL3JlbGVhc2Vz\">https://github.com/tporadowski/redis/releases</span></p>\n<p>直接下载 <code>zip</code>  安装包就行了，然后运行服务端打开<strong> redis-server.exe</strong> 文件即可。客户端打开<strong> redis-cli.exe</strong> 即可。</p>\n<p>如果客户端想要使用本地 cmd，则在 <code>redis</code>  根目录下执行命令： <code>redis-cli.exe -h localhost</code> 。默认是 6379 端口。</p>\n<p>如果想要远程访问，就需要将 <code>redis.windows.conf</code>  的 bind 注释掉， <code>protected-mode</code>  设为 <code>no</code> 。</p>\n<p>Linux (ubuntu) 下载 Redis：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> redis-server</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 查看服务，按 q 退出</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> systemctl status redis-server</pre></td></tr></table></figure><p>可以远程访问 Redis，但是需要配置一下 <code>/etc/redis.conf</code>  文件，定位到 <code>bind 0.0.0.0 ::1</code> ，取消这行的注释，保存退出，重启 Redis 服务：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart redis-server</pre></td></tr></table></figure><p>配置防火墙，允许网络流量通过 TCP 端口 <code>6379</code> 。</p>\n<p>通常你想要允许从一个指定 IP 地址或者一个指定 IP 范围来访问 Redis 服务器。例如，想要允许从 <code>192.168.121.0/24</code>  的连接，运行下面的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> ufw allow proto tcp from <span class=\"token number\">192.168</span>.121.0/24 to any port <span class=\"token number\">6379</span></pre></td></tr></table></figure><p>此时，你应该可以从远程位置通过 TCP 连接到 Redis 的 6379 端口。</p>\n<p>想要验证所有设置都设置好了，你可以尝试使用 <code>redis-cli</code>  从你的远程机器上 ping 一下 Redis 服务器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redis-cli <span class=\"token parameter variable\">-h</span> <span class=\"token operator\">&lt;</span>REDIS_IP_ADDRESS<span class=\"token operator\">></span> <span class=\"token function\">ping</span></pre></td></tr></table></figure><p>这个命令将会返回一个响应： <code>PONG</code></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>PONG</pre></td></tr></table></figure><h1 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h1>\n<ul>\n<li>热点数据的缓存：作为缓存使用，保存数据的方式一般是两种，读取数据前先读取 Redis，次级是数据库，并将数据拉入 Redis（可能会缓存击穿）；插入数据时同时写入 Redis。</li>\n<li>限时业务：比如验证码校验，60s 内有效。</li>\n<li>计数器：redis 的 incrby 原子递增，可以运用于高并发秒杀</li>\n<li>好友关系存储：在微博应用中，每个用户关注的人存在一个集合中，就很容易实现求两个人的共同好友功能。Redis 利用集合的一些命令，比如求交集、并集、差集等。</li>\n<li>简单队列：由于 Redis 有 list push 和 list pop 这样的命令，所以能够很方便的执行队列操作。</li>\n</ul>\n<h1 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p><code>Redis</code>  是一个键值数据库，因此，可以像 <code>Map</code>  一样的操作方式，通过键值对向 <code>Redis</code>  数据库中添加数据（操作起来类似于向一个 <code>HashMap</code>  中存放数据）。</p>\n<p>现在打开客户端或者使用 cmd 连接到服务端。</p>\n<p>redis 的数据库由整数索引标识（而不是名称），默认连接到 redis 使用 0 号数据库，默认 16 个数据库（可以通过配置文件修改数据库总数）。</p>\n<p>相关命令操作：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换数据库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> 序号</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 添加 / 修改数据；添加多个数据：mset key1 value1 key2 value2..</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">value</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 获取数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>get <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 删除数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>del <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 设置数据过期时间，自动删除</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">value</span> EX 秒</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">value</span> PX 毫秒</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 为单独的键设置过期时间，转为永久就是 persist key</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>expire <span class=\"token keyword\">key</span> 秒</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 查询过期时间剩余 毫秒就是 pttl</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>ttl <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 查询所有键值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">keys</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 某个键是否存在</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">exists</span> <span class=\"token keyword\">key</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\"># 随机拿一个键</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>randomkey</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\"># 数据库内容迁移</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>move <span class=\"token keyword\">key</span> 数据库序号</pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\"># 修改键名 renamex 会检查新名称是否存在</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">rename</span> <span class=\"token keyword\">key</span> 新的键名</pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># 存放的数据是数字，自增自减操作</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>incr <span class=\"token keyword\">key</span>\t<span class=\"token comment\"># a++</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>incrby <span class=\"token keyword\">key</span> b\t<span class=\"token comment\"># a = a+b</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>decr <span class=\"token keyword\">key</span>\t<span class=\"token comment\"># a--</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># 查看数据类型</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token keyword\">key</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGIvbm9zcWwtcmVkaXMvZGItcmVkaXMtaW50cm9kdWNlLmh0bWw=\">https://pdai.tech/md/db/nosql-redis/db-redis-introduce.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvc3ByaW5nL25rYTJ2eg==\">https://www.yuque.com/qingkongxiaguang/spring/nka2vz</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNjM5NjU4\">https://cloud.tencent.com/developer/article/1639658</span></p>\n</blockquote>\n",
            "tags": [
                "Redis"
            ]
        }
    ]
}