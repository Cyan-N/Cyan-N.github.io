{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途 • All posts by \"shell\" tag",
    "description": "时雨病重症患者！！！",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/08/06/Shell/gawk%E7%A8%8B%E5%BA%8F%E8%BF%9B%E9%98%B6/",
            "url": "https://cecilia.cool/2022/08/06/Shell/gawk%E7%A8%8B%E5%BA%8F%E8%BF%9B%E9%98%B6/",
            "title": "gawk程序进阶",
            "date_published": "2022-08-06T07:53:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>关于 <code>gawk</code>  进阶，你可以参考这篇博客，很详细，但是请一定要看本文的<strong>结束语</strong></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbG9uZ3N5L2FydGljbGUvZGV0YWlscy83NzA5NTEwMz9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2NTk3NzgxMDExNjc4MjI0NjQxMjQ2NyUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC5wYyUyNTVGYWxsLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY1OTc3ODEwMTE2NzgyMjQ2NDEyNDY3JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+Zmlyc3RfcmFua19lY3BtX3YxfnBjX3JhbmtfMzQtMS03NzA5NTEwMy1udWxsLW51bGwuMTQyJTVFdjM5JTVFcGNfcmFua18zNCwxODUlNUV2MiU1RWNvbnRyb2wmYW1wO3V0bV90ZXJtPWdhd2slMjAlRTYlQTAlQkMlRTUlQkMlOEYlRTUlOEMlOTYlRTYlODklOTMlRTUlOEQlQjAmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">gawk 进阶</span>。</p>\n</blockquote>\n<h1 id=\"内建变量\"><a class=\"anchor\" href=\"#内建变量\">#</a> 内建变量</h1>\n<p><code>gawk</code>  程序使用内建变量来引用程序的数据里的一些特殊功能。</p>\n<h2 id=\"字段和记录分隔符的变量\"><a class=\"anchor\" href=\"#字段和记录分隔符的变量\">#</a> 字段和记录分隔符的变量</h2>\n<p>类似于 <code>$1,$2</code>  是数据字段变量，其根据字段分隔符来划定，默认情况下，字段分隔符是空白字符 (空格或制表符)。可以使用内建变量 <code>FS</code>  更改字段分隔符（ <code>shell</code>  脚本里面用的是 <code>IFS</code> ）</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FIELDWIDTHS--由空格分隔的一列数字，定义了每个数据字段确切宽度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FS--输入字段之间分隔符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>OFS--输出字段之间分隔符</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>RS--输入记录分隔符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ORS--输出记录分隔符</pre></td></tr></table></figure><p>默认情况下， <code>OFS</code>  是空格，所以 <code>print $1,$2,$3 --&gt; field1 field2 field3</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;OFS=\"-\"&#125; &#123;print $1,$2,$3&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dog-monkey-cat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dog monkey <span class=\"token function\">cat</span> mouse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 在 print 中，使用，隔开每个变量，同时 FS=\",\" 要使用双引号</span></pre></td></tr></table></figure><p>设置 <code>FIELDWIDTHS</code>  时，该变量允许你不依靠字段分隔符来读取记录，一旦设置， <code>gawk</code>  就会忽略 <code>FS</code> ，并根据提供的字段宽度来计算字段。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FIELDWIDTHS=\"3 5 2 5\"&#125;&#123;print $1,$2,$3,$4&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 那么字段 $1 长度为 3,$2 长度为 5...</span></pre></td></tr></table></figure><p>变量 <code>RS</code>  和 <code>ORS</code>  定义了 <code>gawk</code>  程序如何处理数据流中的记录，默认下，都为换行符，默认的 <code>RS</code>  值表明，<br />\n输入数据流中的每行新文本就是一条新纪录。</p>\n<p>你如果不是很清楚，可以参照这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpaWZhYS9hcnRpY2xlL2RldGFpbHMvNzg4MjcwODA/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjU5NzczNzA1MTY3ODE2ODUzODI0MzglMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY1OTc3MzcwNTE2NzgxNjg1MzgyNDM4JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+YmFpZHVfbGFuZGluZ192Mn5kZWZhdWx0LTEtNzg4MjcwODAtbnVsbC1udWxsLjE0MiU1RXYzOSU1RXBjX3JhbmtfMzQsMTg1JTVFdjIlNUVjb250cm9sJmFtcDt1dG1fdGVybT1nYXdrJTIwUlMmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">RS、FS 与 ORS、OFS 等内置变量的用法</span>。</p>\n<h2 id=\"数据变量\"><a class=\"anchor\" href=\"#数据变量\">#</a> 数据变量</h2>\n<p><code>gawk</code>  还提供了一些内建变量帮助你了解数据发生了什么变化，并提取 <code>shell</code>  环境的变化，太多了，挑几个写。</p>\n<p><code>ARGC</code>  和 <code>ARGV</code>  变量允许从 <code>shell</code>  中获取命令行参数的<strong>总数</strong>以及它们的值， <code>gawk</code>  并不会将程序脚本当成命令行参数的一部分。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;print ARGC,ARGV[1]&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span> data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># ARGC 表示参数为两个，包括 gawk 命令和 data 参数 (程序脚本不是参数！)</span></pre></td></tr></table></figure><p><code>ENVIRON</code> -- 使用关联数组来提取 <code>shell</code>  环境变量，该数组用文本作为数组的引索值，而不是数值。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;print ENVIRON[\"HOME\"],ENVIRON[\"PATH\"]&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/home/cyan /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</pre></td></tr></table></figure><h1 id=\"自定义变量\"><a class=\"anchor\" href=\"#自定义变量\">#</a> 自定义变量</h1>\n<p><code>gawk</code>  自定义变量不能以数字开头，直接赋值即可，不需要使用 <code>$</code> ，同时， <code>gawk</code>  包含了标准算数操作符 <code>(*,^,**,%...)</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;x=4; x= x ** 3 + 1; print x&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">65</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;x=4; x= x ^ 3 + 1; print x&#125;'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">65</span></pre></td></tr></table></figure><h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<p><code>gawk</code>  使用关联数组提供数组功能，不同之处在于，其引索值可以是任意文本字符串，每个引索字符串都必须能够唯一标识出赋给他的数据元素。每个数组名自定义，数据引索值自定义！</p>\n<p>基本定义格式： <code>arr[index_1]=val_1</code> 。</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.遍历数组变量：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    for(var in array)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        statements</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2.删除数组变量：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    delete array[index]</pre></td></tr></table></figure><h1 id=\"使用模式\"><a class=\"anchor\" href=\"#使用模式\">#</a> 使用模式</h1>\n<p><code>gawk</code>  支持多种类型的匹配模式来过滤数据，与 <code>sed</code>  大同小异， <code>BEGIN</code>  和 <code>END</code>  关键字用在读取数据流之前 / 后执行命令的特殊模式，也存在其他特殊模式，用于在<strong>匹配</strong>数据流时执行一些命令。</p>\n<h2 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<p>正则表达式必须出现在要控制的程序脚本的左花括号之前。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\"&#125; /11/&#123;print $1&#125;'</span> data</pre></td></tr></table></figure><h2 id=\"匹配操作符matching-operator\"><a class=\"anchor\" href=\"#匹配操作符matching-operator\">#</a> 匹配操作符 (matching operator)</h2>\n<p>匹配操作符是波浪线 <code>~</code> ，允许将正则表达式限定在记录中的特定数据字段。</p>\n<p>正则表达式有一定局限性，因为我们现在处理的数据，从行记录数据细化到了某个字段的数据（通过 <code>FS</code>  字段分隔符细化），所以，比如我想匹配每行中，第五个字段中是否有 <code>cat</code>  这个单词，单使用正则表达式是做不到的。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$5</span> ~ /cat/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># $5 表示行记录数据中第五个字段，该表达式会过滤出第五个字段包含 cat 的所有记录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这是一个强大的功具 -- 用于在数据文件中搜索特定的数据元素</span></pre></td></tr></table></figure><p>它还可以和 <code>!</code>  一起使用，用于排除，没错，和 <code>sed</code>  一样的功能</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$1</span> <span class=\"token operator\">!</span>~ /expression/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果匹配失败就会执行指令</span></pre></td></tr></table></figure><h2 id=\"数学表达式\"><a class=\"anchor\" href=\"#数学表达式\">#</a> 数学表达式</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> -F: <span class=\"token string\">'$4 == 0&#123;print $1&#125;'</span> /etc/passwd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 该脚本查看第四个数据字段含有 0 的值 (组 ID=0--root 用户组)</span></pre></td></tr></table></figure><p>常见的比较： <code>&gt;= , &lt;= , == ...</code> ，也可以对文本数据使用表达式： <code>gawk '$1 == &quot;data&quot;&#123;print $2&#125;' data</code> 。</p>\n<h1 id=\"结构化语句\"><a class=\"anchor\" href=\"#结构化语句\">#</a> 结构化语句</h1>\n<h2 id=\"if语句\"><a class=\"anchor\" href=\"#if语句\">#</a> if 语句</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstatement1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者是：if (condition) statement</span></pre></td></tr></table></figure><p>如果要在 <code>if</code>  语句中执行多条语句，要使用花括号，当然， <code>gawk</code>  也支持 <code>else</code>  子句。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstatements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 也可以在单行使用 else，只是需要加；if (condition) statements; else statements</span></pre></td></tr></table></figure><h2 id=\"while语句\"><a class=\"anchor\" href=\"#while语句\">#</a> while 语句</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstatements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\"># while 中支持 break 和 continue 来跳出循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>还有 <code>do-while</code>  语句：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstatements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>while <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"for语句\"><a class=\"anchor\" href=\"#for语句\">#</a> for 语句</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span> var assignment<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> iteration process<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 其实跟普通的 for 循环没啥区别</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 大概就是这样</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> for<span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span>     total <span class=\"token operator\">+=</span> <span class=\"token variable\">$i</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后还是举个例子</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> commands.awk</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token assign-left variable\">total</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        for<span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                print <span class=\"token variable\">$1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token parameter variable\">-f</span> commands.awk data</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dog</pre></td></tr></table></figure><h1 id=\"格式化打印\"><a class=\"anchor\" href=\"#格式化打印\">#</a> 格式化打印</h1>\n<p>和 <code>c</code>  语言的 <code>printf</code>  差不多，通过格式化字符来控制。</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d/i--都是表示整数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f--浮点数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>e--科学计数法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>g--科学计数法表示，或浮点数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o--八进制</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x--十六进制</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>X--十六进制，字母大写</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>printf \"The answer is:%e\",val</pre></td></tr></table></figure><ul>\n<li>\n<p><code>width</code> -- 指定输出字段最小宽度的数字值，如果输出小于这个值，文本右对齐，并用空格填充，否则按实际宽度输出。</p>\n</li>\n<li>\n<p><code>prec</code> -- 指定了浮点数中小数点后面的位数，或者文本字符串中显示的最大字符数。</p>\n</li>\n<li>\n<p><code>-</code> (减号)：指明在向格式化空间中放入数据时采取左对齐而不是右对齐。</p>\n</li>\n</ul>\n<p>通过一个例子来讲解，<strong>FS 是一行数据中各个字段的分隔符，RS 是行数据之间的分隔符</strong>。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 数据文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Riley Mullen,<span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Frank Williams,<span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Haley Snell,<span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 先试一下 printf 打印</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\";RS=\"\\n\"&#125; &#123;printf \"%s %s\\n\",$1,$2&#125;'</span> data</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Riley Mullen <span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Frank Williams <span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Haley Snell <span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr></table></figure><p>我们希望打印结果对齐一点，但是默认的是右对齐</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\";RS=\"\\n\"&#125; &#123;printf \"%20s %s\\n\",$1,$2&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        Riley Mullen <span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      Frank Williams <span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         Haley Snell <span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr></table></figure><p>所以要使用 <code>-</code> ，指定左对齐，完美。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\";RS=\"\\n\"&#125; &#123;printf \"%-20s %s\\n\",$1,$2&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Riley Mullen         <span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Frank Williams       <span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Haley Snell          <span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr></table></figure><h1 id=\"内建函数\"><a class=\"anchor\" href=\"#内建函数\">#</a> 内建函数</h1>\n<h2 id=\"数学函数\"><a class=\"anchor\" href=\"#数学函数\">#</a> 数学函数</h2>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>atan2(x,y)--x/y反正切，x和y是弧度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cos(x),log(x),sin(x),sqrt(x),srand(x)为计算机随机数指定种子值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rand()--产生0~1之间的随机小数(不含0,1)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>exp(x)--x的指数函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int(x)--取整</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>除了一般的数学运算外，gawk还提供位运算：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>and(x,y),compl(x)--x的补运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lshift(x,count)--左移,rshift(x,count)--右移</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>or(x,y),xor(x,y)</pre></td></tr></table></figure><h2 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h2>\n<p>具体详细的，要使用时，自己去查</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>length([s])--长度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>index(s,t)</pre></td></tr></table></figure><h2 id=\"时间函数\"><a class=\"anchor\" href=\"#时间函数\">#</a> 时间函数</h2>\n<ul>\n<li><code>mktime(datespec)</code>  按 <code>YYYY-MM-DD-HH-MM-SS[DST]</code>  格式指定的日期转换成时间戳值。</li>\n<li><code>strftime(formate [,timestamp])</code>  将当前时间的时间戳或 <code>timestamp</code>  转换为格式化日期 (采用 <code>shell</code>  的 <code>date()</code> )<br />\n <code>systime()</code>  返回当前时间的时间戳</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> date=systime()</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> date=strftime(\"%A, %B %d, %Y\",date)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> print date</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;'</span></pre></td></tr></table></figure><h1 id=\"自定义函数\"><a class=\"anchor\" href=\"#自定义函数\">#</a> 自定义函数</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>varuables<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#可以传参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> value <span class=\"token comment\">#可以使用 return 返回值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#在自定义函数时，必须出现在所有代码前 (包括 BEGIN 代码块)，有助于将函数代码和 gawk 程序其他部分分开</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">gawk</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>> function fun()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>> &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>>   printf \"%-16s - %s\\n\",$1,$4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>> &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>> BEGIN&#123;FS=\"\\n\"; RS=\"\"&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>> &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>>   fun()    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>> &#125;'</span> data</pre></td></tr></table></figure><h1 id=\"创建函数库\"><a class=\"anchor\" href=\"#创建函数库\">#</a> 创建函数库</h1>\n<p>如果函数经常使用，可以将这些函数放在专门的函数库文件中，文件可以通过 <code>-f</code>  参数来使用。但是， <code>-f</code>  命令行参数不能和内联 <code>gawk</code>  脚本放到一起使用，所以在同一行命令行需要使用多个 <code>-f</code>  参数 (也就是，将 <code>gawk</code>  脚本程序也放到文件中)。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token parameter variable\">-f</span> funclib <span class=\"token parameter variable\">-f</span> script data</pre></td></tr></table></figure><h1 id=\"结束语\"><a class=\"anchor\" href=\"#结束语\">#</a> 结束语</h1>\n<p>至此，暑假开的 <code>shell</code>  系列更新结束（2022.7.28--20228.6），<strong>所有文章大致参考《Linux 命令行与 shell 脚本编程大全》，作者是 [美] 布鲁姆（Richard Blum），布雷斯纳汉（Christine Bresnahan）</strong>。为什么说大致呢？首先，这本书是我在大二寒假看完的，当时笔记做的不是很完善而且还有很多错误，所以这次博客更新，我并不只是单纯从之前的笔记粘贴复制。你们现在看到的，很多例子，都是我自己想的，问题的引入和思考花费了较多时间，但是绝对不能否认的是，这本书让我收获极大。</p>\n<p>本文开始推荐的博客，其实就是《Linux 命令行与 shell 脚本编程大全》的 gawk 进阶的原文（作者在文末也说了参考了此书），我并不喜欢照着书抄笔记，一个是我懒，另一个是这样我还不如让你直接买一本。</p>\n<p>送君千里，终有一别。在 CUI（不会到现在你还不知道什么是 CUI 吧？）学习的路上，我们都还差得远呢，剩下的，也是唯一需要记住的就是，保持学习，尊重原创。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/05/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%9B%E9%98%B6/",
            "url": "https://cecilia.cool/2022/08/05/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%9B%E9%98%B6/",
            "title": "sed编辑器进阶",
            "date_published": "2022-08-05T13:49:28.000Z",
            "content_html": "<h1 id=\"多行命令\"><a class=\"anchor\" href=\"#多行命令\">#</a> 多行命令</h1>\n<p><code>n</code>  命令 -- <code>next</code> ，会将 <code>sed</code>  编辑器移动到数据流中的<strong>下一行</strong>文本，而不用重新回到命令的最开始执行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/head/&#123;n;d&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 当匹配到 head 一行，sed 会马上移动到下一行开头，执行 d 命令</span></pre></td></tr></table></figure><p><code>N</code>  命令，将数据流中两个文本行合并到同一个<strong>模式空间</strong>中，两行文本仍以换行符相隔，但是会将两行文本当作一行处理。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">'/cat/&#123;N;s/\\n/ /&#125;'</span> data</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span> end</pre></td></tr></table></figure><p>但是这个命令存在局限，比如前四行， <code>sed</code>  会将第 1，2 行看作整体，第 3，4 行看作整体，如果最后一行是第五行单行， <code>sed</code>  不会检查第五行，直接结束。</p>\n<p><code>N,d</code>  两个命令配合可以实现多行删除，对于匹配到的，模式空间中两行都会删除， <code>D</code>  就只会删除模式空间第一行，第二行被保留。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">\"N;/[c,e]*/d\"</span> data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># N 和 D 的配合使用，可以删除行前的空白行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mouse</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>monkey</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">\"N;/ /D\"</span> data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>mouse</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>monkey</pre></td></tr></table></figure><p><code>N,P</code>  命令可以实现多行打印， <code>P</code>  命令只打印模式空间的第一行。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mouse</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>monkey</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"4&#123;N;P&#125;\"</span> data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mouse</pre></td></tr></table></figure><p>关于 <code>sed</code>  中 <code>p,P</code>  命令的区别，可以参考这篇文章</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4xMzYubGEvc2hpZGEvc2hvdy00MTA1NTkuaHRtbA==\">http://www.136.la/shida/show-410559.html</span></p>\n</blockquote>\n<h1 id=\"保持空间\"><a class=\"anchor\" href=\"#保持空间\">#</a> 保持空间</h1>\n<p>模式空间是一块活跃的缓冲区，sed 编辑器还有另一块称作<strong>保持空间</strong>的缓冲区。对于保持空间，存在 5 条命令，用来将文本从模式空间复制到保持空间。这可以清空模式空间来加载其他要处理的字符串。</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>h--将模式空间复制到保持空间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>H--将模式空间附加到保持空间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>g--将保持空间复制到模式空间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>G--将保持空间附加到模式空间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x--交换两个空间的内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sed -n '/first/ &#123;h;p;n;p;g;p&#125;' data</pre></td></tr></table></figure><p>现在你不用太理解，只需要有这么个空间即可。</p>\n<h1 id=\"排除命令\"><a class=\"anchor\" href=\"#排除命令\">#</a> 排除命令</h1>\n<p>在 <code>sed</code>  基础那篇文章中，提到 <code>!</code>  可以代替 <code>/</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/dog/'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s!cat!dog!'</span> data</pre></td></tr></table></figure><p>在 <code>sed</code>  中，使用感叹号 <code>!</code>  还可以排除命令，让原本会起作用的命令不起作用，比如在最后一行取消使用 <code>N</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'$!N;其他命令'</span> data</pre></td></tr></table></figure><p>现在给出一个例子，通过这个例子，我们会用到模式空间，保持空间以及排除命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 逆序打印文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"first</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> second</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> third</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> \"</span> <span class=\"token operator\">></span> data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;1!G;h;$p&#125;'</span> data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>third</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>second</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>first</pre></td></tr></table></figure><p>上述命令， <code>G,h</code>  是关于保持空间的命令，每次将数据读取到模式空间，保持空间中的数据都会附加到模式空间 (第一行除外)，然后再复制到保持空间。当然， <code>Linux</code>  命令 <code>tac</code>  可以直接逆序文本，其实 <code>tac</code>  就是 <code>cat</code>  反着写。</p>\n<p>等一下，我好像还没讲过什么是模式空间： <code>sed</code>  每次读一行，都会把这一行数据读到模式空间，在使用命令处理数据，在打印到标准输出。</p>\n<p>关于逆序打印文本，具体我们可以看下图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/06/759084cf022ed038.png\" alt=\"image-20220806111008122\" /></p>\n<p>如果你真的理解了，那么你就知道，这个命令也可以实现逆序</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;1!G;$!h;$p&#125;'</span> data</pre></td></tr></table></figure><h1 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h1>\n<p>分支命令共有两条：分支（b）和替代分支（t）。</p>\n<h2 id=\"b命令\"><a class=\"anchor\" href=\"#b命令\">#</a> b 命令</h2>\n<p>基于地址，地址模式或地址区间<strong>排除</strong>整块命令： <code>[address]b [label]</code> 。</p>\n<p><code>address</code>  决定哪些行触发分支命令。 <code>label</code>  参数定义了要跳转的位置，如果此处没有 <code>label</code>  参数，跳转命令会跳转到脚本结尾（注意，是命令脚本的结尾）。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'&#123;2,3b ; s/This is/Is this/ ;s/line./test?/&#125;'</span> data</pre></td></tr></table></figure><p><code>sed</code>  还可以使用标签，使用标签后，只会跳过部分命令，也就是标签之前的命令。直到这里你可能不是很懂，我要提醒的是，在 <code>sed</code>  中引入分支，我建议将命令放在 <code>.sed</code>  命令脚本中，这样使用起来才方便。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 假设我们需要都数据文件进行处理，一行数据中一旦出现 cat 这个单词，我们就打印其所在行号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 否则，就打印该行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># command.sed</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/cat/b error_print</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/**/b true_print</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">:</span> error_print</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>b <span class=\"token comment\"># 跳到结尾，不然会执行 true_print 的语句</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">:</span> true_print</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>b</pre></td></tr></table></figure><p>更改一下 <code>data</code>  的内容，执行 <code>sed</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"dog</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> monkey</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> cat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> mouse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> \"</span> <span class=\"token operator\">></span> data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-f</span> command.sed data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>monkey</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mouse</pre></td></tr></table></figure><p>如果你把标签放到分支跳转的前面，很容易形成死循环。比如，通过 <code>sed</code>  将数据中的 <code>,</code>  全部删除</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> :start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> s/,//p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> b start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> &#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>This is, a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>This is a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>This is a test, to, remove, commas.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to, remove, commas.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove, commas.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove commas.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>^C</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 每次去掉一个，然后跳回 start 标签处</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 当然，直接使用 g 选项</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cyan@cyan-virtual-machine:~$  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'s/,//gp'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove commas.</pre></td></tr></table></figure><p>上述例子，为了解决死循环，可以指定一个地址模式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s/,//p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/,/b start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 只有再次匹配到，才会跳转</span></pre></td></tr></table></figure><p>你也可以看一下这篇文章。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxNjQyODE0L2FydGljbGUvZGV0YWlscy8xMTE0NjExMzc=\">https://blog.csdn.net/m0_51642814/article/details/111461137</span></p>\n</blockquote>\n<h1 id=\"t命令\"><a class=\"anchor\" href=\"#t命令\">#</a> t 命令</h1>\n<p>测试命令 ( <code>t</code> ) 也可以用来改变 <code>sed</code>  执行流程，根据测试条件跳转，而不是地址： <code>[address]t [label]</code> 。</p>\n<p>如果替换命令匹配并替换了一个模式，测试命令就会跳转到指定标签，否则不会跳转。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s/,//p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>This is, a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>This is a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>This is a test, to, remove, commas.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to, remove, commas.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove, commas.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove commas.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 最后一次匹配失败，停止跳转</span></pre></td></tr></table></figure><h1 id=\"模式替代\"><a class=\"anchor\" href=\"#模式替代\">#</a> 模式替代</h1>\n<p><code>&amp;</code>  符号，该符号可以用来代表替换命令中的匹配的模式，比如我需要匹配 <code>hello</code>  这个字符串，那么我就可以用 <code>&amp;</code>  来代替 <code>hello</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The cat is cute.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/cu[^\\.\\ ]*/\"&amp;\"/'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The <span class=\"token function\">cat</span> is <span class=\"token string\">\"cute\"</span><span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><code>&amp;</code>  在使用正则表达式时十分方便，因为我们也不知道匹配到的模式到底是什么，我们可以直接通过 <code>&amp;</code>  拿到我们匹配到的模式。</p>\n<p>替代单独单词： <code>&amp;</code>  符号提取匹配替换命令指定模式的整个字符串，如果想要提取独立的单词，需要使用 <code>()</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The system Adminstrator manual\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> s/\\(system\\) Adminstrator/\\1 user/'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>The system User manual</pre></td></tr></table></figure><p>被使用时，圆括号定义了替换模式中的子模式，并使用 <code>\\1,2,3..</code>  来表示，在替换命令中使用圆括号时，<br />\n必须使用转义字符将它们标示为分组字符而不是普通的圆括号。</p>\n<p>所以最开始的例子我们也可以这么写</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The cat is cute.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\(cu[^\\.\\ ]*\\)/\"\\1\"/'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The <span class=\"token function\">cat</span> is <span class=\"token string\">\"cute\"</span><span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>最后再举一个例子：每三位添加逗号 (类似于，金钱金额分隔计数)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$input</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> : start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> s/\\(.*[0-9]\\)\\([0-9]\\&#123;3\\&#125;\\)/\\1,\\2/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> t start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> &#125;'</span></pre></td></tr></table></figure><p>这里说明一下， <code>grep</code>  和 <code>sed</code>  默认不支持 <code>ERE</code> -- 扩展正则表达式，如果要使用， <code>grep</code>  需要加 <code>-E</code>  选项， <code>sed</code>  需要使用 <code>-r</code>  选项。如果不加选项还想使用 <code>&#123;&#125;</code> ，就要加转义字符 <code>\\&#123;m\\&#125;</code> 。</p>\n<p>在给例子之前，我需要提示一下，我们上面使用 <code>()</code>  其实就是扩展正则表达式里面的东西，因为之前没有使用 <code>-r</code>  选项，所以需要使用转义字符。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$input</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>: start;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s/(.*[0-9])([0-9]&#123;3&#125;)/\\1,\\2/;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t start;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">10,913</span>,013</pre></td></tr></table></figure><h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>这里有一篇求问博客，是关于 <code>sed</code>  和正则表达式问题的，你能先不看评论区，自己找到博主提出的问题吗？要是你能自己解决，那更是最好的。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vb21ha2UuY29tL3F1ZXN0aW9uLzQyOTY1MzA=\">https://oomake.com/question/4296530</span></p>\n</blockquote>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/05/Shell/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://cecilia.cool/2022/08/05/Shell/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "正则表达式",
            "date_published": "2022-08-05T08:06:02.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>本文不会为你介绍所有正则表达式规则，一是我比较懒，二是你记不住。还不如上网去查。</p>\n<h1 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h1>\n<p>关于正则表达式与数据之间的关系，你可以这么理解</p>\n<pre><code>数据 --&gt; 正则表达式 --&gt; 匹配的数据\n            |\n            v\n        滤掉的数据\n</code></pre>\n<p>自定义的模式模板 (pattern template)， <code>Linux</code>  工具 (sed,gawk) 用来过滤文本。</p>\n<p>正则表达式是通过正则表达式引擎 ( <code>regular expression engine</code> ) 实现的，该引擎是一套底层软件，负责解释正则表达式并使用这些模式进行<strong>文本匹配</strong>。</p>\n<p>在 <code>Linux</code>  中，存在两种流行的正则表达式引擎：</p>\n<ul>\n<li><code>POSIX</code>  基础的正则表达式 ( <code>basic regular expression,BRE</code> ) 引擎。</li>\n<li><code>POSIX</code>  扩展的正则表达式 ( <code>extended regular expression,ERE</code> ) 引擎。</li>\n</ul>\n<p>大多数 <code>Linux</code>  工具都至少符合 <code>BRE</code> , 像 <code>sed</code>  等部分工具，出于速度方面的考虑，只能符合 <code>BRE</code> 。 <code>ERE</code>  通常出现依赖正则表达式进行文本过滤的编程语言中，为常见模式提供了高级模式符号和特殊符号。 <code>gawk</code>  程序用 <code>ERE</code>  引擎来处理它的正则表达式模式。</p>\n<h1 id=\"定义bre模式\"><a class=\"anchor\" href=\"#定义bre模式\">#</a> 定义 BRE 模式</h1>\n<p>正则表达式并不关心模式在数据流中的位置，也不关心模式出现了多少次，一旦匹配到文本字符串中任意位置上的模式，就会将该字符串传回 <code>Linux</code>  工具，值得注意的是，在正则表达式中，空格和其他字符并没有什么区别。</p>\n<h2 id=\"特殊字符\"><a class=\"anchor\" href=\"#特殊字符\">#</a> 特殊字符</h2>\n<p>正则表达式存在特殊字符： <code>.*[]^$&#123;&#125;\\+?|()</code> 。要想在文本中使用这些特殊符号，需要在前加上 <code>\\</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"/\\$/p\"</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 尽管正斜线 / 并不是正则表达式中的特殊字符，但是要是出现在 sed 和 gawk 的正则表达式中，也要使用转义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"/\\//p\"</span> data</pre></td></tr></table></figure><p>这些特殊字符具体是什么含义，后面讲解。</p>\n<h2 id=\"锚字符\"><a class=\"anchor\" href=\"#锚字符\">#</a> 锚字符</h2>\n<p>默认情况下，当指定一个正则表达式模式时，只要模式出现在数据流中的任何地方，就能匹配。</p>\n<ul>\n<li>锁定行首， <code>^</code> -- 脱字符，定义从数据流中文本行的行首开始的模式，如果模式出现在行首之外，就无法匹配。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the book store\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/^the/p'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>the book store</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果是 ^book，就无法匹配</span></pre></td></tr></table></figure><ul>\n<li>锁定行尾，使用 <code>$</code>  符号，我记得我在 <code>sed</code>  还是 <code>gawk</code>  那篇文章讲过。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the book\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/book$/p'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 只有以 book 结尾的，才会被匹配</span></pre></td></tr></table></figure><h2 id=\"其他字符\"><a class=\"anchor\" href=\"#其他字符\">#</a> 其他字符</h2>\n<ul>\n<li>点字符 <code>.</code> ，相当于占位符，但是该位置也必须要有字符才行。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'at the'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/.at/p'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 匹配失败</span></pre></td></tr></table></figure><ul>\n<li>字符组 <code>[]</code> ，该位置如果出现字符组中的任意字符，匹配： <code>echo &quot;to ac&quot; | sed -n '/[ab]c/p'</code> 。可以连续使用多个字符组，但是一个字符组只能占一位。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 过滤错误的邮政编码（由 5 位数字组成）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> /^[0123456789][0123456789][0123456789][0123456789][0123456789]$/p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> '</span> data</pre></td></tr></table></figure><ul>\n<li>排除型字符组，在字符组中开头加上 <code>^</code> ，代表反转，如果该位置没有字符组中的字符，匹配成功。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/[^ch]at/p'</span> data</pre></td></tr></table></figure><ul>\n<li>区间，对字符组的优化，比如从 <code>a</code>  到 <code>z</code>  不用再挨个列出： <code>[a-z]</code> , 区间顺序是根据 <code>Linux</code>  采用的字符集也可以多次使用，形成不连续的区间并集： <code>[a-ch-m]</code> , 区间范围为 <code>a-c,h-m</code> 。</li>\n<li>特殊字符组（记不住没关系，我也记不住）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:alpha:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意字母字符，不管是大写还是小写 (alphabet-- 全部字母；字母表)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:alnum:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意字母数字字符，0-9,a-z,A-Z</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:blank:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配空格和制表符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:digit:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配 0-9 之间的数字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:lower:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配 a-z</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配 A-Z</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:print:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意可打印字符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:punct:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配标点符号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:sapce:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意空白字符：空格，制表符，NL，FF，VT，CR</span></pre></td></tr></table></figure><ul>\n<li>星号，在字符后面放置星号，表明<strong>该字符</strong>必须在匹配模式的文本中出现 0 次或多次（我觉得这个大家应该都知道吧）， <code>echo 'ik' | sed -n '/ie*k/p</code> 。星号也可以和字符组同时使用， <code>[ac]*</code> 。</li>\n</ul>\n<h1 id=\"扩展正则表达式ere\"><a class=\"anchor\" href=\"#扩展正则表达式ere\">#</a> 扩展正则表达式 (ERE)</h1>\n<p><code>gawk</code>  程序能够识别 <code>ERE</code>  模式，但是 <code>sed</code>  不能。 <code>gawk</code>  具备这些扩展的功能，但是正因为如此， <code>gawk</code>  程序在处理数据流时通常比较慢。</p>\n<ul>\n<li>问号 <code>?</code> ，类似于 *, 但是前面的字符只是 0 次或 1 次，也就是，不会匹配多次出现的字符。</li>\n<li>加号 <code>+</code> ，仍然类似于 *, 但是必须出现 1 次。</li>\n<li>花括号 <code>&#123;&#125;</code> ，允许为可重复的正则表达式指定一个上限，通常称为间隔 ( <code>interval</code> ), 可以用两种格式来指定区间。  <code>&#123;m&#125;</code> ：正则表达式准确出现 <code>m</code>  次， <code>&#123;m,n&#125;</code> ：正则表达式至少出现 <code>m</code>  次，至多出现 <code>n</code>  次。对于 <code>gawk</code>  来说，默认情况下， <code>gawk</code>  不会识别正则表达式间隔，必须指定 <code>gawk</code>  程序的 <code>--re- interval</code>  命令行选项才能识别正则表达式间隔。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"bt\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> --re-interval <span class=\"token string\">'/be&#123;1&#125;t/&#123;print $0&#125;'</span> <span class=\"token comment\"># 匹配失败</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"bt\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> --re-interval <span class=\"token string\">'/be&#123;0,1&#125;t/&#123;print $0&#125;'</span> <span class=\"token comment\"># 匹配成功</span></pre></td></tr></table></figure><ul>\n<li>管道符号 <code>|</code> ，符号管道允许在检查数据流时，用逻辑 <code>OR</code>  指定正则表达式要用的两个或多个模式，如果任何一个模式匹配了数据流文本，文本通过测试</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># expr1|expr2...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'the cat is asleep'</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'/cat|dog/&#123;print $0&#125;'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 你还记得 lsof 命令的 - a 选项吗</span></pre></td></tr></table></figure><ul>\n<li>表达式分组 <code>()</code> ，该组会被视为一个标准字符，可以像对普通字符一样给该组使用特殊字符。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"sta\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'/sta(urday)?/&#123;print $0&#125;'</span>\t\t<span class=\"token comment\"># $0 表示整行数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 和管道一起使用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"cat\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'/(c|b)a(t|d)/&#123;print $0&#125;'</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/05/Shell/gawk%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/08/05/Shell/gawk%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/",
            "title": "gawk程序基础",
            "date_published": "2022-08-05T02:29:39.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>gawk</code>  程序是 <code>Unix</code>  中原始 <code>gawk</code>  程序的 <code>GNU</code>  版本，让流编辑迈上了一个新的台阶，其作用为：</p>\n<ul>\n<li>定义变量保存数据。</li>\n<li>使用算数和字符串操作符处理数据。</li>\n<li>使用结构化编程概念来为数据处理增加处理逻辑。</li>\n<li>通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告</li>\n</ul>\n<p>格式： <code>gawk options program file</code> 。</p>\n<p><code>gawk</code>  强大之处在于程序脚本，可以写脚本来读取文本行的数据，处理并显示数据，创建任何类型的输出报告。</p>\n<p>如果你没有下载 <code>gwak</code> ，执行命令： <code>sudo apt install gawk</code> 。</p>\n<h1 id=\"从命令行读取脚本程序\"><a class=\"anchor\" href=\"#从命令行读取脚本程序\">#</a> 从命令行读取脚本程序</h1>\n<p><code>gawk</code>  程序脚本用一对花括号定义 <code>&#123;&#125;</code> , 必须将脚本命令放在花括号中：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;print \"Hello World\"&#125;'</span></pre></td></tr></table></figure><p><code>print</code>  命令会将文本打印到 <code>STDOUT</code>  中，由于没有在命令行中指定文件，所以输入默认是接收 <code>STDIN</code> 。由于该命令固定显示 <code>Hello World</code> ，所以不论输入什么，都只会显示这个。希望结束程序，必须表明数据流已经结束， <code>ctrl+d</code>  会产生一个 <code>EOF</code>  字符，能够终止 <code>gawk</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;print \"Hello world\"&#125;'</span> testfile   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用文件作为输入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 由于 gawk 命令行假定脚本是个单个文本字符串，所以要使用 ''</span></pre></td></tr></table></figure><p>如果要使用多命令，还是使用分号</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"this is rich\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;$4=\"Mike\";print $0&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\"># 也可以分行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  > $3='</span><span class=\"token number\">123</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  > print $0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  > &#125;'</span></pre></td></tr></table></figure><p>这个与 <code>sed</code>  的多命令相似，两者的格式区别在于， <code>sed</code>  的命令直接使用 <code>''</code> ， <code>gawk</code>  使用 <code>'&#123;&#125;'</code> ，如果将命令放在文件中，两者是相同的，都是使用 <code>-f</code>  参数，文件名为了避免混淆，也会以. <code>gawk</code>  后缀命名。在 <code>gawk</code>  命令文件中，可以定义变量，同时，使用时不需要 <code>$</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">'213'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print text</pre></td></tr></table></figure><h1 id=\"数据字段变量\"><a class=\"anchor\" href=\"#数据字段变量\">#</a> 数据字段变量</h1>\n<p><code>gawk</code>  会给一行中每个数据元素分配一个变量（默认数据分隔符是空格） <code>$0</code> -- 整行数据     <code>$n</code> -- 第 <code>n</code>  个数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> -F: <span class=\"token string\">'&#123;print $1&#125;'</span> data</pre></td></tr></table></figure><p>打印 data 每行第一个数据， <code>-F</code>  指定分隔符，以 <code>:</code>  为分隔符。</p>\n<h1 id=\"程序脚本的运行\"><a class=\"anchor\" href=\"#程序脚本的运行\">#</a> 程序脚本的运行</h1>\n<p><code>gawk</code>  允许指定程序脚本<strong>何时运行</strong>，默认情况下， <code>gawk</code>  会从输入读取一行脚本，然后针对该行数据运行程序脚本，但是，有时需要在处理数据前运行脚本，有时在之后处理脚本。</p>\n<ul>\n<li><code>BEGIN</code>  关键字：会强制 <code>gawk</code>  在读取数据前执行 <code>BEIGIN</code>  关键字后指定的程序脚本</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN &#123;print \"hello\"&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 因为没有其他处理数据的命令，直接退出</span></pre></td></tr></table></figure><p><code>print</code>  显示完文本后会快速退出，不等待任何数据，如果想使用正常的程序脚本中处理数据，必须使用另一个脚本区域来定义程序：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN &#123;print \"hello\"&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> &#123;print $1&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> '</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hello</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr></table></figure><ul>\n<li><code>END</code>  关键字：会在读取数据 (是所有数据) 处理完之后，执行 <code>END</code>  后面的程序脚本</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN &#123;print \"The data file content:\"&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> &#123;print $1&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> END &#123;print \"END of file\"&#125;'</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>The data <span class=\"token function\">file</span> content:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>END of <span class=\"token function\">file</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/04/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/08/04/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E5%9F%BA%E7%A1%80/",
            "title": "sed编辑器基础",
            "date_published": "2022-08-04T15:27:23.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>sed</code>  编辑器被称作<strong>流编辑器</strong> ( <code>stream editor</code> )，流编辑器会在编辑器处理数据之前基于预先提供的一组<strong>数据规则</strong>来编辑数据流。根据命令来处理数据，这些命令要么从命令行输入，要么存储在一个命令文本文件中。</p>\n<p><code>sed</code>  编辑器处理事务：</p>\n<ol>\n<li>一次从输入中读取一行数据。</li>\n<li>根据提供的编辑器命令匹配数据。</li>\n<li>按照命令修改流中的数据。</li>\n<li>将新的数据输出到 <code>STDOUT</code> 。</li>\n</ol>\n<p><code>sed</code>  将所有命令与一行数据匹配完毕后，读取下一行数据并重复该过程，处理完所有数据，终止。</p>\n<h1 id=\"基本格式\"><a class=\"anchor\" href=\"#基本格式\">#</a> 基本格式</h1>\n<p>格式： <code>sed options script file</code> 。</p>\n<p>为了更好理解，举个例子。</p>\n<p>先创建一个数据文件 <code>data</code> ，其中包含<strong> 6 行 'cat'</strong>。然后我们希望将 'cat' 替换为 'dog'。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/dog/'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># ‘s/cat/dog/’是后者替换前者</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 此次命令没有使用选项，scirpt 就是's/cat/dog' file 就是 data</span></pre></td></tr></table></figure><p><code>sed</code>  命令非常快。处理一行显示一行，但是 <code>sed</code>  并不会修改文件原始数据，只是将结果传给 <code>STDOUT</code>  而已，当然，也可以重定向。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/big cat/'</span> data <span class=\"token operator\">></span> result</pre></td></tr></table></figure><p><code>sed</code>  可以执行多个命令，使用 <code>-e</code>  选项，多个命令分号隔开，并且分号紧靠上一个命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/brown/green/; s/dog/cat/'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者是这样，shell 一旦发现封尾的单引号，就会执行命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> s/brown/green</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>> s/fox/cat</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>> '</span> data</pre></td></tr></table></figure><p>如果要执行的命令太多，可以放在文件中，使用 <code>-f</code>  选项，该选项会在处理输入时，将文件中指定的命令添加到已有的命令中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-f</span> script.sed data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 为避免混淆，一般将 sed 的命令文件后缀写为.sed</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 例子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> command.sed</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s/cat/dog/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s/Jack/Mark/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-f</span> command.sed data</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>dog Mark</pre></td></tr></table></figure><p>关于 <code>s</code>  替换命令，还有其他选项</p>\n<ul>\n<li><code>sed 's/cat/dog/' data</code>  只会替换每行第一处 <code>cat</code> 。如果想在第 <code>n</code>  处替换， <code>s/cat/dog/n'</code> 。</li>\n<li><code>g</code>  选项，所有匹配到的标记都会被替换。</li>\n<li><code>p</code>  选项，文本原先行内容替换后要打印出来： <code>sed -n 's/cat/dog/p' data</code> , 一般和 <code>-n</code>  配合使用， <code>-n</code>  禁止 <code>sed</code>  输出，配合 <code>p</code>  使用，就只会打印含有标记的文本。</li>\n<li><code>w file</code> , 将替换的结果写到文件中： <code>sed 's/cat/dog/w aim.txt' data</code> 。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/dog/w test_data'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> test_data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dog Jack</pre></td></tr></table></figure><p>有时候， <code>/</code>  使用起来比较麻烦，可以使用 <code>!</code>  来代替： <code>s!cat!dog!</code> 。</p>\n<h1 id=\"使用地址\"><a class=\"anchor\" href=\"#使用地址\">#</a> 使用地址</h1>\n<p>可以指定命令对某些特定的行数进行处理， <code>sed</code>  编辑器的行寻址有两种形式：</p>\n<ul>\n<li>数字表示行区间</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 对单行指定修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2s/cat/dog/'</span> data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 对行区间进行执行修改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,5s/cat/dog'</span> data <span class=\"token comment\"># 2~5 行被修改</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 美元符号 $</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,$s/cat/dog/'</span> data   <span class=\"token comment\"># 对 2 行及以下的数据执行命令</span></pre></td></tr></table></figure><ul>\n<li>文本模式来过滤出行， <code>/pattern/command</code> 。比如修改用户 <code>cyan</code>  的默认 <code>shell</code> 。匹配模式十分类似 <code>grep</code> ，固定文本作用有限，最常用的是使用正则表达式。 匹配模式十分类似 grep，固定文本作用有限，最常用的是使用正则表达式。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">grep</span> cyan /etc/passwd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan:x:1000:1000:cyan,,,:/home/cyan:/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$sed</span> <span class=\"token string\">'/cyan/s/bash/csh/'</span> /etc/psswd</pre></td></tr></table></figure><ul>\n<li>当有多条命令时候。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>address <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">#多条命令时，需要用 &#123;&#125; 来限定作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        command1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        command2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>> commands    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;'</span> data.txt</pre></td></tr></table></figure><h1 id=\"删除与修改\"><a class=\"anchor\" href=\"#删除与修改\">#</a> 删除与修改</h1>\n<p><code>sed</code>  可以替换，也可以删除，使用 <code>d</code>  命令： <code>sed '3d' data</code> ，和行寻址一起使用发挥最大作用。输出到 STDOUT 的结果是删除指定行之后的剩余文本。</p>\n<p>如果我希望删除某个区间的文本（使用文本匹配）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>num <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>num end</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>num <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>num start again</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>kk</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>nn</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 执行命令：sed '/start/,/end/d' data</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 结果 num 4</span></pre></td></tr></table></figure><p>一开始遇到 <code>start</code> ，打开删除模式，持续删除，直到遇到 <code>end</code> ，关闭删除模式 (没遇到就一直删除）。再次遇到 <code>start</code>  时 ( <code>num start again</code> )，打开删除模式，并持续删除。</p>\n<p><code>sed</code>  编辑器是不会修改原始文件的，修改的只是从 <code>sed</code>  编辑器的输出中消失了。</p>\n<p>至于修改行的内容，之前的 <code>s</code>  命令需要匹配，而 <code>c</code>  命令是直接修改整行内容， <code>c--change</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'1c\\this is changed line'</span> data.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/num 1/c\\this is changed line'</span> data.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,3c\\this is changed line'</span> data.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># c 命令之后用的是反斜杠 \\, 并且没有封尾，也就是 line 后没有 \\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 第三个使用区间修改行，并不是将区间的每一行都修改为指定行，而是用该指定行替换数据流中区间的所有文本</span></pre></td></tr></table></figure><h1 id=\"插入和附加文本\"><a class=\"anchor\" href=\"#插入和附加文本\">#</a> 插入和附加文本</h1>\n<p>插入 <code>insert--i</code> : 会在指定行<strong>前</strong>增加一个行， <code>echo &quot;test line 2&quot; | sed 'i\\test line 1'</code> 。<br />\n附加 <code>append--a</code> : 会在指定行<strong>后</strong>增加一个行， <code>echo &quot;test line 2&quot; | sed 'a\\test line 1'</code> 。</p>\n<p>如果想要附加到行尾，只需要使用美元符号： <code>sed '$a\\new line' data</code> 。<strong>个人觉得美元符号是数据流最后一行的意思</strong>。<br />\n要插入（附加）多行数据，需要在每行之间使用 <code>\\</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'1i\\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> line 1\\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> line 2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> '</span> data</pre></td></tr></table></figure><h1 id=\"转换命令\"><a class=\"anchor\" href=\"#转换命令\">#</a> 转换命令</h1>\n<p><code>y</code>  命令是唯一可以处理单个字符的 <code>sed</code>  编辑器命令   <code>[address]y/inchars/outchars/</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'y/123/789/'</span> data</pre></td></tr></table></figure><p><code>inchars</code>  的第一个字符会被映射为 <code>outchars</code>  的第一个字符，以此类推，直到处理完指定字符。其中，如果两者长度不一样，会报错。<br />\n转换命令是全局命令，无法限定只转换在特定地方出现的字符 (以行为单位)，也就是<strong>一行所有的字符都要被转换</strong>。</p>\n<h1 id=\"打印命令\"><a class=\"anchor\" href=\"#打印命令\">#</a> 打印命令</h1>\n<p>之前使用 <code>s</code>  替换命令时，配合 <code>-n</code>  和 <code>p</code>  选项，打印出修改的行，还有些命令也能打印数据流信息。</p>\n<p><code>=</code>  命令打印<strong>行号</strong>，<strong>行号由数据流中的换行符来决定</strong>，每出现一个换行符，sed 编辑器就认为一行结束了。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'='</span> data</pre></td></tr></table></figure><p><code>l</code>  命令可以打印出数据流中的文本和不可打印的 ASCII 字符 (一般是标准 C 风格或八进制)， <code>l</code>  就是 <code>list</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'l'</span> data</pre></td></tr></table></figure><h1 id=\"处理文件\"><a class=\"anchor\" href=\"#处理文件\">#</a> 处理文件</h1>\n<ul>\n<li>写入文件： <code>[address]w filename</code> 。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'1,2w aim.txt'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\"># 在 aim.txt 追加</span></pre></td></tr></table></figure><ul>\n<li>读取文件： <code>[address]r filename</code> 。 允许将一个独立文件中的数据插入到数据流中，插入到指定行后。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'3r sources.txt'</span> data</pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/04/Shell/%E5%87%BD%E6%95%B0/",
            "url": "https://cecilia.cool/2022/08/04/Shell/%E5%87%BD%E6%95%B0/",
            "title": "函数",
            "date_published": "2022-08-03T16:46:24.000Z",
            "content_html": "<h1 id=\"创建函数\"><a class=\"anchor\" href=\"#创建函数\">#</a> 创建函数</h1>\n<p>格式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 格式 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-name function\">name</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcommands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 格式 2, 更推荐使用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function-name function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcommands</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 使用时只需要使用函数名即可 --name</span></pre></td></tr></table></figure><p>默认情况下，函数退出状态码是函数中最后一条命令返回的退出状态码，函数执行结束后，可以用标准变量 <code>$?</code>  来确定函数退出状态码。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># return 语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"please input the value:\"</span> value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token variable\">$value</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>退出状态码在 <code>0~255</code> ，否则就会返回错误值</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token string\">'abc'</span> <span class=\"token comment\"># 会报错：line 5: return: abc: numeric argument required</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fun</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 如果中间有其他命令，$? 就会被置 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span></pre></td></tr></table></figure><p>当然，如果希望从函数那得到一个任意对象，就像强类型语言那样 <code>return</code>  语句返回值可以用变量接收</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> $<span class=\"token punctuation\">[</span><span class=\"token variable\">$value</span>*2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">reslut</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>fun<span class=\"token variable\">`</span></span> <span class=\"token comment\">#或者是 $(fun)</span></pre></td></tr></table></figure><p>如此可以获得任何类型的函数输出，并将其保存在变量中。</p>\n<h1 id=\"函数中使用变量\"><a class=\"anchor\" href=\"#函数中使用变量\">#</a> 函数中使用变量</h1>\n<p><strong>传参：</strong></p>\n<ul>\n<li><code>bash shell</code>  会将函数当成一个小型脚本来对待，也就是说，可以传递参数，如同脚本一样。</li>\n<li>如同脚本一样，对于传入参数，依旧是使用 <code>$0,$1...</code> ， <code>$#</code> 是传入参数数量。 <code>value=$(fun 10 15)</code> , 参数直接写在后面即可。</li>\n<li>由于函数使用特殊参数环境变量作为自己的参数值，因此他无法直接获取脚本在命令行获取的参数值。</li>\n</ul>\n<p><strong>处理变量：</strong></p>\n<p>比较麻烦的就是变量的作用域。默认情况下，<strong>定义的变量都是全局变量</strong>，函数外定义的变量，函数内部也可以正常使用。函数内定义的变量函数外也可以使用。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fun</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr></table></figure><p>函数内部使用的任何变量都可以被声明成局部变量，只需要加上 <code>local</code>  关键字即可。</p>\n<p><code>local temp=$[$value + 2]</code> , 在函数内使用 <code>temp</code> ，不会影响主体脚本的 <code>temp</code>  的值。</p>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>one two three<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接 <code>$arr</code>  只会显示 <code>one</code> ，使用格式为： <code>$&#123;arr[1]&#125;</code> , 一次性全部显示，就是 <code>$&#123;arr[*]&#125;</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span>,3,4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;arr<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$i</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fun</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#结果：1,2,3,4</span></pre></td></tr></table></figure><h1 id=\"创建库\"><a class=\"anchor\" href=\"#创建库\">#</a> 创建库</h1>\n<p>总有一些方法，我在很多脚本文件中都会使用，为了避免每个脚本文件都写一次， <code>bash shell</code>  允许创建函数库文件，然后在多个脚本中引用。</p>\n<p>我们在运行一个脚本文件时，当前的 <code>shell</code>  会创建一个新的 <code>shell</code>  运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./testfile <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">89708</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--forest</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token number\">88948</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token number\">89708</span> pts/1    00:00:08  <span class=\"token punctuation\">\\</span>_ testfile</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">89710</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr></table></figure><p><code>shell</code>  函数仅仅在定义它的 <code>shell</code>  会内有效，所以如果在 <code>shell</code>  命令行界面的提示符下运行库函数脚本， <code>shell</code>  会创建一个新的 <code>shell</code>  运行。这个 <code>shell</code>  会重新定义库函数，当其他脚本想用时，是不能的。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./funs_file</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>哪怕在 <code>test</code>  中运行 <code>funs_file</code>  库文件，这些库函数，也只能在运行库文件的 <code>shell</code>  里面才会生效。</p>\n<h2 id=\"source命令\"><a class=\"anchor\" href=\"#source命令\">#</a> source 命令</h2>\n<p>该命令会在当前 <code>shell</code>  上下文执行命令，而不是创建一个新的 <code>shell</code> ，并且 <code>source</code>  命令有个快捷别名 -- 点操作符.  <code>./fun_file</code> 。</p>\n<p>编写一个脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr></table></figure><p>如果不使用 <code>source</code>  命令，那么 <code>var</code>  对于当前 <code>shell</code>  是不可见的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr></table></figure><p>使用之后</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">.</span> ./testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><h1 id=\"终端使用函数\"><a class=\"anchor\" href=\"#终端使用函数\">#</a> 终端使用函数</h1>\n<p>格式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 格式 1，分号结尾</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>echo <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">read</span> value<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 格式 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"adc\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>.bashrc</code>  文件定义函数：函数定义放在一个特殊的位置，每次启动新 <code>shell</code>  都会由 <code>shell</code>  重新在 <code>.bashrc</code>  中定义的函数，甚至可以在自己写的脚本中直接使用。</p>\n<p>关于 <code>.bashrc</code> ，就是个启动文件， <code>shell</code>  启动时会执行一下。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/04/Shell/%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/",
            "url": "https://cecilia.cool/2022/08/04/Shell/%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/",
            "title": "控制脚本",
            "date_published": "2022-08-03T16:21:37.000Z",
            "content_html": "<h1 id=\"信号\"><a class=\"anchor\" href=\"#信号\">#</a> 信号</h1>\n<p><code>Linux</code>  利用信号与运行在系统中的进程进行通信，常见的 <code>Linux</code>  系统信号：</p>\n<ul>\n<li>1-- <code>SIGHUP</code> -- 挂起进程</li>\n<li>2-- <code>SIGINT</code> -- 终止进程</li>\n<li>3-- <code>SIGQUIT</code> -- 停止进程</li>\n<li>9-- <code>SIGLIKILL</code> -- 无条件终止进程</li>\n<li>15-- <code>SIHTERM</code> -- 尽可能终止进程</li>\n<li>17-- <code>SIGSTOP</code> -- 无条件停止进程，但不是终止</li>\n<li>18-- <code>SIGTSTP</code> -- 停止或暂停进程，但不是终止</li>\n<li>19-- <code>SIGCONT</code> -- 继续运行停止的进程</li>\n</ul>\n<p><code>crtl+c</code>  会生成 <code>SIGINT</code>  信号，停止 <code>shell</code>  当前运行的所有进程。<br />\n <code>ctrl+z</code>  会生成 <code>SIGTSTP</code>  信号，停止 <code>shell</code>  中运行的任何进程。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>^Z</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>F S   <span class=\"token environment constant\">UID</span>     PID    <span class=\"token environment constant\">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0</span> S  <span class=\"token number\">1000</span>   <span class=\"token number\">30447</span>   <span class=\"token number\">30445</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">3559</span> do_wai pts/0    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0</span> T  <span class=\"token number\">1000</span>   <span class=\"token number\">33293</span>   <span class=\"token number\">30447</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">2789</span> do_sig pts/0    00:00:00 <span class=\"token function\">sleep</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">0</span> R  <span class=\"token number\">1000</span>   <span class=\"token number\">33294</span>   <span class=\"token number\">30447</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">3623</span> -      pts/0    00:00:00 <span class=\"token function\">ps</span></pre></td></tr></table></figure><p><code>S</code>  列中， <code>T</code>  标志就是进程被暂停。使用 <code>ps</code>  获得希望杀死的进程的 <code>PID</code> ，使用 <code>kill -9 PID</code> 。</p>\n<h2 id=\"trap命令\"><a class=\"anchor\" href=\"#trap命令\">#</a> trap 命令</h2>\n<p><code>trap</code>  命令：允许指定 <code>shell</code>  脚本监看并从 <code>shell</code>  中拦截的 <code>Linux</code>  信号。如果脚本收到了 <code>trap</code>  命令中列出的信号，该信号不再由 <code>shell</code>  处理。而是本地处理。</p>\n<p>其使用格式为： <code>trap commands signals</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo 'I have trapped ctrl-c'\"</span> SIGINT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sleep</span> <span class=\"token number\">1000</span></pre></td></tr></table></figure><p>在睡眠期间使用 <code>ctrl+c</code>  就会打印这句话。</p>\n<p>在很多程序中，想要实现程序正常运行结束或者外部发送信号退出，都会打印 <code>Goodby...</code> ，可以加上这句话</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo 'Goodby...'\"</span> Exit</pre></td></tr></table></figure><p><code>trap</code>  可以修改或是移除，其重点就是<strong>先到先占位</strong>，比如第一行设置了 <code>trap</code>  指令，在第 20 行修改或移除了该信号，那么第一行 <code>trap</code>  的只会在 1~19 行生效。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除，单（双）短横线都可以</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token parameter variable\">--SIGINT</span></pre></td></tr></table></figure><h1 id=\"后台模式\"><a class=\"anchor\" href=\"#后台模式\">#</a> 后台模式</h1>\n<p>最开始就提到过，在运行脚本时加上 <code>&amp;</code> ，就能将进程置入后台。后台模式中，进程不会和终端会话上的 <code>STDIN</code> ， <code>STDOUT</code> ， <code>STDERR</code>  关联 。</p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p><code>shell</code>  脚本的基本编程到此为止，之后我们会进入高级 <code>shell</code>  脚本编程，其中会涉及到函数，著名的流编辑器 <code>sed</code>  和 <code>gawk</code> ，以及正则表达式四个主要部分。然后就可以结束此次 <code>Linux</code>  与 <code>shell</code>  编程的学习了。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/03/Shell/%E5%91%88%E7%8E%B0%E6%95%B0%E6%8D%AE/",
            "url": "https://cecilia.cool/2022/08/03/Shell/%E5%91%88%E7%8E%B0%E6%95%B0%E6%8D%AE/",
            "title": "呈现数据",
            "date_published": "2022-08-03T03:30:29.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>之前关于标准输入，输出重定向的文章，我提到开始接触流，并且在文中讲解时使用也是以流来具体化重定向的作用，但是讲解的非常不严谨。本文相当于对重定向深入讲解，甚至可以自定义重定向。</p>\n<h1 id=\"标准文件描述符\"><a class=\"anchor\" href=\"#标准文件描述符\">#</a> 标准文件描述符</h1>\n<p><code>Linux</code>  系统将每个对象当作文件处理（有句话就是一切皆文件），包括输入和输出，用文件描述符<strong>标识</strong>每个文件对象。文件描述符是一个<strong>非负整数</strong>，可以唯一表示会话中打开的文件。出于特殊目的， <code>bash shell</code>  在每个进程，只保留了 3 个文件标识符 (0,1,2)</p>\n<ul>\n<li><code>STDIN</code> -- 标准输<strong>入</strong>。对于终端界面，<strong>标准输入是键盘</strong>。 <code>shell</code>  从 <code>STDIN</code>  对应的键盘获得输入。使用输入重定向符号 <code>&lt;</code> ， <code>Linux</code>  会使用重定向指定的文件来替换标准文件描述符，会读取文件并提取数据，如同是在键盘上键入的。</li>\n<li><code>STDOUT</code> -- 标准输<strong>出</strong>。同标准输入类似，shell 所有输出都会被定向到标准输出中，也就是显示器。</li>\n<li><code>STDERR</code> -- 错误消息对于错误消息，<strong>也是重定向到显示器的</strong>，但是错误消息和一般标准输出是分开的。比如： <code>ls -l badfile &gt; test</code> ，如果没有 <code>badfile</code>  就会报错，但是错误信息并没有给 <code>test</code> 。</li>\n</ul>\n<p>我们之前知道如何重定向标准输入和标准输出，现在讲解如何重定向错误信息。</p>\n<ul>\n<li>只重定向错误：将 <code>STDERR</code>  文件描述符的值 <code>(2)</code>  紧紧放在重定向符号前， <code>ls -al badfile 2&gt; test</code> 。但是这种方法，如果该命令的输出既包含错误信息，也包含标准输出，那么标准输出还是会输出到屏幕中。</li>\n<li>重定向错误和数据：我们肯定不希望重定向的数据和错误信息在同一文件中（难道你希望错误日志里面还给你保存几句莫名其妙的打印语句吗），所以必须使用两个重定向符号，需要在符号面前放上各自文件描述符值： <code>ls -al test test2 test3 badtest 2&gt; testSTDERR 1&gt; testSTDOUT</code> （其中 <code>test*</code>  文件都存在， <code>badtest</code>  不存在）。   当然，也可以将数据和错误重定向到同一文件：  <code>ll n_File bad_File new_File &amp;&gt; STD_ALL</code> 。 <code>bash shell</code>  自动赋予了错误消息更高的优先级，方便集中浏览错误信息，也就是说， <code>ll A B C</code>  中 <code>B</code>  文件不存在，那么输出时会优先输出关于 <code>B</code>  的错误信息。</li>\n</ul>\n<h1 id=\"脚本中的标准重定向输出和输入\"><a class=\"anchor\" href=\"#脚本中的标准重定向输出和输入\">#</a> 脚本中的标准重定向输出和输入</h1>\n<p>对于三个标准文件描述符，一定要记住，使用 <code>exec</code>  命令时数字放在箭头左边。当数字出现在右边，要用 <code>&amp;</code>  符号。</p>\n<h2 id=\"临时重定向\"><a class=\"anchor\" href=\"#临时重定向\">#</a> 临时重定向</h2>\n<p>在脚本中生成错误消息，可以将单独的一行输出重定向到 <code>STDERR</code> ，不同的是，在脚本中，格式为 <code>&gt;&amp;2</code> 。 <code>echo &quot;This is error&quot; &gt;&amp;2</code> ，这样，该行就会指向 <code>STDERR</code>  的位置，也就类似于终端上的错误信息一样。</p>\n<p>这种操作可以用于检测脚本运行时传入的选型或者参数是否正确，如果不正确就可以通过 <code>&gt;&amp;2</code>  来生成错误信息。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is error\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is normal\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 运行脚本，并将脚本的错误信息重定向到 result1 文件中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>./test <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> result1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>This is normal</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> result1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>This is an error</pre></td></tr></table></figure><h2 id=\"永久重定向\"><a class=\"anchor\" href=\"#永久重定向\">#</a> 永久重定向</h2>\n<p>上面的临时重定向，比如我一个脚本有很多行生成错误信息并需要重定向，而每一行都是用 <code>&gt;&amp;2</code>  太麻烦了，那么就可以使用 <code>exec</code>  命令来进行永久重定向。</p>\n<p><code>exec</code>  命令告诉 <code>shell</code>  在脚本中执行期间重定向某个特定文件描述符。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> STD_output_file</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 那么脚本中该命令之下的所有标准输出都重定向到了 STD_output_file 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 同理，改变标准输入，这对于从待处理文件中读取数据有很大帮助</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span> STD_input_file</pre></td></tr></table></figure><h1 id=\"自定义重定向\"><a class=\"anchor\" href=\"#自定义重定向\">#</a> 自定义重定向</h1>\n<p><code>Linux</code>  系统本来每个进程都有<strong> 9 个</strong>文件描述符，3 个标准，剩下 6 个都可以用于自定义，<strong>这 6 个可以任意作为输入还是输出</strong>。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span> testout</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a data\"</span><span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果使用 >> 就是追加模式</span></pre></td></tr></table></figure><p>如果你想恢复一个被重定向的文件描述符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>></span><span class=\"token file-descriptor important\">&amp;1</span>   <span class=\"token comment\">#3 指向 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>testout</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;3</span></pre></td></tr></table></figure><p>创建<strong>读写</strong>文件描述符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>&lt;></span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 输入输出时，文件指针是共享的。同时注意 >> 的追加模式与该特性的使用</span></pre></td></tr></table></figure><p>关闭文件描述符时，一般创建了新的输入输出文件描述符，脚本退出时， <code>shell</code>  就会自动关闭它们。手动关闭： <code>exec 3&gt;&amp;-</code> 。一旦关闭，就不能在写入 / 读取数据，否则就会报错。</p>\n<h1 id=\"lsof命令\"><a class=\"anchor\" href=\"#lsof命令\">#</a> lsof 命令</h1>\n<p>网上给的知识有些凌乱，甚至有些错误，所以我会总结几篇文章，最后给一下参考。</p>\n<p><code>lsof--list open files</code> ，列出当前系统已经打开的所有文件，一般 <code>lsof</code>  命令位于 <code>/usr/bin/losf</code>  或者是 <code>/usr/sbin/lsof</code> 。因为终端运行时，会有很多文件被打开使用，如果直接使用 <code>lsof</code>  会出现很多结果，我们在使用时一定要灵活使用相关的选项来控制输出。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:center\">对给的选项进行<strong>与</strong>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-p&lt;pid&gt;</td>\n<td style=\"text-align:center\">列出指定进程号所打开的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d &lt;文件号&gt;</td>\n<td style=\"text-align:center\">列出占用该文件号的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+d &lt;目录&gt;</td>\n<td style=\"text-align:center\">列出目录下被打开的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c &lt;进程名&gt;</td>\n<td style=\"text-align:center\">列出指定进程所打开的文件</td>\n</tr>\n</tbody>\n</table>\n<p>根据上面的部分选项，我们使用一下该命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$$</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">0,1</span>,2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>COMMAND   PID <span class=\"token environment constant\">USER</span>   FD   TYPE DEVICE SIZE/OFF NODE NAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">bash</span>    <span class=\"token number\">29075</span> cyan    0u   CHR  <span class=\"token number\">136,0</span>      0t0    <span class=\"token number\">3</span> /dev/pts/0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">bash</span>    <span class=\"token number\">29075</span> cyan    1u   CHR  <span class=\"token number\">136,0</span>      0t0    <span class=\"token number\">3</span> /dev/pts/0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">bash</span>    <span class=\"token number\">29075</span> cyan    2u   CHR  <span class=\"token number\">136,0</span>      0t0    <span class=\"token number\">3</span> /dev/pts/0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 变量 $$ 表示当前 shell 的 pid</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># COMMAND: 正在运行的命令名的前 9 个字符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># FD: 文件描述符号以及访问类型 (r-- 读，w-- 写，u-- 读写)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># TYPE: 文件的类型 (CHR-- 字符型，BLK-- 块型，DIR-- 目录，REG-- 常规文件)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># NAME：文件描述符所使用的文件的完整路径名</span></pre></td></tr></table></figure><p>现在编写一个简单的脚本 <code>test</code> ，本文主要是讲解文件描述符。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>></span> four_data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#死循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>使用 <code>&amp;</code>  将该脚本置入后台运行： <code>./test&amp;</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./test<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">88214</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">88084</span> pts/3    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">88214</span> pts/3    00:00:19 <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">88218</span> pts/3    00:00:00 <span class=\"token function\">ps</span></pre></td></tr></table></figure><p>再使用 <code>lsof</code>  来查看使用了哪些文件描述符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">88214</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>COMMAND   PID <span class=\"token environment constant\">USER</span>   FD   TYPE DEVICE SIZE/OFF   NODE NAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">test</span>    <span class=\"token number\">88214</span> cyan    4w   REG    <span class=\"token number\">8,5</span>        <span class=\"token number\">0</span> <span class=\"token number\">935362</span> /home/cyan/Templates/four_data</pre></td></tr></table></figure><p><code>-p 88214</code>  是寻找进程为 <code>pid=88214</code>  的进程打开的文件， <code>-d 4</code>  找到使用 <code>4</code>  文件描述符的文件， <code>-a</code>  对 <code>-p 88214</code>  和 <code>-d 4</code>  进行与运算。</p>\n<p>所以，你也可以尝试以下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-p</span> pid</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 查看这个进程的文件到底占用了哪些描述符</span></pre></td></tr></table></figure><p>完成案例讲解，将 <code>test</code>  的进程杀死</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">kill</span> <span class=\"token number\">88214</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">88084</span> pts/3    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">88243</span> pts/3    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Terminated              ./test</pre></td></tr></table></figure><p><code>lsof</code>  命令很强大，这里我们只是用来查看文件描述符，如果你想要深入了解，可以参考以下文章</p>\n<blockquote>\n<p>Linux 查看端口占用情况：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2xpbnV4LWNoZWNrLXBvcnQtdXNhZ2UuaHRtbA==\">https://www.runoob.com/w3cnote/linux-check-port-usage.html</span></p>\n<p>lsof 命令详解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2xhdXNhZ2UvcC8xNDk5NTA0Mi5odG1s\">https://www.cnblogs.com/klausage/p/14995042.html</span> （其实并不是很详细）</p>\n<p>lsof 入门：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucWllc2VvLmNvbS8xNjI4OTYuaHRtbA==\">https://www.qieseo.com/162896.html</span></p>\n</blockquote>\n<h1 id=\"阻止命令输出\"><a class=\"anchor\" href=\"#阻止命令输出\">#</a> 阻止命令输出</h1>\n<p><code>Linux</code>  有一个文件叫 <code>null(/dev/null)</code> ， <code>shell</code>  输出到 <code>null</code>  文件的任何数据都不会被保存，全部都被丢掉。所以，不希望后台输出错误信息时， <code>shell</code>  发送电子邮件给进程属主的话，就将 <code>STDERR</code>  重定向到 <code>null</code> 。 <code>null</code>  文件可以快速清除现有文件中的数据而不需要删除文件再重新创建 <code>cat /dev/null &gt; testfile</code> ，类似于清空日志文件。哦，其实我个人更喜欢 <code>echo &quot;&quot; &gt; testfile</code> 。</p>\n<h1 id=\"创建临时文件\"><a class=\"anchor\" href=\"#创建临时文件\">#</a> 创建临时文件</h1>\n<p><code>/tmp</code>  目录是 <code>Linux</code>  用来存放不永久保留的文件，大部分 <code>Linux</code>  发行版配置了系统在启动时自动删除 <code>/tmp</code>  目录的所有文件。任何用户账户都有权限在 <code>/tmp</code>  读写。<br />\n单独 <code>mktemp</code>  命令可以在 <code>/tmp</code>  目录中创建一个唯一的临时文件。 <code>shell</code>  会创建该文件，但不是使用默认的 <code>umask</code> ，会将文件读和写权限分给属主，并将你设为属主。但是其他人没法访问 (root 除外)。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/tmp/tmp.thPVXNPVJp</pre></td></tr></table></figure><p>也可以自定义文件名，但是会在当前目录下创建该文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mktemp 会用 6 个字符替换 6 个 X，保证文件名唯一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp test.XXXXXX</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>test.k5CvV0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 在脚本中，一般将创建的文件名保存在变量中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp test.XXXXXX<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>还可以使用选项</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在 /tmp 下创建，返回全路径名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp <span class=\"token parameter variable\">-t</span> test.XXXXXX</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/tmp/test.LRNlpY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># -d 选项创建临时目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp <span class=\"token parameter variable\">-d</span> dir.XXXXXX</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dir.Adr0Q6</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-t</span> dir.XXXXXX</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/tmp/dir.H9rIut</pre></td></tr></table></figure><h1 id=\"记录消息\"><a class=\"anchor\" href=\"#记录消息\">#</a> 记录消息</h1>\n<p><code>tee</code>  命令：<br />\n相当于管道的 <code>T</code>  型接头，将从 <code>STDIN</code>  过来的数据同时发送到 <code>STDOUT</code>  和 <code>tee</code>  命令行所指定的文件名： <code>tee testfile</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$  <span class=\"token function\">date</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2022</span>年 08月 03日 星期三 <span class=\"token number\">15</span>:51:57 CST</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> testfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2022</span>年 08月 03日 星期三 <span class=\"token number\">15</span>:51:57 CST</pre></td></tr></table></figure><p><code>tee</code>  每次都会覆盖文件内容， <code>-a</code>  选型是追加模式： <code>who | tee -a testfile</code> 。</p>\n<h1 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h1>\n<p>下面脚本涉及 <code>sql</code>  语句，如果你不会，可以跳过。该脚本主要是从.csv 文件中读取数据快速生成 <code>sql</code>  执行文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 文件名 create_sql_file</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">outfile</span><span class=\"token operator\">=</span><span class=\"token string\">'members.sql'</span> <span class=\"token comment\"># 要输出的文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">','</span> <span class=\"token comment\"># 重新定义分隔符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> lname fname address city state <span class=\"token function\">zip</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">cat</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$outfile</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>INSERT INTO members (lname,fname,address,city,state,zip) VALUES</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>('<span class=\"token variable\">$lname</span>','<span class=\"token variable\">$fname</span>','<span class=\"token variable\">$address</span>','<span class=\"token variable\">$city</span>','<span class=\"token variable\">$state</span>','<span class=\"token variable\">$zip</span>')</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token comment\"># read 的标准输入重定向到 $&#123;1&#125; 文件。</span></pre></td></tr></table></figure><p>直接使用 <code>cat &lt;&lt; file</code>  可以追加数据到文件中，然后使用 <code>ctrl+d</code>  结束。也可以使用 <code>&lt;&lt; 结束符</code> ，通过输入结束符来结束输入。</p>\n<p>我们写一个 <code>mebers.csv</code>  数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> members.csv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Cyan,Jack,US,qiqo,iasui,iwah</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Mike,Smith,Japen,isaui,uwif,ianas</pre></td></tr></table></figure><p>然后运行脚本生成 <code>sql</code>  文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./create_sql_file members.csv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> members.sql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INSERT INTO members <span class=\"token punctuation\">(</span>lname,fname,address,city,state,zip<span class=\"token punctuation\">)</span> VALUES</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'Cyan'</span>,<span class=\"token string\">'Jack'</span>,<span class=\"token string\">'US'</span>,<span class=\"token string\">'qiqo'</span>,<span class=\"token string\">'iasui'</span>,<span class=\"token string\">'iwah'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INSERT INTO members <span class=\"token punctuation\">(</span>lname,fname,address,city,state,zip<span class=\"token punctuation\">)</span> VALUES</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'Mike'</span>,<span class=\"token string\">'Smith'</span>,<span class=\"token string\">'Japen'</span>,<span class=\"token string\">'isaui'</span>,<span class=\"token string\">'uwif'</span>,<span class=\"token string\">'ianas'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/02/Shell/%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/",
            "url": "https://cecilia.cool/2022/08/02/Shell/%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/",
            "title": "处理用户输入",
            "date_published": "2022-08-02T14:44:02.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>我们之前只是讲了脚本如何输出，也就是 <code>echo</code> ，本文会讲解脚本如何处理用户的输入。同时我们会涉及到另外一些变量的讲解。</p>\n<h1 id=\"位置参数\"><a class=\"anchor\" href=\"#位置参数\">#</a> 位置参数</h1>\n<p>我们之前使用过许多命令，他们有些可以接收若干个参数，这其实是通过位置参数来实现的。</p>\n<p><code>$0</code>  是程序名， <code>$1~$9</code>  是第 <code>1~9</code>  个参数，超过 9 时，就要使用 <code>$&#123;&#125;</code> ，比如 <code>$&#123;10&#125;</code> ，这样，就允许在运行时加入任意个参数。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt var1 var2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>./tmp.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>var1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>var2</pre></td></tr></table></figure><p><code>$0</code>  是命令行输入的程序名，以绝对 (相对) 路径运行， <code>$0</code>  就是绝对 (相对) 路径。该特性会对脚本造成不同程度的影响，所以可以使用 <code>basename</code>  命令，只会返回不包含路径的脚本名： <code>name=$(basename $0)</code>        ​ <code>$()</code>  是命令替换。<br />\n注：</p>\n<ul>\n<li>在位置参数使用时，有可能并没有输入这个参数，所以在使用前需要测试参数： <code>if [ -n &quot;$1&quot; ]</code>   测试变量是否存在，<strong> 必须要加引号</strong>。</li>\n<li><code>$#</code> 是含有脚本运行时携带的命令行参数个数， <code>$@</code> 包含所有参数，当作同一字符串多个独立单词， <code>$*</code>  是同一字符串，所有参数看作一个单词。</li>\n<li>位置变量中，想要将数字使用变量代替 (比如 <code>$1</code> )： <code>$(!var)</code>  其中 var 值为 1, <code>$&#123;!#&#125;</code>  表示最后一个参数， <code>$&#123;&#125;</code>  中不能使用 <code>$</code>  而是使用 <code>!</code>  代替。</li>\n</ul>\n<p>这几个参数的使用和上述例子差不多，此处不再赘述。</p>\n<h1 id=\"移动变量\"><a class=\"anchor\" href=\"#移动变量\">#</a> 移动变量</h1>\n<p><code>shift</code>  命令会默认将所有位置参数都向左移动一位，也就是 <code>$1</code>  的值变成了 <code>$2</code> 。 <code>$0</code>  的值始终不会变。使用 shift 是遍历位置参数的一个好方法</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># demonstrating the shift command </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Parameter #<span class=\"token variable\">$count</span> = <span class=\"token variable\">$1</span>\"</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$count</span> + <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token builtin class-name\">shift</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>也可以给 shift 传递一个参数，指明参数移动的距离。</p>\n<h1 id=\"getopt命令\"><a class=\"anchor\" href=\"#getopt命令\">#</a> getopt 命令</h1>\n<p>说实话，这部分当时书上讲得挺让我难受的，痛苦.jpg。</p>\n<p><code>getopt</code>  命令可以接受一系列任意形式的<strong>命令行选项和参数</strong>，并将它们转换成适当的格式。说白了，该函数就是用来<strong>解析</strong>命令行选项参数的。</p>\n<p>使用： <code>getopt optstring parameters</code> 。</p>\n<p><code>optstring</code>  定义了命令可以接受的命令行有效的<strong>选项字母</strong>（要分析的参数），在每个需要参数值的选项字母后面加一个冒号，其参数紧跟在选项后面或者隔一个空格；如果选项字母后面加了 2 个冒号，则参数和选项之间不能有空格。 <code>getopt</code>  会基于定义的 <code>optstring</code>  解析提供的参数。</p>\n<p><code>paramters</code>  是实际的参数列表。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 举个例子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~$ getopt ab:cd <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-b</span> test1 <span class=\"token parameter variable\">-cd</span> test2 test3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-b</span> test1 <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-d</span> -- test2 test3</pre></td></tr></table></figure><p>上面例子可以看到， <code>optstring</code>  是 <code>ab:cd</code> ，规定了命令可以接受的有效的选项 <code>a,b,c,d</code> 。 <code>b</code>  的后面有冒号，所以 <code>-b</code>  选项后面必须跟一个参数，例子中是 <code>test1</code> 。 <code>-a -b test1 -cd test2 test3</code>  是 <code>parameters</code> ，里面出现的选项不能是 <code>optstring</code>  之外的选项。</p>\n<p>注意，它会自动将 <code>-cd</code>  选项分为两个单独的选项，并<strong>插入双破折号</strong>来分隔行中的额外参数。</p>\n<p>为了帮你更好理解这个命令，我们会写一个脚本，但是在这之前，我希望你能知道 <code>set</code>  命令。该命令会将位置参数设置为固定的值</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span> <span class=\"token variable\">$3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> -- 参数1 参数2 参数3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span> <span class=\"token variable\">$3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./new_File para1 para2 para3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>para1 para2 para3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>参数1 参数2 参数3</pre></td></tr></table></figure><p>现在写一个脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#set -- 会将命令行参数替换成 set 命令的命令行值，挺重要的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#-q 可以去掉报错信息，$@是得到脚本后面跟着的参数（字符串形式，同一个字符串多个单词）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> -- <span class=\"token variable\"><span class=\"token variable\">$(</span>getopt <span class=\"token parameter variable\">-q</span> ab:cd <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token keyword\">in</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    -a<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -a option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    -b<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">param</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -b option,with parameter value <span class=\"token variable\">$param</span>\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">shift</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    -c<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -c option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    --<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">shift</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin class-name\">break</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    *<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span> is not an option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token builtin class-name\">shift</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>所以，我们平时使用的命令的选项 + 参数，其原理差不多就是这样的（当然不排除更复杂的）。(⊙﹏⊙)，我觉得加上这个脚本例子，你应该很明白 <code>getopt</code>  到底是干什么的了吧。</p>\n<h1 id=\"getopts命令\"><a class=\"anchor\" href=\"#getopts命令\">#</a> getopts 命令</h1>\n<p>没错，我当时也很难受，费工夫理解 <code>getopt</code>  之后，又来一个。</p>\n<p>该命令内建于 <code>bash shell</code> ，比 <code>getopt</code>  多了一些扩展功能。使用格式为： <code>getopts optstring variable</code> <br />\n<strong> 每次只处理命令行一个参数</strong>，处理完所有参数后，就会退出并返回一个大于 0 的退出码。</p>\n<ol>\n<li>如果要想 <code>getiopt -q</code>  那样去掉错误信息，需要在 <code>optstring</code>  前加上一个冒号。</li>\n<li><code>getopts</code>  命令会将当前参数（选项）保存在命令行中定义的 <code>variable</code>  中</li>\n<li><code>getopts</code>  命令会用到两个环境变量。选项如果需要一个参数值， <code>OPTARG</code>  环境变量就会保存这个值。 <code>OPTIND</code>  环境变量保存参数列表中 <code>getopts</code>  正在处理的参数位置。</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 根据第 2 点，当前选项会被保存在 opt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">getopts</span> :ab:c opt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$opt</span>\"</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 我写的是 a 而不是 - a</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -a option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        b<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -b option,with value <span class=\"token variable\">$OPTARG</span>\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 选项后的参数值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        c<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -c option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        *<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Unkown option:<span class=\"token variable\">$opt</span>\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>如果我给的真实的参数列表为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-btest1</span> <span class=\"token parameter variable\">-c</span> test2 test3</pre></td></tr></table></figure><p>得到的结果就是</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Found the <span class=\"token parameter variable\">-a</span> option</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Found the <span class=\"token parameter variable\">-b</span> option,with value test1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Found the <span class=\"token parameter variable\">-c</span> option</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:4</pre></td></tr></table></figure><p>从该脚本中，我们看到了 <code>getopts</code>  如何根据两个系统变量进行参数控制的。我们不妨将脚本内容改一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 根据第 2 点，当前选项会被保存在 opt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">getopts</span> :ab:c opt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\"># case \"$opt\" in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">#    a) echo \"Found the -a option\" ;;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">#    b) echo \"Found the -b option,with value $OPTARG\" ;; # 选项后的参数值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">#    c) echo \"Found the -c option\" ;;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">#   *) echo \"Unkown option:$opt\";;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">#esac</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$opt</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>参数列表不变</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-btest1</span> <span class=\"token parameter variable\">-c</span> test2 test3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:4</pre></td></tr></table></figure><p>在 <code>opt=c</code>  之后还进行了一次循环，此时 opt 应该是到了其他参数（ <code>test2,test3</code> ）那里，但是不会存储相应的值， <code>opt</code>  只存储选项的值。</p>\n<h1 id=\"read命令\"><a class=\"anchor\" href=\"#read命令\">#</a> read 命令</h1>\n<p><code>read</code>  命令用于获取用户输入：</p>\n<ul>\n<li><code>read name</code>  输入的数据就会保存在 <code>name</code>  中。</li>\n<li><code>read -p &quot;Please enter your age:&quot; age</code> ，  <code>-p</code>  参数允许指定输入提示语句。</li>\n<li><code>read -p &quot;Please enter your name:&quot; firstname lastname</code>  可以指定多个变量，如果输入大于变量个数，就会将剩下的输入全部保存在最后一个变量中。</li>\n<li>不指定保存变量时，会将输入保存在环境变量 <code>REPLY</code>  中。</li>\n<li><code>read -t 5 age</code>  设置超时选项，如果规定时间没有完成输入，就会继续执行，单位是秒。</li>\n<li><code>read -n1 -p &quot;Please enter [Y/N] to continue:&quot; ans</code> ，可以通过 <code>-n</code>  对输入长度进行限制，数字可以与选项 <code>-n</code>  一起使用。给的例子中并且只要按下单个字符后，不需要按回车就会继续执行。</li>\n<li><code>read -s -p &quot;Please enter the password:&quot; passwd</code> ， <code>-s</code>  会让输入时数据隐藏。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 从文件中读取，每次调用 read 命令就会读取一行文本，当文件没有内容时，read 就会退出并返回非 0 退出状态码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 文件数据传给 read，最常见的就是使用 cat，将结果通过管道直接传给含有 read 命令的 while 命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span> data.txt <span class=\"token operator\">|</span> <span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> line</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Line <span class=\"token variable\">$count</span>:<span class=\"token variable\">$line</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token variable\">$count</span> + <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Finished proceessign the file\"</span></pre></td></tr></table></figure><h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>请多加练习。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(2)/",
            "url": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(2)/",
            "title": "构建基本脚本(2)",
            "date_published": "2022-08-01T10:09:46.000Z",
            "content_html": "<h1 id=\"数学运算\"><a class=\"anchor\" href=\"#数学运算\">#</a> 数学运算</h1>\n<p>在脚本中进行数学运算有很多种方式，你可以从下面选几种喜欢的</p>\n<ul>\n<li><code>exper</code>  命令，支持基本的（逻辑、比较）运算符，对于有歧义的符号 (如 <code>*</code> )，需要用 <code>\\*</code> ，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWV4cHIuaHRtbA==\">传送门</span>。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># expr 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">expr</span> length “this is a test”\t<span class=\"token comment\">#计算字串长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">expr</span> <span class=\"token number\">14</span> % <span class=\"token number\">9</span>\t\t<span class=\"token comment\">#整数运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">expr</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">\\</span>* <span class=\"token number\">10</span>\t<span class=\"token comment\">#注意。参数和符号之间必须要有空格</span></pre></td></tr></table></figure><ul>\n<li><code>$[表达式]</code> ，更加方便，符号不会出现歧义，但是只能整数运算。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>+5<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li><code>bc</code>  计算器，实际上是一种编程语言， <code>-q</code>  可以不显示 <code>bash</code>  计算器冗长的欢迎信息。浮点运算是由内建变量 <code>scale</code>  控制的，必须将这个值设置为计算结果希望保留的小数位数 <code>scale</code>  默认是 0。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">bc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 欢迎信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">bc</span> <span class=\"token number\">1.07</span>.1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Copyright <span class=\"token number\">1991</span>-1994, <span class=\"token number\">1997</span>, <span class=\"token number\">1998</span>, <span class=\"token number\">2000</span>, <span class=\"token number\">2004</span>, <span class=\"token number\">2006</span>, <span class=\"token number\">2008</span>, <span class=\"token number\">2012</span>-2017 Free Software Foundation, Inc.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>This is <span class=\"token function\">free</span> software with ABSOLUTELY NO WARRANTY.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>For details <span class=\"token builtin class-name\">type</span> `warranty<span class=\"token string\">'.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1+3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>319+42</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>361</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cyan@cyan-virtual-machine:~$ bc -q</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>21/3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>7</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>#内建变量不能在外面修改</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cyan@cyan-virtual-machine:~$ echo $scale</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>cyan@cyan-virtual-machine:~$ bc -q</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>scale=3 #进入bc修改内建变量</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>21/3</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>7.000</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre># 还有一种修改内建变量的方法，常用于脚本中，格式为echo \"options;expression\" | bc</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>cyan@cyan-virtual-machine:~$ echo '</span><span class=\"token number\">21</span>/4<span class=\"token string\">' | bc</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>cyan@cyan-virtual-machine:~$ echo '</span>scale<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token number\">21</span>/4' <span class=\"token operator\">|</span> <span class=\"token function\">bc</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">5.2500</span></pre></td></tr></table></figure><p>可见，通过管道， <code>bc</code>  计算器还是挺好用的。再看一个输入重定向的例子</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">cat</span> math.dat</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">scale</span><span class=\"token operator\">=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">var2</span><span class=\"token operator\">=</span><span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">var3</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>var1/var3+var2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">bc</span> <span class=\"token operator\">&lt;</span> math.dat<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$result</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">29.2000</span></pre></td></tr></table></figure><p>有一点你可以看到，我们在 <code>bc</code>  中使用变量没有加 <code>$</code>  符号。最后，你也可以试试<strong>内联输入重定向</strong>，我想，应该没什么问题吧？</p>\n<h1 id=\"结构化语句\"><a class=\"anchor\" href=\"#结构化语句\">#</a> 结构化语句</h1>\n<p>该部分我就直接给格式了，你记住了就会使用。</p>\n<h2 id=\"选择语句\"><a class=\"anchor\" href=\"#选择语句\">#</a> 选择语句</h2>\n<p>我们如何对 <code>if</code>  中的条件进行判断？</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition1      <span class=\"token comment\">#(退出状态码是 0)   </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands_1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">elif</span> condition2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    commands_2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    commands_3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p><code>condition</code>  可以是一个命令的正确执行，也可以是字符串比较，数值比较，文件比较。</p>\n<p>判断 <code>condition</code>  的命令为 <code>test condtion</code>  或者 <code>[ condition ](必须有空格)</code> 。同样的，如果有多个 <code>condition</code>  可以使用 <code>&amp;&amp; , ||</code> 。</p>\n<p>举个例子</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token parameter variable\">-ge</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token parameter variable\">-le</span> <span class=\"token number\">190</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'执行if语句块'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'执行else语句块'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>执行if语句块</pre></td></tr></table></figure><p>再次声明，使用 <code>[]</code>  要加<strong>空格</strong>。</p>\n<h2 id=\"比较方式\"><a class=\"anchor\" href=\"#比较方式\">#</a> 比较方式</h2>\n<p><strong>数值比较</strong>： <code>n1 -eq n2</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号选项</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-eq</td>\n<td style=\"text-align:center\">equals(==)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gt</td>\n<td style=\"text-align:center\">greater than(&gt;)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ge</td>\n<td style=\"text-align:center\">greater equals(&gt;=)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-lt</td>\n<td style=\"text-align:center\">less than(&lt;)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-le</td>\n<td style=\"text-align:center\">less equals(&lt;=)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ne</td>\n<td style=\"text-align:center\">not equals(!=)</td>\n</tr>\n</tbody>\n</table>\n<p><code>if [ $val -gt 5]</code>  ，注意，bash shell 只能使用整数。</p>\n<p><strong>字符串比较</strong>：</p>\n<p>直接使用 <code>=,!=,\\&gt;,\\&lt;</code> (大于小于，必须使用转义，否则就会被认为是重定向)。 在比较测试中，<strong>大写字母 &lt; 小写字母</strong>，如 <code>a&gt;z&gt;A</code> 。而 <code>sort</code>  命令恰好相反， <code>sort</code>  使用的是系统本地化语言设置中定义的排序顺序。对于英语，<strong>本地化设置指定在排序顺序中，小写字母出现在大写字母前</strong>。</p>\n<p><code>-n</code>  和 <code>-z</code>  可以检查一个变量是否含有数据 (未被定义的变量默认长度为 0)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if<span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$val</span> <span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#如果 val 长度不为 0，就执行 then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>if<span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$val</span> <span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#如果 val 长度为 0，就执行 then，z--zero</span></pre></td></tr></table></figure><p><strong>文件比较</strong>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号选项</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-d file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是一个目录 (directory)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e file</td>\n<td style=\"text-align:center\">检查 file 是否存在 (exits)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否是一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否可读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否非空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-x file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否可执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-G file</td>\n<td style=\"text-align:center\">检查 file 是否存在并且默认组与当前用户相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-O file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否并属当前用户所有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">file1 -nt file2</td>\n<td style=\"text-align:center\">检查 file1 是否比 file2 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">file1 -ot file2</td>\n<td style=\"text-align:center\">检查 file1 是否比 file2 旧</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"case语句\"><a class=\"anchor\" href=\"#case语句\">#</a> case 语句</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> variable <span class=\"token keyword\">in</span>                            </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pattern1 <span class=\"token operator\">|</span> pattern2<span class=\"token punctuation\">)</span>    commands1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pattern3<span class=\"token punctuation\">)</span>   commands2<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>                         </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*<span class=\"token punctuation\">)</span> defalut commands3<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>                      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">esac</span>                                       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 例子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token environment constant\">$USER</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Bob <span class=\"token operator\">|</span> Mike<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number one\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Cyan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cyan\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Have not found\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure><h2 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h2>\n<h3 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">var</span> <span class=\"token keyword\">in</span> list         </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands                </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span>                    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#例子</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">test</span> <span class=\"token keyword\">in</span> Alabama Alaska Arizona Arkansas California</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> The state is <span class=\"token variable\">$test</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>$test</code>  变量在剩余的 <code>shell</code>  脚本一直有效并且保持着最后一个变量的值 (当然是可以修改的)</p>\n</li>\n<li>\n<p><code>list</code>  中单个元素出现了单引号，空格等，要么在这个单独变量外部直接再使用一对引号，要么直接使用 <code>\\</code>  转义字符</p>\n</li>\n<li>\n<p><code>list</code>  的获取，也可以用<strong>命令的输出 + 命令替换</strong>： <code>for var in $(cat file)</code> ，甚至是 <code>/home/cyan/test/*</code>  路径。当然，如果变量是文件名，要考虑文件名可能出现空格，那么在使用时就要使用引号： <code>&quot;$file&quot;</code> 。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 ls 指令，打印指定目录下的所有文件（当然这里目录固定为 home/cyan）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果想像 ls 路径那样传参数，需要用到之后的知识</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file_name</span> <span class=\"token keyword\">in</span> /home/cyan/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$file_name</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>/home/cyan/Desktop</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/home/cyan/Documents</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>/home/cyan/Downloads</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>/home/cyan/Files</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>/home/cyan/Music</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>/home/cyan/OSIntroduction</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>/home/cyan/Pictures</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>/home/cyan/Public</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>/home/cyan/shtool-2.0.8</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>/home/cyan/shtool-2.0.8.tar.gz</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>/home/cyan/snap</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>/home/cyan/Templates</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>/home/cyan/Videos</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>/home/cyan/vmware-tools-distrib</pre></td></tr></table></figure><ul>\n<li>在 <code>list</code>  中，各个元素之间的分隔符是由 <code>IFS</code> -- 内部字段分隔符决定的，一般会将<strong>空格，制表符，换行符</strong>作为默认字段分隔符如果想要更改分隔符，就必须在 <code>shell</code>  脚本 <code>for</code>  循环前面更改 <code>IFS</code> 。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jack bob cyan mike</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mary smith</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">name</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> data<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$name</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#得到的结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>jack</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bob</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cyan</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mike</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>mary</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>smith</pre></td></tr></table></figure><p>这是因为 <code>IFS</code>  默认的是空格，制表符，换行符。在遇到第一个空格时，就已经分隔了。如果想要只以换行符为分隔符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">oldIFS</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$IFS</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">$'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file_name</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> data<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$file_name</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$oldIFS</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>jack bob cyan mike</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mary smith</pre></td></tr></table></figure><p>C 语言风格的 for 循环</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span> <span class=\"token comment\"># i=$(expr $i+1)  i=$[$i + 1]   i=$(echo \"scale=0;$i + 1\" | bc)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h3 id=\"while循环\"><a class=\"anchor\" href=\"#while循环\">#</a> while 循环</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">test</span> conitions</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># test 的替代物 [] 需要两边空格，而 expr 的替代物 $[] 不需要两边空格</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># while 命令允许执行多个测试命令，但是只有最后一个测试命令的退出状态码会被用于决定什么时候结束循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#   比如：while [$var1 -ge 0]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#               echo $var1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#   就是一个死循环</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#注意，每个测试命令单独一行</span></pre></td></tr></table></figure><h3 id=\"until命令\"><a class=\"anchor\" href=\"#until命令\">#</a> until 命令</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token builtin class-name\">test</span> commands</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># until 语句，只有测试条件的退出码非 0，才会执行循环中列出的命令。</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(1)/",
            "url": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(1)/",
            "title": "构建基本脚本(1)",
            "date_published": "2022-08-01T02:11:11.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>之前在 <code>shell</code>  快速入门中已经讲了如何构建一个脚本，我们回顾一下：</p>\n<ul>\n<li>第一行要指定 shell 类型 <code>#!/bin/bash</code> 。</li>\n<li>完成基本的脚本构建后，增加执行权限 <code>chmod u+x 文件名(u是属主)</code> 。</li>\n<li>要取消 <code>echo</code>  的换行，就要使用 <code>-n</code>  参数 <code>echo -n &quot;abcd&quot;</code> 。</li>\n<li>使用美元符号 <code>$</code>  来引用变量，如果想单纯使用这个符号，要加上转义符 <code>\\$</code> 。</li>\n<li>在脚本中自行设置变量时，= 之间不能有空格，不然 shell 会认为是命令而不是变量 <code>var=100</code> 。</li>\n</ul>\n<p>本文会接着介绍其他与脚本编程相关的知识。</p>\n<h1 id=\"命令替换\"><a class=\"anchor\" href=\"#命令替换\">#</a> 命令替换</h1>\n<p><code>shell</code>  脚本最有用的特性之一就是可以<strong>从命令输出中提取信息</strong>，请 <code>get</code>  关键词，<strong>命令输出</strong>和<strong>提取信息</strong>。</p>\n<p>该特性有两种实现方式：</p>\n<ul>\n<li>使用反引号（就是 <code>Tab</code>  键上面那个）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#date 命令可以得到当前时间 cyan@cyan-virtual-machine:~/Templates$ cat new_File</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span> <span class=\"token operator\">></span> new_File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:42:33 CST</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:21:55 CST</pre></td></tr></table></figure><ul>\n<li>使用 <code>$()</code> ，有些 <code>shell</code>  不支持这种</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:23:19 CST</pre></td></tr></table></figure><p>命令替换会创建一个子 <code>shell</code>  来运行对应命令，子 <code>shell</code>  是由运行脚本的 <code>shell</code>  创建的一个独立的子 <code>shell</code> 。因此，该子 <code>shell</code>  所执行的命令是无法使用脚本中所创建的变量的。在命令行提示符下使用路径./ 来运行命令，也会创建子 <code>shell</code></p>\n<p>关于 <code>date</code>  命令，你如果希望得到自己希望的格式化结果</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">date</span> +%y-%m-%d<span class=\"token punctuation\">\\</span> %H:%M:%S</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">22</span>-08-01 <span class=\"token number\">10</span>:25:33</pre></td></tr></table></figure><h1 id=\"重定向\"><a class=\"anchor\" href=\"#重定向\">#</a> 重定向</h1>\n<p>从这里开始，你就算接触流这个东西了，输入流输出流，<strong>重定向就是对流的方向重新定义</strong>（你现在可以这么理解）。</p>\n<h2 id=\"标准输出重定向\"><a class=\"anchor\" href=\"#标准输出重定向\">#</a> 标准输出重定向</h2>\n<p>举一个例子， <code>echo</code>  将数据打印到屏幕上（标准输出流），那么我们可以对 <code>echo</code>  的流的方向重新<strong>指向</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span> <span class=\"token operator\">></span> new_File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:42:33 CST</pre></td></tr></table></figure><p>从上面代码可以看到， <code>echo</code>  通过 <code>&gt;</code>  符号，将输出重定向到 <code>new_File</code>  这个文件里面了。并且<strong>先清空文件原本内容</strong>。</p>\n<p><code>command &gt;&gt; outputfile</code>   是追加模式。</p>\n<h2 id=\"标准输入重定向\"><a class=\"anchor\" href=\"#标准输入重定向\">#</a> 标准输入重定向</h2>\n<p>将文件内容重定向到命令： <code>command &lt; inputfile</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># wc 命令可以对数据文本进行计数：文本行数  文本字数  文本字节数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">wc</span> <span class=\"token operator\">&lt;</span> new_File</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span>  <span class=\"token number\">6</span> <span class=\"token number\">43</span></pre></td></tr></table></figure><p>这里有个需要注意的地方就是， <code>&lt;</code>  是改变标准输出（屏幕）， <code>&gt;</code>  是改变标准输入（键盘）。<strong>重定向不是代替参数，而是改变标准输入输出</strong>。</p>\n<p>比如以下命令就不行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">&lt;</span> new_File</pre></td></tr></table></figure><p><code>echo</code>  的使用格式是 <code>echo 参数</code> ，重定向不能替代参数。</p>\n<p><code>wc</code>  后面接收的可以是标准输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">wc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>line1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>line2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token number\">2</span>       <span class=\"token number\">2</span>      <span class=\"token number\">12</span> <span class=\"token comment\"># 使用 ctrl+d 结束命令并统计</span></pre></td></tr></table></figure><h2 id=\"内联重定向\"><a class=\"anchor\" href=\"#内联重定向\">#</a> 内联重定向</h2>\n<blockquote>\n<p>可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTU2MTA0L2FydGljbGUvZGV0YWlscy8xMTAzNzU4ODk=\">https://blog.csdn.net/qq_38156104/article/details/110375889</span></p>\n</blockquote>\n<p>替换文件为文本，数据流向命令： <code>command &lt;&lt; 特殊字符</code></p>\n<p>数据的开始和结束文本标记要一致。本质就是将开始符和结束符之间的数据传给命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">wc</span> <span class=\"token operator\">&lt;&lt;</span>EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token number\">4142</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> EOF</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">9</span></pre></td></tr></table></figure><h1 id=\"管道\"><a class=\"anchor\" href=\"#管道\">#</a> 管道</h1>\n<p>一个命令的<strong>标准输出</strong>作为另一个命令的标准输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">></span> rpm.list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span> <span class=\"token operator\">&lt;</span> rpm.list</pre></td></tr></table></figure><p><code>rpm</code>  命令通过 <code>RedHat</code>  包管理系统 ( <code>RPM</code> ) 对系统上安装的软件包进行管理。配合 <code>-qa</code>  选项使用时，会生成已安装包的列表，尽管不会排序。(虽然我在终端执行上面两个命令没啥反应)</p>\n<p>重定向在命令之间数据传输比较繁琐，使用管道  <code>|</code>  解决。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token builtin class-name\">command</span></pre></td></tr></table></figure><p>为了更好了解管道，我写了一个 <code>c</code>  程序，文件为 <code>test.c</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./tmp\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">char</span> bf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>bf<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">//printf(\"%s\",bf);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>linux</code>  中可以用 <code>cat</code>  查看，如果在后面接上 <code>sort</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> test.c <span class=\"token operator\">|</span> <span class=\"token function\">sort</span></pre></td></tr></table></figure><p>其输出结果为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">char</span> bf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./tmp\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">//printf(\"%s\",bf);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>bf<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/31/Shell/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/",
            "url": "https://cecilia.cool/2022/07/31/Shell/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/",
            "title": "Linux文件权限",
            "date_published": "2022-07-31T11:19:13.000Z",
            "content_html": "<h1 id=\"linux安全性\"><a class=\"anchor\" href=\"#linux安全性\">#</a> Linux 安全性</h1>\n<p><code>Linux</code>  安全系统核心是用户账户，用户账户通过创建用户时分配的用户 <code>ID(UID)</code>  来跟踪。 <code>/etc/password</code>  文件将用户的登录名匹配到对应的 <code>UID</code>  的值<br />\n <code>root</code>  账户是 <code>Linux</code>  管理员，固定分配给的 <code>UID</code>  是 0。 <code>Linux</code>  会为各种各样的功能创建不同的用户账户，这些账户不是真正的用户，而是系统账户，是系统上运行各种服务进程访问资源用的特殊账户。所有运行在后台的服务都需要用一个系统用户账户登录到 Linux 系统上！！<strong>在意识到安全问题之前</strong>，许多服务都用 <code>root</code>  登陆，如果其中一个服务被攻陷， <code>root</code>  权限就会被入侵。</p>\n<p><code>/etc/shadow</code>  文件，该文件记录各个账户之间密码记录。该文件只有 <code>root</code>  才有权限操作，所以如果我们不是 <code>root</code>  用户登录，就需要使用 <code>sudo</code>  命令。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /etc/shadow</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> password <span class=\"token keyword\">for</span> cyan:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root:<span class=\"token operator\">!</span>:18999:0:99999:7:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 其他信息就不展示了</span></pre></td></tr></table></figure><p>每一行就是一个用户，分为九个字段，分别是:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoZXJsb2NrbWovYXJ0aWNsZS9kZXRhaWxzLzEwNjc4NjUyMA==\"> 参考文章传送门</span></p>\n<ul>\n<li>与 <code>/etc/passwd</code>  文件中对应的登录名。</li>\n<li><strong>加密后</strong>的密码，也就是说，你不能直接看到这个密码。</li>\n<li>自上次修改密码后过去的天数，上面的 <code>root</code>  是 18999，就是从 1970.1.1 不断累加得到的时间，可以使用命令  <code>date -d &quot;1970-01-01 18999 days&quot;</code>  查看具体时间。</li>\n<li>最小修改时间间隔，该字段规定了从第 3 字段（最后一次修改密码的日期）起，<strong>多长时间之内不能修改密码</strong>。如果是 0，则密码可以随时修改；如果是 10，则代表密码修改后 10 <strong>天</strong>之内不能再次修改密码。</li>\n<li>密码有效期，默认值为 99999，也就是 273 年。</li>\n<li>密码需要变更前的警告天数，当账户密码有效期快到时，系统会发出警告信息给此账户，提醒用户 &quot;再过 n 天你的密码就要过期了，请尽快重新设置你的密码！&quot;。</li>\n<li>密码过期后的宽限天数，过期后，在宽限天数内还是可以登录。</li>\n<li>账号失效时间，该字段通常被使用在具有收费服务的系统中。</li>\n<li>最后一个，保留，还没有使用。</li>\n</ul>\n<h1 id=\"添加新用户\"><a class=\"anchor\" href=\"#添加新用户\">#</a> 添加新用户</h1>\n<p>使用 <code>useradd</code>  命令，可以一次性创建新用户账户及设置用户 <code>HOME</code>  目录结构。 <code>useradd</code>  命令使用系统默认值以及命令行参数设置用户账户。</p>\n<p>系统默认值被设置在 <code>/etc/default/useradd</code> ，可以使用 <code>useradd -D</code>  检查默认值</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">GROUP</span><span class=\"token operator\">=</span><span class=\"token number\">100</span>\t\t<span class=\"token comment\"># 新用户被添加到 GID=100 的公共组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/home\t\t<span class=\"token comment\"># 新的 home 目录位于 /home/loginname</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">INACTIVE</span><span class=\"token operator\">=</span>-1\t\t<span class=\"token comment\"># 密码过期后不会被禁用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">EXPIRE</span><span class=\"token operator\">=</span>\t\t\t<span class=\"token comment\"># 未设置过期日期</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/sh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">SKEL</span><span class=\"token operator\">=</span>/etc/skel\t<span class=\"token comment\"># 将 /etc/skel 目录下内容复制到用户的 home 下</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">CREATE_MAIL_SPOOL</span><span class=\"token operator\">=</span>no\t<span class=\"token comment\"># 是否为该用户在 mail 目录下创建一个接受邮件的文件</span></pre></td></tr></table></figure><p>上述的系统默认值是可以更改的，在 <code>useradd</code>  时，加入参数进行更改</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter variable\">-b</span>  default_home    <span class=\"token comment\"># 更改默认的创建用户 HOME 目录的位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-e</span>  expirtion_date  <span class=\"token comment\"># 更改默认的新账户的过期日期</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-f</span>  inactive        <span class=\"token comment\"># 更改默认的新用户从密码过期到账户被禁用的天数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-g</span>  group           <span class=\"token comment\"># 更改默认的组名称或 GID</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-s</span>  shell           <span class=\"token comment\"># 更改默认登录 shell</span></pre></td></tr></table></figure><h1 id=\"删除用户\"><a class=\"anchor\" href=\"#删除用户\">#</a> 删除用户</h1>\n<p><code>userdel</code>  命令，默认情况下只会删除 <code>/etc/passwd</code>  文件中的用户信息，而不会删除系统中属于该账户的任何文件， <code>userdel -r</code>  会删除用户的 HOME 目录以及邮件目录。</p>\n<h1 id=\"修改用户\"><a class=\"anchor\" href=\"#修改用户\">#</a> 修改用户</h1>\n<p><code>usermod,chsh,chfn,chage</code>  这几个指令要用到再自己百度，平时用不到，隔不了多久就会忘记。</p>\n<h1 id=\"linux组\"><a class=\"anchor\" href=\"#linux组\">#</a> Linux 组</h1>\n<p>linux 通过将具有相同特性的用户划归为一个组，可以大大简化用户的管理，方便用户之间文件的共享。任何一个用户都至少属于一个组，这个组称为初始组，可以同时属于多个附加组。用户不仅拥有初始组的权限，还拥有附加组的权限。</p>\n<p>在 <code>/etc/group</code>  文件中，包含系统上用到的每个组的信息，4 个字段：<strong>组名：组密码：GID: 属于该组的用户列表</strong></p>\n<p>用户列表中某些组没有列出用户，并不代表没有成员，只是加入了成员，不会出现在该文件中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">groupadd</span> 组名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 后期将成员加入到指定组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">usermod</span> <span class=\"token parameter variable\">-G</span> 组名 成员名</pre></td></tr></table></figure><h1 id=\"文件权限\"><a class=\"anchor\" href=\"#文件权限\">#</a> 文件权限</h1>\n<p>在本系列第一篇文章中，为了运行一个新建脚本，需要使用 <code>chmod u+x 文件名</code> 。查看一个文件，我们可以使用 <code>ll</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">2</span> cyan cyan <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">30</span> <span class=\"token number\">19</span>:09 ./</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">21</span> cyan cyan <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">30</span> <span class=\"token number\">19</span>:09 <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-rw-r--  <span class=\"token number\">1</span> cyan cyan    <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">28</span> <span class=\"token number\">15</span>:50 new_File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rwxrw-r--  <span class=\"token number\">1</span> cyan cyan   <span class=\"token number\">49</span> <span class=\"token number\">7</span>月  <span class=\"token number\">30</span> <span class=\"token number\">19</span>:09 test*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rwxrw-r--  <span class=\"token number\">1</span> cyan cyan   <span class=\"token number\">31</span> <span class=\"token number\">7</span>月  <span class=\"token number\">29</span> <span class=\"token number\">16</span>:18 test_1.sh*</pre></td></tr></table></figure><p>得到的结果中，第一位有些是 <code>d</code> ，有些是 <code>-</code> 。第一个代表了文件 (-)/ 目录 (d)/ 链接 (l)/ 字符型设备 (c)/ 块设备 (b)/ 网络设备 (n)。</p>\n<p>后面一共是 9 位，每 3 位为一个部分（分别表示 rwx），这<strong>三个部分</strong>依次属于<strong>文件属主（创建文件的用户）</strong>，<strong>属组成员</strong>，<strong>其他用户</strong>权限。</p>\n<p>目录或者文件一开始创建时，会授予默认权限，默认权限与 <code>umask</code>  值有关。三个用户权限（<strong>三个部分</strong>）各自占用一个八进制位（0-7），一个部分的权限从 <code>'---'</code>  到 <code>'rwx'</code>  在八进制位中表示为 <code>0-7</code> ，如 <code>rw-</code>  就是 6。三个部分合在一个，就是 <code>000-777</code> ，也就是 <code>---------到rwxrwxrwx</code> 。</p>\n<p><code>umask</code>  命令用于<strong>设置</strong>创建文件或是目录的<strong>默认权限</strong>，我们先在终端输入 <code>umask</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">umask</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0002</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 你的终端可能会输出 0022，我好像是在环境文件做过持久化更改（有点记不清了）</span></pre></td></tr></table></figure><p>第一位是一个关于特殊权限的位，可以暂时不管。后面三个与默认权限有关。</p>\n<p>对于文件而言，默认的最大权限就是 <code>666</code> ，也就是 <code>rw-rw-rw-</code> ，目录的默认最大权限是 <code>777</code> 。如果你学过计算机网络，你会知道<strong>掩码</strong>这个东西。这里就是，最大默认权限<strong>减去</strong>掩码就会得到文件（目录）创建时赋予的权限。</p>\n<p>比如我的掩码 <code>umask=0002</code> ，那么创建文件时， <code>666-002=664</code> ，得到的权限就是 <code>rw-rw-r--</code></p>\n<p>验证一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">touch</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll tmp.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> cyan cyan <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">31</span> <span class=\"token number\">21</span>:30 tmp.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">umask</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0002</pre></td></tr></table></figure><p>这里有一篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1MTI3NjczLzI4MDM1MTc=\">文章</span>参考。</p>\n<h1 id=\"更改权限\"><a class=\"anchor\" href=\"#更改权限\">#</a> 更改权限</h1>\n<p>通过 <code>chmod</code>  命令，可以修改文件的权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># chmod 3 位八进制权限码 文件名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> tmp.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll tmp.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-rwxrwxrwx</span> <span class=\"token number\">1</span> cyan cyan <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">31</span> <span class=\"token number\">21</span>:30 tmp.txt*</pre></td></tr></table></figure><p>如果你只是想改变某一部分（属主，组内用户，其他用户）的权限，可以使用</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> u+x 文件名 <span class=\"token comment\"># 属主增加执行权限</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> g-rx 文件名 <span class=\"token comment\"># 组内用户减少</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">o</span><span class=\"token operator\">=</span>rwx 文件名 <span class=\"token comment\"># 其他用户的权限为 rwx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 举例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">chmod</span> g-rx tmp.txt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll tmp.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rwx-w-rwx <span class=\"token number\">1</span> cyan cyan <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">31</span> <span class=\"token number\">21</span>:30 tmp.txt*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 说明</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># u: 表示用户 (属主)  g: 表示组  o: 表示其他  a: 表示所有</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># +: 增加  -: 减少  =: 赋值</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/30/Shell/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3shell/",
            "url": "https://cecilia.cool/2022/07/30/Shell/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3shell/",
            "title": "深入理解shell",
            "date_published": "2022-07-30T10:36:32.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>以下是维基百科对 <code>shell</code>  的定义</p>\n<blockquote>\n<p>普通意义上的 shell 就是可以接受用户输入命令的程序，Unix 操作系统下的 shell 既是用户交互的界面，也是控制系统的脚本语言。</p>\n</blockquote>\n<p>所以我们可以理解，当你打开终端时，其实就是启动了一个 <code>shell</code> ， <code>shell</code>  有很多种，如 <code>bash,zsh,csh</code>  等。</p>\n<p>在 <code>/etc/passwd</code>  中列出了当前用户默认的 <code>shell</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:/etc$ <span class=\"token function\">cat</span> <span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan:x:1000:1000:cyan,,,:/home/cyan:/bin/bash</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mysql:x:127:133:MySQL Server,,,:/nonexistent:/bin/false</pre></td></tr></table></figure><p>我们只看部分，可以看到使用的是 <code>bash shell</code> 。</p>\n<h1 id=\"父子shell\"><a class=\"anchor\" href=\"#父子shell\">#</a> 父子 shell</h1>\n<p>系统一开始启动的 <code>shell</code>  是父 <code>shell</code> ，在此基础上启动其他 <code>shell</code>  或是使用命令 <code>/bin/bash</code> ，被称为子 <code>shell</code> 。当前进程下的 <code>shell</code> ，在生成子 <code>shell</code>  进程时，父进程的部分环境被复制到子 <code>shell</code>  中。</p>\n<p>结合 <code>ps -f / ps --forest</code>  命令我们可以查看当前 <code>shell</code>  的关系</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 首先进入终端，然后使用 bash 开启一个新的 shell</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 ps -f 查看当前 shell，在 18:42 打开终端（父 shell，PID=67792），在 18:49 调用 bash，进入子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># shell(PID=69555,PPID=67792,PPID--Parent PID)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-f</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token environment constant\">UID</span>          PID    <span class=\"token environment constant\">PPID</span>  C STIME TTY          TIME CMD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan       <span class=\"token number\">67792</span>   <span class=\"token number\">67791</span>  <span class=\"token number\">0</span> <span class=\"token number\">18</span>:42 pts/1    00:00:00 <span class=\"token parameter variable\">-bash</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan       <span class=\"token number\">69555</span>   <span class=\"token number\">67792</span>  <span class=\"token number\">0</span> <span class=\"token number\">18</span>:49 pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan       <span class=\"token number\">69562</span>   <span class=\"token number\">69555</span>  <span class=\"token number\">0</span> <span class=\"token number\">18</span>:49 pts/1    00:00:00 <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-f</span></pre></td></tr></table></figure><p>这么看不是很形象，可以使用 <code>--forest</code>  选项</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--forest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">69555</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">69564</span> pts/1    00:00:00      <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr></table></figure><p>这里很明显 <code>PID=69555</code>  的 <code>bash</code>  是 <code>PID=67792</code>  的 <code>bash</code>  的子 <code>shell</code> 。可是更下面为什么还有个 <code>ps</code> ，这是后话。</p>\n<h1 id=\"进程列表\"><a class=\"anchor\" href=\"#进程列表\">#</a> 进程列表</h1>\n<p>如果你想一次性执行一系列命令，而不是执行一个输入一个，就可以在命令之间使用分号</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token builtin class-name\">pwd</span><span class=\"token punctuation\">;</span><span class=\"token function\">ls</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">cd</span> /etc<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">pwd</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/ <span class=\"token comment\">#第一个 pwd 指令结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  swapfile  tmp  var</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/etc <span class=\"token comment\"># 第二个 pwd 指令结果</span></pre></td></tr></table></figure><p>还有一种方式就是使用<strong>进程列表</strong>，需要将这些命令加入括号中， <code>(pwd;ls;cd /etc;pwd;ps -f)</code> 。这样会<strong>创建一个子 shell 来执行对应命令</strong>，其实进程列表是一种命令分组。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ls</span><span class=\"token punctuation\">;</span><span class=\"token function\">ps</span> --forest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_File  <span class=\"token builtin class-name\">test</span>  test_1.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">69654</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">;</span><span class=\"token function\">ps</span> --forest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>new_File  <span class=\"token builtin class-name\">test</span>  test_1.sh</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">69641</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token number\">69643</span> pts/1    00:00:00      <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr></table></figure><p>很明显， <code>（ls;ps --forest)</code>  是在子 <code>shell</code>  中运行的。</p>\n<p>其实，也可以通过查看环境变量 <code>BASH_SUBSHELL</code>  查看子 shell 是否创建，该环境变量返回子 shell 的个数。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token punctuation\">(</span>echo <span class=\"token variable\">$BASH_SUBSHELL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure><p>另一种进程分组： <code>&#123; pwd;ls;cd ~; &#125;</code>  花括号 + 末尾分号，但是<strong>不会创建子 shell</strong>, 需要注意的是，<strong>花括号与命令和分号之间存在空格</strong>。</p>\n<blockquote>\n<p>退出一个 <code>shell</code>  需要使用 <code>exit</code> ，要是使用 <code>exit</code>  时出现： <code>logout There are stopped jobs.</code> ，说明这个子 <code>shell</code>  中还存在 <code>stopped</code>  的进程，可以通过 <code>kill -9 pid</code>  强制杀死进程。</p>\n</blockquote>\n<p>为了使读者对这个问题有更好的认识，现在编写以下脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#脚本文件名 test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 很明显，这是一个死循环</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>然后进入子 <code>shell</code>  执行该脚本，你会看到脚本在不断循环而不会结束，此时使用 <code>ctrl+z</code>  挂起这个线程</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./test</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>^Z</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 ./test</pre></td></tr></table></figure><p>现在你就退不出子 <code>shell</code>  了，试试 <code>exit</code>  语句</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>There are stopped jobs.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">69675</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">69681</span> pts/1    00:00:01 <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">69683</span> pts/1    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>There are stopped jobs.</pre></td></tr></table></figure><p>很明显， <code>exit</code>  没有让你退出子 <code>shell</code> ，我们看到 <code>test</code>  进程的 <code>PID</code>  为 69681</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token number\">69681</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">69675</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">69689</span> pts/1    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Killed                  ./test</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><p>哦～有没有觉得自己一下子学了很多东西。</p>\n<h1 id=\"后台模式\"><a class=\"anchor\" href=\"#后台模式\">#</a> 后台模式</h1>\n<p>在命令后使用 <code>&amp;</code> , 将其置入后台模式，并且可以用 <code>ps / jobs</code>  来显示后台作业信息。 <code>jobs</code>  命令可以显示出当前运行在后台模式中的所有用户的进程。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">69698</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">jobs</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+ <span class=\"token number\">69698</span> Running                 <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>1 是作业号， <code>shell</code>  中运行的每个进程被称为作业。后显示作业状态以及命令，-l 显示命令 PID。使用 &amp; 将命令置入后台不会创建子 <code>shell</code> 。</p>\n<p>你应该知道为什么要将命令执行置入后台，假设你有一个一直在循环的脚本，如果这个脚本不执行完，那你就不能输入其他命令。</p>\n<h2 id=\"协程\"><a class=\"anchor\" href=\"#协程\">#</a> 协程</h2>\n<p>会后台生成子 <code>shell</code> ，子 <code>shell</code>  执行指令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ coproc <span class=\"token function\">sleep</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">69704</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--forest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">69706</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Done                    coproc COPROC <span class=\"token function\">sleep</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p>当然也可以和进程列表一起使用，还可以命名</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>coproc My_Job <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">;</span><span class=\"token function\">sleep</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>My_Job 是进程的名字，默认是 COPROC。协程 coproc 与进程列表一起使用，会产生嵌套子 shell。<strong>需要牢记的是，生成子 shell 的成本不低</strong>。</p>\n<h1 id=\"内建命令\"><a class=\"anchor\" href=\"#内建命令\">#</a> 内建命令</h1>\n<p>现在不想更这个，鸽一下</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/29/Shell/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "url": "https://cecilia.cool/2022/07/29/Shell/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "title": "Linux环境变量",
            "date_published": "2022-07-29T07:21:39.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在了解 <code>Linux</code>  的环境变量前，我们先了解一下变量。</p>\n<p>在脚本中使用以下代码</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">echo</span> val</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" testing... \"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#会循环打印：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#val</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#testing...</span></pre></td></tr></table></figure><p>在脚本中我们直接定义一个变量，该怎么用呢？直接在终端定义变量，此时变量是什么？</p>\n<h1 id=\"环境变量\"><a class=\"anchor\" href=\"#环境变量\">#</a> 环境变量</h1>\n<p>划分为局部和全局变量，局部变量只对创建他们的 shell 可见，<strong>系统环境变量基本都是大写字母</strong>，区别于普通用户的环境变量，查看全局变量可以使用命令 <code>env </code> 或者 <code>printenv</code> 。</p>\n<p>查看单个变量的值： <code>printenv $HOME</code>  或者 <code>echo $HOME</code> 。这里给出几个常见的系统环境变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HOME</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/home/cyan</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/bin/bash</pre></td></tr></table></figure><p>你可以把变量前面的美元符号 <code>$</code>  看作取值，在变量前加上 <code>$</code>  可以区分它到底是变量还是字符串。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">SHELL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token environment constant\">SHELL</span></pre></td></tr></table></figure><p>我们要定义自己的变量，直接定义即可</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 通过 cat 命令查看 test 文件内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> val</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 自定义变量 value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span>./test</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#尝试使用 value 来运行./test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ value</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>value: <span class=\"token builtin class-name\">command</span> not found</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#尝试使用 value 的值来运行./test，但是打印出来的不是 10，而是 val</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token variable\">$value</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>val</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#可见，在脚本中，变量前也需要使用 $</span></pre></td></tr></table></figure><p>看到这里你应该对变量有了大概的了解。 <code>$</code>  相当于取出变量的值，想要定义一个变量，直接定义即可。但是这里有个<strong>致命的坑</strong>，我们平时写代码，为了有较高的可读性，一般在变量和 <code>=</code>  以及值之间都会加上<strong>空格</strong>，但是这在终端里面是致命的错误</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ val <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command <span class=\"token string\">'val'</span> not found, did you mean:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'pal'</span> from deb pal <span class=\"token punctuation\">(</span><span class=\"token number\">0.4</span>.3-8.1build4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'cal'</span> from deb bsdmainutils <span class=\"token punctuation\">(</span><span class=\"token number\">11.1</span>.2ubuntu3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vala'</span> from deb valac-bin <span class=\"token punctuation\">(</span><span class=\"token number\">0.48</span>.6-0ubuntu1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'fal'</span> from deb dnet-progs <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>.65build2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vax'</span> from deb simh <span class=\"token punctuation\">(</span><span class=\"token number\">3.8</span>.1-6<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'al'</span> from deb mono-devel <span class=\"token punctuation\">(</span><span class=\"token number\">6.8</span>.0.105+dfsg-2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vam'</span> from deb vim-addon-manager <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span>.10<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'pval'</span> from deb snacc <span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span>.1-7build2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vl'</span> from deb atfs <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>.4pl6-14<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Try: <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>deb name<span class=\"token operator\">></span></pre></td></tr></table></figure><p>因为加上空格， <code>shell</code> （我的是 <code>bash</code> ）就会认为，你的 <code>val</code> （变量名）是一个命令，空格后面的是该命令的参数。而 <code>shell</code>  没有找到 <code>val</code>  这个命令就会报错。</p>\n<p>其实随着之后的学习，你会越来越理解 <code>Linux</code>  中各种设计的巧妙，我们调用的一个又一个命令（大部分），说穿了其实是一个又一个可执行文件，如果你之前在给 <code>IDEA</code> ， <code>VsCode</code>  这些工具配置环境变量时好好了解过到底为什么需要环境变量，那么你很清楚我刚才在说什么。</p>\n<p>对于局部环境变量，bash 并没有什么指令可以单独显示， <code>set</code>  命令会显示为某个特定进程设置的所有环境变量，输出时会按照字母顺序排序</p>\n<h2 id=\"设置用户定义变量\"><a class=\"anchor\" href=\"#设置用户定义变量\">#</a> 设置用户定义变量</h2>\n<p>上面已经讲得差不多了，这里再给出几个需要注意的点</p>\n<ul>\n<li>如果变量的值中含有空格，请使用用单（双）引号， <code>val = &quot;hello world&quot;</code> 。</li>\n<li>定义用户变量，请坚持使用<strong>小写</strong>字母。</li>\n<li>变量名，等号，值之间不能有空格。</li>\n</ul>\n<h2 id=\"设置全局环境变量\"><a class=\"anchor\" href=\"#设置全局环境变量\">#</a> 设置全局环境变量</h2>\n<p>我们之前直接创建的变量是局部变量，对其他 <code>shell</code> （父子 <code>shell</code> ）是不可见得。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><p>关于父子 <code>shell</code> ，我不会在这篇文章过多讲解，你要是求知心切，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlkdS5jb20=\">传送门</span>。</p>\n<p>你现在可以这么理解， <code>bash shell</code>  也是一个程序，我们打开终端时， <code>bash</code>  也启动了，既然 <code>bash</code>  是程序，那我们在终端也可以运行 <code>bash</code> ，这样我们就处于<strong>子 shell</strong>，<strong>父子 shell</strong> 使用不同的内存空间，所以在<strong>父 shell</strong> 创建的局部变量对<strong>子 shell</strong> 是不可见的。</p>\n<p>创建全局环境变量的方法：先创建局部环境变量，再导出到全局变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token string\">'global'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token string\">'global'</span> <span class=\"token comment\">#export 就是导出命令，也可以直接导出：export var=global</span></pre></td></tr></table></figure><p>在<strong>子 shell</strong> 中修改全局变量不会影响<strong>父 shell</strong> 中该变量的值。根据该性质，在<strong>子 shell</strong> 中设置全局变量是没有意义的，因为其设置的值，根本不传给父 shell。</p>\n<h2 id=\"删除环境变量\"><a class=\"anchor\" href=\"#删除环境变量\">#</a> 删除环境变量</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> var</pre></td></tr></table></figure><p>解释：</p>\n<ul>\n<li>使用 <code>unset</code>  指令，可以直接删除变量，不需要加<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>。</mtext></mrow><annotation encoding=\"application/x-tex\">。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">。</span></span></span></span>的本质是，得到环境变量的值！</li>\n<li><code>printenv</code>  指定了，传入的参数就是一个环境变量（自定义变量不行），可以直接使用。</li>\n<li>在子 shell 中对全局变量的修改无能反映到父 shell，哪怕是删除</li>\n</ul>\n<h2 id=\"设置path环境变量\"><a class=\"anchor\" href=\"#设置path环境变量\">#</a> 设置 PATH 环境变量</h2>\n<p><code>PATH</code>  环境变量定义了用于进行命令和程序查找的目录。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</pre></td></tr></table></figure><ul>\n<li>如果命令或程序位置没有包含在 <code>PATH</code>  中，如果不使用路径， <code>shell</code>  是没法找到并运行的。就像上一篇文章，我们必须使用 <code>./test.sh</code>  才能运行该文件，使用 <code>test.sh</code>  是不行的。</li>\n<li>短暂的修改 <code>PATH</code>  命令就是： <code>PATH=$PATH:.</code> ，一般加 <code>.</code>  就是包含当前目录，当然也可以加其他路径。这种修改，在 <code>exit</code>  后会失效。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看当前文件夹下文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_File  <span class=\"token builtin class-name\">test</span>  test_1.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看文件 test_1.sh 脚本内容 -- 打印 Hello World</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> test_1.sh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 希望直接使用这个脚本名作为命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ test_1.sh</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>test_1.sh: <span class=\"token builtin class-name\">command</span> not found</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 将当前目录加到 PATH 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ test_1.sh</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Hello World</pre></td></tr></table></figure><p>如果你还没明白，可以参考以下这个（我觉得和我讲的差不多）<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYW5vbmdqYy5jb20vZGV0YWlsLzI0LWJyYXhocnpnY3pma3B3dC5odG1s\">如何理解 PATH</span>。如果还是不懂，真拿你没办法，就再给个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlkdS5jb20=\">真正的传送门</span>。</p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>关于如何持久化创建一个环境变量，这涉及到修改一些系统文件，文件权限以及 <code>shell</code>  进程的一些知识，之后再说吧。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/28/Shell/shell%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "url": "https://cecilia.cool/2022/07/28/Shell/shell%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "title": "shell快速入门",
            "date_published": "2022-07-28T06:58:49.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>本文及后续文章都是基于 <code>bash shell</code>  讲解， <code>Linux</code>  发行版本为 <code>Ubuntu</code> 。本文指导读者快速入门 <code>shell</code>  脚本编程而刻意模糊化其他基本概念，本系列于 <code>2022-07-28</code>  开始更新，每天更新一个小节，直到结束，主要是讲解 <code>shell</code>  编程，其中也会涉及到相关的 <code>Linux</code>  知识。</p>\n<p>整个 <code>shell</code>  系列不会讲解如何安装双系统，也不会讲解如何安装虚拟机以及 <code>Linux</code>  相关版本的镜像文件。如果你需要相关的虚拟机和 Linux 的安装视频，我推荐这个：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThVNHkxVzdhdj9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMCZhbXA7dmRfc291cmNlPTVhY2Y1YTdiMjNkMjhlNzYzM2U1YTliMzgxYzU3YzQy\">https://www.bilibili.com/video/BV18U4y1W7av?spm_id_from=333.999.0.0&amp;vd_source=5acf5a7b23d28e7633e5a9b381c57c42</span></p>\n</blockquote>\n<p>B 站关注<strong> Micro_Frank</strong>。</p>\n<h1 id=\"ssh连接ubuntu\"><a class=\"anchor\" href=\"#ssh连接ubuntu\">#</a> ssh 连接 Ubuntu</h1>\n<p>我不是很喜欢在虚拟机里面使用命令行，所以就在外部通过终端来访问虚拟机上的 <code>Ubuntu</code> 。</p>\n<ul>\n<li>在 <code>Ubuntu</code>  中使用命令 <code>ifcofig</code>  查看系统 <code>IP</code>  地址。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/e434cc286d6c0917.png\" alt=\"image-20220728152200134\" /></p>\n<p>当然，有可能使用了 <code>ipconfig</code>  查不到 <code>IP</code>  地址，那么请使用 <code>sudo dhclient ens33</code>  命令，具体你可以百度。</p>\n<ul>\n<li>在自己桌面使用 <code>win+r</code> ，输入 <code>cmd</code> 。使用 <code>ssh</code>  连接： <code>ssh 用户名@IP地址</code> 。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/573c6233451b027a.png\" alt=\"image-20220728152655411\" /></p>\n<p>之前因为某些原因，我的 <code>Ubuntu</code>  修改过 <code>ssh</code>  连接的端口号，所以在连接时需要通过 <code>-p</code>  选项来指定端口号。如果你没有改过，就不需要指定了。</p>\n<h1 id=\"下载vim\"><a class=\"anchor\" href=\"#下载vim\">#</a> 下载 Vim</h1>\n<p><code>Vim</code>  是一个超级强大的编辑器，我也不是很熟练，主要就是用的少。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span></pre></td></tr></table></figure><p>我已经下载过了，就不截图了，实在不会你就去百度。</p>\n<h1 id=\"创建脚本文件\"><a class=\"anchor\" href=\"#创建脚本文件\">#</a> 创建脚本文件</h1>\n<p>作为学习使用，我建议你先创建一个文件夹用来存放你平时写的练习脚本，文件名可以叫 <code>Shell_Files</code> ，随便你啦。</p>\n<ul>\n<li>进入你刚才创建的文件夹： <code>cd Shell_Files</code> 。</li>\n<li>创建一个文件： <code>touch test_1</code> ，不需要跟后缀。文件后缀的作用无非就是打开这个文件的方式（你现在可以这么理解），也可以跟 <code>sh</code>  后缀，比如 <code>touch test_1.sh</code> 。</li>\n<li>使用 <code>vim</code>  来编写脚本程序： <code>vim test_1.sh</code> 。进入到编辑界面后，请不要乱动键盘，你现在并没有处于编辑模式。敲击 <code>i</code>  键进入 <code>insert</code>  模式，你就可以编辑了，你可以输入以下代码</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" testing... \"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>在 <code>shell</code>  中， <code>#</code> 后面跟的是注释，但是在编写脚本时，你必须加上第一行的注释来指定你要是用的 <code>shell</code> ，你不会以为 <code>shell</code>  里面只有 <code>bash</code>  吧？第二行是定义一个变量（弱类型语言）， <code>while</code>  里面应该跟上判断条件，条件为 <code>true</code>  继续执行，为 <code>false</code>  结束执行。但是 <code>echo</code>  是自动换行的<strong>打印语句</strong>，所以<strong>成功执行</strong>了 <code>echo &quot;&quot;</code> ， <code>while</code>  里面就判断为 <code>true</code> 。然后执行 <code>echo &quot;testing... &quot;</code> 。</p>\n<p>代码编写完后，敲击 <code>Esc</code> ，再输入冒号，再输入 <code>wq</code> ， <code>w</code>  是 <code>write</code> ， <code>q</code>  是 <code>quit</code> 。回车，即可保存退出。同学，我劝你不要乱点啊🐶。</p>\n<h1 id=\"修改文件权限\"><a class=\"anchor\" href=\"#修改文件权限\">#</a> 修改文件权限</h1>\n<p>一般来说，你刚创建的文件只有读 <code>r</code>  和写 <code>w</code>  的权限，并没有执行 <code>x</code>  该文件的权限。请按顺序调用以下命令：</p>\n<ul>\n<li><code>chmod u+x test_1.sh</code> ，该命令为脚本文件赋予可执行的权限，其实到这里，你的脚本文件就可以执行了。</li>\n<li><code>touch new_file</code>  创建一个新的文件，该文件只有读和写的权限</li>\n<li><code>ll</code> ，其实该命令就是 <code>ls -al</code>  的简写。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/2a7d3da1cb4c1b84.png\" alt=\"image-20220728155413986\" /></p>\n<p>从上图可以看出，下面两个可执行文件（绿色）比 <code>new_File</code>  多了一个 <code>x</code> ，这其实就是执行权限。</p>\n<h1 id=\"运行脚本文件\"><a class=\"anchor\" href=\"#运行脚本文件\">#</a> 运行脚本文件</h1>\n<p>运行文件，只需要执行以下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./test_1.sh</pre></td></tr></table></figure><p>其中 <code>./</code>  表示当前目录下， <code>test_1.sh</code>  是指定文件名。为什么非要加 <code>./</code>  呢？我明明已经在当前目录下了，能不能直接使用 <code>test_1.sh</code>  来运行呢？可以，这个涉及到环境变量，这是后话，nice，又挖一个坑，你要是求知心切，就去百度吧。</p>\n<p>哦，你想要停下你的脚本运行，使用 <code>ctrl+c</code>  即可。</p>\n",
            "tags": [
                "shell"
            ]
        }
    ]
}