<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://cecilia.cool</id>
    <title>慕青の迷途 • Posts by &#34;mysql&#34; tag</title>
    <link href="https://cecilia.cool" />
    <updated>2022-07-31T03:57:38.000Z</updated>
    <category term="Docker" />
    <category term="tools" />
    <category term="shell" />
    <category term="开源软件构建技术" />
    <category term="云计算" />
    <category term="数据结构与算法" />
    <category term="网络协议与工具" />
    <category term="Mybatis" />
    <category term="轻小说结局魔改" />
    <category term="Spring" />
    <category term="日志框架" />
    <category term="uni-app" />
    <category term="MySQL" />
    <category term="设计模式" />
    <category term="JVM" />
    <category term="Java8" />
    <category term="Java基础" />
    <category term="网络编程" />
    <category term="并发" />
    <entry>
        <id>https://cecilia.cool/2022/07/31/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
        <title>B+树索引的使用</title>
        <link rel="alternate" href="https://cecilia.cool/2022/07/31/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;本文主要讲解索引的具体工作原理以及代价，如何正确的建立索引才能使查询变快。在阅读本文前，请一定保证对之前更新的内容（B + 树索引）理解明白。&lt;/p&gt;
&lt;p&gt;现在我们先创建一个表，之后方便举例&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table single_table (
    id int not null auto_increment
    key1 varchar(100),
    key2 int
    key3 varchar(100),
    key_part1 varchar(100),
    key_part2 varchar(100),
    key_part3 varchar(100),
    common_field varchar(100),
    primary key(id),
    key idx_key1(key1),
    unique key uk_key2(key2),
    key idx_key3(key3),
    key idx_key_part(key_part1,key_part2,key_part3)
) engine=InnoDB character set=utf8; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;简化b树示意图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简化b树示意图&#34;&gt;#&lt;/a&gt; 简化 B + 树示意图&lt;/h1&gt;
&lt;p&gt;我们知道，B + 树的非叶子节点是目录项，它是为了定位下一层节点，直到在叶子节点找到对应的记录。其查询算法的本质还是在每个页中使用&lt;strong&gt;二分查找&lt;/strong&gt;找到下一层对应的页。那么我们不如将 B + 树直接简化，只剩下叶子节点。&lt;/p&gt;
</content>
        <category term="MySQL" />
        <updated>2022-07-31T03:57:38.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2022/07/28/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95/</id>
        <title>B+树索引</title>
        <link rel="alternate" href="https://cecilia.cool/2022/07/28/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;我们使用 sql 语句查询某条记录时&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from 表名 where 列名 = xxx;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;where&lt;/code&gt;  后面跟着的是查询条件，我们之前学的，页中的记录是根据主键排序的（如果没有主键，就根据不能为 NULL 的唯一的数据排序，如果这样的属性也没有，就按照 &lt;code&gt;row_id&lt;/code&gt;  排序）。&lt;/p&gt;
&lt;p&gt;那么在没有创建索引的情况下，如果我们的查询条件是根据主键查询，那么在页中就可以通过二分查找快速获取数据，但是如果 &lt;code&gt;where&lt;/code&gt;  后面跟着的是一个非主键属性，那么在页中就只能从 &lt;code&gt;Infimum&lt;/code&gt;  到 &lt;code&gt;Supremum&lt;/code&gt;  一条一条的&lt;strong&gt;顺序查找&lt;/strong&gt;，&lt;strong&gt;一下子就慢很多&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以我们必须找到一种高效的搜索方法 —— 索引。&lt;/p&gt;
&lt;h1 id=&#34;索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引&#34;&gt;#&lt;/a&gt; 索引&lt;/h1&gt;
&lt;p&gt;先建一个表，后面方便演示例子。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table index_demo (
    c1 int,
    c2 int,
    c3 char(1)，
    primary key (c1)
) row_format = COMPACT;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们知道，一个页默认只有 16KB，存储的记录是有限的，所以一个表往往需要很多个页，&lt;strong&gt;页之间的记录也必须保持顺序&lt;/strong&gt;，也就是说，&lt;strong&gt;页 A 的记录主键值必须大于上一个页的记录主键值，小于下一页的记录的主键值&lt;/strong&gt;（当然，这里面不包含 &lt;code&gt;Infimum&lt;/code&gt;  和 &lt;code&gt;Supremum&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;前文讲页结构时， &lt;code&gt;File Header&lt;/code&gt;  中对于页号的规定使得&lt;strong&gt;数据页之间连成双向链表&lt;/strong&gt;，我们期望为快速定位记录所在的数据页而建立一个别的目录，该目录实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;下一个数据页的记录的主键 &amp;gt; 上一个数据页记录的主键。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了实现这个状态，存在&lt;strong&gt;页分裂&lt;/strong&gt;的机制。假设上一个页已经满了，最后一条记录主键是 100，现在又加入一条记录，主键为 90。那么新加入的这条记录就会放到该页末尾，主键为 100 的记录会被分到新的一个页。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;给所有页建立一个&lt;strong&gt;目录项&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处是关于页的目录其实对于页的查找也是二分（就是根据页目录，之前的槽 &lt;code&gt;Slot&lt;/code&gt;  是关于记录的 &lt;code&gt;Page Directory&lt;/code&gt; ）。&lt;strong&gt;每个页对应一个目录项&lt;/strong&gt;，每个&lt;strong&gt;目录项&lt;/strong&gt;包括两部分：&lt;strong&gt;页的最小主键值&lt;/strong&gt; +&lt;strong&gt; 页号&lt;/strong&gt; &lt;code&gt;page_no&lt;/code&gt; 。插入记录时，根据主键值，在所有&lt;strong&gt;目录项&lt;/strong&gt;下进行二分查找，找到合适的页后，根据页中的 &lt;code&gt;Page Directory&lt;/code&gt;  进行二分查找，然后页分裂（如果有的话）。最重要的就是，这个目录就叫 ——&lt;strong&gt; 索引&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;简单的索引方案&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的索引方案&#34;&gt;#&lt;/a&gt; 简单的索引方案&lt;/h2&gt;
&lt;p&gt;为了实现通过&lt;strong&gt;目录项&lt;/strong&gt;来进行二分查找，我们也要&lt;strong&gt;管理目录项&lt;/strong&gt;，使其在增删改查时保持有序，所以也把它们放在页中进行管理，这种记录就是&lt;strong&gt;目录项记录&lt;/strong&gt; &lt;code&gt;record_type = 1&lt;/code&gt; （你还记得 &lt;code&gt;record_type&lt;/code&gt;  为 0，2，3 时是什么意思吗）, 该记录也就只有主键值和页号，&lt;strong&gt;当然头信息也是存在的&lt;/strong&gt;，因为只有主键值（如果不是变长字段或变长字符集），所以没有变长字段长度列表，也没有 NULL 列表。&lt;/p&gt;
&lt;p&gt;不断累积，目录项页也存在目录项，这样的目录项又被放进新的目录项页（只不过在上一层），不断向上递归，形成 B + 树。&lt;/p&gt;
&lt;p&gt;说了那么多，不看图总是懵逼的。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/28/f4fdab5241230111.png&#34; alt=&#34;image-20220728104845461&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这个图画的我难受。。。。&lt;/p&gt;
&lt;p&gt;上图为了简略，一个记录的内容我只画了： &lt;code&gt;record_type&lt;/code&gt; + &lt;code&gt;next_record&lt;/code&gt; + &lt;code&gt;c1&lt;/code&gt; + &lt;code&gt;c2&lt;/code&gt; + &lt;code&gt;c3&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;从图中可以看出，我们真正的记录是放在 B + 树中的叶子节点，存放目录项记录的都是内节点。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Page Header&lt;/code&gt;  里面有个属性就是 &lt;code&gt;PAGE_LEVEL&lt;/code&gt;  表示该页在 B + 树中的层级。其实我们谈索引，什么对某个属性 A 创建索引，其实就是创建以 A 排序的 B + 树（当然，这么说不准确，B + 树内容不同，但是你可以这么理解）。我们一开始创建表，指定 &lt;code&gt;c1&lt;/code&gt;  为主键，那么我们插入记录时， &lt;code&gt;InnoDB&lt;/code&gt;  就会维护上图的 B + 树，使其有序。如果我们创建关于 &lt;code&gt;c2&lt;/code&gt;  的索引，我们就会得到一个关于 &lt;code&gt;c2&lt;/code&gt;  排序的 B + 树。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;索引的 B + 树和真正的主键的 B + 树有什么不同，之后讲到回表你就懂了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;索引种类&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引种类&#34;&gt;#&lt;/a&gt; 索引种类&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;聚簇索引&lt;/strong&gt;：在 InnoDB 中，聚簇索引就是数据的存储方式，所有记录都存在叶子节点，“索引即数据，数据即索引”&lt;/p&gt;
&lt;p&gt;二级索引：聚簇索引只有在搜索条件为主键时才能发挥作用，如果以其他列为搜索条件，就要创建关于他们的索引（B + 树）才行，这就是二级索引。假设对 &lt;code&gt;c2&lt;/code&gt;  创建索引，该二级索引 B + 树的叶子节点的记录存储的就是&lt;strong&gt; c2 + 主键值&lt;/strong&gt;。当我们在二级索引中找到对应的 &lt;code&gt;c2&lt;/code&gt; ，我们就可以拿到对应的主键值，然后&lt;strong&gt;再去聚簇索引中找到真正完整的数据，这就是回表&lt;/strong&gt;。二级索引之所以不存储完整的记录，&lt;strong&gt;那肯定是为了节省空间啊&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;联合索引：其本质就是二级索引，因为有时我们会这么查询&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;select * from index_demo where c2 = 1 and c3 = &#39;1&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以我们此时就要创建关于 &lt;code&gt;c2,c3&lt;/code&gt;  的联合索引。&lt;/p&gt;
&lt;p&gt;一个索引的根页面，一旦被创建，其页号就不会改变。一开始是没有数据的，每当存在数据插入，都是在这个根节点下插入&lt;/p&gt;
&lt;h1 id=&#34;sql语句&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#sql语句&#34;&gt;#&lt;/a&gt; sql 语句&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# key和index是同义词，随便指定一个即可
create table 表名 (
    各个列信息
    (key|index) 索引名 (要指定的列)
)

alter table 表名 add (key|index) 索引名 (要指定的列)

# 删除索引
alter table drop (index|key) 索引名
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="MySQL" />
        <updated>2022-07-28T01:42:18.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2022/07/26/Database/MySQL/InnoDB%E9%A1%B5%E7%BB%93%E6%9E%84/</id>
        <title>InnoDB页结构</title>
        <link rel="alternate" href="https://cecilia.cool/2022/07/26/Database/MySQL/InnoDB%E9%A1%B5%E7%BB%93%E6%9E%84/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;之前说过，页是 InnoDB&lt;strong&gt; 管理磁盘空间&lt;/strong&gt;的基本单位，一个页的大小基本上是 16KB。MySQL 规定一页至少存两条记录。我们从客户端写入表中的记录会被存在页中，其实还有一种记录，它存在于 B + 树的非叶子节点的页中，其头信息中的 &lt;code&gt;record_type=1&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;目前你只需理解，页中存储的记录要么是我们从客户端写入的真实的记录 &lt;code&gt;record_type=0&lt;/code&gt; 。这样的页称为&lt;strong&gt;索引页&lt;/strong&gt;；另一个是 B + 树非叶子节点的目录项记录 &lt;code&gt;record_type=1&lt;/code&gt; 。&lt;/p&gt;
&lt;h2 id=&#34;页结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#页结构&#34;&gt;#&lt;/a&gt; 页结构&lt;/h2&gt;
&lt;p&gt;本节内容主要是就要了解页的大致结构和其存储记录的方式，下图为一个页的基本结构。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/26/55c753f812c612e5.png&#34; alt=&#34;image-20220726110822415&#34; /&gt;&lt;/p&gt;
&lt;p&gt;之后我们会对其中的结构一 一讲解。但是直接给出很多概念会让你失去阅读兴趣，所以我们先看一下记录怎么在页中存储。&lt;/p&gt;
&lt;h2 id=&#34;记录在页中的存储&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#记录在页中的存储&#34;&gt;#&lt;/a&gt; 记录在页中的存储&lt;/h2&gt;
&lt;p&gt;请看上图的 &lt;code&gt;User Records&lt;/code&gt;  和 &lt;code&gt;Free Space&lt;/code&gt; ，我们的记录就存放在 &lt;code&gt;User Records&lt;/code&gt; ，如果 &lt;code&gt;User Records&lt;/code&gt;  的空间不够了，就向 &lt;code&gt;Free Space&lt;/code&gt;  去申请空间。所以一个页刚开始创建的时候，是没有 &lt;code&gt;User Records&lt;/code&gt;  的。当 &lt;code&gt;Free Space&lt;/code&gt;  全部被 &lt;code&gt;User Record&lt;/code&gt;  代替时，该页就满了。恭喜，页结构七个概念你已经懂了两个。&lt;/p&gt;
&lt;p&gt;我们的记录在 &lt;code&gt;User Record&lt;/code&gt;  里面是一条一条摆放进去的，但是我现在要提一下一条记录里的&lt;strong&gt;头信息&lt;/strong&gt;（你不会已经忘了什么是头信息了吧，不会吧，不会吧）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/26/81205e50ebf500f5.png&#34; alt=&#34;image-20220725112044762&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;record_type&lt;/code&gt;  可以是，0-- 普通记录，1--B + 树非叶子节点的目录项记录，2--Infimum，3--supremum。请看页结构图，红色区域就是 &lt;code&gt;Infimum,supremum&lt;/code&gt; ，也就是说，每个页固定都有这两条记录，他们代表所有记录中的最小记录（链表头节点）以及所有记录中的最大记录（链表尾节点），** 尽管它们没有主键值，但它们就是最小和最大。** 这两条记录没有实际内容，但这是规定！这样每次查询记录时，都能从一个固定的起点查询。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/26/986c7070b2da0836.png&#34; alt=&#34;image-20220726131306378&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;User Record&lt;/code&gt;  里面的记录排列紧密，一条紧接另一条。这个其实就是堆， &lt;code&gt;heap_no&lt;/code&gt;  就是该记录在堆中的相对位置。比如我顺序写入了 a,b,c 三条记录，它们的 &lt;code&gt;heap_no&lt;/code&gt;  就是 2，3，4。至于 0 和 1，它们是 &lt;code&gt;Infimum,supremum&lt;/code&gt;  的 &lt;code&gt;heap_no&lt;/code&gt;  值。其实从图就可以看出， &lt;code&gt;Infimum,supremum&lt;/code&gt;  在 &lt;code&gt;User_record&lt;/code&gt;  上面。&lt;/p&gt;
&lt;h3 id=&#34;next_record的计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#next_record的计算&#34;&gt;#&lt;/a&gt; next_record 的计算&lt;/h3&gt;
&lt;p&gt;很好，进入到了喜闻乐见的计算环节，我会尽量让你懂的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next_record&lt;/code&gt;  不就是指向下一条记录嘛，那它指向下一条记录的那个部位呢？我们知道，头信息右边是默认添加数据（就是 row_id,trx_id,roll_pointer)，接着是真实信息。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/26/e4c3645b69edae43.png&#34; alt=&#34;image-20220726115106879&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next_record&lt;/code&gt;  指向的是下一条记录的真实信息，其实存储的是一个以字节为单位的偏移量。比如第四条记录的 &lt;code&gt;next_record=-111&lt;/code&gt; , 就是指从第四条记录的真实数据的地址开始，上前找 111 个字节就是下一条记录的真实数据的地址。&lt;/p&gt;
&lt;p&gt;所以，页中的记录因为 &lt;code&gt;next_record&lt;/code&gt;  而形成了链表，在插入新的记录时，InnoDB 始终维护链表中节点的从小到大的顺序（维护顺序当然是为了二分查找）。&lt;/p&gt;
&lt;p&gt;为了让读者感受一下 &lt;code&gt;next_record&lt;/code&gt;  的计算过程，我们创建一个表玩一下&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table test_next_record (
	c1 int,
    c2 int,
    c3 varchar(10000),
    primary key (c1)
) character set acsii,row_format=COMPACT；
#使用 ascii字符集，一个字符用一个字节表示 

#插入一条数据
insert into test_next_record values(1,100,&#39;aaaa&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么在页中实际是这个样子的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/26/71735b9e7f52f0b7.png&#34; alt=&#34;image-20220726130854616&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Infimum&lt;/code&gt;  中的 41 是如何计算的： &lt;code&gt;Infimum&lt;/code&gt; 8 字节 &lt;code&gt;+Supremum&lt;/code&gt;  整条记录 13 字节 + 变长字段 1 字节 + NULL 值列表 1 字节 + 头信息 5 字节 + &lt;code&gt;trx_id&lt;/code&gt; 6 字节 + &lt;code&gt;roll_pointer&lt;/code&gt; 7 字节 = 41 字节。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next_record&lt;/code&gt;  指向真实信息和头信息中间，这个位置刚刚好，向左是 NULL 值列表（逆序存放）和变长字段长度列表（逆序存放），向右是真实信息。逆序可以使得记录中靠前的字段和它们对应的字段长度列表在内存中靠得更近，可能会&lt;strong&gt;提高缓存命中率&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;file-header&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file-header&#34;&gt;#&lt;/a&gt; File Header&lt;/h2&gt;
&lt;p&gt;校验和：对于一个很长的字符串，通过算法计算出比较短的值代表这个长字符串，这个值就是校验和。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_SPACE_OR_CHKSUM&lt;/td&gt;
&lt;td&gt;(4Byte) 空间或校验和，MySQL 版本低于 4.0.14 时，该属性表示本页面所在的&lt;strong&gt;表空间 ID&lt;/strong&gt;；之后的版本表示页的&lt;strong&gt;校验和&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_OFFSET&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;页号&lt;/strong&gt;，对于页号的分配，并不是连续的，也就是说&lt;strong&gt;使用的页在磁盘上可能并不挨着（当然是尽可能挨着）&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_PREV&lt;/td&gt;
&lt;td&gt;上页的页号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_NEXT&lt;/td&gt;
&lt;td&gt;下页的页号（形成双向链表）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_TYPE&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;页的类型&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID&lt;/td&gt;
&lt;td&gt;页属于哪个表空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIL_PAGE_LSN&lt;/td&gt;
&lt;td&gt;页面被最后修改时对应的 LSN（Log Sequence Number，日志序列号）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表格中内容看起来比较多，但是梳理一下就很清晰。&lt;/p&gt;
&lt;p&gt;首先，MySQL 具有良好的健壮性，比如内存中的页&lt;strong&gt;正在&lt;/strong&gt;被刷新到磁盘中，但是此时突然断电了，导致刷新时只刷了一部分。我们就需要使用校验和来判断一个页是否被完整的刷新到磁盘中，这个在 &lt;code&gt;File Trailer&lt;/code&gt;  部分会讲解到。&lt;/p&gt;
&lt;p&gt;其实，B + 树的节点就是页，页与页之间形成一个多叉树的同时，同一层的节点又形成双向链表。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/26/d5d6dec569020c94.png&#34; alt=&#34;image-20220726112224302&#34; /&gt;&lt;/p&gt;
&lt;p&gt;这样，我们就记住了中间三个属性。最后的 &lt;code&gt;FIL_PAGE_TYPE&lt;/code&gt;  表示页的类型，肯定啊，MySQL 这么大，肯定不可能只有 1 种页。&lt;/p&gt;
&lt;h2 id=&#34;page-directory&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#page-directory&#34;&gt;#&lt;/a&gt; Page Directory&lt;/h2&gt;
&lt;p&gt;现在记录通过 &lt;code&gt;next_record&lt;/code&gt;  连成了一个有序单向链表，对链表使用二分查找过程大致如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将记录分为若干组，每个组最大的那个记录，其 &lt;code&gt;n_owned&lt;/code&gt;  表示该组记录数。&lt;/li&gt;
&lt;li&gt;将每组最大记录的地址偏移量拿出来，按顺序排列在 &lt;code&gt;Page Dierctory&lt;/code&gt;  中。&lt;/li&gt;
&lt;li&gt;这些偏移量被称为槽 -- &lt;code&gt;slot&lt;/code&gt; ，每个槽位 2 字节， &lt;code&gt;Page Dierctory&lt;/code&gt;  就是由若干个槽组成。&lt;/li&gt;
&lt;li&gt;你可以把一个个顺序排列的槽看作一个数组，槽对应的记录越小，就越接近 &lt;code&gt;File Trailer&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键的问题是怎么分组，机制为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;Infimum&lt;/code&gt;  记录所在的分组，只能有一条记录。即最靠近 &lt;code&gt;File Trailer&lt;/code&gt;  的槽始终是 &lt;code&gt;Infimum&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;对于 &lt;code&gt;supermum&lt;/code&gt;  记录所在的分组，可以有 1~8 条记录。&lt;/li&gt;
&lt;li&gt;其余组只能有 4~8 条记录，如果组中记录大于 8 条，会 4,5 分为两组，并生成一个新的 &lt;code&gt;slot&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;每次插入一条记录，该记录都会从页目录中寻找对应记录的主键值比待插入记录主键值大且差值最小的 &lt;code&gt;slot&lt;/code&gt; （然后找到前一个槽 A，A 对应的记录开始遍历插入即可）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;配合这种机制，哪怕记录插入表中，记录在每个槽中也会保持有序，并且每个组中记录的主键逐渐紧凑。&lt;/p&gt;
&lt;p&gt;下图省略了记录之间的连接：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/27/350085bbd3bc62f9.png&#34; alt=&#34;image-20220727133511829&#34; /&gt;&lt;/p&gt;
&lt;p&gt;上图相当于是： &lt;code&gt;slot_0=Infimum&lt;/code&gt; ， &lt;code&gt;slot_1=4&lt;/code&gt; ， &lt;code&gt;slot_2=Supremum&lt;/code&gt; 。假设要查询记录 7，就相当于在数组 &lt;code&gt;[Min,4,Max]&lt;/code&gt;  里面进行二分查找，最后找到 4，记录 4 的下一条记录就是槽 2 的组的记录，就相当于遍历槽 2 的组，直到找到目标记录。&lt;/p&gt;
&lt;h2 id=&#34;page-header&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#page-header&#34;&gt;#&lt;/a&gt; Page Header&lt;/h2&gt;
&lt;p&gt;总共 56 字节，该结构是存储数据页中记录的状态信息，比如页中的记录数， &lt;code&gt;Free Space&lt;/code&gt;  的偏移量，页目录有多少个槽等。下图只是部分结构，没有写完，记不住问题也不大，但是看到这里，下面的部分属性你肯定很熟悉。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;长度&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_HEAP_TOP&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;还未使用的空间的最小地址，向后走就是 Free Space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_N_HEAP&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;第 1 位表示是否为紧凑型记录，剩余的 15 位表示本页的堆中的记录（包括 Infimumu,supermum 和已删除记录）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_FREE&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;垃圾链表头节点对应记录在页面中的偏移量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_GARBAGE&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;已删除记录占用的字节数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_DIRECTION&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;记录插入的方向，向后是 right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_N_DIRECTION&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;记录连续插入同一个方向的记录条数，当插入方向不同时，马上重置刷新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_N_RECS&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;该页用户记录的数量（不包括 Infimumu,supermum 和已删除记录）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_MAX_TRX_ID&lt;/td&gt;
&lt;td&gt;8Byte&lt;/td&gt;
&lt;td&gt;修改当前页的最大事务 id，该值仅在二级索引页面中定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PAGE_LEVEL&lt;/td&gt;
&lt;td&gt;2Byte&lt;/td&gt;
&lt;td&gt;2Byte, 该页在 B + 树中的层级&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;file-trailer&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#file-trailer&#34;&gt;#&lt;/a&gt; File Trailer&lt;/h1&gt;
&lt;p&gt;在 &lt;code&gt;File Header&lt;/code&gt;  提到过校验和。如果页从内存刷新到磁盘中断电了，导致之刷新了一部分到磁盘中该怎么办？ &lt;code&gt;File Trailer&lt;/code&gt;  就是为了&lt;strong&gt;检验&lt;/strong&gt;一个页是否刷新完整（至于如何恢复，那就的学到日志那才知道了）&lt;/p&gt;
&lt;p&gt;该部分由 8 个字节组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前四个字节代表页的校验和，该部分与 &lt;code&gt;File Header&lt;/code&gt;  的校验和相对应。 &lt;strong&gt;每次&lt;/strong&gt;页在内存中发生&lt;strong&gt;修改&lt;/strong&gt;时，在刷新前就要把校验和算出来。以页 A（假设校验和为 1）刚从磁盘读到内存为例，修改之后校验和为 2，那么此时磁盘中的页 A 和内存中的页 A 校验和不一样。刷新到磁盘时， &lt;code&gt;File Header&lt;/code&gt;  的磁盘先被刷新到磁盘中，如果断电导致 &lt;code&gt;File Trailer&lt;/code&gt;  的校验和没有刷新进去，那么磁盘中的 &lt;code&gt;File Header&lt;/code&gt;  与 &lt;code&gt;File  trailer&lt;/code&gt;  的校验和就不一样。&lt;/li&gt;
&lt;li&gt;后四个字节是页面最后被修改时对应的 LSN 的后 4 个字节，与 &lt;code&gt;File Header&lt;/code&gt;  相对应，也是检验页完整性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文总结于《从根上理解 MySQL》第五章 p72-p89，作者：小孩子 4919。对于有能力或者兴趣的读者，鄙人强烈推荐这本书，如果您能够通过正规渠道购买，支持作者，支持正版，支持每一颗热爱技术的心，我将感激不尽。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MySQL" />
        <updated>2022-07-26T02:49:58.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2022/07/25/Database/MySQL/InnoDB%E8%A1%8C%E6%A0%BC%E5%BC%8F%E5%AD%98%E5%82%A8%E8%AE%B0%E5%BD%95/</id>
        <title>InnoDB行格式存储记录</title>
        <link rel="alternate" href="https://cecilia.cool/2022/07/25/Database/MySQL/InnoDB%E8%A1%8C%E6%A0%BC%E5%BC%8F%E5%AD%98%E5%82%A8%E8%AE%B0%E5%BD%95/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#前言&#34;&gt;#&lt;/a&gt; 前言&lt;/h1&gt;
&lt;p&gt;MySQL 服务器中负责对表中数据进行读取和写入工作的部分是&lt;strong&gt;存储引擎&lt;/strong&gt;，而服务器支持不同类型的存储引擎，如 InnoDB，MyISAM，MEMORY 等。&lt;strong&gt;真实数据在不同存储引擎的存放格式可能不同&lt;/strong&gt;。因为 InnoDB 现在是 MySQL 默认的存储引擎，所以会介绍其相关特性。&lt;/p&gt;
&lt;p&gt;在 MySQL 中，表中的一行数据被称为一条记录，记录保存在页中，页组成 B + 树，通过二分查找迅速找到记录。如果你还看不太懂，也没太大关系，这句话只是想告诉你 InnoDB 存储数据的本质。&lt;/p&gt;
&lt;h1 id=&#34;innodb页&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb页&#34;&gt;#&lt;/a&gt; InnoDB 页&lt;/h1&gt;
&lt;p&gt;数据库会频繁发生数据的读取和写入，这就像操作系统的文件系统一样，会发生大量的与磁盘的交互。但是从磁盘中直接读写数据非常慢，也就是说数据库不可能每次读写数据都直接和磁盘交互，所以就将数据分为若干个页，&lt;strong&gt;以页作为磁盘与内存之间交互的基本单位&lt;/strong&gt;，其实页的本质也就是一个固定大小的内存。&lt;/p&gt;
&lt;p&gt;InnoDB 中的页大小一般是 16KB，也就是说，一次从磁盘中读取的数据最少是 16KB，每次将内存中的数据刷新到磁盘中最少也是 16KB。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; show variables like &#39;innodb_page_size&#39;;
+------------------+-------+
| Variable_name    | Value |
+------------------+-------+
| innodb_page_size | 16384 |
+------------------+-------+
1 row in set, 1 warning (0.00 sec)
# 16 * 1024 = 16384
#该系统变量不能在服务器运行时修改。
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;innodb行格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#innodb行格式&#34;&gt;#&lt;/a&gt; InnoDB 行格式&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;一条记录的存放格式被称为为行格式或者记录格式&lt;/strong&gt;，InnoDB 目前有四种行格式： &lt;code&gt;COMPACT&lt;/code&gt; ， &lt;code&gt;REDUNDANT&lt;/code&gt; ， &lt;code&gt;DYNAMIC&lt;/code&gt; ， &lt;code&gt;COMPRESSED&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 指定行格式
create table 表名 (列信息) row_format=行格式名
alter table 表名 row_format=行格式
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;compact行格式&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#compact行格式&#34;&gt;#&lt;/a&gt; COMPACT 行格式&lt;/h2&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/25/49b544009f43872c.png&#34; alt=&#34;image-20220725103902849&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;变长字段长度列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#变长字段长度列表&#34;&gt;#&lt;/a&gt; 变长字段长度列表&lt;/h3&gt;
&lt;p&gt;我们先创建一个表，用于之后的示例讲解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table record_format_demo (
	t1 varchar(10),
    t2 varchar(256),
    t3 varchar(20) not null
) character set = ascii row_format = COMPACT;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;变长字段指的就是 varchar (10) 这种，不能预先确定存储的数据的大小。在 InnoDB 读取数据时，如果是一个确定大小的数据，那么就能根据其大小确定偏移量从而读取出正确的数据，但是变长数据是不确定的，所以就需要保存这个变长字段（不为 NULL）的长度，来告诉 InnoDB 这个数据的大小。&lt;/p&gt;
&lt;p&gt;所以变长字段占用的存储空间分为两部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;真正的数据内容&lt;/li&gt;
&lt;li&gt;该数据占用的字节数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 COMPACT 行格式中，所有变长字段的真实数据占用字节数都存放在记录的开头位置 (十六进制，各字段长度之间没有空格)，从而形成一个变长字段长度列表。各字段占用&lt;strong&gt;字节数&lt;/strong&gt;按列的顺序逆序存放，是逆序存放！&lt;/p&gt;
&lt;p&gt;有时用于表示长度的数据，需要占据不止一个字节。比如某一变长字段占字节 &lt;code&gt;n=700&lt;/code&gt; , 那么就需要用到多个字节来表示 &lt;code&gt;n&lt;/code&gt; ，&lt;strong&gt;因为一个字节哪怕加上符号位也表示不了 n&lt;/strong&gt;。关于使用几个字节，InnoDB 有属于自己的规则，此处引入 &lt;code&gt;W，M，L&lt;/code&gt;  三个符号：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;W：假设某个&lt;strong&gt;字符集&lt;/strong&gt;中最多需要 &lt;code&gt;W&lt;/code&gt;  字节表示一个字符 (也就是 &lt;code&gt;show charset;&lt;/code&gt;  中的 &lt;code&gt;MaxLen&lt;/code&gt;  列)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M：对于变长类型 &lt;code&gt;VARCHAR(M)&lt;/code&gt;  来说，这种类型表示能存储最多&lt;strong&gt; M 个字符&lt;/strong&gt; (是字符，不是字节)，所以该类型最多能存储 &lt;code&gt;M*W&lt;/code&gt;  个字节&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;L：该变长字段&lt;strong&gt;实际存储&lt;/strong&gt;的字符数占用的字节数是 L&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;InnoDB 在读取记录变长字段长度列表时，&lt;strong&gt;会先查看表结构&lt;/strong&gt;，如果某个字段允许存储最大字节数 &lt;code&gt;M*W&amp;lt;=255&lt;/code&gt; ，就认为只是用 1 字节表示真实数据占用的字节数。&lt;/p&gt;
&lt;p&gt;如果 &lt;code&gt;M*W &amp;gt; 255&lt;/code&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若 &lt;code&gt;L &amp;lt;= 127&lt;/code&gt;  使用 1 字节&lt;/li&gt;
&lt;li&gt;若 &lt;code&gt;L &amp;gt; 127&lt;/code&gt;   使用 2 字节&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;255 是 1 个字节（无符号整型）能表示的最大数，即 8 位全为 1，2^8-1=255。&lt;/p&gt;
&lt;p&gt;127 是 1 个字节（有符号整型）能表示的最大数，即最高位 0，其他 7 位为 1，2^7-1=127&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该规则主要就是用于区分长度列表中，当 &lt;code&gt;M*W &amp;gt; 255&lt;/code&gt;  时，一个字节到底是一个单独的字段长度 **（L &amp;lt;= 127）&lt;strong&gt;，还是半个字段长度&lt;/strong&gt;（L &amp;gt; 127)**。设计者使用该字节的第一个二进制位作为标志位：如果该字节的第一个位是 0，该字节就是一个单独的字段长度，这也就是 0~127 的第一位都是 0。如果第一位为 1，那么该字节就是半个字段长度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实可以设定，只要 M*W &amp;gt; 255 就使用两个字节存储变长字段长度。之所以分的这么细，是想要节省空间，设计者的良苦用心可见一斑&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果某个字段占用字节特别多，InnoDB 可能会把该字段的值的一部分数据存放到&lt;strong&gt;溢出页&lt;/strong&gt;中，变长度列表只记录留在本页中的数据长度，&lt;br /&gt;
所以&lt;strong&gt; 2 字节表示变长字段长度是完全足够的&lt;/strong&gt;。同时，长度列表只有在&lt;strong&gt;有必要存在时&lt;/strong&gt;，才会存在（存在不为 NULL 的变长字段）&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;CHAR(M)&lt;/code&gt;  而言，如果使用的&lt;strong&gt;字符集&lt;/strong&gt;是变长编码字符集，那么该属性也会被加入到变长列表中，并且长度为 &lt;code&gt;M*W&lt;/code&gt;  (该字符集的 MaxLen=W)。&lt;/p&gt;
&lt;h3 id=&#34;null值列表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#null值列表&#34;&gt;#&lt;/a&gt; NULL 值列表&lt;/h3&gt;
&lt;p&gt;COMPACT 把一条记录的值为 NULL 的统一管理起来，存储到 NULL 列表中。处理过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;统计表中允许储存 NULL 的列有哪些 (比如主键和 NOT NULL 会被排除)&lt;/li&gt;
&lt;li&gt;如果表中所有列都不能存储 NULL，那么 NULL 值列表也就不存在。否则将每个允许存储 NULL 的列对应一个二进制位，位按照列的顺序&lt;strong&gt;逆序&lt;/strong&gt;排列，位值为 1 时，代表该列的值为 NULL&lt;/li&gt;
&lt;li&gt;MySQL 规定 NULL 列表必须用整数个字节的位表示，不足高位补 0&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么是逆序之后会提到，先不要着急。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;记录头信息&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#记录头信息&#34;&gt;#&lt;/a&gt; 记录头信息&lt;/h3&gt;
&lt;p&gt;记录头信息由固定的 5 个字节（40bit）组成，用于描述记录的一些信息&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://s3.bmp.ovh/imgs/2022/07/25/75ddfe7a3d59a65d.png&#34; alt=&#34;image-20220725112044762&#34; /&gt;&lt;/p&gt;
&lt;p&gt;​																												各二进制位的详细信息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;预留位 1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;没有使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;预留位 2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;没有使用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;deleted_flag&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;标记该记录是否被删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;min_rec_flag&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;B + 树的每层非叶子节点中最小目录项记录会添加该标记&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;n_owned&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;页面中记录会被分为多个组，每个组最大的那个记录作为 “大哥”，“大哥 “的该标志位会记录组中记录条数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;heap_no&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前记录在页面堆中的相对位置，记录紧密排列的结构称为堆，前面的记录该值小，后面的值更大&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;record_type&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前记录类型，0-- 普通记录，1--B + 树非叶子节点的目录项记录，2--Infimum，3--supremum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;next_record&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;表示下一条记录的相对位置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这么多，看不懂无所谓，现在记不住无所谓。&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;deleted_flag 中，0 表示没有删除，1 表示已经删除。尽管一条记录被标志为删除，但是并不会马上从表中移除，&lt;strong&gt;这是避免移除后要重新排列其他记录，造成性能损耗&lt;/strong&gt;。所以这些被标志删除的记录，会组成一个垃圾链表，这些空间又被称为可重用空间，如我新插入的记录，垃圾链表中某一个节点（记录）放得下，就会将新纪录覆盖的那条被标志为删除的记录。&lt;/li&gt;
&lt;li&gt;next_record 向我们表明记录会被排列成链表，链表是个好东西。&lt;/li&gt;
&lt;li&gt;record_type 表示记录的四种类型，在目前知晓的查询算法中，二分查找已非常优秀的，所以在 MySQL 中大量使用了二分查找。那么就涉及到记录之间的大小比较，一般是通过键值比较大小。规定 &lt;code&gt;record_type=2&lt;/code&gt;  的记录是所有记录中最小的， &lt;code&gt;record_type=3&lt;/code&gt;  的记录是所有记录中最大的。这两个记录实际不存储任何真实数据，但是它们分别是记录链表中的起点和终点，非常重要。 &lt;code&gt;record_type=1&lt;/code&gt;  暂时不需要知道。之后会讲解&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;记录的真实数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#记录的真实数据&#34;&gt;#&lt;/a&gt; 记录的真实数据&lt;/h3&gt;
&lt;p&gt;我需要提醒一下，标题中的记录都是名词，不是动词。&lt;/p&gt;
&lt;p&gt;对于表来说，记录的真实数据除了我们自己设定的数据（比如 &lt;code&gt;name=&#39;cyan&#39;&lt;/code&gt;  之类的），MySQL 还会为每个记录默认地添加一些列 (也称为&lt;strong&gt;隐藏列&lt;/strong&gt;)。&lt;/p&gt;
&lt;p&gt;​														MySQL 为每个记录默认添加的列&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;列名&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;是否必需&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;占用空间&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;row_id&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;非必需&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6 字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;行 ID，唯一标识一条记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;trx_id&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必需&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;6 字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;事务 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;roll_pointer&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;必需&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;7 字节&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;回滚指针，形成版本链&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其实上述列名都是大写！并且这三列数据位于额外信息和真实数据中间&lt;/p&gt;
&lt;p&gt;解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;row_id 是唯一表示一条记录。如果在创建表时没有指定主键或者没有&lt;strong&gt;不能为 NULL 的唯一属性&lt;/strong&gt;，反正就是，没有一个属性能够唯一表示一条记录，那么 row_id 就会被添加。&lt;/li&gt;
&lt;li&gt;trx_id 与事务有关，暂时不需要了解&lt;/li&gt;
&lt;li&gt;roll_pointer 是回滚指针，为了方便大家理解，这里不那么准确的讲，MySQL 支持回滚操作，也就是说我们改动一条记录后，如果想要回滚到上一个版本，就需要保存上一个版本的数据，那么 roll_pointer 就是指向上一个版本（改动前）的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文总结于《从根上理解 MySQL》第四章 p55-p63，作者：小孩子 4919。对于有能力或者兴趣的读者，鄙人强烈推荐这本书，如果您能够通过正规渠道购买，支持作者，支持正版，支持每一颗热爱技术的心，我将感激不尽。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MySQL" />
        <updated>2022-07-25T02:11:43.000Z</updated>
    </entry>
    <entry>
        <id>https://cecilia.cool/2022/07/24/Database/MySQL/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/</id>
        <title>字符集与比较规则</title>
        <link rel="alternate" href="https://cecilia.cool/2022/07/24/Database/MySQL/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h1&gt;
&lt;p&gt;计算机中存储的实际上是二进制数据，想要存储字符串，就要建立字符与二进制数据的映射关系。将字符映射为二进制数据的过程叫做&lt;strong&gt;编码&lt;/strong&gt;，将二进制数据映射为字符的过程就是&lt;strong&gt;解码&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;为了容易记忆，你需要知道，解码就是把看不懂的数据（二进制数据）解析为看得懂的数据（字符）。&lt;/p&gt;
&lt;p&gt;因为每个字符实际上是二进制数据，所以他们是可以比较大小的，由此衍生出比较规则。以最经典的 ASCII 字符集为例，该字符集一共收录&lt;strong&gt; 128 个字符&lt;/strong&gt;，&lt;strong&gt;每个字符由一个字节保存&lt;/strong&gt;。字符&lt;strong&gt; a&lt;/strong&gt; 的二进制编码为 &lt;code&gt;1100001&lt;/code&gt; ，字符&lt;strong&gt; b&lt;/strong&gt; 的二进制编码为 &lt;code&gt;1100010&lt;/code&gt; ，通过比较就可以看出 &lt;code&gt;a&amp;gt;b&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;需要记住几种重要的字符集：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GBK 字符集：在字符范围上对 GB2312 字符集进行扩充，编码方式兼容 GB2312 字符集。记住其应用广泛即可&lt;/li&gt;
&lt;li&gt;UTF-8 字符集：几乎收录各国（地区）使用的字符，并且在不断扩充。使用变长编码方式，一个字符需要使用 1~4 个字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实 UTF-8 只是 Unicode 字符集的一种&lt;strong&gt;编码方案&lt;/strong&gt;，其他的还有 UTF-16（2 或 4 字节编码一个字符），UTF-32（4 字节）。&lt;/p&gt;
&lt;h1 id=&#34;mysql支持的字符集与比较规则&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#mysql支持的字符集与比较规则&#34;&gt;#&lt;/a&gt; MySQL 支持的字符集与比较规则&lt;/h1&gt;
&lt;h2 id=&#34;utf8mb3和utf8mb4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#utf8mb3和utf8mb4&#34;&gt;#&lt;/a&gt; utf8mb3 和 utf8mb4&lt;/h2&gt;
&lt;p&gt;我们平常使用的字符一般用 1~3 个字节就可以表示，在 MySQL 中，&lt;strong&gt;字符集表示一个字符所用的最大字节数会影响系统存储和性能&lt;/strong&gt;（比如一条记录中变长数据的存储，之后的文章会讲到）。&lt;/p&gt;
&lt;p&gt;总之，你需要记住的是 UTF-8 使用 1-4 个字节存储方式有点浪费，所以就有了 utf8mb3。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;utf8mb3：阉割版的 UTF-8 字符集，使用 1~3 个字节表示一个字符。&lt;/li&gt;
&lt;li&gt;utf8mb4：就是 UTF-8 字符集，使用 1~4 个字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 MySQL 中，&lt;strong&gt;utf8 是 utf8mb3 的别名&lt;/strong&gt;。同时，在 MySQL8.0 中，utf8mb4 被极大优化，成为了默认的字符集。&lt;/p&gt;
&lt;h2 id=&#34;字符集的查看&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#字符集的查看&#34;&gt;#&lt;/a&gt; 字符集的查看&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; show charset;
+----------+---------------------------------+---------------------+--------+
| Charset  | Description                     | Default collation   | Maxlen |
+----------+---------------------------------+---------------------+--------+
| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |
| dec8     | DEC West European               | dec8_swedish_ci     |      1 |
| cp850    | DOS West European               | cp850_general_ci    |      1 |
| hp8      | HP West European                | hp8_english_ci      |      1 |
| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |
+----------+---------------------------------+---------------------+--------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令  &lt;code&gt;show (character set | charset) [like 匹配模式];&lt;/code&gt;  （ &lt;code&gt;[]&lt;/code&gt;  里的内容可以省略）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Maxlen&lt;/code&gt;  表示该字符集最多需要几个字节表示一个字符。&lt;/p&gt;
&lt;p&gt;​																				&lt;strong&gt;表 1  常用字符集与 Maxlen&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Charset&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Maxlen&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;ascii&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;latin1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;gb2312&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;gbk&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;utf8&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;utf8mb4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Default collation&lt;/code&gt;  表示默认的比较规则，&lt;strong&gt;一个字符集可能对应多种比较规则&lt;/strong&gt;。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; show collation like &#39;utf8\_%&#39;;
+--------------------------+---------+-----+---------+----------+---------+
| Collation                | Charset | Id  | Default | Compiled | Sortlen |
+--------------------------+---------+-----+---------+----------+---------+
| utf8_general_ci          | utf8    |  33 | Yes     | Yes      |       1 |
| utf8_bin                 | utf8    |  83 |         | Yes      |       1 |
| utf8_unicode_ci          | utf8    | 192 |         | Yes      |       8 |
| utf8_icelandic_ci        | utf8    | 193 |         | Yes      |       8 |
| utf8_latvian_ci          | utf8    | 194 |         | Yes      |       8 |
| utf8_romanian_ci         | utf8    | 195 |         | Yes      |       8 |
| utf8_slovenian_ci        | utf8    | 196 |         | Yes      |       8 |
| utf8_polish_ci           | utf8    | 197 |         | Yes      |       8 |
| utf8_estonian_ci         | utf8    | 198 |         | Yes      |       8 |
| utf8_spanish_ci          | utf8    | 199 |         | Yes      |       8 |
| utf8_swedish_ci          | utf8    | 200 |         | Yes      |       8 |
| utf8_turkish_ci          | utf8    | 201 |         | Yes      |       8 |
| utf8_czech_ci            | utf8    | 202 |         | Yes      |       8 |
| utf8_danish_ci           | utf8    | 203 |         | Yes      |       8 |
| utf8_lithuanian_ci       | utf8    | 204 |         | Yes      |       8 |
| utf8_slovak_ci           | utf8    | 205 |         | Yes      |       8 |
| utf8_spanish2_ci         | utf8    | 206 |         | Yes      |       8 |
| utf8_roman_ci            | utf8    | 207 |         | Yes      |       8 |
| utf8_persian_ci          | utf8    | 208 |         | Yes      |       8 |
| utf8_esperanto_ci        | utf8    | 209 |         | Yes      |       8 |
| utf8_hungarian_ci        | utf8    | 210 |         | Yes      |       8 |
| utf8_sinhala_ci          | utf8    | 211 |         | Yes      |       8 |
| utf8_german2_ci          | utf8    | 212 |         | Yes      |       8 |
| utf8_croatian_ci         | utf8    | 213 |         | Yes      |       8 |
| utf8_unicode_520_ci      | utf8    | 214 |         | Yes      |       8 |
| utf8_vietnamese_ci       | utf8    | 215 |         | Yes      |       8 |
| utf8_general_mysql500_ci | utf8    | 223 |         | Yes      |       1 |
+--------------------------+---------+-----+---------+----------+---------+
27 rows in set (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;命令： &lt;code&gt;show collation [like 匹配模式];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从命名中可以看出有些与地域有关系，如 &lt;code&gt;utf8_spanish_ci&lt;/code&gt;  是西班牙语的比较规则， &lt;code&gt;utf8_polish_ci&lt;/code&gt;  则是波兰语的比较规则。&lt;/p&gt;
&lt;p&gt;​																	&lt;strong&gt;表 2  比较规则后缀英文释义及描述&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;后缀&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;英文释义&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;_ai&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;accent insensitive&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不区分重音&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;_as&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;accent sensitive&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;区分重音&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;_ci&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;case insensitive&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;不区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;_cs&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;case (大小写) sensitive&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;区分大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;_bin&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;binary&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;以二进制方式比较&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#应用&#34;&gt;#&lt;/a&gt; 应用&lt;/h1&gt;
&lt;p&gt;MySQL 有四个级别的字符集和比较规则，分别是服务器级别，数据库级别，表级别，列级别。下面解释如何设置和查看不同级别的字符集和比较规则。&lt;/p&gt;
&lt;h3 id=&#34;服务器级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#服务器级别&#34;&gt;#&lt;/a&gt; 服务器级别&lt;/h3&gt;
&lt;p&gt;MySQL 提供两个变量来表示服务器级别的字符集和比较规则。&lt;/p&gt;
&lt;p&gt;​																			&lt;strong&gt;表 3  服务器对应的系统变量&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;系统变量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;character_set_server&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;服务器级别的字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;collation_server&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;服务器级别的比较规则&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;相关命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; show variables like &#39;%_server&#39;;
+----------------------+-------------------+
| Variable_name        | Value             |
+----------------------+-------------------+
| character_set_server | latin1            |
| collation_server     | latin1_swedish_ci |
+----------------------+-------------------+
2 rows in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果想要修改这两个系统变量，需要通过启动选项或者使用 set 语句修改  &lt;code&gt;set global/session varName = value&lt;/code&gt; （如果看不懂命令，之后的文章会提到 &lt;code&gt;global/session&lt;/code&gt; ）&lt;/p&gt;
&lt;h3 id=&#34;数据库级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据库级别&#34;&gt;#&lt;/a&gt; 数据库级别&lt;/h3&gt;
&lt;p&gt;字符集和比较规则在创建和修改数据库时可以指定该数据库的字符集和比较规则&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create database 数据库名
	[[default] character set 字符集名称]
	[[default] collation 比较规则名称]
	
alter database 数据库名
	[[default] character set 字符集名称]
	[[default] collation 比较规则名称]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;数据库级别也有两个系统变量，当我们使用 &lt;code&gt;use&lt;/code&gt;  语句选择一个数据库时，这两个系统变量的值就是该数据库的字符集和比较规则。&lt;strong&gt;如果没有选择数据库，它们的值和服务器级别的系统变量值相同&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​																				&lt;strong&gt;表 4  数据库对应的系统变量&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;系统变量&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;character_set_database&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前数据库的字符集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;collation_databased&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;当前数据库的比较规则&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;我们不能通过修改这两个系统变量的值来改变当前数据库的字符集和比较规则。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; show variables like &#39;%_server&#39;;
+----------------------+-------------------+
| Variable_name        | Value             |
+----------------------+-------------------+
| character_set_server | latin1            |
| collation_server     | latin1_swedish_ci |
+----------------------+-------------------+
2 rows in set, 1 warning (0.00 sec)

mysql&amp;gt; create database test;
Query OK, 1 row affected (0.01 sec)

mysql&amp;gt; use test;
Database changed

mysql&amp;gt; show variables like &#39;%_database&#39;;
+------------------------+-------------------+
| Variable_name          | Value             |
+------------------------+-------------------+
| character_set_database | latin1            |
| collation_database     | latin1_swedish_ci |
| skip_show_database     | OFF               |
+------------------------+-------------------+
3 rows in set, 1 warning (0.00 sec)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，如果&lt;strong&gt;在创建数据库时没有指定字符集和比较规则，就会使用服务器级别的字符集和比较规则&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;表级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#表级别&#34;&gt;#&lt;/a&gt; 表级别&lt;/h3&gt;
&lt;p&gt;表级别和数据库级别差不多，都是在创建，修改表时可以修改表的字符集和比较规则，如果没有在创建表时指明其字符集和比较规则，就会使用当前数据库的字符集和比较规则。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table t(
	col varchar(10)
) character set utf8,collate utf8_general_ci;

alter table t character set utf8;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表查看比较规则&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;# 使用\G是将输出结果旋转90度输出，方便观看
mysql&amp;gt; show table status from test like &#39;t&#39; \G;
*************************** 1. row ***************************
           Name: t
         Engine: InnoDB
        Version: 10
     Row_format: Dynamic
           Rows: 0
 Avg_row_length: 0
    Data_length: 16384
Max_data_length: 0
   Index_length: 0
      Data_free: 0
 Auto_increment: NULL
    Create_time: 2022-07-24 17:44:59
    Update_time: NULL
     Check_time: NULL
      Collation: utf8_general_ci #比较规则
       Checksum: NULL
 Create_options:
        Comment:
1 row in set (0.00 sec)

ERROR:
No query specified
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，表 &lt;code&gt;t&lt;/code&gt;  的比较规则为 &lt;code&gt;utf8_general_ci&lt;/code&gt; ，则字符集为  &lt;code&gt;utf8&lt;/code&gt; （为什么知道比较规则之后就知道了字符集，请继续看）。&lt;/p&gt;
&lt;h3 id=&#34;列级别&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#列级别&#34;&gt;#&lt;/a&gt; 列级别&lt;/h3&gt;
&lt;p&gt;同一个表中，不同列也可以有不同的比较规则。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;create table 表名(
	列名 字符串类型 [character set 字符集名称] [collate 比较规则名称],
    其他列....
);

alter table 表名 modify 列名 [character set 字符集名称] [collate 比较规则名称];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要注意的是，&lt;strong&gt;对于任何一个级别&lt;/strong&gt;，存在两条修改规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只修改字符集，则比较规则将会变为修改后的字符集默认的比较规则。&lt;/li&gt;
&lt;li&gt;只修改比较规则，则字符集会变为比较规则对应的字符集。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果想要同时修改字符集和比较规则，他们两个一定要适配，比如下列命令&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mysql&#34;&gt;mysql&amp;gt; alter table t character set utf8 collate utf8mb4_general_ci;
ERROR 1253 (42000): COLLATION &#39;utf8mb4_general_ci&#39; is not valid for CHARACTER SET &#39;utf8&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;报错信息为比较规则 &lt;code&gt;utf8mb4_general_ci&lt;/code&gt;  对于字符集 &lt;code&gt;utf8&lt;/code&gt;  是无效的，所以，我们知道了一个表的比较规则，一般也就知道了其字符集。&lt;/p&gt;
&lt;h1 id=&#34;引用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#引用&#34;&gt;#&lt;/a&gt; 引用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;本文总结于《从根上理解 MySQL》第三章 p32-p43，作者：小孩子 4919。对于有能力或者兴趣的读者，鄙人强烈推荐这本书，如果您能够通过正规渠道购买，支持作者，支持正版，支持每一颗热爱技术的心，我将感激不尽。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="MySQL" />
        <updated>2022-07-24T08:13:45.000Z</updated>
    </entry>
</feed>
