{
    "version": "https://jsonfeed.org/version/1",
    "title": "慕青の迷途",
    "description": "时雨病重症患者！！！",
    "home_page_url": "https://cecilia.cool",
    "items": [
        {
            "id": "https://cecilia.cool/2022/10/20/Tools/%E5%8D%97%E6%85%95%E9%9D%92%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "url": "https://cecilia.cool/2022/10/20/Tools/%E5%8D%97%E6%85%95%E9%9D%92%E3%81%AE%E7%A2%8E%E7%A2%8E%E5%BF%B5/",
            "title": "南慕青の碎碎念",
            "date_published": "2022-10-20T05:12:04.807Z",
            "content_html": "<h1 id=\"前尘\"><a class=\"anchor\" href=\"#前尘\">#</a> 前尘</h1>\n<p>搭建博客是一件很麻烦的事，自己写网站代码，自己买服务器搭上去，自己写文章，有时还会遇到一些 sb 跟你玩 DDoS，md，学了点东西就违法犯罪是吧，详情<strong>参考《刑法》第二百八十六条破坏计算机信息系统罪</strong>。当然很多 DDoS 是公司发动的。</p>\n<p>我很懒，也怕麻烦，所以选择了 Hexo 框架，在 Github 上搭了个小家。</p>\n<p>其实最开始还是看三叶姐的微信公众号的一篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvZEVIWW1HaVprS2tyVmR3N285QWF4Zw==\">碎碎念</span>才了解到 Hexo 这个框架，后来就开始找主题，个人体验几个主题：</p>\n<ul>\n<li>[stun](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2xpdXlpYi9oZXhvLXRoZW1lLXN0dW4uZ2l0\">https://github.com/liuyib/hexo-theme-stun.git</span> themes/stun)：简约风，好像不维护了，在 README 里面推荐 NexT 主题。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/20/ee0a3917d638ec09.jpg\" alt=\"\" /></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2ZsdWlkLWRldi9oZXhvLXRoZW1lLWZsdWlk\">fluid</span>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=\">三叶姐</span>用的就是这个，我也用过一段时间。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/20/f72a0febc8143ea0.jpg\" alt=\"\" /></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibGlua2ZveC5naXRodWIuaW8v\">闪烁之狐</span>：其实个人感觉颜色太鲜艳了，感兴趣可以试试，链接点进去就可以看效果。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FtZWhpbWUvaGV4by10aGVtZS1zaG9rYQ==\">Shoka</span>：超级推荐，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUv\">开发者</span>的博客，很厉害的主题，功能点特别多，可以选择性关闭，感兴趣就去试试，超级推荐。</li>\n</ul>\n<p>然后换上自己喜欢的域名，打开 Github 支持的 https，关于慕青的博客就搭建好了。</p>\n<h1 id=\"今世\"><a class=\"anchor\" href=\"#今世\">#</a> 今世</h1>\n<blockquote>\n<p>不要问我为什么一级标题这么中二！！！！</p>\n</blockquote>\n<p>最开始的内容，路线是跟着 pdai（皮带哥）的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gv\"> Java 全栈知识体系</span>写的，这位前辈给我的很深触动就是他的网站开篇的一句话：</p>\n<p><strong>当你将本文中知识点掌握时，你会发现那些平时高谈阔论的家伙其实都是纸老虎；但你依然要保持谦卑，闻道有先后，术业有专攻，如是而已。</strong></p>\n<p><div class=\"links\"><div class=\"item\" title=\"pdai\" style=\"--block-color:#38b5b2;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gv\" data-background-image=\"https://s3.bmp.ovh/imgs/2022/10/20/f7b81a3958dc4db4.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gv\">Java全栈知识体系</span>\n          <p class=\"desc\">生活的本身才是最重要的，保持身心健康，去爱你所爱，不虚此生！</p>\n          </div></div></div></p>\n<p>后来在 B 站遇到了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\">青空の霞光</span>，他也是一个在读大学生（当你看到这篇文章时他可能毕业了），很厉害的，然后 JavaWeb，Netty，JVM，Docker 什么的，都是跟着他写的博客，当然，中间也参考（白嫖）了 pdai 大佬的文章。</p>\n<p><div class=\"links\"><div class=\"item\" title=\"青空の霞光\" style=\"--block-color:#f8dada;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\" data-background-image=\"https://s3.bmp.ovh/imgs/2022/10/20/842da9b731ec16ed.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\">青空の霞光</span>\n          <p class=\"desc\">白马程序员课程金牌讲师(doge)</p>\n          </div></div></div></p>\n<p>之后会更新算法笔记，但都是跟着三叶姐走，我会尽量用自己的话再将透彻一点，三叶姐厉害！</p>\n<p><div class=\"links\"><div class=\"item\" title=\"宫水三叶\" style=\"--block-color:#165e8e;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=\" data-background-image=\"https://s3.bmp.ovh/imgs/2022/10/20/c683089bcb314ca3.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9zaGFyaW5nc291cmNlLmdpdGh1Yi5pby8=\">宫水三叶の刷题日记</span>\n          <p class=\"desc\">算法爱好者，退役Oler，现微软工程师</p>\n          </div></div></div></p>\n<p>其实还有一位<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMTk2NTg2MjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\"> Frank</span> 前辈，我的 c 语言，linux，java 入门都是看他的视频，其实这都不是最重要的，而是他告诉我们（还有其他伙伴）的思想：</p>\n<ul>\n<li>基础最重要，不要沉迷于框架。</li>\n<li>数据结构和算法很重要，但是光刷题是不能进大厂的。</li>\n<li>好好学习，好好训练。</li>\n<li>哦，还有精髓：……&amp;*￥（￥……@</li>\n</ul>\n<p>当然还有些话不方便写出来，总之，我很感谢。</p>\n<p>当然我也参考了很多书：</p>\n<ul>\n<li>shell：参考《Linux 命令行与 shell 脚本编程大全》第三版，作者 Richard Blum 和 Christine Bresnahan</li>\n<li>MySQL：参考《MySQL 是怎样运行的》，作者是小孩子 4919</li>\n<li>网络协议与工具：部分参考《计算机网络自顶向下方法》，作者是 James F.Kurose 和 Keith W.Ross</li>\n<li>操作系统（还没更）：部分参考《操作系统导论》，作者是 Remzi H.Arpaci-Dusseau 和 Andrea C.Arpaci-Dusseau</li>\n</ul>\n<h1 id=\"末了\"><a class=\"anchor\" href=\"#末了\">#</a> 末了</h1>\n<p>当然，每一篇文章到底参考了哪些，我都在最后的参考标题注明了的。</p>\n<p>这篇关于我的碎碎念，其实就只是向单纯向上面的大佬们说声谢谢，超级感谢。</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/20/Java/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/JUL%E6%97%A5%E5%BF%97(1)-%E5%88%9D%E4%BD%BF%E7%94%A8/",
            "url": "https://cecilia.cool/2022/10/20/Java/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/JUL%E6%97%A5%E5%BF%97(1)-%E5%88%9D%E4%BD%BF%E7%94%A8/",
            "title": "JUL日志(1)--初使用",
            "date_published": "2022-10-20T03:00:13.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>JUL（Java Util Logging），它是 Java 原生的日志框架，位于 java.util.logging.Logger 包。相对其他的框架使用方便，学习简单，主要是使用在小型项目中。</p>\n<h1 id=\"日志级别\"><a class=\"anchor\" href=\"#日志级别\">#</a> 日志级别</h1>\n<p>JUL 的日志级别有：</p>\n<table>\n<thead>\n<tr>\n<th>日志级别</th>\n<th>数值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>OFF</td>\n<td>Integer.MAX_VALUE</td>\n<td>关闭所有消息的日志记录</td>\n</tr>\n<tr>\n<td>SEVERE</td>\n<td>1000</td>\n<td>错误信息（最高级的日志级别）</td>\n</tr>\n<tr>\n<td>WARNING</td>\n<td>900</td>\n<td>警告信息</td>\n</tr>\n<tr>\n<td>INFO</td>\n<td>800</td>\n<td>默认信息（默认级别）</td>\n</tr>\n<tr>\n<td>CONFIG</td>\n<td>700</td>\n<td>配置信息</td>\n</tr>\n<tr>\n<td>FINE</td>\n<td>500</td>\n<td>详细信息（少）</td>\n</tr>\n<tr>\n<td>FINER</td>\n<td>400</td>\n<td>详细信息（中）</td>\n</tr>\n<tr>\n<td>FINEST</td>\n<td>300</td>\n<td>详细信息（多）（最低级的日志级别）</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>Integer.MIN_VALUE</td>\n<td>启用所有消息的日志记录</td>\n</tr>\n</tbody>\n</table>\n<p>Log 默认等级是 <code>INFO</code> ，等级低于当前日志等级的都打印不出来：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 日志默认级别是 info</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印info等级日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"通过log()方法打印info等级日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">severe</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印severe等级日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        logger<span class=\"token punctuation\">.</span><span class=\"token function\">finer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印finer等级日志，等级小于日志当前等级，打印不出来\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>结果:</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>十月 20, 2022 11:15:39 上午 com.cyan.Main main</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>信息：打印 info 等级日志</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>十月 20, 2022 11:15:39 上午 com.cyan.Main main</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>信息：通过 log () 方法打印 info 等级日志</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>十月 20, 2022 11:15:39 上午 com.cyan.Main main</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>严重：打印 severe 等级日志</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>我们可以手动设置日志级别，但是只修改日志等级是无法生效，要使用对应的 Handler 才行：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 修改日志级别</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FINEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 不使用父日志处理器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">setUseParentHandlers</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 使用自定义日志处理器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ConsoleHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FINEST</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SEVERE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"严重的错误\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我就是错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">finer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"打印finer等级日志\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>十月 20, 2022 11:21:47 上午 com.cyan.Main main</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>严重：严重的错误</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>java.io.IOException: 我就是错误</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tat com.cyan.Main.main (Main.java:24)</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>十月 20, 2022 11:21:47 上午 com.cyan.Main main</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>较详细：打印 finer 等级日志</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>日志记录器和处理器的级别进行统一的设置，才会达到日志显示相应级别的效果.</p>\n<p><code>Logger</code>  都有一个父日志打印器，默认使用 <code>ConsoleHandler</code> ，日志级别为 <code>INFO</code> 。每一个日志带引起都会直接使用父类处理器，因此需要关闭父类然后使用自己定义的处理器。</p>\n<h1 id=\"自定义处理器\"><a class=\"anchor\" href=\"#自定义处理器\">#</a> 自定义处理器</h1>\n<p><code>ConsoleHandler</code>  可以将信息打印到控制台，日志处理器还可以打印到文件中：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileHandler</span> fileHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileHander</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>filHandler<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>fileHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此处并没有关闭父日志处理器，所以同时存在两个处理器，因此控制台和文件都会生效。</p>\n<p>还可以选择打印格式：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ConsoleHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>handler<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>handler<span class=\"token punctuation\">.</span><span class=\"token function\">setFormatter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLFormatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>logger<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以通过 <code>Formatter</code>  类自定义打印格式，<strong>本质就是挨个获取要打印的内容，自己选择重新排版，换颜色</strong>等</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">setUseParentHandlers</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 为了让颜色变回普通的颜色，通过代码块在初始化时将输出流设定为 System.out</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">ConsoleHandler</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConsoleHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 创建匿名内部类实现自定义的格式</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">setFormatter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Formatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogRecord</span> record<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">SimpleDateFormat</span> format <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 格式化日志时间</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">String</span> time <span class=\"token operator\">=</span> format<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// String level = record.getLevel ().getName ();  // 获取日志级别名称</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 获取本地化名称（语言跟随系统）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">String</span> level <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocalizedName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">String</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 线程名称</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">long</span> threadID <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getThreadID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 线程 ID</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">String</span> className <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getSourceClassName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 发送日志的类名</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">String</span> msg <span class=\"token operator\">=</span> record<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 日志消息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token comment\">//\\033 [33m 是颜色代码，30~37 有对应的颜色，38 是没有颜色，IDEA 能显示，某些地方不支持</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\\033[38m\"</span> <span class=\"token operator\">+</span> time <span class=\"token operator\">+</span> <span class=\"token string\">\"  \\033[33m\"</span> <span class=\"token operator\">+</span> level <span class=\"token operator\">+</span> <span class=\"token string\">\" \\033[35m\"</span> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token operator\">+</span> threadID <span class=\"token operator\">+</span> <span class=\"token string\">\"\\033[38m --- [\"</span> <span class=\"token operator\">+</span> thread <span class=\"token operator\">+</span> <span class=\"token string\">\"] \\033[36m\"</span> </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token operator\">+</span> className <span class=\"token operator\">+</span> <span class=\"token string\">\"\\033[38m : \"</span> <span class=\"token operator\">+</span> msg <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addHandler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是测试消息1...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是测试消息2...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"我是测试消息3...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>标有注释的地方很重要，请特别注意。</p>\n<h1 id=\"过滤器\"><a class=\"anchor\" href=\"#过滤器\">#</a> 过滤器</h1>\n<p>希望某些日志信息不被输出，直接看代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">Logger</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 自定义过滤规则</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">setFilter</span><span class=\"token punctuation\">(</span>record <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"普通\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SEVERE</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"严重的错误\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我就是错误\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WARNING</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"警告的内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"普通的信息\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不会被打印</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjMTU3MzYzOGU=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#1573638e</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYnliZWl5YS9wLzE0OTAwNTMwLmh0bWw=\">https://www.cnblogs.com/bybeiya/p/14900530.html</span></p>\n</blockquote>\n",
            "tags": [
                "日志框架"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/19/Java/Mybatis/Mybatis(6)-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",
            "url": "https://cecilia.cool/2022/10/19/Java/Mybatis/Mybatis(6)-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",
            "title": "Mybatis(6)--动态代理",
            "date_published": "2022-10-19T08:01:45.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<blockquote>\n<p>请先学习 Java 反射部分</p>\n</blockquote>\n<h2 id=\"静态代理\"><a class=\"anchor\" href=\"#静态代理\">#</a> 静态代理</h2>\n<p>一方提供接口定义行为，并实现行为的基本操作。代理方在执行该行为时，可以加入自己的行为进去。这样需要提前知道接口的定义并进行实现才可以完成代理。而 Mybatis 这样的是无法预知代理接口的，我们就需要用到动态代理。</p>\n<blockquote>\n<p>JDK 提供的反射框架就为我们很好地解决了动态代理的问题。</p>\n</blockquote>\n<p>在使用 Mybatis 的时候，我们可以只定义一个 XxxMaper 接口，然后直接利用这个接口定义的抽象方法来进行增删改查操作，Mybatis 内部实际上利用了动态代理技术帮我们生成了这个接口的代理类。</p>\n<h1 id=\"动态代理\"><a class=\"anchor\" href=\"#动态代理\">#</a> 动态代理</h1>\n<p>我们带着 2 个问题来进行源码分析：</p>\n<ul>\n<li>\n<p>动态代理类是如何生成的</p>\n</li>\n<li>\n<p>动态代理类是如何对方法进行拦截的</p>\n</li>\n</ul>\n<h2 id=\"生成时机\"><a class=\"anchor\" href=\"#生成时机\">#</a> 生成时机</h2>\n<p>让我们先回到使用 xml 映射接口的阶段（就是忘掉注解开发），打开一个 web 程序，因为资源文件一般都放在 <code>resources</code>  文件夹里面，所以映射接口的 xml 文件也放在里面。</p>\n<p>总体如图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/19/a39d795cee468fd8.jpg\" alt=\"\" /></p>\n<p>再将映射接口的 xml 文件配置到 <code>mybatis-config.xml</code>  里面即可：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mappers/Mapper-config.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>最后在主函数里运行：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">SqlUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSqlSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Mapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 结果：org.apache.ibatis.binding.MapperProxy@318ba8c8</span></pre></td></tr></table></figure><p>很明显，通过调用 <code>getMapper(Class&lt;T&gt;)</code> ，Mybatis 为我们动态生成了一个接口的实例化对象，现在我更改一个小地方让程序报个错：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.mappers.Mappe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        select * from student</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>我们将接口的全类路径名故意写错，这是一个拙劣的错误，在 IDEA 里面 <code>selectStudent</code>  甚至会爆红。</p>\n<p>报的错误如下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Exception</span> in thread <span class=\"token string\">\"main\"</span> <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>binding<span class=\"token punctuation\">.</span></span>BindingException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Type</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>cyan<span class=\"token punctuation\">.</span>mappers<span class=\"token punctuation\">.</span></span>Mapper</span> is not known <span class=\"token keyword\">to</span> <span class=\"token namespace\">the</span> <span class=\"token class-name\">MapperRegistry</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tat <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>binding<span class=\"token punctuation\">.</span></span>MapperRegistry</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MapperRegistry</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tat <span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>ibatis<span class=\"token punctuation\">.</span>session<span class=\"token punctuation\">.</span></span>Configuration</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">745</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><blockquote>\n<p>我不是直接带你点入源码查看，而是通过这个错误从中切入，用心良苦，自我感动 ing。</p>\n</blockquote>\n<p>我们看一下报错的信息：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Type interface com.cyan.mappers.Mapper is not known to the MapperRegistry.</pre></td></tr></table></figure><p>我们希望动态代理一个 <code>Mapper</code>  的实例对象，但是 <code>Mybatis</code>  说这个接口的全类路径对于 <code>MapperRegister</code>  是不知道的。</p>\n<p>通过报错的定位点进去：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/19/8d8b3ba43b87a522.jpg\" alt=\"\" /></p>\n<p>我们定位找到了这段代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 因为博客展示问题，缩进可能和源码不一样</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">.</span><span class=\"token function\">isInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasMapper</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BindingException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Type \"</span> <span class=\"token operator\">+</span> type <span class=\"token operator\">+</span> <span class=\"token string\">\" is already known to the MapperRegistry.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// ... </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 现在没必要研究具体的代码细节</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这是 <code>MapperRegister</code>  类的代码，看 <code>throw</code>  抛出的异常正是控制台显示的异常。</p>\n<ul>\n<li><code>addMapper</code>  将 mybatis 解析配置文件时，将需要生成动态代理类的接口注册到其中。</li>\n<li><code>getMapper</code>  就是用于创建接口的动态类。</li>\n</ul>\n<p>正是因为无法将接口注册到 <code>MapperRegister</code>  才会出错。</p>\n<h3 id=\"底层源码\"><a class=\"anchor\" href=\"#底层源码\">#</a> 底层源码</h3>\n<p>现在从 <code>sqlSession.getMapper(Class&lt;T&gt;)</code>  里面查看源码：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/19/65e8fe8ce6574d26.jpg\" alt=\"\" /></p>\n<p>查看一下实现类的 <code>getMapper</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DefaultSqlSession</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SqlSession</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Configuration</span> configuration<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 将实际的 getmapper 交给 Configuration 处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 并且传递 this--SqlSeesion 参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> configuration<span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实， <code>Configuration</code>  也是交给 <code>MapperRegister</code>  执行的，并且将 <code>SqlSession</code>  了下去。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Configuration</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">MapperRegistry</span> mapperRegistry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MapperRegistry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 注册</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      mapperRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">addMapper</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlSession</span> sqlSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span> mapperRegistry<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> sqlSession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>于是，最终又回到了 <code>MapperRegister</code>  这个类上，我们现在看一下源码（内含 <code>getMapper()</code>  方法）：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapperRegistry</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Configuration</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 用于维护所有要生成动态代理类 XxxMapper 映射关系，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">//key 就是要生成动态代理类的 Class 对象，value 是真正生成动态代理的工厂类</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MapperProxyFactory</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> knownMappers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      \t\t\t\t\t\t\t\t     <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Class</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">MapperProxyFactory</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">T</span> <span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> type<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SqlSession</span> sqlSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 获取创建动态代理的工厂对象 MapperProxyFactory</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">MapperProxyFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> mapperProxyFactory <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MapperProxyFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        \t\t\t\t\t\t\t\t\t\t\t\t\tknownMappers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mapperProxyFactory <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 抛出之前控制台的报错，太长了，这里就不显示</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token comment\">// 每次调用都创建一个新的代理对象返回</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token keyword\">return</span> mapperProxyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span>sqlSession<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BindingException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error getting mapper instance. Cause: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结步骤：</p>\n<ul>\n<li>调用 SqlSession 的 <code>getMapper()</code>  方法，随后这个委托向下传递给 <code>MapperRegister</code> 。</li>\n<li><code>MapperRegister</code>  通过加载配置文件时注册的代理工厂来返回需要的实例类对象。</li>\n</ul>\n<p><strong>是通过 <code>newIntance(sqlSession)</code>  返回的对象。</strong></p>\n<p>之前我们讲过如何<a href=\"https://cecilia.cool/2022/10/16/Java/Mybatis/Mybatis(1)-%E5%88%9D%E4%BD%BF%E7%94%A8/\">解析 xml 文件</a>，也许你没有记住相关代码该怎么写，放心，我也没记住。但是之前说过，xml 里面一层一层的标签嵌套其实就是树的节点，在注册动态代理时，就是通过 <code>parse(/mappers)</code>  方法拿到 mapper 的 <code>namespace</code> ，再注册，总体流程很清晰吧。</p>\n<blockquote>\n<p>好了好了，打住，这部分再看源码就不礼貌了，不要纠结框架底层代码细节，没卵用，别说什么学学别人怎么写的，有时候我连自己写的代码都学不懂。</p>\n</blockquote>\n<h2 id=\"方法拦截\"><a class=\"anchor\" href=\"#方法拦截\">#</a> 方法拦截</h2>\n<blockquote>\n<p>等我复习一下反射再来填坑</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>田守枝 Java 技术博客：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50aWFuc2hvdXpoaS5jb20vYXBpL3R1dG9yaWFscy9teWJhdGlzLzM2MA==\">http://www.tianshouzhi.com/api/tutorials/mybatis/360</span></p>\n<p>青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjODE1ZjhjZWM=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#815f8cec</span></p>\n</blockquote>\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/19/Java/Mybatis/Mybatis(5)-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/",
            "url": "https://cecilia.cool/2022/10/19/Java/Mybatis/Mybatis(5)-%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/",
            "title": "Mybatis(5)--注解开发",
            "date_published": "2022-10-19T04:28:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>最初设计时，MyBatis 是一个 XML 驱动的框架。配置信息是基于 XML 的，而且<strong>映射语句也是定义在 XML 中的</strong>。而到了 <strong>MyBatis 3</strong>，有新的可用的选择了。MyBatis3 构建在基于全面而且强大的 Java 配置 API 之上。这个配置 API 是基于 XML 的 MyBatis 配置的基础，也是新的基于注解配置的基础。注解提供了一种简单的方式来实现简单映射语句，而不会引入大量的开销。</p>\n<blockquote>\n<p>注意：不幸的是，Java 注解限制了它们的表现和灵活。最强大的 MyBatis 映射不能用注解来构建，那并不可笑，基于 Java 注解的配置离不开它的特性。</p>\n</blockquote>\n<h1 id=\"注解开发\"><a class=\"anchor\" href=\"#注解开发\">#</a> 注解开发</h1>\n<p>之前需要编写对应的映射器并绑定到接口上，通过接口执行 sql 语句。注解开发实现无需 <code>xml</code>  映射器配置，直接使用注解在接口上进行配置。</p>\n<blockquote>\n<p>在前言已经说过了，注解的表达能力和灵活性有限，并不是说完全抛弃 xml 配置。</p>\n</blockquote>\n<p>复习一下接口映射：</p>\n<p>之前使用 xml 需要编写映射器：在 xml 中定义映射规则和 SQL 语句，再绑定到接口的方法定义上：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!-- 映射 StudentMapper 接口，namespace 是接口的全类限定名 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.mappers.StudentMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        select * from student</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>当然，使用全类限定名太麻烦，可以再 xml 中加上别名</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.mappers<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>现在使用注解实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into student(sid, name) value(#&#123;sid&#125;, #&#123;name&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同时修改一下配置文件的映射器注册：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>mappers<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>mapper <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"com.cyan.mapper.StudentMapper\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>mappers<span class=\"token operator\">></span></pre></td></tr></table></figure><p>使用的时候，还是直接向 SqlSession 传入接口 Class 即可：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StudentMapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StudentMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"自定义映射\"><a class=\"anchor\" href=\"#自定义映射\">#</a> 自定义映射</h2>\n<blockquote>\n<p>通过 <code>@Result</code>  进行自定义映射。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Results</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> column <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from student\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>左边的 <code>column</code>  其实就是查询结果组成的表的一列，所以我们为 Student 再加一个属性 <code>sex</code> ，我想让性别的结果映射到 Student 对象的 name 属性上，让 name 结果映射为 sex。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Results</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> column <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from student\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>我知道这种映射没有卵用，我只是举个🌰。</p>\n</blockquote>\n<h2 id=\"复杂查询\"><a class=\"anchor\" href=\"#复杂查询\">#</a> 复杂查询</h2>\n<p>上一篇讲了一对多的复杂查询，teacher 对象有一个学生列表的属性，这里用注解实现：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from student inner join teach on student.sid = teach.sid where tid = #&#123;tid&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getStudentByTid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Reuslt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> column <span class=\"token operator\">=</span> <span class=\"token string\">\"tid\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"tid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"tid\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"studentList\"</span><span class=\"token punctuation\">,</span> many <span class=\"token operator\">=</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           <span class=\"token annotation punctuation\">@Many</span><span class=\"token punctuation\">(</span>select <span class=\"token operator\">=</span> <span class=\"token string\">\"getStudentByTid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select * from teacher where tid = #&#123;tid&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Teacher</span> <span class=\"token function\">getTeacherByTid</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>子查询结果作为 <code>@Result</code>  注解的一个 many 结果，代表子查询的所有结果都归入此集合中（也就是之前的 collection 标签）。</p>\n<p><code>@Result</code>  也提供了 <code>@One</code>  子注解来实现一对一的关系表示，类似于之前的 <code>assocation</code>  标签：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Results</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> column <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token annotation punctuation\">@Result</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"teacher\"</span><span class=\"token punctuation\">,</span> one <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token annotation punctuation\">@One</span><span class=\"token punctuation\">(</span>select <span class=\"token operator\">=</span> <span class=\"token string\">\"getTeacherBySid\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from student\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果觉得在 Java 代码中编写<strong>映射规则</strong>不美观，可以使用 <code>@ResultMap</code>  标签，指定 xml 文件里的 <code>resultMap</code>  的 ID，就可以在该 <code>ResultMap</code>  编写映射规则了。</p>\n<h2 id=\"指定构造器与参数\"><a class=\"anchor\" href=\"#指定构造器与参数\">#</a> 指定构造器与参数</h2>\n<p>使用 <code>@ConstructorArgs</code>  参数来指定构造器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ConstructorArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token annotation punctuation\">@Arg</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">,</span> javaType <span class=\"token operator\">=</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token annotation punctuation\">@Arg</span><span class=\"token punctuation\">(</span>column <span class=\"token operator\">=</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> javaType <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from student where sid = #&#123;sid&#125; and sex = #&#123;sex&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Student</span> <span class=\"token function\">getStudentBySidAndSex</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> sid<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sex\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数列表中，参数个数超过两个时就必须要使用 <code>@Param</code>  来指定参数名称，不然 Mybatis 不明确哪个参数是什么。</p>\n<p>如果传入的是一个对象，就需要在 sql 语句中指定属性来自哪：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Insert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"insert into student(sid, name, sex) values(#&#123;sid&#125;, #&#123;student.name&#125;, #&#123;student.sex&#125;)\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sid\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">int</span> sid<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Param</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student\"</span><span class=\"token punctuation\">)</span>  <span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上文提到缓存机制，在注解开发中就需要使用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@CacheNamespace</span><span class=\"token punctuation\">(</span>readWrite <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Select</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"select * from student\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token annotation punctuation\">@Options</span><span class=\"token punctuation\">(</span>useCache <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getAllStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>@CacheNamespace</code>  注解直接定义在接口上即可，然后我们可以通过使用 <code>@Options</code>  来控制单个操作的缓存启用。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHhzdHJpdmUuY29tL3N1YmplY3QvbXliYXRpcy8xOTYuaHRt\">https://www.hxstrive.com/subject/mybatis/196.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjODE1ZjhjZWM=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#815f8cec</span></p>\n</blockquote>\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/19/Java/Mybatis/Mybatis(4)-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/",
            "url": "https://cecilia.cool/2022/10/19/Java/Mybatis/Mybatis(4)-%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/",
            "title": "Mybatis(4)--缓存机制",
            "date_published": "2022-10-19T02:09:51.000Z",
            "content_html": "<h1 id=\"缓存机制\"><a class=\"anchor\" href=\"#缓存机制\">#</a> 缓存机制</h1>\n<p>缓存机制其实就是提前将一部分内容放入缓存中，下次获取数据时可以直接从缓存中读取，而不是再向数据库查询，提升效率。</p>\n<blockquote>\n<p>Mybatis 存在一级缓存和二级缓存。</p>\n</blockquote>\n<h2 id=\"一级缓存\"><a class=\"anchor\" href=\"#一级缓存\">#</a> 一级缓存</h2>\n<p>一级缓存无法关闭，只能调整：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">SqlUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSqlSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Mapper</span> mapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Student</span> s1 <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectStudentBySid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Student</span> s2 <span class=\"token operator\">=</span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectStudentBySid</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过 sid 查询学生</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 结果为 true</span></pre></td></tr></table></figure><p>也就是说，s2 和 s1 指向的是同一片内存地址。如果你觉得・不明显，可以改一下构造函数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> sid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Student被构造\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 结果是，最后只打印一次 ——Student 被构造</span></pre></td></tr></table></figure><p>通过前面的学习得知 Mybatis 在映射为对象时，在只有一个构造方法的情况下，无论你构造方法写成什么样子，都会去调用一次构造方法，<strong>如果存在多个构造方法，那么就会去找匹配的构造方法</strong>。我们可以通过查看构造方法来验证对象被创建了几次。</p>\n<p>但是一级缓存会在进行<strong> DML 操作</strong> —— 插入，删除，更新后失效，当然，也只是当前会话的缓存会失效，这其实并不是一个好的机制，尽管它做到了会话之间的隔离，但是会出现数据的不一致性（可见性问题）。</p>\n<blockquote>\n<p>当前会话结束后，也会清理全部的缓存，因为已经不会再用到了。一级缓存只针对于单个会话，多个会话之间不相通。</p>\n</blockquote>\n<p>其实在 MySQL 中（InnoDB 存储引擎），DML 操作也不是即时写入磁盘中，而是会在缓存中呆着，只不过这个机制涉及的知识更多，包括刷脏，flush 链表，LRU 链表，缓存池啥的。</p>\n<h2 id=\"二级缓存\"><a class=\"anchor\" href=\"#二级缓存\">#</a> 二级缓存</h2>\n<p>扩展到所有会话都能使用，默认是关闭状态。开启二级缓存，需要在映射器 XML（就是 mapper.xml）中添加：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TestMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        select * from student</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>放在某一个 mapper 里面，二级缓存的官方配置：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>cache</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token attr-name\">eviction</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FIFO<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token attr-name\">flushInterval</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>60000<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token attr-name\">size</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>512<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token attr-name\">readOnly</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>如果我们不希望某个方法开启二级缓存，可以使用 <code>useCache</code>  属性：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">useCache</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select * from student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>flushCache</code>  属性在 <code>select</code>  语句里面默认为 <code>false</code> ，在 <code>DML</code>  语句中默认为 <code>true</code> 。可以通过该属性来调整缓存清理情况。</p>\n<p>查询数据库时的优先级：二级缓存 &gt; 一级缓存 &gt; 数据库。</p>\n<h2 id=\"一致性问题\"><a class=\"anchor\" href=\"#一致性问题\">#</a> 一致性问题</h2>\n<p>单独的一个程序使用 Mybatis，如果操作得当，也许不会出现一致性问题。但是当多个程序（计算机）使用自己的 Mybatis 访问相同的数据库，就会导致严重的一致性问题。程序 A 正在处理一批查询请求（较长时间），程序 B 正在处理一批修改请求，A 使用 Mybatis 的缓存机制，A 的 Mybaits 并不知道 B 在修改数据库，仍然使用 A 的可能过期了的缓存。</p>\n<p>这时候需要关闭 Mybatis 缓存来保证一致性：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 在 configuration 标签下，这是关闭二级缓存，如果为 false，就是开启二级缓存 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cacheEnabled<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!-- 还需要将 select 语句的 useCache 改为 false--></span></pre></td></tr></table></figure><p>后面，我们会继续学习 Redis、Ehcache、Memcache 等缓存框架，通过使用这些工具，就能够很好地解决缓存一致性问题。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjMmFiZjNlYWE=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#2abf3eaa</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2h4c3RyaXZlLmNvbS9zdWJqZWN0L215YmF0aXMvMjIzLmh0bQ==\">hxstrive.com/subject/mybatis/223.htm</span></p>\n</blockquote>\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "url": "https://cecilia.cool/2022/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/",
            "title": "动态规划",
            "date_published": "2022-10-18T13:19:44.000Z",
            "content_html": "<h1 id=\"数位dp\"><a class=\"anchor\" href=\"#数位dp\">#</a> 数位 DP</h1>\n<p>LeetCode 上的 **「<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS5jbi9wcm9ibGVtcy9udW1iZXJzLWF0LW1vc3Qtbi1naXZlbi1kaWdpdC1zZXQv\">902. 最大为 N 的数字组合</span>」<strong>，难度为</strong>「困难」**。</p>\n<p>给定一个按 非递减顺序 排列的数字数组  <code>digits</code> 。你可以用任意次数 来写的数字。例如，如果 ，我们可以写数字，如  <code>'13'</code> ,  <code>'551'</code> , 和  <code>'1351315'</code> 。</p>\n<p>返回 <strong>可以生成的小于或等于给定整数</strong> 的正整数的个数 。</p>\n<p>示例 1：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>输入：digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span>,<span class=\"token string\">\"3\"</span>,<span class=\"token string\">\"5\"</span>,<span class=\"token string\">\"7\"</span><span class=\"token punctuation\">]</span>, n <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>输出：20</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>解释：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>可写出的 <span class=\"token number\">20</span> 个数字是：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">1</span>, <span class=\"token number\">3</span>, <span class=\"token number\">5</span>, <span class=\"token number\">7</span>, <span class=\"token number\">11</span>, <span class=\"token number\">13</span>, <span class=\"token number\">15</span>, <span class=\"token number\">17</span>, <span class=\"token number\">31</span>, <span class=\"token number\">33</span>, <span class=\"token number\">35</span>, <span class=\"token number\">37</span>, <span class=\"token number\">51</span>, <span class=\"token number\">53</span>, <span class=\"token number\">55</span>, <span class=\"token number\">57</span>, <span class=\"token number\">71</span>, <span class=\"token number\">73</span>, <span class=\"token number\">75</span>, <span class=\"token number\">77</span>.</pre></td></tr></table></figure><blockquote>\n<p>其实就是数组中组合起来小于 n 的数的个数。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            x <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 位数和 x 相同</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> r <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> cur<span class=\"token punctuation\">)</span> l <span class=\"token operator\">=</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">else</span> r <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                ans <span class=\"token operator\">+=</span> r <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> ans<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> cur<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                ans <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 位数比 x 少的</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> last <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">int</span> cur <span class=\"token operator\">=</span> last <span class=\"token operator\">*</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            ans <span class=\"token operator\">+=</span> cur<span class=\"token punctuation\">;</span> last <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">atMostNGivenDigitSet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> digits<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> digits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        nums <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">dp</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "数据结构与算法"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/17/Java/Mybatis/Mybatis(3)-%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/",
            "url": "https://cecilia.cool/2022/10/17/Java/Mybatis/Mybatis(3)-%E5%A4%8D%E6%9D%82%E6%9F%A5%E8%AF%A2/",
            "title": "Mybatis(3)--复杂查询",
            "date_published": "2022-10-17T07:59:11.000Z",
            "content_html": "<h1 id=\"简单查询\"><a class=\"anchor\" href=\"#简单查询\">#</a> 简单查询</h1>\n<p>驼峰命名配置：</p>\n<blockquote>\n<p>一般数据库的字段名都是下划线分隔，但是 Java 里面是驼峰命名，就会导致查询时数据库的字段映射不到 Java 类里面，所以需要开启转换</p>\n</blockquote>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>setting</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mapUnderscoreToCamelCase<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>settings</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>对于查询结果，我们可以做如下更改：</p>\n<ul>\n<li>查询结果映射为实体类</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>studentList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select * from student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>查询结果映射为 Map</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select * from student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>其中一个 <code>Map</code>  就是一<strong>行</strong>查询结果，当然，对应的 mapper 接口方法就需要换成：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>指定映射规则</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    select * from student</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>指定构造器</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Map<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>constructor</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>arg</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Integer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>arg</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>String<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>constructor</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    select * from student</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>但是查询一般会附带条件，所以 <code>select</code>  标签除了 <code>resultType</code>  之外，还需要 <code>parameterType</code>  标签：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getStudentBySid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">parameterType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>int<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    select * from student where sid = #&#123;sid&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>通过使用 <code>#&#123;xxx&#125;</code>  或是 <code>$&#123;xxx&#125;</code>  来填入我们给定的属性，实际上 Mybatis 本质也是通过 <code>PreparedStatement</code>  首先进行一次预编译，有效地防止 SQL 注入问题，但是如果使用 <code>$&#123;xxx&#125;</code>  就不再是通过预编译，而是直接传值，因此我们一般都使用 <code>#&#123;xxx&#125;</code>  来进行操作。</p>\n<blockquote>\n<p>其实插入，删除这些需要传递参数的语句都会用到 <code>#&#123;&#125;</code> 。</p>\n</blockquote>\n<h1 id=\"复杂查询\"><a class=\"anchor\" href=\"#复杂查询\">#</a> 复杂查询</h1>\n<h2 id=\"一对多\"><a class=\"anchor\" href=\"#一对多\">#</a> 一对多</h2>\n<p>一个老师可以教授多个学生，需要一次性将<strong> A</strong> 老师的学生全部映射给<strong> A</strong> 老师的对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>之前编写的都是非常简单的映射，此时需要使用 <code>resultMap</code>  来自定义映射规则。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>getTeacherByTid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>asTeacher<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        select *, teacher.name as tname from student </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            inner join teach on student.sid = teach.sid                          </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            inner join teacher on teach.tid = teacher.tid where teach.tid = #&#123;tid&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!--teach 是中间表，连接学生和老师两张表 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>asTeacher<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Teacher<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>collection</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>studentList<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ofType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>collection</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>&lt;resultMap&gt;</code>  的 <code>id</code>  要与 <code>&lt;select&gt;</code>  标签相关联。</p>\n<blockquote>\n<p>之前说过，实际项目中联表查询有时会非常复杂，所以有时会直接选择手写 sql 语句使用 <code>jdbc</code>  而不是使用 Mybatis。</p>\n</blockquote>\n<h2 id=\"多对一\"><a class=\"anchor\" href=\"#多对一\">#</a> 多对一</h2>\n<p>现在修改一下 <code>Student</code>  和 <code>Teacher</code>  两个类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Accessors</span><span class=\"token punctuation\">(</span>chain <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Teacher</span> teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> tid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们想要通过某个条件查询学生数据，每一行学生都要顺带查询老师的信息，导致出现多对一查询：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultMap</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>sTot<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tselect * , teacher.name as tname from Student</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    \tleft join teach on teach.sid = student.sid</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \tleft join teacher on teach.tid = teacher.tid</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">&lt;!-- 查询结果里面不需要写 teacher.tid，因为学生表中有 --></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resultMap</span> <span class=\"token attr-name\">id</span> <span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span> <span class=\"token punctuation\">\"</span>sTot<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>association</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>teacher<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">javaType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Teacher<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>id</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>result</span> <span class=\"token attr-name\">column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>tname<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>association</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resultMap</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>其实不论是用 <code>&lt;collection&gt;</code>  还是 <code>&lt;association&gt;</code> ，都是对查询结果的一种处理方式罢了。</p>\n<h1 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h1>\n<blockquote>\n<p>因为内容比较少，就放到复杂查询里面一起讲解。</p>\n</blockquote>\n<p>我们使用 Mybatis，在 Java 代码层面是使用 <code>SqlSession</code> ，其实打开一个 <code>SqlSession</code> ，相当于打开了一个事务，如果<strong>关闭了自动提交</strong>，在调用了修改数据库的语句，就需要 <code>commit</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">TestMapper</span> testMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    testMapper<span class=\"token punctuation\">.</span><span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setSex</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"男\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小王\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    testMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 回滚</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 提交</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjMzIwM2ZlMTU=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#3203fe15</span></p>\n</blockquote>\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/17/Java/Mybatis/Mybatis(2)-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "url": "https://cecilia.cool/2022/10/17/Java/Mybatis/Mybatis(2)-%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/",
            "title": "Mybatis(2)--配置文件",
            "date_published": "2022-10-17T03:52:12.000Z",
            "content_html": "<h1 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h1>\n<p>之前我们最开始的 <code>Mybatis-config.xml</code>  是这样的：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;驱动类（含包名）&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;数据库连接URL&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;用户名&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;密码&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<p>可以看到有这样的标签：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">&lt;!-- .... --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>其实可以写很多个 <code>&lt;environment&gt;</code>  标签，表示连接不同的数据库，因为实际开发中不可能只使用一个数据库。例如：同时支持 Oracle 和 MySQL 数据库。也有可能是为了分别定义开发环境、测试环境和生产环境。</p>\n<blockquote>\n<p><strong>你可以配置多种环境（environment），但是每个 SqlSessionFactory 实例只能选择一个环境</strong>。</p>\n</blockquote>\n<p>我们看一下之前为我们为了得到 <code>SqlSession</code>  做了些什么：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>其实 <code>SqlSessionFactoryBuilder</code>  的 <code>build</code>  可以接收配置环境的属性：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">SqlSessionFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"环境ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果没有选择环境 ID，就使用默认的环境 ID，看最上面的 <code>default = development</code> 。</p>\n<h2 id=\"typealiases标签\"><a class=\"anchor\" href=\"#typealiases标签\">#</a> typeAliases 标签</h2>\n<p>我们之前为了定义一个 mapper，需要关联到项目中的实体类，然而实体类需要使用全类限定名：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TestMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        select * from student</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>resultType</code>  指定了 <strong>JavaBean</strong> 完全限定名，这个名称很长，每次都要完整的输入，很是麻烦。因此就出现了  <code>&lt;typeAliases&gt; </code> 标签，该标签用来将给定的实体定义别名。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlias</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Student<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 还可以定义很多 --></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 如果觉得还是麻烦，直接让 Mybatis 去扫描一个包，并将包下的所有类自动起别名 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>package</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>你应该尽量避免不同包出现相同类名的类。</p>\n</blockquote>\n<p>也可以指定实体类添加一个注解，指定别名：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Alias</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lbwnb\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> sid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"transactionmanager标签\"><a class=\"anchor\" href=\"#transactionmanager标签\">#</a> transactionManager 标签</h2>\n<p>翻译过来是<strong>事务管理器</strong>，我们先看一下之前是怎么写的：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>在 MyBatis 中有两种事务管理器类型：</p>\n<ul>\n<li><strong>JDBC</strong> – 这个配置直接简单使用了 JDBC 的提交和回滚设置。它依赖于从数据源得到的<strong>连接</strong>来管理事务范围。</li>\n<li><strong>MANAGED</strong> – 这个配置几乎没做什么。它从来不提交或回滚一个连接。而它会让容器来管理事务的整个生命周期（比如 Spring 或 JEE 应用服务器的上下文）。默认情况下它会关闭连接。然而一些容器并不希望这样，因此如果你需要从连接中停止它，将 closeConnection 属性设置为 false。</li>\n</ul>\n<p>还可以自定义事务管理器，JDBC 实现了 TransacFacotry，MANAGED 实现了 Transaction，所以我们自定义事务管理器需要实现其中一个接口。</p>\n<p>TransacFacotry 源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TransactionFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 设置属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">void</span> <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Properties</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token comment\">// 创建事务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token class-name\">Transaction</span> <span class=\"token function\">newTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \t<span class=\"token class-name\">Transaction</span> <span class=\"token function\">newTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                             <span class=\"token class-name\">TransactionIsolationLevel</span> level<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> autoCommit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Transaction 源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Transaction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取数据库连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 提交事务</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 回滚事务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 关闭数据库连接</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假设为我们要实现的自定义事务管理器叫做 <code>MyTransaction</code> ，全类限定名是 <code>com.utils.MyTransaction</code> 。</p>\n<p>那么需要在别名中声明：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlia</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_transaction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.utils.MyTransaction<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>Mybatis 会通过 resolveAlias 方法去解析别名：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> alias<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>alias <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 拿到类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">resolveAlias</span><span class=\"token punctuation\">(</span>alias<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BuilderException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error resolving class. Cause: \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在看一下整个配置文件：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>typeAlia</span> <span class=\"token attr-name\">alias</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_transaction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.utils.MyTransaction<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>typeAliases</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_transaction<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.driver&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.url&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.username&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;jdbc.password&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 定义 mapper--></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>自定义事务工厂类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTransactionFactory</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TransactionFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">MyTransactionFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Properties</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" setProperties()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transaction</span> <span class=\"token function\">newTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> conn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" newTransaction()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTransaction</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Transaction</span> <span class=\"token function\">newTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> dataSource<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                      ransactionIsolationLevel level<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                      <span class=\"token keyword\">boolean</span> autoCommit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" newTransaction()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTransaction</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">.</span><span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SQLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>自定义事务类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTransaction</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Transaction</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">NAME</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">MyTransaction</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyTransaction</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Connection</span> connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection <span class=\"token operator\">=</span> connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Connection</span> <span class=\"token function\">getConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" getConnection()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" commit()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">getAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" rollback()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">getAutoCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">rollback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">SQLException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NAME</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" close()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>就可以使用了。</p>\n<h2 id=\"datasource标签\"><a class=\"anchor\" href=\"#datasource标签\">#</a> dataSource 标签</h2>\n<p>先看一下之前 <code>dataSource</code>  是什么：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;驱动类（含包名）&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;数据库连接URL&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;用户名&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;密码&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>&lt;dataSource&gt; </code> 标签使用基本的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</p>\n<p><code>type</code>  可取的内置数据源有： <code>UNPOOLED</code> ， <code>POOLED</code> ， <code>JNDI</code> 。</p>\n<p>第二个是 web 常用的，不同的数据库对这个的表现也是不一样的，所以对某些数据库来说配置数据源并不重要，这个配置也是闲置的。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHhzdHJpdmUuY29tL3N1YmplY3QvbXliYXRpcy8yNDUuaHRt\">https://www.hxstrive.com/subject/mybatis/245.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHhzdHJpdmUuY29tL3N1YmplY3QvbXliYXRpcy8yNDEuaHRt\">https://www.hxstrive.com/subject/mybatis/241.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHhzdHJpdmUuY29tL3N1YmplY3QvbXliYXRpcy8yNDYuaHRt\">https://www.hxstrive.com/subject/mybatis/246.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaHhzdHJpdmUuY29tL3N1YmplY3QvbXliYXRpcy8yNDcuaHRt\">https://www.hxstrive.com/subject/mybatis/247.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjYTI4NzI2ZTE=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#a28726e1</span></p>\n</blockquote>\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/16/%E8%BD%BB%E5%B0%8F%E8%AF%B4%E7%BB%93%E5%B1%80%E9%AD%94%E6%94%B9/%E3%80%8A%E6%88%91%E5%92%8C%E5%A5%B3%E5%8F%8B%E7%9A%84%E5%A6%B9%E5%A6%B9%E6%8E%A5%E5%90%BB%E4%BA%86%E3%80%8B/",
            "url": "https://cecilia.cool/2022/10/16/%E8%BD%BB%E5%B0%8F%E8%AF%B4%E7%BB%93%E5%B1%80%E9%AD%94%E6%94%B9/%E3%80%8A%E6%88%91%E5%92%8C%E5%A5%B3%E5%8F%8B%E7%9A%84%E5%A6%B9%E5%A6%B9%E6%8E%A5%E5%90%BB%E4%BA%86%E3%80%8B/",
            "title": "《我和女友的妹妹接吻了》",
            "date_published": "2022-10-16T15:54:21.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>这本书每次更新，在 GA 文库里面，直接就是 S 级热度，褒不一，贬却很一，但大家最统一的意见就是对结局不满意（汉化结局还没出，但是有人看了日文版，然后剧透，我谢谢。）我对结局也超级无语，脏话（*……￥%@**），出于对结局的不满，我想在汉化版更新完后按照自己的想法重构一下结局，之于我喜欢的结局。</p>\n<p>作者<strong>海陆空</strong>，说实话，这本书关于人物心理描写是很到位了，剧情矛盾也十分突出，个人认为最重要的，最好的，就是每个人的个性鲜明，而且至始至终。无论是两面为难，抉择不定的佐藤博道，还是堪称完美的佐藤时雨（没错，我对时雨的评价非常高：颜值高，格斗强，会持家，擅长理解包容他人，敢爱敢恨等等，我就是时雨重度患者），以及将周围理想化的才川晴香。当然，男主有些性格我是真的无语，出于剧情需要，我理解。</p>\n<blockquote>\n<p>其实仅限三个人，人物塑造难度也不大。</p>\n</blockquote>\n<p>下面给出一些节选，我觉得写的比较好：</p>\n<p>佐藤博道心理活动：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>不是的，晴香，不是这样的。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>我其实才不在乎什么烟火大会，对那一点兴趣也没有。约会也一样。今天也好明天也罢，哪天都无所谓。只是<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>我就只是希望<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>你能够选择我。</pre></td></tr></table></figure><p>佐藤时雨对话：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>要是这样的感情能传达给哥哥，那么和姊姊的关系如何，对我来说都无所谓了。曾经是挚爱的姊姊，也变得不重要。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>就是这强烈的执著，将我的世界划分为【唯一一人】和【其他人】两个部分。我想这就是所谓的爱吧。</pre></td></tr></table></figure><p>才川晴香心理活动：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>那个瞬间，我感觉我的一切不愉快都被吹到了身后。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t从自己最喜欢的人那，第一次拿到生日礼物。我内心的一切阴霾皆被那沾满各种色彩的刷子有力地覆盖掉了。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t我知道博道君一定准备好了礼物。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t就像我知道他一定只爱着我一样。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t我相信他会一直回应我的期待，这点自信我还是有的。但是，一旦得到了他的回应，我感觉自己的身体，从脸颊遍及全身，都热的像是要融化了一样。</pre></td></tr></table></figure><p>我要说的是</p>\n<blockquote>\n<p>虽然我很推荐这本轻小说，但是，如果你觉得你是那种对于爱情忠贞不渝，无论对方怎么” 冷落 “你，你都会回应她的期待，如果你觉得你总是能快刀斩乱麻，如果你觉得这本书一看标题就是让人无语的 ntr 小说，抱歉，请不要看这本书，因为它确实不适合你。不过分地说，我就是为了这本书单独开了这么一个<strong>轻小说结局魔改</strong>的 tag，因为结局让我意难平啊。</p>\n</blockquote>\n",
            "tags": [
                "轻小说结局魔改"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/16/Java/Mybatis/Mybatis(1)-%E5%88%9D%E4%BD%BF%E7%94%A8/",
            "url": "https://cecilia.cool/2022/10/16/Java/Mybatis/Mybatis(1)-%E5%88%9D%E4%BD%BF%E7%94%A8/",
            "title": "Mybatis(1)--初使用",
            "date_published": "2022-10-16T02:49:26.000Z",
            "content_html": "<h1 id=\"xml语言\"><a class=\"anchor\" href=\"#xml语言\">#</a> XML 语言</h1>\n<p><code>xml</code>  与 <code>html</code>  都是标准通用标记语言的子集，SGML (SGM) 标准通用标记语言，是一种定义电子文档结构和描述其内容的国际标准语言，具有极好的扩展性。</p>\n<ul>\n<li><code>html</code>  用于显示数据，其中元素是固定的，浏览器解析执行。</li>\n<li><code>xml</code>  用于传输和存储数据，标签可以是用户自定义的， <code>xml</code>  解析器需要自己写。</li>\n</ul>\n<h2 id=\"文档声明\"><a class=\"anchor\" href=\"#文档声明\">#</a> 文档声明</h2>\n<p><code>xml</code>  文档首先需要使用<strong>文档声明</strong>来声明文档，且必须出现在文档第一行：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"GB2312\" standalone=\"yes\"?></span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>version</code>  是版本号， <code>xml 1.0</code>  版本在 1998 年发布，2004 年发布 <code>1.1</code>  版本，但是 <code>1.1</code>  版本不向下兼容 <code>1.0</code>  版本，所以现在使用的依然是 <code>1.0</code> 。</p>\n</li>\n<li>\n<p><code>encoding</code>  表示编码格式。</p>\n</li>\n<li>\n<p><code>standalone</code>  表示文档是否独立，即是否依赖其他文档。</p>\n</li>\n</ul>\n<blockquote>\n<p>没有文档声明的 <code>xml</code>  文档，不是格式良好的 <code>xml</code>  文档。文档声明必须从 <code>xml</code>  文档的 1 行 1 列开始 也就是必须第一行顶格写。</p>\n</blockquote>\n<h2 id=\"xml元素\"><a class=\"anchor\" href=\"#xml元素\">#</a> XML 元素</h2>\n<p>元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。元素可包含其他元素、文本或者两者的混合物。元素也可以拥有属性。</p>\n<blockquote>\n<p>一个标签就是一个元素。</p>\n</blockquote>\n<p>要求：</p>\n<ul>\n<li>元素都必须有关闭标签，省略关闭标签是非法的。声明不是 XML 的元素，所以第一行的声明，并不需要关闭标签。</li>\n<li>大小敏感，必须正确嵌套。</li>\n<li>有且必须只有一个根元素。</li>\n</ul>\n<blockquote>\n<p>标签命名应尽可能简短，可以使用下划线_，避免使用连字符 -。</p>\n</blockquote>\n<p>一个元素（标签）可以有多个属性， <code>xml</code>  属性是键值对形式，如 <code>sex = &quot;male&quot;</code> ，值必须加单（双）引号。</p>\n<h2 id=\"注释\"><a class=\"anchor\" href=\"#注释\">#</a> 注释</h2>\n<p><code>CDATA</code>  区段中的文本会被解析器忽略 —— <code>&lt;![CDATA[]]&gt;</code> 。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token cdata\">&lt;![CDATA[to be or not to be]]></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"别名\"><a class=\"anchor\" href=\"#别名\">#</a> 别名</h2>\n<blockquote>\n<p><code>&lt;typeAliases&gt;</code>  标签，这里留着在 Mybatis 讲。</p>\n</blockquote>\n<h2 id=\"解析xml\"><a class=\"anchor\" href=\"#解析xml\">#</a> 解析 XML</h2>\n<blockquote>\n<p>JDK 内置了一个 <code>org.w3c</code>  的 XML 解析库。</p>\n</blockquote>\n<p>首先我们创建一个 <code>test.xml</code>  文件，为了简单，直接把它放在项目目录下（与 <code>src</code>  同级）</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>message</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>to</span><span class=\"token punctuation\">></span></span>Mike<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>to</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>from</span><span class=\"token punctuation\">></span></span>Bob<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>from</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>content</span><span class=\"token punctuation\">></span></span>please get up<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>content</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>message</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这是最基本的 <code>xml</code>  内容，也是 w3c 的例子。</p>\n<p>再写一下解析代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 创建 DocumentBuilderFactory 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">DocumentBuilderFactory</span> factory <span class=\"token operator\">=</span> <span class=\"token class-name\">DocumentBuilderFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建 DocumentBuilder 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">DocumentBuilder</span> builder <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">newDocumentBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 这里要改成 test.xml 路径，因为直接放在根目录下，所以只需要写文件名</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">Document</span> d <span class=\"token operator\">=</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 每一个标签都作为一个节点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">NodeList</span> nodeList <span class=\"token operator\">=</span> d<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 可能有很多个名字为 message 的标签</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">Node</span> rootNode <span class=\"token operator\">=</span> nodeList<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取首个</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 一个节点下可能会有很多个节点，比如根节点下就囊括了所有的节点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">NodeList</span> childNodes <span class=\"token operator\">=</span> rootNode<span class=\"token punctuation\">.</span><span class=\"token function\">getChildNodes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 节点可以是一个带有内容的标签（它内部就还有子节点），也可以是一段文本内容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">getLength</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Node</span> child <span class=\"token operator\">=</span> childNodes<span class=\"token punctuation\">.</span><span class=\"token function\">item</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 过滤换行符之类的内容，因为它们都被认为是一个文本节点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getNodeType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT_NODE</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getNodeName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"：\"</span> <span class=\"token operator\">+</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">getFirstChild</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNodeValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 输出节点名称，也就是标签名称，以及标签内部的文本（内部的内容都是子节点，所以要获取内部的节点）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果：</p>\n<figure class=\"highlight plain\"><figcaption data-lang=\"plain\"><span>text</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>to：Mike</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>from：Bob</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>content：please get up</pre></td></tr></table></figure><blockquote>\n<p>Mybatis 也是使用的 JDK 内置的 <code>xml</code>  解析器。</p>\n</blockquote>\n<h1 id=\"初次使用\"><a class=\"anchor\" href=\"#初次使用\">#</a> 初次使用</h1>\n<blockquote>\n<p>首先要说明的是，Mybatis 很好用，可以高效代替 <code>JDBC</code> ，但是在某些实际场景中，涉及到复杂的联表查询等操作，还是得乖乖手写 sql 语句，这也警示我们：算法很重要，框架只是节省时间，方便开发。</p>\n</blockquote>\n<p>通过 maven 导入依赖：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>mybatis<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>3.4.6<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在项目根目录下（web 项目放在 resources 目录）创建 <code>mybatis-config.xml</code>  文件，其实名字随便取：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">configuration</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Config 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-config.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environments</span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>environment</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>development<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transactionManager</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>JDBC<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dataSource</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>POOLED<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>driver<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;驱动类（含包名）&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;数据库连接URL&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;用户名&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$&#123;密码&#125;<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dataSource</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environment</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>environments</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里以 web 项目为例，将 <code>xml</code>  配置文件放到 Resources 目录里面，构建一个 <code>SqlSessionFactory</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SqlUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SqlSessionFactory</span> factory<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            factory <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SqlSessionFactoryBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Resources</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsReader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mybatis-config.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SqlSession</span> <span class=\"token function\">getSqlSession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">openSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每个基于 MyBatis 的应用都是以一个 SqlSessionFactory 的实例为核心的，我们可以通过 <code>SqlSessionFactory</code>  来创建多个新的会话， <code>SqlSession</code>  对象，每个会话就相当于我不同的地方登陆一个账号去访问数据库，你也可以认为这就是之前 JDBC 中的 <code>Statement</code>  对象，会话之间相互隔离，没有任何关联。</p>\n<p>编写一个实体类 Student：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Data</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 使用 Lombok 很方便</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> sid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>根目录下创建一个 mapper 文件夹，新建一个 <code>TestMapper.xml</code>  文件作为映射器：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">mapper</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//mybatis.org//DTD Mapper 3.0//EN\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>TestMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        select * from student</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>需要注意 <code>resultType</code>  属性的包路径，每个人不一样。</p>\n</blockquote>\n<p>其中 <code>namespace</code>  就是命名空间，每个 Mapper 都是唯一的，<strong>因此需要用一个命名空间来区分</strong>，它还可以用来绑定一个接口。在里面写入了一个 select 标签，表示添加一个 select 操作，同时<strong> id 作为操作的名称</strong>，resultType 指定为我们刚刚定义的实体类，表示将数据库结果映射为 <code>Student</code>  类，然后就在标签中写入我们的查询语句即可。</p>\n<p>编写好后再配置文件的 <code>&lt;configuration&gt;</code>  标签下，添加这个 Mapper 映射器：</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">resource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com/cyan/mappers/TestMapper.xml<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mappers</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><blockquote>\n<p>这里的 <code>TestMapper.xml</code>  放在文件夹内部作为内部资源，使用 resource 指定路径，resource 表示是 Jar 内部的文件。</p>\n</blockquote>\n<p>最后在程序中使用定义好的 Mapper：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">SqlUtil</span><span class=\"token punctuation\">.</span>getSqlSession<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> student <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">sqlSelectList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"selectStudent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"映射接口\"><a class=\"anchor\" href=\"#映射接口\">#</a> 映射接口</h2>\n<p>直接通过 sqlSession 调用 mapper 有时会不明确，还涉及到类型转换等，所以我们可以将 <code>mapper.xml</code>  与一个接口相关联，在 mappers 文件夹下面创建一个 <code>TestMapper</code>  接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestMapper</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">selectStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接下来：</p>\n<ul>\n<li>接口与 <code>TestMapper.xml</code>  相关联： <code>TestMapper.xml</code>  的 namespace 改为接口的全类限定名</li>\n</ul>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>mapper</span> <span class=\"token attr-name\">namespace</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.TestMapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>selectStudent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">resultType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.cyan.entity.Student<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        select * from student</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>mapper</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ul>\n<li>通过 <code>SqlSession</code>  获取对应的实现类：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SqlSession</span> sqlSession <span class=\"token operator\">=</span> <span class=\"token class-name\">MybatisUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSession</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">TestMapper</span> testMapper <span class=\"token operator\">=</span> sqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> student <span class=\"token operator\">=</span> testMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectStudent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        student<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>TestMapper</code>  接口是 Mybatis 通过动态代理生成的实现类。而不是预先定义好的：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tsqlSession<span class=\"token punctuation\">.</span><span class=\"token function\">getMapper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TestMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 结果：com.sun.proxy.$Proxy4</span></pre></td></tr></table></figure><blockquote>\n<p>尽管此时 <code>Mybatis</code>  使用起来非常方便，但是配置 <code>TestMapper.xml</code> ，映射接口还是有点低效，之后会有更快捷的办法。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>xml 部分：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudzNzY2hvb2wuY29tLmNuL3htbC94bWxfY2RhdGEuYXNw\">https://www.w3school.com.cn/xml/xml_cdata.asp</span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbm90ZWxlc3MvYXJjaGl2ZS8yMDE4LzA4LzAxLzk0MDA2MzMuaHRtbA==\">https://www.cnblogs.com/noteless/archive/2018/08/01/9400633.html</span></li>\n</ul>\n<p>Mybatis 部分：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXdlYi9nbjBzeXQjYWY5OTBhY2M=\">https://www.yuque.com/qingkongxiaguang/javaweb/gn0syt#af990acc</span></li>\n</ul>\n</blockquote>\n",
            "tags": [
                "Mybatis"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/14/Java/JVM/JVM(9)-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",
            "url": "https://cecilia.cool/2022/10/14/Java/JVM/JVM(9)-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/",
            "title": "JVM(9)-垃圾收集器",
            "date_published": "2022-10-14T04:10:45.000Z",
            "content_html": "<h1 id=\"垃圾收集器\"><a class=\"anchor\" href=\"#垃圾收集器\">#</a> 垃圾收集器</h1>\n<blockquote>\n<p>主要是介绍不同收集器得优劣以及使用</p>\n</blockquote>\n<ul>\n<li>\n<p>单线程与多线程：单线程指的是垃圾收集器只使用一个线程进行收集，而多线程使用多个线程。</p>\n</li>\n<li>\n<p>串行与并行：串行指的是垃圾收集器与用户程序交替执行，这意味着在执行垃圾收集的时候需要停顿用户程序；并形指的是垃圾收集器和用户程序同时执行。除了 CMS 和 G1 之外，其它垃圾收集器都是以串行的方式执行。</p>\n</li>\n</ul>\n<h2 id=\"serial收集器\"><a class=\"anchor\" href=\"#serial收集器\">#</a> Serial 收集器</h2>\n<p><code>Serial</code>  翻译为串行，即以串行的方式执行。它是单线程的收集器，只会使用一个线程进行垃圾收集工作。在进行垃圾收集时，其他线程都要暂停等待。尽管缺点明显，但是从 JDK1.3.1 开始，Serial 收集器就是默认的垃圾收集器了（客户端模式）。</p>\n<p>优点：</p>\n<ul>\n<li>设计简单高效。</li>\n<li>在用户的桌面应用场景中，内存一般不大，可以在较短时间内完成垃圾收集，只要不频繁发生，使用串行回收器是可以接受的。</li>\n</ul>\n<blockquote>\n<p>客户端模式一般是一些桌面级图形化界面应用程序，使用内存较少。</p>\n</blockquote>\n<p>我们可以修改 JDK 当前模式为客户端模式，可以在 jvm.cfg 文件将内容修改为</p>\n<pre><code class=\"language-Plain\">-client KNOWN\n-server IGNORE\n</code></pre>\n<p>使用 <code>java -version</code>  查看当前模式。（下图还没有修改为客户端模式）</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/df6e14722988927f.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>它是 Client 模式下的默认新生代收集器，因为在用户的桌面应用场景下，分配给虚拟机管理的内存一般来说不会很大。Serial 收集器收集几十兆甚至一两百兆的新生代停顿时间可以控制在一百多毫秒以内，只要不是太频繁，这点停顿是可以接受的。</p>\n</blockquote>\n<h2 id=\"parnew收集器\"><a class=\"anchor\" href=\"#parnew收集器\">#</a> ParNew 收集器</h2>\n<p>是 Serial 收集器的多线程版本。</p>\n<p>是 Server 模式下的虚拟机首选新生代收集器，除了性能原因外，主要是因为除了 Serial 收集器，只有它能与 CMS 收集器配合工作。</p>\n<p>默认开启的线程数量与 CPU 数量相同，可以使用 -XX:ParallelGCThreads 参数来设置线程数。</p>\n<h2 id=\"parallel-scavenge收集器\"><a class=\"anchor\" href=\"#parallel-scavenge收集器\">#</a> Parallel Scavenge 收集器</h2>\n<p>其它收集器关注点是尽可能缩短垃圾收集时用户线程的停顿时间，而它的目标是<strong>达到一个可控制的吞吐量</strong>，它被称为 “吞吐量优先” 收集器。这里的吞吐量指 CPU 用于运行用户代码的时间占总时间的比值。</p>\n<ul>\n<li>停顿时间短适合用于与用户交互的程序，<strong>良好的响应速度提升用户体验</strong>。</li>\n<li>高吞吐量可以尽快完成程序运算任务，适合后台运算而不需要太多交互的任务。</li>\n</ul>\n<blockquote>\n<p>缩短停顿时间是以牺牲吞吐量和新生代空间来换取的：新生代空间变小，垃圾回收变得频繁，导致吞吐量下降。</p>\n</blockquote>\n<p>还有个<strong> Parallel Old 收集器</strong>，是 Parallel Scavenge 老年代版本，在注重吞吐量以及 CPU 资源敏感的场合，都可以优先考虑 Parallel Scavenge 加 Parallel Old 收集器。</p>\n<h2 id=\"serial-old收集器\"><a class=\"anchor\" href=\"#serial-old收集器\">#</a> Serial Old 收集器</h2>\n<p>Serial 收集器的老年代版本，也是给 Client 模式下的虚拟机使用。</p>\n<p>如果用在 Server 模式下，它有两大用途:</p>\n<ul>\n<li>在 JDK 1.5 以及之前版本 (Parallel Old 诞生以前) 中与 Parallel Scavenge 收集器搭配使用。</li>\n<li>作为 CMS 收集器的后备预案，在并发收集发生 Concurrent Mode Failure 时使用。</li>\n</ul>\n<h2 id=\"cms收集器\"><a class=\"anchor\" href=\"#cms收集器\">#</a> CMS 收集器</h2>\n<blockquote>\n<p>CMS (Concurrent Mark Sweep)，Mark Sweep 指的是标记 - 清除算法。</p>\n</blockquote>\n<p>这款收集器是 HotSpot 虚拟机中第一款真正意义上的并发（注意这里的并发和之前的并行是有区别的，并发可以理解为同时运行用户线程和 GC 线程，而并行可以理解为多条 GC 线程同时工作）收集器，它第一次实现了让垃圾收集线程与用户线程同时工作。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/17a1a966f2a69388.jpg\" alt=\"\" /></p>\n<p>整个流程分为四个阶段：</p>\n<ul>\n<li>初始标记（需要暂停用户线程）：这个阶段的主要任务仅仅只是标记出 GC Roots 能<strong>直接关联</strong>到的对象，速度比较快，不用担心会停顿太长时间。</li>\n</ul>\n<blockquote>\n<p>直接关联：虚拟机栈，本地方法栈，被锁的对象，静态引用（方法区），虚拟机内部使用的对象</p>\n</blockquote>\n<ul>\n<li>\n<p>并发标记：从 GC Roots 的直接关联对象开始<strong>遍历整个对象图</strong>的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行。</p>\n</li>\n<li>\n<p>重新标记（需要暂停用户线程）：为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，需要停顿。这个时间会比初始标记时间长一丢丢。</p>\n</li>\n<li>\n<p>并发清除：最后就可以直接将所有标记好的无用对象进行删除，因为这些对象程序中也用不到了，所以可以与用户线程并发运行。</p>\n</li>\n</ul>\n<p>具有以下缺点:</p>\n<ul>\n<li>吞吐量低：低停顿时间是以牺牲吞吐量为代价的，导致 CPU 利用率不够高。</li>\n<li>无法处理浮动垃圾，可能出现 Concurrent Mode Failure。浮动垃圾是指 ** 并发清除阶段（第四个阶段）** 由于用户线程继续运行而产生的垃圾，这部分垃圾只能到下一次 GC 时才能进行回收。由于浮动垃圾的存在，因此需要预留出一部分内存，意味着 CMS 收集不能像其它收集器那样等待老年代快满的时候再回收。如果预留的内存不够存放浮动垃圾，就会出现 Concurrent Mode Failure，这时虚拟机将临时启用 Serial Old 来替代 CMS。</li>\n<li>标记 - 清除算法导致的空间碎片，往往出现老年代空间剩余，但无法找到足够大连续空间来分配当前对象，不得不提前触发一次 Full GC。</li>\n</ul>\n<h2 id=\"g1收集器\"><a class=\"anchor\" href=\"#g1收集器\">#</a> G1 收集器</h2>\n<p>堆被分为新生代和老年代，其它收集器进行收集的范围都是整个新生代或者老年代，而 G1（Garbage First ） 可以直接对新生代和老年代一起回收。</p>\n<p>垃圾回收分为 <code>Minor GC</code> 、 <code>Major GC</code>  和 <code>Full GC</code> ，它们分别对应的是新生代，老年代和整个堆内存的垃圾回收，而 G1 收集器巧妙地绕过了这些约定，它将整个 Java 堆划分成 <code>2048</code>  个大小相同的独立 <code>Region</code>  块，每个 <code>Region块</code> 的大小根据堆空间的实际大小而定，整体被控制在 1MB 到 32MB 之间，且都为 2 的 N 次幂。所有的 <code>Region</code>  大小相同，且在 JVM 的整个生命周期内不会发生改变。</p>\n<p>每一个 <code>Region</code>  都可以根据需要，自由决定扮演哪个角色（Eden、Survivor 和老年代），收集器会根据对应的角色采用不同的回收策略。此外，G1 收集器还存在一个 Humongous 区域，它专门用于存放大对象（一般认为大小超过了 Region 容量一半的对象为大对象）这样，新生代、老年代在物理上，不再是一个连续的内存区域，而是到处分布的。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/9472c91267ced332.jpg\" alt=\"\" /></p>\n<p>回收过程与 CMS 相似：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/ec5b94383e100df0.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>初始标记（暂停用户线程）：仅仅只是标记一下 GC Roots 能直接关联到的对象，并且修改 TAMS 指针的值，让下一阶段用户线程并发运行时，能正确地在可用的 Region 中分配新对象。</p>\n</li>\n<li>\n<p>并发标记：从 GC Root 开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。</p>\n</li>\n<li>\n<p>最终标记（暂停用户线程）：对用户线程做一个短暂的暂停，用于处理并发标记阶段漏标的那部分对象。</p>\n</li>\n<li>\n<p>筛选回收：负责更新 Region 的统计数据，对各个 Region 的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，<strong>可以自由选择任意多个 Region 构成回收集，然后把决定回收的那一部分 Region 的存活对象复制到空的 Region 中，再清理掉整个旧 Region 的全部空间</strong>。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多个收集器线程并行完成的。</p>\n</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2hsYTdociMyNDY2Yzc5Mg==\">https://www.yuque.com/qingkongxiaguang/javase/hla7hr#2466c792</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tZ2MuaHRtbCMlRTUlOUUlODMlRTUlOUMlQkUlRTYlOTQlQjYlRTklOUIlODYlRTUlOTklQTg=\">https://pdai.tech/md/java/jvm/java-jvm-gc.html# 垃圾收集器</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/13/Java/JVM/JVM(8)-%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/",
            "url": "https://cecilia.cool/2022/10/13/Java/JVM/JVM(8)-%E5%AF%B9%E8%B1%A1%E5%AD%98%E6%B4%BB%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/",
            "title": "JVM(8)--对象存活与垃圾回收",
            "date_published": "2022-10-13T08:20:56.000Z",
            "content_html": "<h1 id=\"对象存活算法\"><a class=\"anchor\" href=\"#对象存活算法\">#</a> 对象存活算法</h1>\n<blockquote>\n<p>尽量以简短精炼的语言讲解，唔，所见即所得。</p>\n</blockquote>\n<h2 id=\"引用计数算法\"><a class=\"anchor\" href=\"#引用计数算法\">#</a> 引用计数算法</h2>\n<p>给对象添加一个引用计数器，当对象增加一个引用时计数器加 1，引用失效时计数器减 1。引用计数为 0 的对象可被回收。</p>\n<p>两个对象出现循环引用的情况下，此时引用计数器永远不为 0，导致无法对它们进行回收。</p>\n<p>正因为循环引用的存在，因此 Java 虚拟机不使用引用计数算法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReferenceCountingGC</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Object</span> instance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ReferenceCountingGC</span> objectA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceCountingGC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">ReferenceCountingGC</span> objectB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceCountingGC</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        objectA<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> objectB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        objectB<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> objectA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"可达性分析算法\"><a class=\"anchor\" href=\"#可达性分析算法\">#</a> 可达性分析算法</h2>\n<p>通过 GC Roots 作为起始点进行搜索，能够达到的对象都是存活的，不可达的对象可被回收。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/13/b793a432c31cfc5a.jpg\" alt=\"\" /></p>\n<p>GC Roots 一般包含：</p>\n<ul>\n<li><a href=\"https://cecilia.cool/2022/10/10/Java/JVM/JVM(5)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89/#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88\">虚拟机栈</a>中引用的对象（每个线程都有一个虚拟机栈）。</li>\n<li><a href=\"https://cecilia.cool/2022/10/10/Java/JVM/JVM(5)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89/#%E6%9C%AC%E5%9C%B0%E6%96%B9%E6%B3%95%E6%A0%88\">本地方法栈</a>中引用的对象（调用 native 方法）。</li>\n<li><a href=\"https://cecilia.cool/2022/10/11/Java/JVM/JVM(6)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB/#%E6%96%B9%E6%B3%95%E5%8C%BA\">方法区</a>中类静态属性，常量引用的对象（方法区其实就是 heap 老年代后面那个，又叫元数据区，永久代）。</li>\n<li>被添加了锁的对象</li>\n<li>虚拟机内部需要用到的对象。</li>\n</ul>\n<p>一旦已经存在的根节点不满足存在的条件时，那么根节点与对象之间的连接将被断开。此时虽然对象 1 仍存在对其他对象的引用，但是由于其没有任何根节点引用，所以此对象即可被判定为不再使用。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/13/1622fa539ace74ea.jpg\" alt=\"\" /></p>\n<h2 id=\"方法区回收\"><a class=\"anchor\" href=\"#方法区回收\">#</a> 方法区回收</h2>\n<blockquote>\n<p>方法区主要存放永久代对象，其回收率很低，因此在方法区主要是对常量池的回收和对类的卸载</p>\n</blockquote>\n<p>大量使用反射，动态代理，CGLib 等框架，这类频繁定义 ClassLoader 的场景都需要虚拟机具备类卸载功能，以保证不会出现内存溢出。</p>\n<p>类卸载条件很多，需要满足以下三个条件，并且满足了也不一定会被卸载：</p>\n<ul>\n<li>\n<p>该类所有实例都被回收</p>\n</li>\n<li>\n<p>加载该类的 <code>ClassLoader</code>  已经被回收</p>\n</li>\n<li>\n<p>该类对象的 Class 对象没有在任何地方被引用，也就无法在任何地方通过反射访问该类方法。</p>\n</li>\n</ul>\n<h2 id=\"finalize\"><a class=\"anchor\" href=\"#finalize\">#</a> finalize()</h2>\n<p><code>finalize()</code>  类似 C++ 的析构函数，用来做关闭外部资源等工作。但是 try-finally 等方式可以做的更好，并且该方法运行代价高昂，不确定性大，无法保证各个对象的调用顺序，<strong>因此最好不要使用</strong>。</p>\n<p>当一个对象可被回收时，如果需要执行该对象的 finalize () 方法，那么就有可能通过在该方法中让对象重新被引用，从而实现自救。<strong>自救只能进行一次</strong>，如果回收的对象之前调用了 finalize () 方法自救，后面回收时不会调用  <code>finalize()</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 该方法在 Object 类中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"引用类型\"><a class=\"anchor\" href=\"#引用类型\">#</a> 引用类型</h1>\n<p>这个在 <code>WeakHashMap</code>  中讲过，相关<a href=\"https://cecilia.cool/2022/10/04/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(5)-WeakHashMap/\">链接</a>。</p>\n<h1 id=\"垃圾回收\"><a class=\"anchor\" href=\"#垃圾回收\">#</a> 垃圾回收</h1>\n<h2 id=\"标记-清除\"><a class=\"anchor\" href=\"#标记-清除\">#</a> 标记 - 清除</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/6e2c2f6a36068e2f.jpg\" alt=\"\" /></p>\n<p>单纯清理掉未被标记的对象：标记和清除过程效率不高，但是会产生大量不连续的内存碎片。</p>\n<h2 id=\"标记-整理\"><a class=\"anchor\" href=\"#标记-整理\">#</a> 标记 - 整理</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/e25babeccdf54b47.jpg\" alt=\"\" /></p>\n<p>让所有存活的对象都向一端移动，然后直接清理掉端边界以外的内存。</p>\n<h2 id=\"复制\"><a class=\"anchor\" href=\"#复制\">#</a> 复制</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/14/ea3a84203595777f.jpg\" alt=\"\" /></p>\n<p>有没有想起堆区中的两个幸存者区，尽管这不是，这种复制的缺点是只是用了内存的一半，现在的 JVM 都采用这种收集算法回收新生代，而不是将新生代划分为大小相等的两块，而是分为一块较大的 Eden 空间和两块较小的 Survivor 空间，每次使用 Eden 空间和其中一块 Survivor。</p>\n<p>HotSpot 虚拟机的 Eden 和 Survivor 的大小比例默认为 <strong>8:1</strong>，保证了内存的利用率达到 90%。如果每次回收有多于 10% 的对象存活，<strong>那么一块 Survivor 空间就不够用了，此时需要依赖于老年代进行分配担保，也就是借用老年代的空间存储放不下的对象</strong>（这就是空间分配担保机制）。</p>\n<p>先看一下垃圾收集类别：</p>\n<ul>\n<li>\n<p>Minor GC  -  次要垃圾回收，主要进行新生代区域的垃圾收集。</p>\n</li>\n<li>\n<ul>\n<li>触发条件：新生代的 Eden 区容量已满时。</li>\n</ul>\n</li>\n<li>\n<p>Major GC  -  主要垃圾回收，主要进行老年代的垃圾收集。</p>\n</li>\n<li>\n<p>Full GC    -   完全垃圾回收，对整个 Java 堆内存和方法区进行垃圾回收。</p>\n</li>\n<li>\n<ul>\n<li>触发条件 1：每次晋升到老年代的对象平均大小大于老年代剩余空间</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>触发条件 2：Minor GC 后存活的对象超过了老年代剩余空间</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>触发条件 3：永久代内存不足（JDK8 之前）</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>触发条件 4：手动调用 <code>System.gc()</code>  方法</li>\n</ul>\n</li>\n</ul>\n<p><strong>详细的空间分配担保</strong>：</p>\n<p>当新生代无法容纳更多的的对象时，可以把新生代中的对象移动到老年代中，这样新生代就腾出了空间来容纳更多的对象。</p>\n<p>如果老年代也装不下，首先会判断一下之前的每次垃圾回收进入老年代的平均大小是否小于当前老年代的剩余空间，如果小于，那么说明也许可以放得下（不过也仅仅是也许，依然有可能放不下，因为判断的实际上只是平均值，万一这一次突然非常大呢），否则，会先来一次 Full GC，进行一次大规模垃圾回收，来尝试腾出空间，再次判断老年代是否有空间存放，要是还是装不下，直接抛出 OOM 错误，摆烂。</p>\n<h2 id=\"分代收集\"><a class=\"anchor\" href=\"#分代收集\">#</a> 分代收集</h2>\n<p>现在的商业虚拟机采用分代收集算法，它根据对象存活周期将内存划分为几块，不同块采用适当的收集算法。</p>\n<p>一般将堆分为新生代和老年代。</p>\n<ul>\n<li>新生代使用：复制算法</li>\n<li>老年代使用：标记 - 清除 或者 标记 - 整理 算法</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tZ2MuaHRtbA==\">https://pdai.tech/md/java/jvm/java-jvm-gc.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2hsYTdociNjY2IxMGZlNA==\">https://www.yuque.com/qingkongxiaguang/javase/hla7hr#ccb10fe4</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/12/Java/JVM/JVM(7)-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/",
            "url": "https://cecilia.cool/2022/10/12/Java/JVM/JVM(7)-%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/",
            "title": "JVM(7)--内存模型",
            "date_published": "2022-10-12T05:22:10.000Z",
            "content_html": "<h1 id=\"引入\"><a class=\"anchor\" href=\"#引入\">#</a> 引入</h1>\n<blockquote>\n<p>内存模型和内存结构不一样，通过本节从堆栈角度引入 JMM，为后续内容做铺垫。</p>\n</blockquote>\n<p>JMM 在线程栈和堆之间划分内存，如果你系统的学习过 Java，一定听过<strong>引用保存在栈中，实例化对象保存在堆中</strong>这样的话。从逻辑上说明 JMM：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/12/542b995303607bcd.jpg\" alt=\"\" /></p>\n<p>由线程创建的局部变量对于创建它的线程以外的所有其他线程是不可见的。 即使两个线程正在执行完全相同的代码，两个线程仍将在每个自己的线程堆栈中创建该代码的局部变量。</p>\n<blockquote>\n<p>基本类型的局部变量完全存储在线程堆栈中，对其他线程不可见；但是 <code>new</code>  对象时，都存储在堆上，这个对象的成员变量与对象一起存储在堆上。</p>\n</blockquote>\n<h2 id=\"jmm与硬件内存结构关系\"><a class=\"anchor\" href=\"#jmm与硬件内存结构关系\">#</a> JMM 与硬件内存结构关系</h2>\n<blockquote>\n<p>其实该部分在 <code>J.U.C</code>  的 <code>volatile</code>  关键字讲过。</p>\n</blockquote>\n<p>先看内存结构图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/12/f8124fb203ff9b3a.jpg\" alt=\"\" /></p>\n<p><code>内存-&gt;cache-&gt;寄存器</code> ：有些结构是将 <code>cache</code>  也到了 CPU 里面。</p>\n<p>因为 JVM 也是一个运行在 CPU 的程序，所以堆内存和线程栈的数据可能在三个位置，就会导致可见性和同步性的问题：</p>\n<blockquote>\n<p>可见性：对象共享后，某一个线程做出修改，但是还没有刷新到主存中，就会导致另一个线程看不到修改。</p>\n<p>同步性：多个线程的修改，后一个线程可能会掩盖前一个线程的修改。</p>\n</blockquote>\n<p>这些都是并发讲过的，不多说了，前一个问题通过 <code>volatile</code>  解决，后一个问题通过上锁解决。</p>\n<p>关于第二个问题，同步块有个特性：同步块还保证在同步块内访问的所有变量都将从主存储器中读入，当线程退出同步块时，所有更新的变量将再次刷新回主存储器，无论变量是不是声明为 volatile。</p>\n<h1 id=\"内存模型\"><a class=\"anchor\" href=\"#内存模型\">#</a> 内存模型</h1>\n<blockquote>\n<p>接下来的内容与并发内容多有相似之处。总结于 Info 上的深入理解 Java 内存模型，作者程晓明。</p>\n</blockquote>\n<h2 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h2>\n<p>线程之间通信机制有两种：共享内存和消息传递。前者很简单，后者的模型中，线程之间没有公共状态，线程之间必须通过明确的发送消息来显式进行通信。</p>\n<p>Java 的并发采用的是共享内存模型，Java 线程之间的通信总是隐式进行，整个通信过程对程序员完全透明。</p>\n<h3 id=\"jmm抽象\"><a class=\"anchor\" href=\"#jmm抽象\">#</a> JMM 抽象</h3>\n<p>在引入中就讲到 JMM，线程之间内存不共享。Java 中，所有实例，静态域，数组元素存储在堆内存中。我们常说的线程通信，其实就是通过主内存进行通信，因为每个线程都有副本，所以会出现可见性问题。</p>\n<p><strong>happens-before</strong>：这个概念用来阐述操作之间的内存可见性，如果 a 操作的结果需要对 b 操作可见，那么这两个操作必须存在 happens-before 关系。</p>\n<ul>\n<li>\n<p>程序顺序规则：一个线程中的每个操作，happens- before 于该线程中的任意后续操作。</p>\n</li>\n<li>\n<p>监视器锁规则：对一个监视器锁的解锁，happens- before 于随后对这个监视器锁的加锁。</p>\n</li>\n<li>\n<p>volatile 变量规则：对一个 volatile 域的写，happens- before 于任意后续对这个 volatile 域的读。</p>\n</li>\n<li>\n<p>传递性：如果 A happens- before B，且 B happens- before C，那么 A happens- before C。</p>\n</li>\n</ul>\n<p>happens-before 仅仅要求前一个操作（执行的结果）对后一个操作可见，且前一个操作按顺序排在第二个操作之前。</p>\n<blockquote>\n<p>因为内容完整性才写的这个，感觉都没什么好说的，知道有这么个概念即可。</p>\n</blockquote>\n<h2 id=\"重排序\"><a class=\"anchor\" href=\"#重排序\">#</a> 重排序</h2>\n<p><strong>数据依赖性</strong>：如果两个指令（操作）重排序会导致执行结果改变，就不允许重排序：写后读，读后写，写后写。</p>\n<blockquote>\n<p>编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序。</p>\n</blockquote>\n<p><strong>as-if-serial</strong>：不管怎么重排序，（单线程）程序的执行结果不能被改变。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> r   <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//B</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> pi <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span> <span class=\"token comment\">//C</span></pre></td></tr></table></figure><p>三个操作数依赖关系：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/12/fb20c093ac1b648f.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>其实就是 A，B 可以随意交换执行顺序。其实在计算机中，软件技术和硬件技术有一个共同的目标：在不改变程序执行结果的前提下，尽可能的开发并行度。编译器和处理器遵从这一目标，从 happens- before 的定义我们可以看出，JMM 同样遵从这一目标。</p>\n</blockquote>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<blockquote>\n<p>个人感觉：JMM 就是为了（多）线程指令正确执行而做出的努力。</p>\n</blockquote>\n<p>一般的处理器内存模型都符合这么一个规律：越是追求性能的处理器，内存模型设计会越弱，因为处理器希望内存模型对他们的束缚越少越好。毕竟为了保证并发环境下程序正确执行，会消耗大量资源。</p>\n<blockquote>\n<p>JMM 是一个语言级的内存模型，处理器内存模型是硬件级的内存模型</p>\n</blockquote>\n<p>不同处理器平台对于指令的重排序也不相同，JMM 通过插入内存屏障阻止这些不同处理器的不同重排序，向上屏蔽了处理器内存模型的差异，它在不同的处理器平台之上为 java 程序员呈现了一个一致的内存模型。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/12/b09bbd238021753d.jpg\" alt=\"\" /></p>\n<h2 id=\"jmm的设计\"><a class=\"anchor\" href=\"#jmm的设计\">#</a> JMM 的设计</h2>\n<p>从 JMM 设计者的角度来说，在设计 JMM 时，需要考虑两个关键因素：</p>\n<ul>\n<li>程序员对内存模型的使用。程序员希望内存模型易于理解，易于编程。程序员希望基于一个强内存模型来编写代码。</li>\n<li>编译器和处理器对内存模型的实现。编译器和处理器希望内存模型对它们的束缚越少越好，这样它们就可以做尽可能多的优化来提高性能。编译器和处理器希望实现一个弱内存模型。</li>\n</ul>\n<blockquote>\n<p>一方面要为程序员提供足够强的内存可见性保证；另一方面，对编译器和处理器的限制要尽可能的放松。</p>\n</blockquote>\n<p>下面让我们看看 JSR-133 是如何实现这一目标的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> pi  <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> r   <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//B</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">double</span> area <span class=\"token operator\">=</span> pi <span class=\"token operator\">*</span> r <span class=\"token operator\">*</span> r<span class=\"token punctuation\">;</span> <span class=\"token comment\">//C</span></pre></td></tr></table></figure><ul>\n<li>A happens- before B；</li>\n<li>B happens- before C；</li>\n<li>A happens- before C；</li>\n</ul>\n<p>happens- before 的定义会要求：A 操作执行的结果要对 B 可见，且 A 操作的执行顺序排在 B 操作之前。 但是从程序语义的角度来说，<strong>对 A 和 B 做重排序即不会改变程序的执行结果</strong>，也还能提高程序的执行性能（允许这种重排序减少了对编译器和处理器优化的束缚）。也就是说，上面这 3 个 happens- before 关系中，虽然 2 和 3 是必需要的，但 1 是不必要的。因此，JMM 把 happens- before <strong>要求禁止的重排序</strong>分为了下面两类：</p>\n<ul>\n<li>会改变程序执行结果的重排序。</li>\n<li>不会改变程序执行结果的重排序。</li>\n</ul>\n<blockquote>\n<p>这里说的 happens- before <strong>要求禁止的重排序</strong>就是 A happens-before B，也就是 A 的结果 B 必须可见（但是显然这不是必须的）。</p>\n</blockquote>\n<p>JMM 对这两种不同性质的重排序，采取了不同的策略：</p>\n<ul>\n<li>对于会改变程序执行结果的重排序，JMM 要求编译器和处理器必须禁止这种重排序。</li>\n<li>对于不会改变程序执行结果的重排序，JMM 对编译器和处理器不作要求（JMM 允许这种重排序）。</li>\n</ul>\n<blockquote>\n<p>第二种就是，JMM 放养了，随便编译器和处理器是否排序。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tam1tLmh0bWw=\">https://pdai.tech/md/java/jvm/java-jvm-jmm.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY24vbWluaWJvb2svamF2YV9tZW1vcnlfbW9kZWw=\">https://www.infoq.cn/minibook/java_memory_model</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/11/Java/JVM/JVM(6)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB/",
            "url": "https://cecilia.cool/2022/10/11/Java/JVM/JVM(6)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB/",
            "title": "JVM(6)--内存结构之线程共享",
            "date_published": "2022-10-11T02:23:41.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>关于内存结构的第二篇：包含堆内存，方法区。</p>\n<h1 id=\"堆内存\"><a class=\"anchor\" href=\"#堆内存\">#</a> 堆内存</h1>\n<blockquote>\n<p>Java 堆是 Java 虚拟机管理的内存中最大的一块，被所有线程共享。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例以及数据都在这里分配内存。</p>\n</blockquote>\n<p>JVM 把堆内存逻辑上划分为三个区域（划分的唯一理由就是优化 GC 性能）:</p>\n<ul>\n<li>年轻代：新对象和没达到一定年龄的对象都在新生代。</li>\n<li>老年代：被长时间使用的对象，老年代的内存空间应该要比年轻代更大。</li>\n<li>元空间（JDK1.8 之前叫永久代）：像一些方法中的操作临时对象等，JDK1.8 之前是占用 JVM 内存，JDK1.8 之后直接使用物理内存。</li>\n</ul>\n<p>主流虚拟机都是可扩展的（通过  <code>-Xmx</code>  和  <code>-Xms</code>  控制），如果堆中没有完成实例分配，并且堆无法再扩展时，就会抛出  <code>OutOfMemoryError</code>  异常。</p>\n<h2 id=\"年轻代\"><a class=\"anchor\" href=\"#年轻代\">#</a> 年轻代</h2>\n<p>年轻代是所有新对象创建的地方。当填充年轻代时，执行垃圾收集。这种垃圾收集称为 <strong>Minor GC</strong>。年轻一代被分为三个部分 —— 伊甸园（<strong>Eden Memory</strong>）和两个幸存区（<strong>Survivor Memory</strong>，被称为 from/to 或 s0/s1），默认比例是 <code>8:1:1</code></p>\n<ul>\n<li>大多数新创建的对象都位于 Eden 内存空间中，此时 JVM 会给对象定义一个对象年轻计数器。（ <code>-XX:MaxTenuringThreshold</code> ）。</li>\n<li>当 Eden 空间被对象填（<strong>空间不足</strong>）时，执行<strong> Minor GC</strong>，并将所有幸存者对象移动到一个幸存者空间中。</li>\n<li>Minor GC 检查幸存者对象，并将它们移动到<strong>另一个</strong>幸存者空间。所以每次，一个幸存者空间总是空的</li>\n<li>经过多次 GC 循环（每次 Minor GC 对象年龄 + 1）后存活下来的对象被移动到老年代。通常，这是通过设置年轻一代对象的年龄阈值来实现的，然后他们才有资格提升到老一代。</li>\n</ul>\n<blockquote>\n<p>对象超过了 <code>-XX:PetenureSizeThreshold</code> ，对象会<strong>直接被分配到老年代</strong>。默认是 15 次回收标记。</p>\n</blockquote>\n<h2 id=\"老年代\"><a class=\"anchor\" href=\"#老年代\">#</a> 老年代</h2>\n<p>旧的一代内存包含那些经过许多轮小型 GC 后仍然存活的对象。通常，垃圾收集是在老年代内存满时执行的。老年代垃圾收集称为 主 GC（Major GC），通常需要更长的时间。</p>\n<p><strong>大对象直接进入老年代（大对象是指需要大量连续内存空间的对象）。这样做的目的是避免在 Eden 区和两个 Survivor 区之间发生大量的内存拷贝</strong>。</p>\n<blockquote>\n<p>在老年代，如果内存不足，触发 Major GC，进行内存清理。之后发现依然无法进行对象的保存，就会产生 OOM 异常。</p>\n</blockquote>\n<h2 id=\"元空间\"><a class=\"anchor\" href=\"#元空间\">#</a> 元空间</h2>\n<p>不管是 JDK8 之前的永久代，还是 JDK8 及以后的元空间，都可以看作是 Java 虚拟机规范中方法区的实现。</p>\n<p>虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫 Non-Heap（非堆），目的应该是与 Java 堆区分开</p>\n<h2 id=\"设置堆内存大小和oom\"><a class=\"anchor\" href=\"#设置堆内存大小和oom\">#</a> 设置堆内存大小和 OOM</h2>\n<p>堆的大小可以在 JVM 启动时确定，通过 <code>-Xmx</code>  和 <code>-Xms</code>  设定：</p>\n<ul>\n<li><code>-Xms</code>  表示堆的起始内存，等价于 <code>-XX:InitialHeapSize</code> 。</li>\n<li><code>-Xmx</code>  表示堆的最大内存，等价于 <code>-XX:MaxHeapSize</code> 。</li>\n</ul>\n<p>如果堆的内存大小超过  <code>-Xmx</code>  设定的最大内存， 就会抛出  <code>OutOfMemoryError</code>  异常。</p>\n<p>通常会将  <code>-Xmx</code>  和  <code>-Xms</code>  两个参数配置为相同的值，其目的是为了能够在垃圾回收机制清理完堆区后不再需要重新分隔计算堆的大小，从而提高性能</p>\n<ul>\n<li>默认情况下，初始堆内存大小为：电脑内存大小 / 64</li>\n<li>默认情况下，最大堆内存大小为：电脑内存大小 / 4</li>\n</ul>\n<blockquote>\n<p>也可能出现偏差，导致下面代码的内存并不符合这种计算。</p>\n</blockquote>\n<p>可以通过代码获取到我们的设置值，当然也可以模拟 OOM：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 返回 JVM 堆大小</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">long</span> initalMemory <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">totalMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 返回 JVM 堆的最大内存</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">long</span> maxMemory <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">maxMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">/</span><span class=\"token number\">1024</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-Xms : \"</span><span class=\"token operator\">+</span>initalMemory <span class=\"token operator\">+</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-Xmx : \"</span><span class=\"token operator\">+</span>maxMemory <span class=\"token operator\">+</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统内存大小：\"</span> <span class=\"token operator\">+</span> initalMemory <span class=\"token operator\">*</span> <span class=\"token number\">64</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"系统内存大小：\"</span> <span class=\"token operator\">+</span> maxMemory <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"查看jvm堆内存分配\"><a class=\"anchor\" href=\"#查看jvm堆内存分配\">#</a> 查看 JVM 堆内存分配</h2>\n<ol>\n<li>在默认不配置 JVM 堆内存大小的情况下，JVM 根据默认值来配置当前内存大小</li>\n<li>默认情况下新生代和老年代的比例是 1:2，可以通过  <code>–XX:NewRatio</code>  来配置\n<ul>\n<li>新生代中的 <strong>Eden</strong>:<strong>From Survivor</strong>:<strong>To Survivor</strong> 的比例是 <strong>8:1:1</strong>，可以通过  <code>-XX:SurvivorRatio</code>  来配置</li>\n</ul>\n</li>\n<li>若在 JDK 7 中开启了  <code>-XX:+UseAdaptiveSizePolicy</code> ，JVM 会动态调整 JVM 堆中各个区域的大小以及进入老年代的年龄。此时  <code>–XX:NewRatio</code>  和  <code>-XX:SurvivorRatio</code>   将会失效，而 JDK 8 是默认开启 <code>-XX:+UseAdaptiveSizePolicy</code> 。在 JDK 8 中，<strong>不要随意关闭</strong> <code>-XX:+UseAdaptiveSizePolicy</code> ，除非对堆内存的划分有明确的规划。</li>\n</ol>\n<blockquote>\n<p>所以记住了比例也是然并卵对吗？</p>\n</blockquote>\n<p>每次 GC 后都会重新计算 Eden、From Survivor、To Survivor 的大小</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">java</span> <span class=\"token parameter variable\">-XX:+PrintFlagsFinal</span> <span class=\"token parameter variable\">-version</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> HeapSize</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    uintx ErgoHeapSizeLimit                         <span class=\"token operator\">=</span> <span class=\"token number\">0</span>                                   <span class=\"token punctuation\">&#123;</span>product<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    uintx HeapSizePerGCThread                       <span class=\"token operator\">=</span> <span class=\"token number\">87241520</span>                            <span class=\"token punctuation\">&#123;</span>product<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    uintx InitialHeapSize                          :<span class=\"token operator\">=</span> <span class=\"token number\">134217728</span>                           <span class=\"token punctuation\">&#123;</span>product<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    uintx LargePageHeapSizeThreshold                <span class=\"token operator\">=</span> <span class=\"token number\">134217728</span>                           <span class=\"token punctuation\">&#123;</span>product<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    uintx MaxHeapSize                              :<span class=\"token operator\">=</span> <span class=\"token number\">2147483648</span>                          <span class=\"token punctuation\">&#123;</span>product<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">java</span> version <span class=\"token string\">\"1.8.0_211\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Java<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> SE Runtime Environment <span class=\"token punctuation\">(</span>build <span class=\"token number\">1.8</span>.0_211-b12<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Java HotSpot<span class=\"token punctuation\">(</span>TM<span class=\"token punctuation\">)</span> <span class=\"token number\">64</span>-Bit Server VM <span class=\"token punctuation\">(</span>build <span class=\"token number\">25.211</span>-b12, mixed mode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"扩展逃逸分析\"><a class=\"anchor\" href=\"#扩展逃逸分析\">#</a> 扩展：逃逸分析</h2>\n<blockquote>\n<p>随着 JIT 编译期的发展和逃逸分析技术的逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化，所有的对象都分配到堆上也渐渐变得不那么 “绝对” 了。 ——《深入理解 Java 虚拟机》</p>\n</blockquote>\n<p><strong>逃逸分析 (Escape Analysis) 是目前 Java 虚拟机中比较前沿的优化技术</strong>。通过逃逸分析，Java Hotspot 编译器能够分析出一个新的对象的引用的使用范围从而决定<strong>是否要将这个对象分配到堆上</strong>。</p>\n<p>逃逸分析的基本行为就是分析对象动态作用域：</p>\n<ul>\n<li>当一个对象在方法中被定义后，对象只在方法内部使用，则认为没有发生逃逸。</li>\n<li>当一个对象在方法中被定义后，它被外部方法所引用，则认为发生逃逸。例如作为调用参数传递到其他地方中，称为方法逃逸。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">StringBuffer</span> <span class=\"token function\">craeteStringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> s2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token class-name\">StringBuffer</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//sb 就可以被外部方法访问，即方法逃逸，如果还被外部线程访问了，就是线程逃逸。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果不想 sb 逃逸出去，可以写成 sb.toString ()，当然方法返回类型改为 String</span></pre></td></tr></table></figure><p>使用逃逸分析，编译器可以对代码做优化：</p>\n<ul>\n<li><strong>栈上分配</strong>：将堆分配转化为栈分配。如果一个对象在子程序中被分配，要使指向该对象的指针永远不会逃逸，对象可能是栈分配的候选，而不是堆分配（这个可以有，而且优化效果会非常明显）。</li>\n</ul>\n<p>JVM 通过逃逸分析确定该对象不会被外部访问。那就通过标量替换将该对象分解在栈上分配内存，这样该对象所占用的内存空间就可以随栈帧出栈而销毁，就减轻了垃圾回收的压力。</p>\n<ul>\n<li><strong>同步省略</strong>：如果一个对象被发现只能从一个线程被访问到，那么对于这个对象的操作可以不考虑同步</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">keep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token class-name\">Object</span> keeper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span>keeper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>keeper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 当然，这种更考验开发人员写代码的水平，因为本来就不该给 keeper</span></pre></td></tr></table></figure><ul>\n<li><strong>分离对象或标量替换</strong>：有的对象可能不需要作为一个连续的内存结构存在也可以被访问到，那么对象的部分（或全部）可以不存储在内存，而存储在 CPU 寄存器</li>\n</ul>\n<p>分离对象（标量替换）说直白点就是将对象拆分为标量。</p>\n<blockquote>\n<p><strong>标量</strong>（Scalar）是指一个无法再分解成更小的数据的数据，其他的就是聚合量。</p>\n</blockquote>\n<p>通过  <code>-XX:+EliminateAllocations</code>  可以开启标量替换， <code>-XX:+PrintEliminateAllocations</code>  查看标量替换情况。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token class-name\">Point</span> point <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span>（<span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span>）<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"point.x=\"</span><span class=\"token operator\">+</span>point<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+</span><span class=\"token string\">\"; point.y=\"</span><span class=\"token operator\">+</span>point<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>point 对象并没有逃逸出  <code>alloc()</code>  方法，并且 point 对象是可以拆解成标量的。那么，JIT 就不会直接创建 Point 对象，而是直接使用两个标量 int x ，int y 来替代 Point 对象。</p>\n<p><strong>总结</strong>：</p>\n<p>** 虽然经过逃逸分析可以做标量替换、栈上分配、和锁消除。但是逃逸分析自身也是需要进行一系列复杂的分析的，这其实也是一个相对耗时的过程。** 一个极端的例子，就是经过逃逸分析之后，发现没有一个对象是不逃逸的。那这个逃逸分析的过程就白白浪费掉了。关于逃逸分析的论文在 1999 年就已经发表了，但直到 JDK 1.6 才有实现，而且这项技术到如今也并不是十分成熟的。</p>\n<h1 id=\"方法区\"><a class=\"anchor\" href=\"#方法区\">#</a> 方法区</h1>\n<p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本 / 字段 / 方法 / 接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将类在加载后进入方法区的运行时常量池中存放。运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的是  <code>String.intern()</code>  方法。受方法区内存的限制，当常量池无法再申请到内存时会抛出  <code>OutOfMemoryErro</code> r 异常。</p>\n<h3 id=\"解惑\"><a class=\"anchor\" href=\"#解惑\">#</a> 解惑</h3>\n<p>你是否也有看不同的参考资料，有的内存结构图有方法区，有的又是永久代，元数据区，一脸懵逼的时候？</p>\n<ul>\n<li><strong>方法区（method area）只是 JVM 规范中定义的一个概念</strong>，用于存储类信息、常量池、静态变量、JIT 编译后的代码等数据，并没有规定如何去实现它，不同的厂商有不同的实现。而<strong>永久代（PermGen）是 Hotspot 虚拟机特有的概念， Java8 的时候又被元空间</strong>取代了，永久代和元空间都可以理解为方法区的落地实现。</li>\n<li>永久代物理是堆的一部分，和新生代，老年代地址是连续的（受垃圾回收器管理），而元空间存在于本地内存（我们常说的堆外内存，不受垃圾回收器管理），这样就不受 JVM 限制了，也比较难发生 OOM（都会有溢出异常）。</li>\n<li>Java7 中我们通过 <code>-XX:PermSize</code>  和  <code>-xx:MaxPermSize</code>  来设置永久代参数，Java8 之后，随着永久代的取消，这些参数也就随之失效了，改为通过 <code>-XX:MetaspaceSize</code>  和  <code>-XX:MaxMetaspaceSize</code>  用来设置元空间参数。</li>\n<li>存储内容不同，元空间存储类的元信息，静态变量和常量池等并入堆中。相当于永久代的数据被分到了堆和元空间中。</li>\n<li>如果方法区域中的内存不能用于满足分配请求，则 Java 虚拟机抛出  <code>OutOfMemoryError</code> 。</li>\n<li>JVM 规范说方法区在逻辑上是堆的一部分，但目前实际上是与 Java 堆分开的（Non-Heap）。</li>\n</ul>\n<p>所以对于方法区，Java8 之后的变化：</p>\n<ul>\n<li>移除了永久代（PermGen），替换为元空间（Metaspace）；</li>\n<li>永久代中的 class metadata 转移到了 native memory（本地内存，而不是虚拟机）；</li>\n<li>永久代中的 interned Strings 和 class static variables 转移到了 Java heap；</li>\n<li>永久代参数 （PermSize MaxPermSize） -&gt; 元空间参数（MetaspaceSize MaxMetaspaceSize）</li>\n</ul>\n<h3 id=\"方法区内部结构\"><a class=\"anchor\" href=\"#方法区内部结构\">#</a> 方法区内部结构</h3>\n<blockquote>\n<p>方法区用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等。</p>\n</blockquote>\n<h4 id=\"类型信息\"><a class=\"anchor\" href=\"#类型信息\">#</a> 类型信息</h4>\n<p>对每个加载的类型（类 class、接口 interface、枚举 enum、注解 annotation），JVM 必须在方法区中存储以下类型信息</p>\n<ul>\n<li>这个类型的完整有效名称（全名 = 包名。类名）</li>\n<li>这个类型直接父类的完整有效名（对于 interface 或是 java.lang.Object，都没有父类）</li>\n<li>这个类型的修饰符（public，abstract，final 的某个子集）</li>\n<li>这个类型直接接口的一个有序列表</li>\n</ul>\n<h4 id=\"域信息\"><a class=\"anchor\" href=\"#域信息\">#</a> 域信息</h4>\n<ul>\n<li>JVM 必须在方法区中保存类型的所有域的相关信息以及域的声明顺序</li>\n<li>域的相关信息包括：域名称、域类型、域修饰符（public、private、protected、static、final、volatile、transient 的某个子集）</li>\n</ul>\n<h4 id=\"方法信息\"><a class=\"anchor\" href=\"#方法信息\">#</a> 方法信息</h4>\n<p>JVM 必须保存所有方法的</p>\n<ul>\n<li>方法名称</li>\n<li>方法的返回类型</li>\n<li>方法参数的数量和类型</li>\n<li>方法的修饰符（public，private，protected，static，final，synchronized，native，abstract 的一个子集）</li>\n<li>方法的字符码（bytecodes）、操作数栈、局部变量表及大小（abstract 和 native 方法除外）</li>\n<li>异常表（abstract 和 native 方法除外）\n<ul>\n<li>每个异常处理的开始位置、结束位置、代码处理在程序计数器中的偏移地址、被捕获的异常类的常量池索引</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"运行时常量池\"><a class=\"anchor\" href=\"#运行时常量池\">#</a> 运行时常量池</h3>\n<p>运行时常量池（Runtime Constant Pool）是方法区的一部分，在加载类和结构到虚拟机后，就会创建对应的运行时常量池。</p>\n<ul>\n<li>常量池表（Constant Pool Table）是 Class 文件的一部分，用于存储编译期生成的各种字面量和符号引用，<strong>这部分内容将在类加载后存放到方法区的运行时常量池中</strong>。</li>\n<li>JVM 为每个已加载的类型（类或接口）都维护一个常量池。池中的数据项像数组项一样，是通过索引访问的。</li>\n<li>运行时常量池中包含各种不同的常量，包括编译器就已经明确的数值字面量，也包括到运行期解析后才能够获得的方法或字段引用。此时不再是常量池中的符号地址了，这里换为真实地址。运行时常量池，相对于 Class 文件常量池的另一个重要特征是：<strong>动态性</strong>，Java 语言并不要求常量一定只有编译期间才能产生，运行期间也可以将新的常量放入池中，String 类的  <code>intern()</code>  方法就是这样的。</li>\n<li>当创建类或接口的运行时常量池时，如果构造运行时常量池所需的内存空间超过了方法区所能提供的最大值，则 JVM 会抛出 OutOfMemoryError 异常。</li>\n</ul>\n<h3 id=\"方法区的gc\"><a class=\"anchor\" href=\"#方法区的gc\">#</a> 方法区的 GC</h3>\n<p>方法区的垃圾收集主要回收两部分内容：<strong>常量池中废弃的常量和不再使用的类型</strong>。</p>\n<p>先来说说方法区内常量池之中主要存放的两大类常量：字面量和符号引用。字面量比较接近 Java 语言层次的常量概念，如文本字符串、被声明为 final 的常量值等。而符号引用则属于编译原理方面的概念，包括下面三类常量：</p>\n<ul>\n<li>类和接口的全限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符</li>\n</ul>\n<p>HotSpot 虚拟机对常量池的回收策略是很明确的，只要常量池中的常量没有被任何地方引用，就可以被回收。</p>\n<p>判定一个类型是否属于 “不再被使用的类”，需要同时满足三个条件：</p>\n<ul>\n<li>该类所有的实例都已经被回收，也就是 Java 堆中不存在该类及其任何派生子类的实例</li>\n<li>加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如 OSGi、JSP 的重加载等，否则通常很难达成</li>\n<li>该类对应的 java.lang.Class 对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法</li>\n</ul>\n<p>Java 虚拟机被允许堆满足上述三个条件的无用类进行回收，这里说的仅仅是 “被允许”，而并不是和对象一样，不使用了就必然会回收。是否对类进行回收，HotSpot 虚拟机提供了  <code>-Xnoclassgc</code>  参数进行控制，还可以使用  <code>-verbose:class</code>  以及  <code>-XX:+TraceClassLoading</code>  、 <code>-XX:+TraceClassUnLoading</code>  查看类加载和卸载信息。</p>\n<p>在大量使用反射、动态代理、CGLib 等 ByteCode 框架、动态生成 JSP 以及 OSGi 这类频繁自定义 ClassLoader 的场景都需要虚拟机具备类卸载的功能，以保证永久代不会溢出。</p>\n<h1 id=\"参考与感谢\"><a class=\"anchor\" href=\"#参考与感谢\">#</a> 参考与感谢</h1>\n<ul>\n<li>作者：海星</li>\n<li>来源于：JavaKeeper</li>\n</ul>\n<p>原作者参考内容如下</p>\n<p>算是一篇学习笔记，共勉，主要来源：</p>\n<p>《深入理解 Java 虚拟机 第三版》</p>\n<p>宋红康老师的 JVM 教程</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2luZGV4Lmh0bWw=\">https://docs.oracle.com/javase/specs/index.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2ljZmh3ZmZnL3AvOTM4MjY3Ny5odG1s\">https://www.cnblogs.com/wicfhwffg/p/9382677.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vaG9sbGlzY2h1YW5nL3AvMTI1MDE5NTAuaHRtbA==\">https://www.cnblogs.com/hollischuang/p/12501950.html</span></p>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/10/Java/JVM/JVM(5)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89/",
            "url": "https://cecilia.cool/2022/10/10/Java/JVM/JVM(5)-%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84%E4%B9%8B%E7%BA%BF%E7%A8%8B%E7%A7%81%E6%9C%89/",
            "title": "JVM(5)--内存结构之线程私有",
            "date_published": "2022-10-10T11:48:04.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>JVM 内存结构主要分为 5 个：</p>\n<ul>\n<li>\n<p>线程私有：程序计数器，虚拟机栈，本地方法栈。</p>\n</li>\n<li>\n<p>线程共享：方法区，堆内存。</p>\n</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/10/db2c0ead0de42c67.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>因为内容较多，所以分两篇讲完。</p>\n</blockquote>\n<h1 id=\"程序计数器\"><a class=\"anchor\" href=\"#程序计数器\">#</a> 程序计数器</h1>\n<p>程序计数寄存器（<strong>Program Counter Register</strong>），Register 的命名源于 CPU 的寄存器，寄存器存储指令相关的线程信息，CPU 只有把数据装载到寄存器才能够运行。</p>\n<p>这里，并非是广义上所指的物理寄存器，叫程序计数器（或 PC 计数器或指令计数器）会更加贴切，并且也不容易引起一些不必要的误会。<strong>JVM 中的 PC 寄存器是对物理 PC 寄存器的一种抽象模拟</strong>。</p>\n<blockquote>\n<p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的<strong>行号指示器</strong>。</p>\n</blockquote>\n<h2 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用</h2>\n<p>PC 寄存器用来存储指向下一条指令的地址，即将要执行的指令代码。由执行引擎读取下一条指令。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/10/8fd60a5f2a320f84.jpg\" alt=\"\" /></p>\n<p>通过两个问题来理解 PC 寄存器：</p>\n<ul>\n<li><strong>使用 PC 寄存器存储字节码指令地址有什么用呢？为什么使用 PC 寄存器记录当前线程的执行地址呢？</strong></li>\n</ul>\n<p>因为 CPU 需要不停的切换各个线程，这时候切换回来以后，就得知道接着从哪开始继续执行。JVM 的字节码解释器就需要通过改变 PC 寄存器的值来明确下一条应该执行什么样的字节码指令。</p>\n<ul>\n<li><strong>PC 寄存器为什么会被设定为线程私有的？</strong></li>\n</ul>\n<p>多线程在一个特定的时间段内只会执行其中某一个线程方法，CPU 会不停的做任务切换，这样必然会导致经常中断或恢复。为了能够准确的记录各个线程正在执行的当前字节码指令地址，所以为<strong>每个线程都分配了一个 PC 寄存器，每个线程都独立计算，不会互相影响</strong>。</p>\n<blockquote>\n<p>总结如下：</p>\n</blockquote>\n<ul>\n<li>它是一块很小的内存空间，几乎可以忽略不计。也是运行速度最快的存储区域</li>\n<li>在 JVM 规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期一致</li>\n<li>任何时间一个线程都只有一个方法在执行，也就是所谓的<strong>当前方法</strong>。如果当前线程正在执行的是 Java 方法，程序计数器记录的是 JVM 字节码指令地址，如果是执行 native 方法，则是未指定值 (undefined)</li>\n<li>字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令</li>\n<li><strong>它是唯一一个在 JVM 规范中没有规定任何  <code>OutOfMemoryError</code>  情况的区域</strong></li>\n</ul>\n<h1 id=\"虚拟机栈\"><a class=\"anchor\" href=\"#虚拟机栈\">#</a> 虚拟机栈</h1>\n<p>每个线程在创建的时候都会创建一个虚拟机栈，其内部保存一个个的栈帧 (Stack Frame），对应着一次次 Java 方法调用，是线程私有的，生命周期和线程一致。</p>\n<blockquote>\n<p>方法调用会入栈，方法递归时，其实就是一个个方法不断入栈。如果一直递归无法结束，就会 <code>StackOverflowError</code> 。</p>\n</blockquote>\n<p><strong>栈中可能出现的异常</strong>：</p>\n<p>Java 虚拟机规范允许 <strong>Java 虚拟机栈的大小是动态的或者是固定不变的</strong></p>\n<ul>\n<li>如果采用<strong>固定大小</strong>的 Java 虚拟机栈，容量可以在线程创建的时候独立选定。如果线程请求分配的栈容量超过 Java 虚拟机栈允许的最大容量，Java 虚拟机将会抛出一个 <strong>StackOverflowError</strong> 异常</li>\n<li>如果 Java 虚拟机栈可以动态扩展，并且在尝试扩展的时候无法申请到足够的内存，或者在创建新的线程时没有足够的内存去创建对应的虚拟机栈，那 Java 虚拟机将会抛出一个<strong> OutOfMemoryError</strong> 异常</li>\n</ul>\n<h2 id=\"存储单位\"><a class=\"anchor\" href=\"#存储单位\">#</a> 存储单位</h2>\n<ul>\n<li>\n<p>栈中的数据都是以<strong>栈帧（Stack Frame）的格式存在</strong></p>\n</li>\n<li>\n<p>在这个线程上正在执行的每个方法都各自有对应的一个栈帧</p>\n</li>\n<li>\n<p>栈帧是一个内存区块，是一个数据集，维系着方法执行过程中的各种数据信息</p>\n</li>\n</ul>\n<h2 id=\"运行原理\"><a class=\"anchor\" href=\"#运行原理\">#</a> 运行原理</h2>\n<ul>\n<li>\n<p>在一条活动线程中，一个时间点上，只会有一个活动的栈帧。即只有当前正在执行的方法的栈帧（<strong>栈顶栈帧</strong>）是有效的，这个栈帧被称为<strong>当前栈帧</strong>（Current Frame），与当前栈帧对应的方法就是<strong>当前方法</strong>（Current Method），定义这个方法的类就是<strong>当前类</strong>（Current Class）</p>\n</li>\n<li>\n<p>如果在该方法中调用了其他方法，对应的新的栈帧会被创建出来，放在栈的顶端，称为新的当前栈帧</p>\n</li>\n<li>\n<p>Java 方法有两种返回函数的方式，<strong>一种是正常的函数返回，使用 return 指令，另一种是抛出异常，不管用哪种方式，都会导致栈帧被弹出</strong>。</p>\n</li>\n</ul>\n<h2 id=\"栈帧内部结构\"><a class=\"anchor\" href=\"#栈帧内部结构\">#</a> 栈帧内部结构</h2>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMy5ibXAub3ZoL2ltZ3MvMjAyMi8xMC8xMC8yNWJhMzFhMGJlMDM0MzRmLmpwZw==\">https://s3.bmp.ovh/imgs/2022/10/10/25ba31a0be03434f.jpg</span>&quot;  /&gt;</p>\n<p>上图最右边即是栈帧的内部结构：</p>\n<ul>\n<li>动态链接：指向运行时常量池的方法引用。</li>\n<li>方法返回地址：正常退出或异常退出的地址。</li>\n</ul>\n<h3 id=\"局部变量表\"><a class=\"anchor\" href=\"#局部变量表\">#</a> 局部变量表</h3>\n<p><strong>局部变量表所需要的容量大小是编译期确定下来的</strong>，并保存在方法的 Code 属性的  <code>maximum local variables</code>  数据项中。在方法运行期间是不会改变局部变量表的大小的。</p>\n<blockquote>\n<p>局部变量不仅包括基本数据类型，还包括对象引用。</p>\n</blockquote>\n<p>局部变量表最基本的存储单元是 <code>Slot</code> -- 槽：</p>\n<ul>\n<li>在局部变量表中，32 位以内的类型只占用一个 Slot (包括 returnAddress 类型)，64 位的类型（long 和 double）占用两个连续的 Slot。</li>\n<li>byte、short、char 在存储前被转换为 int，boolean 也被转换为 int，0 表示 false，非 0 表示 true。</li>\n</ul>\n<blockquote>\n<p>所以有时候在方法里面想着节省空间，将 <code>int</code>  在允许的情况下换成 <code>byte</code>  啥的，其实并不节省空间。</p>\n</blockquote>\n<ul>\n<li>\n<p>每个 Slot 对应一个访问索引，范围从 0 到 Slot 最大数量。</p>\n</li>\n<li>\n<p>如果当前帧是由构造方法或实例方法创建的，那么该对象引用 this 将会存放在 index 为 0 的 Slot 处，其余的参数按照参数表顺序继续排列（这里就引出一个问题：静态方法中为什么不可以引用 this，就是因为 this 变量不存在于当前方法的局部变量表中）。</p>\n</li>\n<li>\n<p><strong>栈帧中的局部变量表中的槽位是可以重用的</strong>，如果一个局部变量过了其作用域，那么在其作用域之后申明的新的局部变量就很有可能会复用过期局部变量的槽位，从而<strong>达到节省资源的目的</strong>。</p>\n</li>\n<li>\n<p><strong>局部变量表中的变量也是重要的垃圾回收根节点，只要被局部变量表中直接或间接引用的对象都不会被回收</strong>。</p>\n</li>\n</ul>\n<h3 id=\"操作数栈\"><a class=\"anchor\" href=\"#操作数栈\">#</a> 操作数栈</h3>\n<p><strong>在方法执行过程中，根据字节码指令，往操作数栈中写入数据或提取数据，即入栈（push）、出栈（pop）</strong>。</p>\n<blockquote>\n<p>对，就是操作数的一个数据结构。</p>\n</blockquote>\n<p>某些字节码指令将值压入操作数栈，其余的字节码指令将操作数取出栈。使用它们后再把结果压入栈。比如，执行复制、交换、求和等操作。</p>\n<h3 id=\"动态链接\"><a class=\"anchor\" href=\"#动态链接\">#</a> 动态链接</h3>\n<p>在 Java 源文件被编译到字节码文件中时，所有的变量和方法引用都作为<strong>符号引用</strong>（Symbolic Reference）保存在 Class 文件的常量池中。比如：描述一个方法调用了另外的其他方法时，就是通过常量池中指向方法的符号引用来表示的，那么<strong>动态链接的作用就是为了将这些符号引用转换为调用方法的直接引用</strong></p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/10/05c85fc5e1233e0a.jpg\" alt=\"\" /></p>\n<p><strong>方法调用</strong>：唯一任务著是确定被调用方法的版本（即调用哪一个方法），不涉及方法内部的具体运行过程。Class 文件的编译过程中不包括传统编译器中的连接步骤，一切<strong>方法调用</strong>在 Class 文件里面存储的都是<strong>符号引用</strong>，而不是方法在实际运行时内存布局中的入口地址（<strong>直接引用</strong>）。也就是需要在类加载阶段，甚至到运行期才能确定目标方法的直接引用。</p>\n<ul>\n<li>\n<p><strong>静态链接</strong>：当一个字节码文件被装载进 JVM 内部时，如果被调用的<strong>目标方法在编译期可知</strong>，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接</p>\n</li>\n<li>\n<p><strong>动态链接</strong>：如果被调用的方法在编译期无法被确定下来，也就是说，只能在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接</p>\n</li>\n</ul>\n<p>对应的方法的绑定机制为：早期绑定（Early Binding）和晚期绑定（Late Binding）。<strong>绑定是一个字段、方法或者类在符号引用被替换为直接引用的过程，这仅仅发生一次</strong>。</p>\n<blockquote>\n<p>早期和晚期的区别在于<strong>被调用的目标方法如果在编译期可知，且运行期保持不变时</strong>，即可将这个方法与所属的类型进行绑定。这种方法也叫做非虚方法。</p>\n</blockquote>\n<h3 id=\"方法返回地址\"><a class=\"anchor\" href=\"#方法返回地址\">#</a> 方法返回地址</h3>\n<p>方法退出后都返回到<strong>该方法被调用的位置</strong>。方法正常退出时，调用者的 <strong>PC 计数器的值</strong>作为返回地址，即调用该方法的指令的下一条指令的地址。而通过异常退出的，返回地址是要通过<strong>异常表</strong>来确定的，栈帧中一般不会保存这部分信息。</p>\n<p>在方法执行的过程中遇到了异常，并且这个异常没有在方法内进行处理，也就是只要在本方法的异常表中没有搜索到匹配的异常处理器，就会导致方法退出。简称<strong>异常完成出口</strong>。</p>\n<p>正常完成出口和异常完成出口的区别在于：<strong>通过异常完成出口退出的不会给他的上层调用者产生任何的返回值</strong>。</p>\n<h1 id=\"本地方法栈\"><a class=\"anchor\" href=\"#本地方法栈\">#</a> 本地方法栈</h1>\n<p>一个 Native Method 就是一个 Java 调用非 Java 代码的接口。我们知道的 Unsafe 类就有很多本地方法。</p>\n<p>我们在开发程序时，有时会不可避免地使用本地方法。</p>\n<ul>\n<li>Java 虚拟机栈用于管理 Java 方法的调用，而本地方法栈用于管理本地方法的调用。</li>\n<li>允许线程固定或者可动态扩展的内存大小（抛出异常机制和虚拟机栈一样）。</li>\n<li>本地方法可以通过本地方法接口来访问虚拟机内部的运行时数据区，它甚至可以直接使用本地处理器中的寄存器，直接从本地内存的堆中分配任意数量的内存。</li>\n<li><strong>在 Hotspot JVM 中，直接将本地方法栈和虚拟机栈合二为一</strong>。</li>\n</ul>\n<blockquote>\n<p><strong>栈是运行时的单位，而堆是存储的单位</strong>。</p>\n<p>栈解决程序的运行问题，即程序如何执行，或者说如何处理数据。堆解决的是数据存储的问题，即数据怎么放、放在哪。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><strong>海星的 javakeeper 公众号</strong>整理的文章，写得好就直接用了。</p>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/10/Java/JVM/JVM(4)-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/",
            "url": "https://cecilia.cool/2022/10/10/Java/JVM/JVM(4)-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/",
            "title": "JVM(4)--类加载器",
            "date_published": "2022-10-10T02:58:09.000Z",
            "content_html": "<blockquote>\n<p>jvm 启动的时候，并不会一次性加载所有的 class 文件，而是根据需要去动态加载。ClassLoader 的具体作用就是将 class 文件加载到 jvm 虚拟机中去，程序就可以正确运行了。普通的<span class=\"exturl\" data-url=\"aHR0cDovL2xpYi5jc2RuLm5ldC9iYXNlL2phdmFzZQ==\"> Java</span> 开发者其实用到的不多，但对于某些框架开发者来说却非常常见。</p>\n</blockquote>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<blockquote>\n<p>看了很多文章，个人觉得先把如何使用类加载器 -- <code>ClassLoader</code>  弄明白，再来讲解原理效果好得多。</p>\n</blockquote>\n<p><code>class</code>  字节码文件，需要使用类加载器加载字节码，即在 java 中所有类都会通过加载器加载才能运行。下文提到的类似 <code>Bootstrap ClassLoader</code> ， <code>Extension ClassLoader</code>  等，都是 JDK 自带的，正是这些自带的类加载器，我们才能将源码的 class 文件加载字节码。</p>\n<h2 id=\"自定义classloader\"><a class=\"anchor\" href=\"#自定义classloader\">#</a> 自定义 ClassLoader</h2>\n<p>核心方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据名字加载一个类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将字节流定义为类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 查找一个类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">findLoaderClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 在已加载的类中，查找一个类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>链接指定的<span class=\"token class-name\">Java</span>类<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>比如我们需要动态加载一些东西，或者从 C 盘某个特定的文件夹加载一个 class 文件，又或者从网络上下载 class 主内容然后再进行加载等。分三步搞定：</p>\n<ul>\n<li>编写一个类继承 <code>ClassLoader</code>  抽象类。</li>\n<li>重写 <code>findClass()</code>  方法。</li>\n<li>在 <code>findClass()</code>  方法中调用 <code>defineClass()</code>  方法即可实现自定义 <code>ClassLoader</code> 。</li>\n</ul>\n<p>我们先写一个类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> test <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello,world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 编译得到 class 文件 -> 写程序将 class 文件转换为字节流</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// InputStream fis = new FileInputStream(\"test.class\");</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// byte[] bytes = IOUtils.readFully(fis, -1, false);</span></pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/10/67d06fbed9be1513.jpg\" alt=\"\" /></p>\n<p>自定义加载器类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token constant\">JVM</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOUtils</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InputStream</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">InvocationTargetException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Method</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassLoaderTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ClassLoader</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">InputStream</span> fis<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> testClassname <span class=\"token operator\">=</span> <span class=\"token string\">\"JVM.Test\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    \t\t<span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InstantiationException</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">NoSuchMethodException</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    \t\t<span class=\"token class-name\">InvocationTargetException</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        fis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/JVM/Test.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        bytes <span class=\"token operator\">=</span> <span class=\"token class-name\">IOUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">readFully</span><span class=\"token punctuation\">(</span>fis<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 创建加载器</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">ClassLoaderTest</span> classloadertest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassLoaderTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 使用我们自定义的类去加载 testClassname</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Class</span> aClass <span class=\"token operator\">=</span> classloadertest<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>testClassname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 反射创建 test 类对象</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> aClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 反射获取 method 方法</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">Method</span> method <span class=\"token operator\">=</span> o<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 反射去调用执行 method 方法</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> method<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 只处理 JVM.Test 类</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>testClassname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token comment\">// 将一个字节流定义为一个类。</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token comment\">// 其实这个名字可以随便取</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">defineClass</span><span class=\"token punctuation\">(</span>testClassname<span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/10/b6c86511a9b493e8.jpg\" alt=\"\" /></p>\n<h1 id=\"类加载器层次\"><a class=\"anchor\" href=\"#类加载器层次\">#</a> 类加载器层次</h1>\n<p>站在开发人员角度：</p>\n<ul>\n<li><code>Bootstrap ClassLoader</code> ：启动类加载器，无法被 Java 程序直接引用，负责加载存放在 JDK\\jre\\lib (JDK 代表 JDK 的安装目录，下同) 下，或被 - Xbootclasspath 参数指定的路径中的，并且能被虚拟机识别的类库 (如 rt.jar，所有的 java.* 开头的类均被 Bootstrap ClassLoader 加载)。</li>\n<li><code>Extension ClassLoader</code> ：扩展类加载器，负责加载 JDK\\jre\\lib\\ext 目录中，或者由 java.ext.dirs 系统变量指定的路径中的所有类库 (如 javax.* 开头的类)，开发者可以直接使用扩展类加载器。</li>\n<li><code>Application ClassLoader</code> ：负责加载用户类路径 (ClassPath) 所指定的类，开发者可以直接使用该类加载器，如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>\n</ul>\n<p>&lt;img src=&quot;<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zMy5ibXAub3ZoL2ltZ3MvMjAyMi8xMC8xMC83MTViMzllNmUyZjM0NTAwLmpwZw==\">https://s3.bmp.ovh/imgs/2022/10/10/715b39e6e2f34500.jpg</span>&quot; style=&quot;zoom:80%;&quot; /&gt;</p>\n<blockquote>\n<p>还可以加入自定义的类加载器，因为 JVM 自带的 ClassLoader 只能从本地文件系统加载标准的 <code>java.class</code>  文件。</p>\n</blockquote>\n<p>看一个小例子：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>pdai<span class=\"token punctuation\">.</span>jvm<span class=\"token punctuation\">.</span>classloader</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClassLoaderTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContextClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// sun.misc.Launcher$AppClassLoader@64fef26a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// sun.misc.Launcher$ExtClassLoader@1ddd40f3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// null</span></pre></td></tr></table></figure><p>并没有获取到 <code>ExtClassLoader</code>  的父 Loader，原因是 <code>BootstrapLoader</code>  (引导类加载器) 是用 C 语言实现的，找不到一个确定的返回父 Loader 的方式，于是就返回 <code>null</code> 。</p>\n<h1 id=\"类的加载\"><a class=\"anchor\" href=\"#类的加载\">#</a> 类的加载</h1>\n<p>类加载有三种方式：</p>\n<ul>\n<li>启动应用时由 JVM 初始化加载</li>\n<li>通过 <code>Class.forName()</code>  方法动态加载</li>\n<li>通过 <code>Class.loader.loadClass()</code>  方法动态加载。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">com</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用loader.loadClass()：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">ClassLoader</span> loader <span class=\"token operator\">=</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        loader<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 默认执行初始化块</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用Class.forName()：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.Test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 指定 ClassLoader，初始化不执行静态块</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"使用Class.forName(name,false,loader)：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Class</span><span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.Test\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> loader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"静态初始化块执行了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 输出结果：</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 使用 loader.loadClass ()：</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 使用 Class.forName ()：</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 静态初始化块执行了！</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 使用 Class.forName (name,false,loader)：</span></pre></td></tr></table></figure><blockquote>\n<p><code>Class.forName()</code>  和 <code>ClassLoader.loadClass()</code>  区别？</p>\n</blockquote>\n<ul>\n<li>\n<p>Class.forName (): 将类的.class 文件加载到 jvm 中之外，还会对类进行解释，执行类中的 static 块；</p>\n</li>\n<li>\n<p><code>ClassLoader.loadClass()</code> ：只干一件事情，就是将.class 文件加载到 jvm 中，不会执行 static 中的内容，只有在 <code>newInstance</code>  才会去执行 static 块。</p>\n</li>\n<li>\n<p><code>Class.forName(name,initialize,loader)</code> ：可控制是否加载 <code>static</code>  块。</p>\n</li>\n</ul>\n<h1 id=\"jvm类加载机制\"><a class=\"anchor\" href=\"#jvm类加载机制\">#</a> JVM 类加载机制</h1>\n<p><strong>全盘负责</strong>，当一个类加载器负责加载某个 Class 时，该 Class 所依赖的和引用的其他 Class 也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</p>\n<p><strong>父类委托</strong>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</p>\n<p><strong>缓存机制</strong>，缓存机制将会保证所有加载过的 Class 都会被缓存，当程序中需要使用某个 Class 时，类加载器先从缓存区寻找该 Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成 Class 对象，存入缓存区。这就是为什么修改了 Class 后，必须重启 JVM，程序的修改才会生效</p>\n<p><strong>双亲委派机制</strong> 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p>\n<h2 id=\"双亲委派\"><a class=\"anchor\" href=\"#双亲委派\">#</a> 双亲委派</h2>\n<ol>\n<li>当 <code>AppClassLoader</code>  加载一个 class 时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器 <code>ExtClassLoader</code>  去完成。</li>\n<li>当 <code>ExtClassLoader</code>  加载一个 class 时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给 <code>BootStrapClassLoader</code>  去完成。</li>\n<li>如果 <code>BootStrapClassLoader</code>  加载失败 (例如在 <code>$JAVA_HOME/jre/lib</code>  里未查找到该 class)，会使用 <code>ExtClassLoader</code>  来尝试加载；</li>\n<li>若 <code>ExtClassLoader</code>  也加载失败，则会使用 <code>AppClassLoader</code>  来加载，如果 <code>AppClassLoader</code>  也加载失败，则会报出异常 <code>ClassNotFoundException</code> 。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> resolve<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t\t\t\t\t\t\t\t  <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 首先判断该类型是否已经被加载</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Class</span> c <span class=\"token operator\">=</span> <span class=\"token function\">findLoadedClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 如果没有被加载，就委托给父类加载或者委派给启动类加载器加载</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>parent <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token comment\">// 如果存在父类加载器，就委派给父类加载器加载</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                c <span class=\"token operator\">=</span> parent<span class=\"token punctuation\">.</span><span class=\"token function\">loadClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 如果不存在父类加载器，就检查是否是由启动类加载器加载的类，通过调用本地方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">//native Class findBootstrapClass(String name)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                c <span class=\"token operator\">=</span> <span class=\"token function\">findBootstrapClass0</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassNotFoundException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 如果父类加载器和启动类加载器都不能完成加载任务，才调用自身的加载功能</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            c <span class=\"token operator\">=</span> <span class=\"token function\">findClass</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token function\">resolveClass</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbmljZTBlMy9wLzEzNzE5OTAzLmh0bWwjMHgwMi0tY2xhc3Nsb2FkZXIlRTclQjElQkIlRTUlOEElQTAlRTglQkQlQkQlRTUlOTklQTg=\">Java 安全之 ClassLoader 类加载器</span>.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tlb3BtZyM5OTk1ZmZjYw==\">https://www.yuque.com/qingkongxiaguang/javase/keopmg#9995ffcc</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tY2xhc3Nsb2FkLmh0bQ==\">https://pdai.tech/md/java/jvm/java-jvm-classload.htm</span></p>\n<p>一个小例子，可以看看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZXNpb24uY29tL2FydGljbGUvMjE3ODMwODc5OC8=\">https://www.freesion.com/article/2178308798/</span></p>\n<p>三大类加载器的源码解读：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmJzbWF4LmNvbS9BL24yZDliTzB3ekQv\">https://www.bbsmax.com/A/n2d9bO0wzD/</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/09/Java/JVM/JVM(3)-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/",
            "url": "https://cecilia.cool/2022/10/09/Java/JVM/JVM(3)-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/",
            "title": "JVM(3)--类加载机制",
            "date_published": "2022-10-09T04:39:46.000Z",
            "content_html": "<h1 id=\"类的生命周期\"><a class=\"anchor\" href=\"#类的生命周期\">#</a> 类的生命周期</h1>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/09/167570c48203f9c9.jpg\" alt=\"\" /></p>\n<p><code>加载</code> 、 <code>验证</code> 、 <code>准备</code> 和 <code>初始化</code> 这四个阶段发生的顺序是确定的，而 <code>解析</code> 阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持 Java 语言的运行时绑定 (也成为动态绑定或晚期绑定)。</p>\n<blockquote>\n<p>这些阶段知识按顺序开始，并不是按顺序结束，这些阶段往往互相交叉混合进行，再一个阶段执行过程中调用或激活另一个阶段。</p>\n</blockquote>\n<h1 id=\"类的加载\"><a class=\"anchor\" href=\"#类的加载\">#</a> 类的加载</h1>\n<p>首先介绍几个概念：</p>\n<ul>\n<li>方法区：JVM 实例内部，类型信息被存储在方法区的内存逻辑区中。类型信息是由类加载时从类文件中提取出来的。方法区又叫做静态区，被所有线程共享，方法区包含所有 <code>class</code>  和 <code>static</code> 。静态<strong>常量</strong>存放在方法区的常量区中，这之后会讲解。</li>\n</ul>\n<p>加载阶段虚拟机需要完成：</p>\n<ul>\n<li>通过类的全限定名（从方法区）来获取其定义的二进制字节流。</li>\n<li>字节流代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在 Java 堆中生成代表这个类的 <code>java.lang.Class</code>  对象，作为对方法区中这些数据的访问入口。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/09/842b5cd01faa5b42.jpg\" alt=\"\" /></p>\n<p>类加载器不需要等待某个类首次主动使用时在加载，JVM 允许预料某个类需要使用时主动加载。在<strong>预加载</strong>中遇到.class 文件缺失或存在错误，类加载器必须在程序<strong>首次主动使用</strong>该类时才会报错误 --LinkageError。</p>\n<h1 id=\"连接\"><a class=\"anchor\" href=\"#连接\">#</a> 连接</h1>\n<h2 id=\"验证\"><a class=\"anchor\" href=\"#验证\">#</a> 验证</h2>\n<p>确保被加载的类的正确性，也就是 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全。</p>\n<blockquote>\n<p>如果使用纯 Java 代码编写的类，编译出来的 class 文件是相对安全的。但是.class 文件并不只是由 Java 源码编译而来，哪怕用键盘输入 01 并将文件后缀改为.class 都可以，所以验证非常有必要。</p>\n</blockquote>\n<p>验证阶段的检验动作：</p>\n<ul>\n<li><strong>文件格式验证</strong>：验证字节流是否符合 Class 文件格式的规范。（魔数，主次版本，常量的 tag 标志等）</li>\n<li><strong>元数据验证</strong>：对字节码描述的信息进行语义分析。（该类是否继承不可继承的 final 类，是否覆盖父类的 final 字段等）</li>\n<li><strong>字节码验证</strong>：通过数据流和控制流分析，确定程序语义是合法的，符合逻辑的。</li>\n<li><strong>符号引用验证</strong>：确保解析动作能正确执行。</li>\n</ul>\n<blockquote>\n<p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用 <code>-Xverifynone</code>  参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。</p>\n</blockquote>\n<h2 id=\"准备\"><a class=\"anchor\" href=\"#准备\">#</a> 准备</h2>\n<p>正式为类变量分配内存并设置类变量<strong>初始值</strong>的阶段，<strong>这些内存都将在方法区中分配</strong>。</p>\n<ul>\n<li>内存分配的仅包括静态变量，<strong>不包括</strong>实例变量。<strong>实例变量是在对象实例化时随着对象一块分配在 Java 堆中</strong>。</li>\n<li>初始值： <code>0,0L,null,false</code>  等。</li>\n</ul>\n<p>比如某个类由以下语句：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> value <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在准备阶段只会赋值 0，将 <code>value</code>  赋值为 3 的 <code>put static</code>  指令存放于 <code>&lt;clinit()&gt;</code>  方法中。所以初始化阶段才会赋值为 3。</p>\n<p><code>&lt;clinit&gt;</code>  方法是类加载的<strong>初始化</strong>过程中，编译器按语句在源文件中出现的顺序，依次自动收集类中的静态变量的赋值动作和静态代码块中的语句合并产生 <code>&lt;clinit&gt;</code>  方法。并且  <code>&lt;clinit&gt;()</code>  不需要显式调用父类（接口除外，接口不需要调用父接口的初始化方法，只有使用到父接口中的静态变量时才需要调用）的初始化方法  <code>&lt;clinit&gt;()</code> ，虚拟机会保证在子类的  <code>&lt;clinit&gt;()</code>  方法执行之前，父类的  <code>&lt;clinit&gt;()</code>  方法已经执行完毕。</p>\n<p>随便写个类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译后通过 <code>jclasslib</code>  插件查看：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/09/f122fdb91f027a3f.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>当 int 取值 -128~127 时，JVM 采用  <code>bipush</code>  指令将常量压入栈中。</p>\n</blockquote>\n<p>还需要注意几点：</p>\n<ul>\n<li>对于同时被 <code>static</code>  和 <code>final</code>  修饰的常量，必须在声明的时候就为其显式地赋值，否则编译时不通过；只被 final 修饰的常量则既可以在声明时显式地为其赋值，也可以在类初始化时显式地为其赋值。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此时编译会报错：<strong>java: 变量 tmp 未在默认构造器中初始化</strong>。</p>\n<p>必须在构造器中将 <code>final</code>  变量初始化：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>k <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>同时被 <code>static</code>  和 <code>final</code>  修饰的常量，类会为它生成 <code>ConstantValue</code>  属性，在准备阶段 JVM 就会根据 <code>ConstantValue</code>  的设置将变量赋值。</li>\n</ul>\n<h2 id=\"解析\"><a class=\"anchor\" href=\"#解析\">#</a> 解析</h2>\n<p>JVM 将常量池内的符号引用替换为直接引用的过程，解析动作主要针对 <code>类</code> 或 <code>接口</code> 、 <code>字段</code> 、 <code>类方法</code> 、 <code>接口方法</code> 、 <code>方法类型</code> 、 <code>方法句柄</code> 和 <code>调用点</code> 限定符 7 类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。</p>\n<p><code>直接引用</code> 就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄。</p>\n<h2 id=\"初始化\"><a class=\"anchor\" href=\"#初始化\">#</a> 初始化</h2>\n<p>初始化，为类的静态变量赋予正确的初始值，JVM 负责对类进行初始化，主要对类变量进行初始化。</p>\n<blockquote>\n<p>也就是 <code>&lt;clinit&gt;</code>  方法。</p>\n</blockquote>\n<p><strong>类初始化时机</strong>：只有当对类的主动使用的时候才会导致类的初始化，类的主动使用包括以下六种:</p>\n<ul>\n<li>\n<p>创建类的实例，也就是 new 的方式</p>\n</li>\n<li>\n<p>访问某个类或接口的静态变量，或者对该静态变量赋值</p>\n</li>\n<li>\n<p>调用类的静态方法（也经常和第二点合并在一起）</p>\n</li>\n<li>\n<p>反射 (如 Class.forName (&quot;com.pdai.jvm.Test&quot;))</p>\n</li>\n<li>\n<p>初始化某个类的子类，则其父类也会被初始化</p>\n</li>\n<li>\n<p>Java 虚拟机启动时被标明为启动类的类 (Java Test)，直接使用 java.exe 命令来运行某个主类</p>\n</li>\n</ul>\n<p>只有这六种是主动使用，其他的都是被动使用，被动使用不会初始化。被动引用的例子可以看这篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nbGlhbmd6aS9hcnRpY2xlL2RldGFpbHMvNTEzMTkwMzM=\">博客</span>。</p>\n<h3 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意</h3>\n<p>关于访问类的静态变量，一定要注意这里写的是<strong>变量，变量，变量</strong>（重要的是强调三遍）。 <code>static final int a = 10;</code>  是<strong>常量，常量，常量</strong>。访问 <code>a</code>  不会让类被加载。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>写一下 <code>Test</code>  类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我被初始化了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"都看到这里了，不给个三连+关注吗？\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>先编译一下，看一下 <code>Main.class</code>  的内容：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"都看到这里了，不给个三连+关注吗？\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>字节码文件中，将 <code>Test.str</code>  直接替换成了字符串，那么执行时和 <code>Test</code>  也就没有任何关系了，自然也不会实例化 <code>Test</code> 。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/09/28f0a77b42aeafb5.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>当 int 取值 -2147483648~2147483647 时，JVM 采用  <code>ldc</code>  指令将常量压入栈中。</p>\n</blockquote>\n<h2 id=\"卸载\"><a class=\"anchor\" href=\"#卸载\">#</a> 卸载</h2>\n<p>JVM 将结束生命周期的几种情况：</p>\n<ul>\n<li>执行了 System.exit () 方法</li>\n<li>程序正常执行结束</li>\n<li>程序在执行过程中遇到了异常或错误而异常终止</li>\n<li>由于操作系统出现错误而导致 Java 虚拟机进程终止</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nbGlhbmd6aS9hcnRpY2xlL2RldGFpbHMvNTEzMTkwMzM=\">https://blog.csdn.net/zhangliangzi/article/details/51319033</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tY2xhc3Nsb2FkLmh0bWw=\">https://pdai.tech/md/java/jvm/java-jvm-classload.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tlb3BtZyNkZGFmYzg3Ng==\">https://www.yuque.com/qingkongxiaguang/javase/keopmg#ddafc876</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZ2d1b25pbmcvcC82MTA5Mzc3Lmh0bWw=\">https://www.cnblogs.com/wangguoning/p/6109377.html</span></p>\n<p>《深入理解 Java 虚拟机》第三版</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vY3p3YmlnL3AvMTExNTU1NTUuaHRtbA==\">https://www.cnblogs.com/czwbig/p/11155555.html</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/08/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%AE%BF%E9%97%AE%E8%80%85/",
            "url": "https://cecilia.cool/2022/10/08/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%AE%BF%E9%97%AE%E8%80%85/",
            "title": "行为型--访问者",
            "date_published": "2022-10-08T05:02:44.000Z",
            "content_html": "<h1 id=\"访问者visitor\"><a class=\"anchor\" href=\"#访问者visitor\">#</a> 访问者 (Visitor)</h1>\n<blockquote>\n<p>当想要为对象的组合增加新的能力且封装并不重要时，就可以使用访问者模式。</p>\n</blockquote>\n<p>现在需要知道的就是，被访问的类需要将自身引用传入访问者。讲起来比较空泛，所以先看代码。</p>\n<h2 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h2>\n<blockquote>\n<p>代码来自菜鸟教程。</p>\n</blockquote>\n<ul>\n<li>定义表示元素的接口：</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 接口定义的行为：元素提供一个方法供访问者进入</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 假设存在 ComputerPartVisitor 接口定义了访问者的 visit 行为</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>创建扩展上述类的实体类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个键盘实体类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Keybord</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 实体类实现的行为是：将自己的引用 this 暴露给外部访问者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 创建一个监视器实体类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Monitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    publicvoid <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 创建一个鼠标实体类</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mouse</span>  <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>再写一个总体的类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Computer</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPart</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">ComputerPart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> parts<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        parts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPart</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mouse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Keyboard</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Monitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComputerPartVisitor</span> computerPartVisitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                parts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>computerPartVisitor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            computerPartVisitor<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>创建一个实体访问者类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ComputerPartVisitor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Computer</span> computer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Displaying Computer.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mouse</span> mouse<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Displaying Mouse.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Keyboard</span> keyboard<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Displaying Keyboard.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Monitor</span> monitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Displaying Monitor.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>最后运行一下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VisitorPatternDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token class-name\">ComputerPart</span> computer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Computer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      computer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ComputerPartDisplayVisitor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>代码逻辑简单：</p>\n<ul>\n<li>访问者有处理被访问者的行为。</li>\n<li>被访问者有接收访问者并将自身引用暴露给访问者的行为。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/08/c634509b4c630678.jpg\" alt=\"\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kZXNpZ24tcGF0dGVybi92aXNpdG9yLXBhdHRlcm4uaHRtbD9fPTE0NzgwNjAwMzk=\">https://www.runoob.com/design-pattern/visitor-pattern.html?_=1478060039</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2LXNwZWMvcGF0dGVybi8yMF92aXNpdG9yLmh0bWw=\">https://pdai.tech/md/dev-spec/pattern/20_visitor.html</span></p>\n</blockquote>\n",
            "tags": [
                "设计模式"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/08/Java/JVM/JVM(2)-%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA/",
            "url": "https://cecilia.cool/2022/10/08/Java/JVM/JVM(2)-%E5%AD%97%E8%8A%82%E7%A0%81%E5%A2%9E%E5%BC%BA/",
            "title": "JVM(2)--字节码增强",
            "date_published": "2022-10-08T04:56:20.000Z",
            "content_html": "<h1 id=\"jvm基础-字节码增强\"><a class=\"anchor\" href=\"#jvm基础-字节码增强\">#</a> JVM 基础 - 字节码增强</h1>\n<blockquote>\n<p>字节码增强技术就是一类对现有字节码进行修改或者动态生成全新字节码文件的技术。</p>\n</blockquote>\n<h2 id=\"asm\"><a class=\"anchor\" href=\"#asm\">#</a> ASM</h2>\n<p>ASM 可以直接生成 <code>.class</code>  字节码文件，也可以在类被加载入 JVM 之前动态修改类行为。ASM 框架是 JDK 内部自带的，最基本的就是通过 <code>ClassWriter</code>  对象编辑类的字节码文件。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ClassWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMPUTE_MAXS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在学习 ASM 前，请先学习一下<a href=\"https://cecilia.cool/2022/10/08/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E8%AE%BF%E9%97%AE%E8%80%85/\">访问者模式</a>。</p>\n</blockquote>\n<p>字节码文件的结构是由 JVM 固定的，适合利用访问者模式对字节码文件进行修改。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/08/b57b44956364c1b6.jpg\" alt=\"\" /></p>\n<h3 id=\"核心api\"><a class=\"anchor\" href=\"#核心api\">#</a> 核心 API</h3>\n<ul>\n<li>\n<p><code>ClassReader</code> ：用于读取已经编译好的.class 文件。</p>\n</li>\n<li>\n<p><code>ClassWriter</code> ：用于重新构建编译后的类，如修改类名、属性以及方法，也可以生成新的类的字节码文件。</p>\n</li>\n<li>\n<p>各种 <code>Visitor</code>  类：如上所述，CoreAPI 根据字节码从上到下依次处理，对于字节码文件中不同的区域有不同的 Visitor，比如用于访问方法的 <code>MethodVisitor</code> 、用于访问类变量的 <code>FieldVisitor</code> 、用于访问注解的 <code>AnnotationVisitor</code>  等。</p>\n</li>\n</ul>\n<blockquote>\n<p>API 文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90b29sLm9zY2hpbmEubmV0L2FwaWRvY3MvYXBpZG9jP2FwaT1hc20=\">https://tool.oschina.net/apidocs/apidoc?api=asm</span></p>\n</blockquote>\n<h2 id=\"方法名和描述符\"><a class=\"anchor\" href=\"#方法名和描述符\">#</a> 方法名和描述符</h2>\n<p>这里补充一下类文件中方法名和描述符的表示。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用 <code>jclasslib</code>  插件查看一下：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/08/d03410a93bae253c.jpg\" alt=\"\" /></p>\n<p>可以看到，方法名在字节码文件中被 <code>&lt;&gt;</code>  包围，描述符其实就是返回值和参数列表，也都被 <code>&lt;&gt;</code>  包围。 <code>&lt;()I&gt;</code>  表示：</p>\n<ul>\n<li>括号里的是参数，后面的是返回值。</li>\n<li><code>I</code>  表示 <code>int</code> ，也就是说，该方法返回 <code>int</code> ，如果是 <code>void</code> ，这里就会是 <code>V</code> 。</li>\n</ul>\n<p>这样我们就固定了方法的方法名和参数列表以及返回值。从图中可以看到， <code>inc</code>  方法上面还有个 <code>&lt;init&gt;</code>  方法，那就是构造方法。</p>\n<p>如果方法参数中加入了对象：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 描述符：&lt;(Ljava/lang/String;Ljava/lang/Object;) I></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 描述符：&lt;([[C) I></span></pre></td></tr></table></figure><p><code>L</code>  开头表示是一个对象，参数之间要用 <code>;</code>  隔开。详细的读者可以自己写一些方法来看一下具体的效果。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/08/5d052fc53aef3cb4.jpg\" alt=\"\" /></p>\n<h2 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ClassWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMPUTE_MAXS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>构造函数里的参数与操作数栈和局部临时变量表有关，不想琢磨，用 <code>COMPUTE_MAXS</code>  即可。</p>\n<p>首先指定一下类的基本信息：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ClassWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMPUTE_MAXS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 因为这里用到的常量比较多，所以说直接一次性静态导入：</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// import static jdk.internal.org.objectweb.asm.Opcodes.*;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">V1_8</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ACC_PUBLIC</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"com/JVM/Main\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                     <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 第三个参数，需要根据自己的 Main 路径填写</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>设定的基本信息依次是：版本 --Java8，修饰符 -- <code>ACC_PUBLIC</code> ，类名 -- 要携带包名，标签 -- <code>null</code> ，父类 -- <code>Object</code> 。</p>\n<p>将其保存，然后写入到自己生成的字节码文件当中：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ClassWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ClassWriter</span><span class=\"token punctuation\">.</span><span class=\"token constant\">COMPUTE_MAXS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token constant\">V1_8</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ACC_PUBLIC</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"com/test/Main\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                     <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 调用 visitEnd 表示结束编辑</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        writer<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileOutputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./Main.class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            stream<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 直接通过 ClassWriter 将字节码文件转换为 byte 数组，并保存到根目录下</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>结果为：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/08/f0c63a80acdf6c29.jpg\" alt=\"\" /></p>\n<p>从 class 文件可知， <code>Main.class</code>  没有构造方法，所以可以添加一个</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 visitMethod 方法可以添加一个新的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 放在 writer.visitEnd (); 前面即可</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>writer<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACC_PUBLIC</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;init>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"()V\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>再次编译，发现存在构造方法，之前讲了字节码文件中的方法名和描述符，读者可以自行修改描述符感受一下效果。</p>\n<p>但是 <code>Main</code>  继承了 <code>Object</code>  类，所以在子类构造方法中应该调用父类的构造方法。也就是说，沃恩需要在方法中添加父类构造方法调用指令：</p>\n<pre><code class=\"language-Plain\">public com.test.Main();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1             // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V\n         4: return\n      LineNumberTable:\n        line 11: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/test/Main;\n</code></pre>\n<p>所以我们开始访问代码（ <code>visitCode()</code> )，也就是对方法进行详细 i 编辑：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 MethodVisitor 接收返回值，进行进一步操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">MethodVisitor</span> visitor <span class=\"token operator\">=</span> writer<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACC_PUBLIC</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;init>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"()V\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 开始编辑代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Label 用于存储行号，当前代码写到哪行了，l1 得到的就是多少行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Label</span> l1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 添加源代码行数对应表 (字节码中的 LineNumberTable)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitListNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span>l1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 不同类型的指令需要不同方法调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitVarInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ALOAD</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVOKESPECIAL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/Object\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;init>\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"()V\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RETURN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Label</span> l2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>l2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 添加本地变量表 (字节码中的 LocalVariableTable)，这里是 this 关键字</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visiLocalVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Lcom/JVM/Main;\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>l1<span class=\"token punctuation\">,</span> l2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 最后设定最大栈深度和本地变量数</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 结束编辑</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>visitor<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>至此构造方法编辑完成，可以看到是非常麻烦的一件事，其实哪怕只是完成一个</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>都是非常复杂的一件事：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 开始安排 main 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">MethodVisitor</span> v2 <span class=\"token operator\">=</span> writer<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethod</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ACC_PUBLIC</span> <span class=\"token operator\">|</span> <span class=\"token constant\">ACC_STATIC</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"main\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                      <span class=\"token string\">\"([Ljava/lang/String;)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 记录起始行信息</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Label</span> l3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>l3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLineNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> l3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 首先是 int a = 10 的操作，执行指令依次为：</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//bipush 10     将 10 推向操作数栈顶</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//istore_1      将操作数栈顶元素保存到 1 号本地变量 a 中</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitIntInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">BIPUSH</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitVarInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ISTORE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Label</span> l4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>l4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 记录一下行信息</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLineNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> l4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 这里是获取 System 类中的 out 静态变量（PrintStream 接口），用于打印</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitFieldInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">GETSTATIC</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/lang/System\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ljava/io/PrintStream;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 把 a 的值取出来</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitVarInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ILOAD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 调用接口中的抽象方法 println</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitMethodInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">INVOKEVIRTUAL</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"java/io/PrintStream\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"println\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"(I)V\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 再次记录行信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token class-name\">Label</span> l6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>l6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLineNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> l6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitInsn</span><span class=\"token punctuation\">(</span><span class=\"token constant\">RETURN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token class-name\">Label</span> l7 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Label</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLabel</span><span class=\"token punctuation\">(</span>l7<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 最后是本地变量表中的各个变量</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLocalVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"args\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[Ljava/lang/String;\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> l3<span class=\"token punctuation\">,</span> l7<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitLocalVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> l4<span class=\"token punctuation\">,</span> l7<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitMaxs</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 终于 OK 了</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>v2<span class=\"token punctuation\">.</span><span class=\"token function\">visitEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>写之前就需要先写好 Java 程序进行反编译，再照着字节码一行一行使用 <code>MathodVisitor</code>  编辑。</p>\n</blockquote>\n<h2 id=\"例子实现aop\"><a class=\"anchor\" href=\"#例子实现aop\">#</a> 例子：实现 AOP</h2>\n<blockquote>\n<p>AOP-- 面向切面编程，Spring 核心之一，如果你不了解 AOP，就暂时理解为，在一个执行流程（模块）中，加入一个切面，通过这个切面的方法可以被切面加入一些操作，如记录日志啥的。</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/08/972d8fa05bf61137.jpg\" alt=\"\" /></p>\n<p>我们希望通过 ASM 来实现 AOP：在方法调用前后增加逻辑（也叫做前置通知和后置通知）。</p>\n<p>具体代码实现感兴趣的读者可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tY2xhc3MtZW5oYW5jZXIuaHRtbCMlRTUlQUQlOTclRTglOEElODIlRTclQTAlODElRTUlQTIlOUUlRTUlQkMlQkElRTYlOEElODAlRTYlOUMlQUY=\">直接利用 ASM 实现 AOP</span>。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tlb3BtZw==\">https://www.yuque.com/qingkongxiaguang/javase/keopmg</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tY2xhc3MtZW5oYW5jZXIuaHRtbA==\">https://pdai.tech/md/java/jvm/java-jvm-class-enhancer.html</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/05/Java/JVM/JVM(1)-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/",
            "url": "https://cecilia.cool/2022/10/05/Java/JVM/JVM(1)-%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/",
            "title": "JVM(1)--类文件结构",
            "date_published": "2022-10-05T15:29:47.000Z",
            "content_html": "<h1 id=\"类文件结构\"><a class=\"anchor\" href=\"#类文件结构\">#</a> 类文件结构</h1>\n<p>计算机是不能直接运行 java 代码的，必须要先运行 java 虚拟机，再由 java 虚拟机运行编译后的 java 代码。这个编译后的 java 代码，就是本文要介绍的 java 字节码。</p>\n<ul>\n<li>Java 代码间接翻译成字节码，储存字节码的文件再交由运行于不同平台上的 JVM 虚拟机去读取执行，从而实现一次编写，到处运行的目的。</li>\n<li>JVM 也不再只支持 Java，由此衍生出了许多基于 JVM 的编程语言，如 Groovy, Scala, Koltin 等等。</li>\n</ul>\n<blockquote>\n<p>许多开发语言支持将源代码编译为 <code>.class</code>  字节码文件格式，以便交给 JVM 运行</p>\n</blockquote>\n<h2 id=\"类文件信息\"><a class=\"anchor\" href=\"#类文件信息\">#</a> 类文件信息</h2>\n<p>先写一个例子：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">inc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> m <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译生成 <code>Test.class</code>  文件。</p>\n<blockquote>\n<p>下载 WinHex 软件，以十六进制格式查看字节码文件（将编译好的 <code>class</code>  文件拖进去），每一位都是 4 个 bit</p>\n</blockquote>\n<p>呈现出来的是酱紫的：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/06/227b1ae28c54688f.jpg\" alt=\"\" /></p>\n<p>但是 winHex 我这打开总是有些毛病，所以选择另一个工具（IEDA 插件）查看十六进制字节码：</p>\n<ul>\n<li>安装插件：Binary/hexadecimal editor。</li>\n<li>右键 class 文件，选择 Open As Binary。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/06/995affe6c346a8aa.jpg\" alt=\"\" /></p>\n<p>有时直接查看 16 进制的结果不方便，为了能够方便查看字节码信息，需要安装另一个插件：</p>\n<ul>\n<li>安装插件：jclasslib Bytecode Viewer。</li>\n<li>选中要查看的 java 文件（不是 class 文件），点击 view（视图），再点击 <code>show Bytecode with jclasslib</code> 。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/06/8f19ae55706ab1c2.jpg\" alt=\"\" /></p>\n<ul>\n<li>这样查看字节码文件中的常量池什么的就非常方便。</li>\n</ul>\n<p>对于类文件信息，需要知道的部分如下图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/05/868070b026d6842b.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ClassFile</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    u4             magic<span class=\"token punctuation\">;</span> <span class=\"token comment\">//Class 文件的标志</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    u2             minor_version<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 的小版本号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    u2             major_version<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 的大版本号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    u2             constant_pool_count<span class=\"token punctuation\">;</span><span class=\"token comment\">// 常量池的数量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    cp_info        constant_pool<span class=\"token punctuation\">[</span>constant_pool_count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 常量池</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    u2             access_flags<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 的访问标记</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    u2             this_class<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    u2             super_class<span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    u2             interfaces_count<span class=\"token punctuation\">;</span><span class=\"token comment\">// 接口</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    u2             interfaces<span class=\"token punctuation\">[</span>interfaces_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个类可以实现多个接口</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    u2             fields_count<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 文件的字段属性</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    field_info     fields<span class=\"token punctuation\">[</span>fields_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个类会可以有个字段</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    u2             methods_count<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 文件的方法数量</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    method_info    methods<span class=\"token punctuation\">[</span>methods_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个类可以有个多个方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    u2             attributes_count<span class=\"token punctuation\">;</span><span class=\"token comment\">// 此类的属性表中的属性数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    attribute_info attributes<span class=\"token punctuation\">[</span>attributes_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 属性表集合</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"魔数与版本\"><a class=\"anchor\" href=\"#魔数与版本\">#</a> 魔数与版本</h3>\n<p>字节码文件前 4 个字节（32bit）组成了魔数，魔数机制检验该文件是否是 JVM 可以直接运行的字节码文件。字节码文件的魔数为：<strong>CAFFBABE</strong>。</p>\n<p>魔数后面的 4 个字节存储的是字节码文件的版本号，前两个是次要版本号（现在基本不用了），后两个是主要版本号，将 16 进制换算成 10 进制之后，得到的可以参照：52 代表 JDK8 编译的字节码文件（51 是 JDK7，53 是 JDK9）。</p>\n<h3 id=\"常量池\"><a class=\"anchor\" href=\"#常量池\">#</a> 常量池</h3>\n<p><code>Constant pool</code>  意为常量池，可以理解为 <code>Class</code>  文件中的资源仓库，是程序运行一些需要用到的常量数据，主要存放<strong>字面量</strong>和<strong>符号引用</strong>。字面量类似于 Java 中的常量概念，如文本字符串， <code>final</code>  常量等。</p>\n<p>符号引用属于编译原理的概念：</p>\n<ul>\n<li>类和接口的全限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符</li>\n</ul>\n<p>常量的数量不是确定的，所以在<strong>最开始的位置</strong>会存放常量池中<strong>常量的数量</strong>（是从 1 开始计算的，不是 0，比如 18，翻译为 10 进制就是 24，所以实际上有 23 个常量）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u2             constant_pool_count<span class=\"token punctuation\">;</span><span class=\"token comment\">// 常量池的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cp_info        constant_pool<span class=\"token punctuation\">[</span>constant_pool_count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 常量池</span></pre></td></tr></table></figure><p>每一项常量池里面的数据都是一个表，都是以_info 结尾的（通过插件查看即可），有 14 种表。</p>\n<h3 id=\"访问标志\"><a class=\"anchor\" href=\"#访问标志\">#</a> 访问标志</h3>\n<p>两个字节，代表访问标志，用于识别一些类或者接口层次的访问信息，包括：Class 是类还是接口，是否为 public 或者 abstract 类型，如果是类的话是否声明为 final 等等。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/07/d412705d408b4988.jpg\" alt=\"\" /></p>\n<p>反编译一下 <code>Test.class</code>  文件查看访问标志：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># -p -private 显示所有类和成员</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># -v -verbose 输出附加信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>javap <span class=\"token parameter variable\">-verbose</span> <span class=\"token parameter variable\">-p</span> Test.class</pre></td></tr></table></figure><p>对于结果为：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/07/175494f35c4a5e2e.jpg\" alt=\"\" /></p>\n<h3 id=\"类索引和接口索引集合\"><a class=\"anchor\" href=\"#类索引和接口索引集合\">#</a> 类索引和接口索引集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u2             this_class<span class=\"token punctuation\">;</span><span class=\"token comment\">// 当前类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>u2             super_class<span class=\"token punctuation\">;</span><span class=\"token comment\">// 父类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>u2             interfaces_count<span class=\"token punctuation\">;</span><span class=\"token comment\">// 接口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>u2             interfaces<span class=\"token punctuation\">[</span>interfaces_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个类可以实现多个接口</span></pre></td></tr></table></figure><p>在访问标志的反编译图中也可以看到<strong>当前类索引</strong>，<strong>父类索引</strong>，<strong>接口索引</strong>。</p>\n<p><strong>类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名，由于 Java 语言的单继承，所以父类索引只有一个，除了  <code>java.lang.Object</code>  之外，所有的 java 类都有父类，因此除了  <code>java.lang.Object</code>  外，所有 Java 类的父类索引都不为 0。</strong></p>\n<p><strong>接口索引集合用来描述这个类实现了那些接口，这些被实现的接口将按 <code>implents</code>  (如果这个类本身是接口的话则是 <code>extends</code> ) 后的接口顺序从左到右排列在接口索引集合中。</strong></p>\n<h3 id=\"字段表集合\"><a class=\"anchor\" href=\"#字段表集合\">#</a> 字段表集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u2             fields_count<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 文件的字段的个数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>field_info     fields<span class=\"token punctuation\">[</span>fields_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个类会可以有个字段</span></pre></td></tr></table></figure><p>用于描述接口或类中声明的变量。不包括方法内部的局部变量。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/07/a82c68d88210068a.jpg\" alt=\"\" /></p>\n<ul>\n<li><strong>access_flags:</strong> 字段的作用域（ <code>public</code>  , <code>private</code> , <code>protected</code>  修饰符），是实例变量还是类变量（ <code>static</code>  修饰符）, 可否被序列化（transient 修饰符）, 可变性（final）, 可见性（volatile 修饰符，是否强制从主内存读写），各个修饰符都是布尔值，要么有某个修饰符，要么没有，适合使用标志位来表示。</li>\n<li><strong>name_index:</strong> 对<strong>常量池</strong>的引用，表示的字段的名称；</li>\n<li><strong>descriptor_index:</strong> 对常量池的引用，表示字段和方法的描述符；//</li>\n<li><strong>attributes_count:</strong> 一个字段还会拥有一些额外的属性，attributes_count 存放属性的个数；</li>\n<li><strong>attributes[attributes_count]:</strong> 存放具体属性具体内容。</li>\n</ul>\n<h3 id=\"方法表集合\"><a class=\"anchor\" href=\"#方法表集合\">#</a> 方法表集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u2             methods_count<span class=\"token punctuation\">;</span><span class=\"token comment\">//Class 文件的方法的数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>method_info    methods<span class=\"token punctuation\">[</span>methods_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 一个类可以有个多个方法</span></pre></td></tr></table></figure><p>Class 文件存储格式中对方法的描述与对字段的描述几乎采用了完全一致的方式。方法表（ <code>method_info</code> ）的结构如同字段表一样，依次包括了访问标志、名称索引、描述符索引、属性表集合几项（所以参照上图 <code>field_info</code> ）。</p>\n<p>得到的结果（这里只看方法那部分）：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Chapter1<span class=\"token punctuation\">.</span>Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    descriptor<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">V</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    flags<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0x0001</span><span class=\"token punctuation\">)</span> <span class=\"token constant\">ACC_PUBLIC</span>\t\t\t\t<span class=\"token comment\">// 这就是 access_flag 取值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Code</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      stack<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> locals<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> args_size<span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token number\">1</span><span class=\"token operator\">:</span> invokespecial #<span class=\"token number\">1</span>                <span class=\"token comment\">// Method java/lang/Object.\"&lt;init>\":()V</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token number\">4</span><span class=\"token operator\">:</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         <span class=\"token number\">0</span><span class=\"token operator\">:</span> aload_0</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         <span class=\"token number\">1</span><span class=\"token operator\">:</span> getfield      #<span class=\"token number\">2</span>                <span class=\"token comment\">// Field m:I</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>         <span class=\"token number\">4</span><span class=\"token operator\">:</span> iconst_1</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>         <span class=\"token number\">5</span><span class=\"token operator\">:</span> iadd</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>         <span class=\"token number\">6</span><span class=\"token operator\">:</span> ireturn</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token class-name\">LineNumberTable</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        line <span class=\"token number\">6</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr></table></figure><p>其中 <code>access_flag</code>  取值为：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/07/f8a119d3fd7bb199.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>因为 <code>volatile</code>  修饰符和 <code>transient</code>  修饰符不可以修饰方法，所以方法表的访问标志中没有这两个对应的标志，但是增加了 <code>synchronized</code> 、 <code>native</code> 、 <code>abstract</code>  等关键字修饰方法，所以也就多了这些关键字对应的标志。</p>\n</blockquote>\n<p>code 内的主要属性为:</p>\n<ul>\n<li><strong>stack</strong>： 最大操作数栈，JVM 运行时会根据这个值来分配栈帧 (Frame) 中的操作栈深度，此处为 1**（递归？）**</li>\n<li><strong>locals</strong>：局部变量所需的存储空间，单位为 Slot, Slot 是虚拟机为局部变量分配内存时所使用的最小单位，为 4 个字节大小。方法参数 (包括实例方法中的隐藏参数 this)，显示异常处理器的参数 (try catch 中的 catch 块所定义的异常)，方法体中定义的局部变量都需要使用<strong>局部变量表</strong>来存放。值得一提的是，locals 的大小并不一定等于所有局部变量所占的 Slot 之和，因为局部变量中的 Slot 是可以重用的。</li>\n<li><strong>args_size</strong>：方法参数的个数，这里是 1，因为每个实例方法都会有一个隐藏参数 this</li>\n<li><strong>attribute_info</strong>: 方法体内容，0,1,4 为字节码 &quot;行号&quot;，该段代码的意思是将第一个引用类型本地变量推送至栈顶，然后执行该类型的实例方法，也就是常量池存放的第一个变量，也就是注释里的 <code>java/lang/Object.&quot;&quot;:()V</code> , 然后执行返回语句，结束方法。</li>\n<li><strong>LineNumberTable</strong>：该属性的作用是描述源码行号与字节码行号 (字节码偏移量) 之间的对应关系。可以使用 -g:none 或 - g:lines 选项来取消或要求生成这项信息，如果选择不生成 LineNumberTable，当程序运行异常时将无法获取到发生异常的源码行号，也无法按照源码的行数来调试程序。</li>\n</ul>\n<p>有时还会出现这个：</p>\n<ul>\n<li><strong>LocalVariableTable</strong>：该属性的作用是描述帧栈中局部变量与源码中定义的变量之间的关系。可以使用 -g:none 或 -g:vars 来取消或生成这项信息，如果没有生成这项信息，那么当别人引用这个方法时，将无法获取到参数名称，取而代之的是 arg0, arg1 这样的占位符。 start 表示该局部变量在哪一行开始可见，length 表示可见行数，Slot 代表所在帧栈位置，Name 是变量名称，然后是类型签名。</li>\n</ul>\n<h3 id=\"属性表集合\"><a class=\"anchor\" href=\"#属性表集合\">#</a> 属性表集合</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>u2             attributes_count<span class=\"token punctuation\">;</span><span class=\"token comment\">// 此类的属性表中的属性数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>attribute_info attributes<span class=\"token punctuation\">[</span>attributes_count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 属性表集合</span></pre></td></tr></table></figure><p>用于描述某些场景专有的信息。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpnMk9UQTBOamswT0E9PSZhbXA7bWlkPTIyNDc0ODUyNTAmYW1wO2lkeD0yJmFtcDtzbj0zMzc5M2JjY2UzZjJmZjMxYjgzY2YyZjljMzJkZjE1MyZhbXA7Y2hrc209Y2VhMjQ4ODlmOWQ1YzE5ZmEzZTJiN2Q0ZjU5NzYyYjU5ZTZjZDllNWU2NTY0ZmU3M2M2OTkzYmQwNmUwOGJkZGQ0MGNjMGYzY2JhMCZhbXA7c2NlbmU9MCZhbXA7eHRyYWNrPTEmYW1wO2tleT00OWNkMWU1OTk5MGMzZDFmMjA3ODY1ZDMyNzU5ZjFmZjJhZTdmZGY2NzZmM2IwYTAyYmE0OTkwNmE1YWYzY2NkYmQ3M2U0M2JiZTMxNTE1ODY2Zjk3NDgzODhjNzhjYjllNDQwNmQ4ODBlYWYyZDUxYWZjZjMyMTY4ZjNhZDI3MTc2OWNjMWM5M2NiZmIwMTM1MDQ2MjEwYjQxZDdkMDM2JmFtcDthc2NlbmU9MSZhbXA7dWluPU1qTXhNRGs0TkRJMyZhbXA7ZGV2aWNldHlwZT1XaW5kb3dzKzcmYW1wO3ZlcnNpb249NjIwNjA3MzkmYW1wO2xhbmc9emhfQ04mYW1wO3Bhc3NfdGlja2V0PUowJTJCTG5yTmdFRm91SzRldEJud2cxSFVhYnNGdzdqaTVXMWZpU3ZldWc1NCUzRA==\">谈谈 Java 类文件结构</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlL3NwZWNzL2p2bXMvc2U3L2h0bWwvanZtcy00Lmh0bWw=\">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb29sc2hlbGwuY24vYXJ0aWNsZXMvOTIyOS5odG1s\">https://coolshell.cn/articles/9229.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x1YW5sb3Vpcy9hcnRpY2xlL2RldGFpbHMvMzk5NjA4MTU=\">https://blog.csdn.net/luanlouis/article/details/39960815</span></p>\n<p>《实战 Java 虚拟机》</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qdm0vamF2YS1qdm0tY2xhc3MuaHRtbA==\">https://pdai.tech/md/java/jvm/java-jvm-class.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tlb3BtZw==\">https://www.yuque.com/qingkongxiaguang/javase/keopmg</span></p>\n</blockquote>\n",
            "tags": [
                "JVM"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/04/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(5)-WeakHashMap/",
            "url": "https://cecilia.cool/2022/10/04/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(5)-WeakHashMap/",
            "title": "Java集合(5)--WeakHashMap",
            "date_published": "2022-10-04T09:46:00.000Z",
            "content_html": "<h1 id=\"引用类型\"><a class=\"anchor\" href=\"#引用类型\">#</a> 引用类型</h1>\n<h2 id=\"强引用\"><a class=\"anchor\" href=\"#强引用\">#</a> 强引用</h2>\n<p>最普遍的引用，如果一个对象<strong>具有</strong>强引用，GC 绝不会回收。如果不使用，要弱化引用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>o <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Object</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>test 方法内部有一个强引用，引用保存在栈中，new 的对象保存在</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>堆中，当方法运行结束会退出方法栈，则引用内容的引用不存在，Object</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>就会被回收。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr></table></figure><blockquote>\n<p>如果 o 是全局变量，需要在不用对象时赋值为 null。</p>\n</blockquote>\n<h2 id=\"软引用\"><a class=\"anchor\" href=\"#软引用\">#</a> 软引用</h2>\n<p>一个对象只有软引用，在内存空间足够时，垃圾回收器不会回收它；当内存空间不足，就会回收这些对象的内存。</p>\n<blockquote>\n<p>软引用可以用于实现内存敏感的高速缓存。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 弱引用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> softReference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>浏览器的后退按钮，后退时显示的网页应该是重新进行请求还是从缓存中取出的取决于具体的实现策略。如果将浏览的网页全部强引用存储到内存中，就会造成浪费甚至内存溢出。</p>\n<p>此时使用软引用：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Browser</span> prev <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Browser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 页面浏览</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 浏览后设为软引用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">SoftReference</span> sr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sr<span class=\"token punctuation\">.</span>get <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    rev <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Browser</span><span class=\"token punctuation\">)</span> sr<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    prev <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Broswer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 内存吃紧，软引用对象回收</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    sr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SoftReference</span><span class=\"token punctuation\">(</span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重新构建</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"弱引用\"><a class=\"anchor\" href=\"#弱引用\">#</a> 弱引用</h2>\n<p>区别于软引用，只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> abcWeakRef <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>str<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 可以恢复强引用</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">String</span> abc <span class=\"token operator\">=</span> abcWeakRef<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"虚引用\"><a class=\"anchor\" href=\"#虚引用\">#</a> 虚引用</h2>\n<p>虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。</p>\n<p>虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。</p>\n<h1 id=\"weakhashmap\"><a class=\"anchor\" href=\"#weakhashmap\">#</a> WeakHashMap</h1>\n<p>先看一下<strong>引用队列</strong>：</p>\n<ul>\n<li>一般情况，一个对象被标记为垃圾（不代表回收了），会加入到引用队列。</li>\n<li>对于虚引用来说，它指向的对象会只有被<strong>回收后</strong>才会加入到引用队列（其他是被标记），所以可以用作记录该引用指向的对象是否被回收。</li>\n</ul>\n<p><code>WeakHashMap</code>  与 <code>HashMap</code>  没什么区别，只是引用采取的是弱引用的 <code>key</code>  存储，<strong>GC 回收的是 <code>key</code> </strong>。这种结构适合缓存处理。底层是因为 <code>Entry</code>  继承了 <code>WeakReference</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    \t\t\t\t\t\t\t<span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                                <span class=\"token keyword\">implements</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                                <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> queue<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> queue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hash  <span class=\"token operator\">=</span> hash<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>next  <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了将 <code>key</code>  改写为弱引用，在 <code>Entry</code>  中又调用了一个 <code>super(key, queue)</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// WeakReference 构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">WeakReference</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> referent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> q<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>referent<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>WeakHashMap</code>  除了 <code>WeakReference</code> ，还有 <code>ReferenceQueue</code>  重要。</p>\n<blockquote>\n<p>再次强调一下， <code>WeakHashMap</code>  基于弱引用可以淘汰内部元素，同样的， <code>LinkedHashMap</code>  也是具备淘汰机制的，只不过是通过阈值来限定节点个数的先进先出缓存。</p>\n</blockquote>\n<h2 id=\"弱引用回收\"><a class=\"anchor\" href=\"#弱引用回收\">#</a> 弱引用回收</h2>\n<p><code>Reference</code>  类有一段静态代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 有一个全局锁</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Lock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Reference</span> pending <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>          </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">ThreadGroup</span> tg <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getThreadGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadGroup</span> tgn <span class=\"token operator\">=</span> tg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         tgn <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         tg <span class=\"token operator\">=</span> tgn<span class=\"token punctuation\">,</span> tgn <span class=\"token operator\">=</span> tg<span class=\"token punctuation\">.</span><span class=\"token function\">getParent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Thread</span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReferenceHandler</span><span class=\"token punctuation\">(</span>tg<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Reference Handler\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 优先级最高</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_PRIORITY</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    handler<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假设 <code>WeakHashMap</code>  对象里面保存了很多对象引用：</p>\n<ul>\n<li>GC 时，会创建一个 CMST 线程进行 GC，该线程被创建的同时还会创建一个 SLT 线程并启动。</li>\n<li>CMST 开始 GC 时，会发送一个消息给 SLT 让他去获取 Java 层 <code>Reference</code>  对象的全局锁 <code>lock</code> 。</li>\n<li>当 GC 完毕时，JVM 会将 WeakHashMap 中所有被回收的对象所属的 <code>WeakReference</code>  容器对象放入到 <code>Reference</code>  的 <code>pending</code>  属性中（每次 GC 完毕后， <code>pending</code>  属性基本上不会为 null 了）。</li>\n<li>然后通知 SLT 释放并且 <code>notify</code>  全局锁 <code>lock</code> ，此时激活了 <code>ReferenceHandler</code>  线程的 <code>run</code>  方法，脱离 wait 状态开始运行。</li>\n<li><code>Handler</code>  线程会将 pending 中所有 <code>WeakReference</code>  对象移动到各自队列中（比如当前这个 <code>WeakReference</code>  属于某个 <code>WeakHashMap</code>  对象，那么它就会被放入相应的 <code>ReferenceQueue</code>  列队里面（该列队是链表结构））。</li>\n</ul>\n<p>最后看一下 <code>ReferenceHandler</code>  的源码，如何将 <code>WeakRenference</code>  压入队列：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReferenceHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token class-name\">ReferenceHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadGroup</span> g<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>         <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>         <span class=\"token class-name\">Reference</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>             <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pending <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>             r <span class=\"token operator\">=</span> pending<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>             <span class=\"token class-name\">Reference</span> rn <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>             pending <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>rn <span class=\"token operator\">==</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">:</span> rn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             r<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                 lock<span class=\"token punctuation\">.</span><span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token comment\">// Fast path for cleaners</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>             <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cleaner</span><span class=\"token punctuation\">)</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>             <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token class-name\">ReferenceQueue</span> q <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span>queue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token class-name\">ReferenceQueue</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> q<span class=\"token punctuation\">.</span><span class=\"token function\">enqueue</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在调用 <code>get()</code> ， <code>replaceAll()</code> ， <code>put()</code> ， <code>remove()</code>  等方法时（都需要获取 <code>table</code> ）, 不是直接拿到 <code>table</code>  数组，而是通过 <code>getTable()</code>  方法先把数组中 <code>key</code>  为 <code>null</code>  的 <code>Entry</code>  删除掉在返回。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">getTable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 真正删除 Entry 的执行者 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">expungeStaleEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>expungeStaleEntries()</code>  方法中，存储被 GC 回收对象的 <code>queue</code>  会接收 GC 发送的回收消息，将 queue（通过 <code>synchronized</code>  上锁）中的 <code>key</code>  对应的 <code>value</code>  赋值为 <code>null</code> ，即 <code>help GC</code> 。</p>\n<blockquote>\n<p><code>Entry</code>  中保存了 hash 码，即使 <code>key</code>  被 GC 了，仍可以通过 hash 码来定位需要被删除的 <code>Entry</code> 。通过 <code>Entry</code>  的地址在冲突链表中定位（其实我觉得也可以判断 <code>Entry.key == null</code> 。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGhsaXZlL3AvNjAzMDQ0Ni5odG1s\">https://www.cnblogs.com/phlive/p/6030446.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8yYmE1NTM0NWZkOTQ=\">https://www.jianshu.com/p/2ba55345fd94</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Noa3N0YXJ0L2FydGljbGUvZGV0YWlscy8xMDcwMTkzNzE/c3BtPTEwMDEuMjEwMS4zMDAxLjY2NTAuMiZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3JlbGV2YW50Lm5vbmUtdGFzay1ibG9nLTIlN0VkZWZhdWx0JTdFQmxvZ0NvbW1lbmRGcm9tQmFpZHUlN0VSYXRlLTItMTA3MDE5MzcxLWJsb2ctMTA2NTQ1MzQwLnBjX3JlbGV2YW50X211bHRpX3BsYXRmb3JtX3doaXRlbGlzdHY0JmFtcDtkZXB0aF8xLXV0bV9zb3VyY2U9ZGlzdHJpYnV0ZS5wY19yZWxldmFudC5ub25lLXRhc2stYmxvZy0yJTdFZGVmYXVsdCU3RUJsb2dDb21tZW5kRnJvbUJhaWR1JTdFUmF0ZS0yLTEwNzAxOTM3MS1ibG9nLTEwNjU0NTM0MC5wY19yZWxldmFudF9tdWx0aV9wbGF0Zm9ybV93aGl0ZWxpc3R2NCZhbXA7dXRtX3JlbGV2YW50X2luZGV4PTM=\">一文带你了解 WeakHashMap</span>.</p>\n<p>这篇讲得可以：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zMzc3NDg4My9hcnRpY2xlL2RldGFpbHMvODk2MTMyNzE=\">https://blog.csdn.net/weixin_33774883/article/details/89613271</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/03/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(4)-TreeMap/",
            "url": "https://cecilia.cool/2022/10/03/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(4)-TreeMap/",
            "title": "Java集合(4)-TreeMap",
            "date_published": "2022-10-03T13:55:25.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>首先， <code>TreeMap</code>  与哈希没有任何关系，其次，哈希和 Map 也不是一回事，请不要先入为主。Map 只是一个键值对的数据结构，哈希是将对象计算哈希码的一种算法。 <code>TreeMap</code>  只是通过红黑树将键值对存起来，一方面实现了二叉搜索树的排序性，另一方面维护了整棵树的平衡性，防止树退化为链表增大查询 / 插入的时间复杂度。</p>\n<h1 id=\"排序方式\"><a class=\"anchor\" href=\"#排序方式\">#</a> 排序方式</h1>\n<p><code>TreeMap</code>  对插入数据实现了排序，如果是自定义数据，要么该类实现 <code>Comparable</code>  接口，要么 TreeMap 在构造方法中传入 <code>Comparator</code>  接口。</p>\n<h2 id=\"comparable\"><a class=\"anchor\" href=\"#comparable\">#</a> Comparable</h2>\n<p>以 <code>Student</code>  类来说明，继承 <code>Comparable</code>  并重写 <code>compareTo()</code>  方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span><span class=\"token comment\">// 为了简单，就写一个 id 属性，并设为 public 方便获取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 对比方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compareTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 按照 id 从小到大排序</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>CompareTo()</code>  中，是传入的对象和当前对象进行对比：</p>\n<ul>\n<li>如果对比大于 0，降序排序。</li>\n<li>如果对比小于 0，升序。</li>\n</ul>\n<blockquote>\n<p>其实记住当前对象 - 传入对象就是升序，反之则降序。</p>\n</blockquote>\n<h2 id=\"comparator\"><a class=\"anchor\" href=\"#comparator\">#</a> Comparator</h2>\n<p>通过外部类的方式进行编写，对于 <code>Comparator</code>  接口的传入也可以用 <code>Lambda</code>  表达式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Student</span> o2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 第一个参数 - 第二个参数：升序</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 也可以传入 Lambda 表达式</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> o1<span class=\"token punctuation\">,</span><span class=\"token class-name\">Student</span> <span class=\"token number\">02</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> o1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">-</span> o2<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们看一下 <code>TreeMap</code>  的部分属性和构造方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NavigableMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Cloneable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 传入一个 Comparator 接口</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>comparator <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TreeMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Comparator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">K</span><span class=\"token punctuation\">></span></span> comparator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comparator <span class=\"token operator\">=</span> comparator<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果没有传入 <code>Comparator</code>  接口实现，那么传入的 <code>Key</code>  必须实现 <code>Comparable</code> 。</p>\n<blockquote>\n<p><code>TreeMap</code>  底层用红黑树，红黑树近似平衡，最长路径不超过最短路径的 2 倍。</p>\n</blockquote>\n<h1 id=\"treemap\"><a class=\"anchor\" href=\"#treemap\">#</a> TreeMap</h1>\n<p><code>TreeMap</code>  的 UML 类图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/03/a6778fc1ccf85111.jpg\" alt=\"\" /></p>\n<p>因为底层使用了红黑树，所以节点就是 <code>Entry</code> ，记录了左右节点和父节点指针，以及节点颜色。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> color <span class=\"token operator\">=</span> <span class=\"token constant\">BLACK</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 构造方法，此处不写</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>关于红黑树，详细的实现，也就是节点如何变色，如何左旋右旋来维持近似平衡，可以看《算法导论》，本文不会详细去讲，作者曾经也自己看着书写过红黑树，当成 C++ 期末作业交上去了，但是过了两三天又忘了，这玩意吧，看个人兴趣吧，hhhhhh。</p>\n</blockquote>\n<h2 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put()</h2>\n<p>直接给出 <code>put</code>  的执行流程：</p>\n<ul>\n<li>判断当前根节点为 null，那么插入的第一个元素就是根节点。</li>\n<li>如果存在根节点，判断插入元素在左侧还是右侧，如果对比为 0，说明当前元素存在于 <code>TreeMap</code>  中，将其覆盖：<strong>在 TreeMap 中，不会存在重复元素</strong>。</li>\n<li>找到插入位置，插入。</li>\n<li>节点变色和旋转操作。</li>\n</ul>\n<blockquote>\n<p>代码太长了，要看源码自己打开 IDEA 查看。从 <code>put</code>  流程也可知，时间复杂度为<em> logN</em>。</p>\n</blockquote>\n<h2 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> get()</h2>\n<p>也就是不断地对比，在红黑树中查找节点。</p>\n<h1 id=\"treeset\"><a class=\"anchor\" href=\"#treeset\">#</a> TreeSet</h1>\n<p>这个就是对 TreeMap 进行了简单包装，不过多讲解</p>\n<blockquote>\n<p>额，其实关于 <code>TreeMap</code>  的详解应该是对红黑树的详解，但是我真的不想写，啊啊啊啊啊，以后有时间就单独写一篇博客解释一下红黑树，顺便放一个源码模板方便各位使用（等我想起了再说吧）。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl81MTE5MjUwNC9hcnRpY2xlL2RldGFpbHMvMTA5Nzc1Nzk3\">https://blog.csdn.net/weixin_51192504/article/details/109775797</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtbWFwLVRyZWVNYXAmYW1wO1RyZWVTZXQuaHRtbA==\">https://pdai.tech/md/java/collection/java-map-TreeMap&amp;TreeSet.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(3)-LinkedHashMap/",
            "url": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(3)-LinkedHashMap/",
            "title": "Java集合3-LinkedHashMap",
            "date_published": "2022-10-02T13:36:18.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>LinkedHashSet</code>  也是用了适配器模式，对 <code>LinkedHashMap</code>  进行包装，所以本文主要分析 <code>LinkedHashMap</code> 。</p>\n<p>从名字上可以看出容器是<em> Linked list</em> 和<em> HashMap</em> 的混合体，<strong>可以将<em> LinkedHashMap</em> 看作采用<em> linked list</em> 增强的<em> HashMap</em></strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>LinkedHashMap</code>  是 <code>HashMap</code>  的直接子类，它的区别在于在 <code>HashMap</code>  的基础上采用双向链表将所有的数据节点都链接起来了，就是为了<strong>保证元素的迭代顺序和插入顺序相同</strong>。</p>\n<p>还有个好处就是集合迭代时不需要遍历整个 <code>table</code> ，逮着双向链表的 <code>header</code>  遍历即可。</p>\n<blockquote>\n<p><code>LinkedHashMap</code>  为了性能，是非同步的，多线程下需要手动同步</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 也可以打包成同步的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Map</span> m <span class=\"token operator\">=</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">synchronizedMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"方法剖析\"><a class=\"anchor\" href=\"#方法剖析\">#</a> 方法剖析</h1>\n<blockquote>\n<p><code>get</code>  方法和 <code>HashMap</code>  里的没什么区别，不多说。</p>\n</blockquote>\n<h2 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put()</h2>\n<p>插入分为两部分：</p>\n<ul>\n<li>将元素插入 <code>table</code>  中，如果有哈希冲突，头插法插入到头部。</li>\n<li>将元素插入双向链表中，链表尾部。</li>\n</ul>\n<p>其实就是在 <code>HashMap</code>  上加入链表的引用的修改。</p>\n<p><code>LinkedHashMap</code>  使用的节点是 <code>Entrty</code> ，该类继承了 <code>HashMap</code>  的 <code>Node</code>  类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HashMap<span class=\"token punctuation\">.</span>Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> before<span class=\"token punctuation\">,</span> after<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> hash<span class=\"token punctuation\">,</span> <span class=\"token class-name\">K</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>hash<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"remove\"><a class=\"anchor\" href=\"#remove\">#</a> remove()</h2>\n<p>删除也有两部分：</p>\n<ul>\n<li>将元素从 <code>table</code>  中删除。</li>\n<li>将元素从双向链表中删除。</li>\n</ul>\n<h1 id=\"经典用法\"><a class=\"anchor\" href=\"#经典用法\">#</a> 经典用法</h1>\n<p>实现 FIFO 替换策略的缓存， <code>LinkedHashMap</code>  有一个方法，作用是告诉 Map 删除最老的 <code>Entry</code> ，也就是最早插入 Map 的 Entry。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每次插入新元素时 <code>LinkedHashMap</code>  都会询问该函数是否要删除最老的元素，</p>\n<blockquote>\n<p><code>LinkedHashMap</code>  并没有重写 <code>put</code>  方法，而是重写的 <code>newNode</code>  方法，因为 <code>newNode</code>  就是将要插入的键值对插放到新创建的节点中，在创建节点后马上将其加入到双向链表中即可。</p>\n</blockquote>\n<p>只要在子类中重载该方法，当元素个数超过一定数量时让 <code>removeEldestEntry</code>  返回 <code>true</code> ，就能实现一个固定大小的 FIFO 策略的缓存。其实我们写个子类继承 <code>LinkedList</code>  并重写一下 <code>add</code>  方法也是可以实现的，只是说，是哟个 <code>LinkedHashMap</code>  更加方便。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/** 一个固定大小的 FIFO 替换策略的缓存 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">FIFOCache</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> cacheSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FIFOCache</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cacheSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cacheSize <span class=\"token operator\">=</span> cacheSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 当 Entry 个数超过 cacheSize 时，删除最老的 Entry</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">removeEldestEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> eldest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> cacheSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtbWFwLUxpbmtlZEhhc2hNYXAmYW1wO0xpbmtlZEhhc2hTZXQuaHRtbA==\">https://pdai.tech/md/java/collection/java-map-LinkedHashMap&amp;LinkedHashSet.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTQyMDM0NDkvYXJ0aWNsZS9kZXRhaWxzLzgwMTk0NzA0\">https://blog.csdn.net/u014203449/article/details/80194704</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(2)-HashMap/",
            "url": "https://cecilia.cool/2022/10/02/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(2)-HashMap/",
            "title": "Java集合(2)--HashMap",
            "date_published": "2022-10-02T07:59:51.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>关于这些集合的讲解，作者默认读者都知道该如何使用，所以不会从最基础的开始讲起，会直接跳过什么是映射关系，哈希值等概念的讲解。对于源码的解析也是最主要使用的那些方法。</p>\n<h1 id=\"一些概念\"><a class=\"anchor\" href=\"#一些概念\">#</a> 一些概念</h1>\n<ul>\n<li>负载因子：集合容量都有上限，如果加入集合的数量超过一定允许值，集合就会扩容。负载因子就是衡量当前情况是否需要进行扩容的标准。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果数据占用率达到 75%，就会扩容，扩容会重新计算哈希值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">float</span> <span class=\"token constant\">DEFAULT_LOAD_FACTOR</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.75f</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>红黑树：一种数据结构，在 <code>HashMap</code>  里面查询效率是<em> logN</em>，整棵树在插入数据时始终保持近似平衡（不是真的平衡）。JDK1.8 后就用红黑树代替 <code>HashMap</code>  里面的长度超过 8 的冲突链表了。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/02/760aca61cab61cfc.jpg\" alt=\"\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TreeNode</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">LinkedHashMap<span class=\"token punctuation\">.</span>Entry</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// ....</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>TreeNode</code>  就是为了实现红黑树而设计的内部类。</p>\n<blockquote>\n<p><code>HashMap</code>  的初始容量是否应该设的比较大，在 JDK1.7 以前，HashMap 用的是冲突链表，HashMap 在迭代时，需要遍历整个数组和冲突链表。如果迭代频繁的话，就不宜将初始大小设的过大。</p>\n</blockquote>\n<ul>\n<li><code>modCount</code> ：集合只要可以使用迭代器，都需要 <code>modCount</code>  来记录修改次数。</li>\n<li>实现 <code>Map</code>  接口：允许 <code>key</code>  和 <code>value</code>  都是 <code>null</code> 。</li>\n</ul>\n<h1 id=\"核心方法\"><a class=\"anchor\" href=\"#核心方法\">#</a> 核心方法</h1>\n<p>有时会将 Java7 的方法拿出来和 Java8 作比较。</p>\n<p>在 Java7 使用 Entry 代表数据节点，Java8 使用 Node，基本没有区别，都是 <code>key</code> ， <code>value</code> ， <code>hash</code> ， <code>next</code>  四个属性。 <code>Node</code>  只能适用于链表， <code>TreeNode</code>  用于红黑树。</p>\n<h2 id=\"put\"><a class=\"anchor\" href=\"#put\">#</a> put()</h2>\n<blockquote>\n<p><code>put</code>  方法重点也是在于得到哈希值，然后就是处理一下<strong>扩容</strong>，<strong>哈希冲突</strong>，<strong>链表转化红黑树</strong>等问题。</p>\n</blockquote>\n<p>Java7 是先扩容再插入值，Java8 是先插入值再扩容。第一次 <code>put</code>  需要初始化一下 <code>table</code>  数组（从 <code>null</code>  初始化到默认容量 16 或者自定义容量），才能加入数据。</p>\n<p>需要注意的是，如果两次使用 <code>put</code>  时，加入的 <code>key</code>  都是相同的，那么第二次的 <code>value</code>  应该覆盖第一次的，所以在 <code>put</code>  时也应该考虑到这一点，<strong>发生哈希冲突应该首先检查 Key 是不是相同的再进行下一步操作</strong>。</p>\n<p>重点讲一下扩容操作：扩容时需要重新 <code>hash</code> ，并不是说要重新调用 <code>hash</code>  这个函数， <code>Node(TreeNode)</code>  节点之前就保存了 <code>hash</code>  值的。</p>\n<p>如果 <code>hash</code>  值超过了容量 <code>cap</code> ，需要取余操作，因为 <code>cap</code>  都是 2 的指数，所以 <code>cap-1</code> （最大下标）的低位就全是 1，取余操作就可以为： <code>hash &amp; (cap - 1)</code> 。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/02/d1b17259fca6ec00.jpg\" alt=\"\" /></p>\n<p>所以一条冲突链表上的数据节点的哈希值并不一定都是相同的，可能是取余后才导致下标相同。所以在重新哈希的过程中，就需要对冲突链表拆分为两条链表，一条链表是哈希值本来就是当前下标，另一个是哈希值被取余了的（这条链表上也并不是哈希值都相同，只是取余后值都相同，5 和 7 被 2 取余值也相同嘛）。</p>\n<p>因为每次扩容都是容量乘 2，所以后一条链表的新下标就是 <code>i+cap</code> 。</p>\n<blockquote>\n<p><code>i&lt;cap，(i+cap) % 2cap = i+cap</code> 。</p>\n</blockquote>\n<h2 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> get()</h2>\n<blockquote>\n<p><code>get</code>  方法内部最重要的就是 <code>hash()</code>  得到其哈希值，然后再通过 <code>equals()</code>  找到对应的值。</p>\n</blockquote>\n<p>理解了 <code>put</code>  的机制和哈希值取余原理后， <code>get</code>  分析就比较简单了。</p>\n<ul>\n<li>\n<p>计算 key 的 hash 值，根据 hash 值找到对应数组下标: hash &amp; (length-1)。</p>\n</li>\n<li>\n<p>判断数组该位置处的元素是否刚好就是我们要找的，如果不是，走第三步。</p>\n</li>\n<li>\n<p>判断该元素类型是否是 TreeNode，如果是，用红黑树的方法取数据，如果不是，走第四步。</p>\n</li>\n<li>\n<p>遍历链表，直到找到相等 (== 或 equals) 的 key。</p>\n</li>\n</ul>\n<h1 id=\"hashset\"><a class=\"anchor\" href=\"#hashset\">#</a> HashSet</h1>\n<p><code>HashSet</code>  使用了适配器模式，对 <code>HashMap</code>  进行了简单的包装，对 <code>HashSet</code>  的函数调用都会转换成合适的 <code>HashMap</code>  方法。这里提一下，不需要过多赘述。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//HashSet 是对 HashMap 的简单包装</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> map<span class=\"token punctuation\">;</span><span class=\"token comment\">//HashSet 里面有一个 HashMap</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// Dummy value to associate with an Object in the backing Map</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Object</span> <span class=\"token constant\">PRESENT</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HashSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 简单的方法转换</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token constant\">PRESENT</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtbWFwLUhhc2hNYXAmYW1wO0hhc2hTZXQuaHRtbA==\">https://pdai.tech/md/java/collection/java-map-HashMap&amp;HashSet.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL3N5eTRyeiNiMmI1MWU0MQ==\">https://www.yuque.com/qingkongxiaguang/javase/syy4rz#b2b51e41</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0NhcnBlbnRlckxlZS9KQ0ZJbnRlcm5hbHMvYmxvYi9tYXN0ZXIvbWFya2Rvd24vNi1IYXNoU2V0JTIwYW5kJTIwSGFzaE1hcC5tZCNnZXQ=\">https://github.com/CarpenterLee/JCFInternals/blob/master/markdown/6-HashSet and HashMap.md#get</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/01/Java/%E5%B9%B6%E5%8F%91/Java%E5%85%B3%E9%94%AE%E5%AD%97-volatile/",
            "url": "https://cecilia.cool/2022/10/01/Java/%E5%B9%B6%E5%8F%91/Java%E5%85%B3%E9%94%AE%E5%AD%97-volatile/",
            "title": "Java关键字volitale",
            "date_published": "2022-10-01T07:20:23.000Z",
            "content_html": "<h1 id=\"volatile关键字\"><a class=\"anchor\" href=\"#volatile关键字\">#</a> volatile 关键字</h1>\n<p>并发存在的问题主要是可见性，原子性，有序性。原子性可以通过 <code>synchronized</code>  实现同步，可见性，有序性通过 <code>volatile</code>  解决。</p>\n<p>可见性：CPU 直接和内存交互太慢了，所以 CPU 直接和缓存交互。在多核 CPU 中，每个 CPU 各自有一个缓存，在 A 修改了某一变量时，可能来不及写入内存并让其他 CPU 读取，造成修改的不可见。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/01/14eaf6c457e413c7.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>缓存一致性协议就是为了解决一致性问题。</p>\n</blockquote>\n<p><code>volatile</code>  可以保证可见性，当某一个线程修改了被 <code>volatile</code>  修饰的变量后，其他线程会马上更新这个变量。但是它依然不能解决原子性问题，就像那个最经典的多个线程 <code>i++</code>  一样，自增操作是被瓜分为了多个步骤完成的，虽然保证了可见性，但是只要手速够快，依然会出现两个线程同时写同一个值的问题（比如线程 1 刚刚将 a 的值更新为 100，这时线程 2 可能也已经执行到更新 a 的值这条指令了，<strong>已经刹不住车了</strong>，所以依然会将 a 的值再更新为一次 100）。</p>\n<p>此处顺便介绍一下<strong> Java 内存模型（JMM）</strong>：采用了类似的模型支持多线程</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/01/4d01a61364ae80bf.jpg\" alt=\"\" /></p>\n<ul>\n<li>所有的变量全部存储在主内存。</li>\n<li>每条线程有着自己的工作内存，线程对变量的所有操作，必须在工作内存中进行，不能直接操作主内存中的数据。</li>\n<li>不同线程之间的工作内存相互隔离，如果需要在线程之间传递内容，只能通过主内存完成，无法直接访问对方的工作内存。</li>\n</ul>\n<p>有序性：为了优化程序，编译时会对指令进进行重排序，有可能暴露出未初始化的空内存出来。以双重检查的单例模式为例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SingleInstance</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SignleInstance</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SignleInstance</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token comment\">// 锁住这个类，无论哪个实例来执行这段代码都要拿到锁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SignleInstance</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>instance <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SingleInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> instance<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于 <code>instance = new SingeInstance()</code> ，正常的 CPU 指令为：</p>\n<ol>\n<li>分配内存空间</li>\n<li>初始化对象</li>\n<li>将 instance 引用指向内存空间</li>\n</ol>\n<p>但是重排序后可能执行顺序就是：</p>\n<ol>\n<li>分配内存空间</li>\n<li>将 instance 引用指向内存空间</li>\n<li>初始化对象</li>\n</ol>\n<p>如果线程在执行完 2 后中断，其他的线程再来执行 <code>getInstance()</code>  方法，就会拿到一个没有初始化的 instance。</p>\n<blockquote>\n<p><code>volaitle</code>  关键字可以产生内存屏障防止重排序。</p>\n</blockquote>\n<h1 id=\"应用场景\"><a class=\"anchor\" href=\"#应用场景\">#</a> 应用场景</h1>\n<p>上面单例模式中为了解决重排序就可以使用 <code>volatie</code> 。</p>\n<h2 id=\"模式1状态标志\"><a class=\"anchor\" href=\"#模式1状态标志\">#</a> 模式 1：状态标志</h2>\n<p>用于指示发生了一个重要的一次性事件，例如完成初始化或请求停机。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> shutdownRequest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> shutdownRequested <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>shutdownRequested<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// do stuff</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"模式2独立观察\"><a class=\"anchor\" href=\"#模式2独立观察\">#</a> 模式 2：独立观察</h2>\n<p>安全使用 volatile 的另一种简单模式是定期 发布 观察结果供程序内部使用。例如，假设有一种环境传感器能够感觉环境温度。一个后台线程可能会每隔几秒读取一次该传感器，并更新包含当前文档的 volatile 变量。然后，其他线程可以读取这个变量，从而随时能够看到最新的温度值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserManager</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">String</span> lastUser<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">authenticate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> user<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">boolean</span> valid <span class=\"token operator\">=</span> <span class=\"token function\">passwordIsValid</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">User</span> u <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            activeUsers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>u<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            lastUser <span class=\"token operator\">=</span> user<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> valid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"模式3volatile-bean模式\"><a class=\"anchor\" href=\"#模式3volatile-bean模式\">#</a> 模式 3：volatile bean 模式</h2>\n<p>在 volatile bean 模式中，JavaBean 所有数据成员都是 volatile 类型，并且 getter，setter 方法必须非常普通 —— 除了获取或设置相应的属性外，不能包含任何逻辑。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ThreadSafe</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getFirstName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> firstName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getLastName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> lastName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> age<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFirstName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> firstName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">=</span> firstName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setLastName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> lastName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastName <span class=\"token operator\">=</span> lastName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>冰河《深入理解高并发编程》第一版</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1rZXktdm9sYXRpbGUuaHRt\">https://pdai.tech/md/java/thread/java-thread-x-key-volatile.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL3ZkNjBnNSMyMWNkOTQ1Ng==\">https://www.yuque.com/qingkongxiaguang/javase/vd60g5#21cd9456</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/10/01/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%B7%A5%E5%85%B7/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/10/01/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E4%B8%8E%E5%B7%A5%E5%85%B7/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/",
            "title": "网络协议",
            "date_published": "2022-10-01T01:58:30.000Z",
            "content_html": "<blockquote>\n<p>整个网络协议与工具线路参照 pdai 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2ZWxvcC9wcm90b2NvbC9kZXYtcHJvdG9jb2wtb3ZlcnZpZXcuaHRtbA==\"> Java 全栈知识体系</span>学习，前半部分关于计算机网络的知识，padi 也是直接使用了博客园的博主<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ob21lLmNuYmxvZ3MuY29tL3UvZ29vZ255Lw==\">桂城老托尼</span>关于《计算机网络第五版》（谢希仁）的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ29vZ255L3AvMzY4MjI4MC5odG1s\">读书笔记</span>，在学习期间，作者也会参考《计算机网络 - 自顶向下方法》进行内容补充。</p>\n</blockquote>\n<h1 id=\"计算机网络基础\"><a class=\"anchor\" href=\"#计算机网络基础\">#</a> 计算机网络基础</h1>\n<blockquote>\n<p>如果学计算机网络觉得看文字过于枯燥，可以看一下中科大的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUpWNDExdDdvdy8/c3BtX2lkX2Zyb209MzMzLjMzNy5zZWFyY2gtY2FyZC5hbGwuY2xpY2smYW1wO3ZkX3NvdXJjZT01YWNmNWE3YjIzZDI4ZTc2MzNlNWE5YjM4MWM1N2M0Mg==\">郑烇老师</span>的计算机网络的课。</p>\n</blockquote>\n<h2 id=\"因特网概述\"><a class=\"anchor\" href=\"#因特网概述\">#</a> 因特网概述</h2>\n<p>一个网络可能由光纤，路由器，计算机（包括服务器）等组成，本质上就是结点和链路的组成。而<strong>因特网则是把许多网络连接在一起</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/01/4851be18068b1041.jpg\" alt=\"\" /></p>\n<p>组成：</p>\n<ul>\n<li>边缘部分：由所有连接在因特网的主机组成，这些主机又叫做端系统 (end system)。</li>\n<li>核心部分：大量网络和连接这些网络的<strong>路由器</strong>组成，为边缘部分提供服务的。</li>\n</ul>\n<p>计算机通信方式：</p>\n<ul>\n<li>客户服务器方式 --C/S 方式，一般是客户端发起通信，否则服务端不知道客户端 IP。</li>\n<li>对等方式 --P2P 方式（Peer-to-Peer），两个主机都运行了对等连接软件，可以平等，对等连接通信。</li>\n</ul>\n<p>因特网中的核心部分最复杂，起特殊作用的是路由器（Router），实现分组交换。比如某一主机现需要发送一段较长的数据，发送时就会将这段数据分为一个个的分组，加上首部（事实上，我们说一个分组时，已经认为其包含了首部）。首部包含了一些有用的信息，比如这个分组实际承载的数据多大，目标地址等。</p>\n<p>分组交换网中的结点交换机根据收到的分组的首部中的地址信息，把分组转发到下一个结点交换机。用这样的存储转发方式，最后分组就能到达最终目的地。接收端收到分组后剥去首部还原成报文。最后，在接收端把收到的数据恢复成为原来的报文。</p>\n<h2 id=\"路由器\"><a class=\"anchor\" href=\"#路由器\">#</a> 路由器</h2>\n<p>路由器处理分组过程：</p>\n<ul>\n<li>把收到的分组先放入缓存（暂时存储）；</li>\n<li>查找转发表，找出到某个目的地址应从哪个端口转发；</li>\n<li>把分组送到适当的端口转发出去。</li>\n</ul>\n<blockquote>\n<p>请区分好路由器和主机的区别，尽管都是因特网的节点，但是它们是不一样的。</p>\n</blockquote>\n<p>分组交换也存在许多问题，比如许多节点在经过同一个路由器分组转发时，需要排队，会造成一定时延，分组的首部也造成一定开销。</p>\n<blockquote>\n<p>除了分组交换，还有电路交换，在发送信息前，双方必须建立一条连接，路径上的交换机都将为该连接维护状态，并且预留了带宽，数据能够以恒定速率发送。</p>\n</blockquote>\n<p>对比：</p>\n<p>早期面向终端的计算机网络是<strong>以单个主机为中心的星形网</strong>，各终端通过通信线路共享昂贵的中心主机的硬件和软件资源。分组交换网则是以网络为中心，主机都处在网络的外围。</p>\n<h2 id=\"网络分类\"><a class=\"anchor\" href=\"#网络分类\">#</a> 网络分类</h2>\n<p>不同作用范围：</p>\n<ul>\n<li>广域网 WAN（Wide Area Network），手机端移动设备是通过蜂窝网提供商运营的基站来发送和接收分组。用于仅需位于基站的数万米范围。</li>\n<li>局域网 LAN（Local Area Network)，个人热点就是局域网，称为 wlan-- 无线局域网（Wireless），WiFi 是基于 IEEEE 802.11 技术的无线 LAN 接入，用户必须在接入点几十米范围内。</li>\n<li>城域网 MAN</li>\n<li>个人区域网 PAN</li>\n</ul>\n<p>根据使用者也可以分为公用网和专用网。</p>\n<blockquote>\n<p>重点需要提的是接入网 AN（Access），由 ISP--Internet Service Provider 提供，起到让用户域因特网连接的桥梁作用。每个 ISP 自身就是一个由多台分组交换机和多段通信链路组成的网络。</p>\n</blockquote>\n<p>分组交换机除了路由器和链路层交换机，后者通常用于接入网，路由器用于网络核心中。</p>\n<h2 id=\"相关术语\"><a class=\"anchor\" href=\"#相关术语\">#</a> 相关术语</h2>\n<p><strong>带宽</strong>：数字信道所能传送的最<strong>高数据率</strong>，单位是<strong>比特每秒 b/s</strong>。</p>\n<p><strong>吞吐量</strong>：单位时间内通过某个网络（信道，接口）的数据量。</p>\n<p><strong>传输时延（发送时延 ）</strong>：  发送数据时，数据块从结点进入到传输媒体所需要的时间。从发送数据帧的第一个比特算起，到该帧的最后一个比特发送完毕所需的时间，<strong>发送时延 = 数据块长度 / 带宽</strong>。</p>\n<p><strong>传播时延</strong>  电磁波在信道中需要传播一定的距离而花费的时间，<strong>传播时延 = 信道长度 / 信号在信道上的传播速率</strong>。</p>\n<p>处理时延和排队时延比较简单，跟路由器有关。</p>\n<h2 id=\"体系结构\"><a class=\"anchor\" href=\"#体系结构\">#</a> 体系结构</h2>\n<p>经常使用的 TCP/IP 协议是四层体系结构：应用层，运输层，网际层，网络接口层。和 ISO 折中之后，采用一种五层协议的体系结构：应用层，运输层，网络层，数据链路层，物理层。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/10/01/cd33ff3621dde413.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>还有 UDP，这种传输协议不能对数据做出任何保证，即使在传播过程中出现丢失，比特突变，都不会做任何弥补措施，一般用于实时媒体软件，比如直播（数据丢了就丢了，无所谓）。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZ29vZ255L3AvMzY4MjI4MC5odG1s\">https://www.cnblogs.com/googny/p/3682280.html</span></p>\n<p>《计算机网络自顶向下》第一章</p>\n</blockquote>\n",
            "tags": [
                "网络协议与工具"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/29/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(1)-PriorityQueue/",
            "url": "https://cecilia.cool/2022/09/29/Java/Java%E5%9F%BA%E7%A1%80/Java%E9%9B%86%E5%90%88(1)-PriorityQueue/",
            "title": "Java集合(1)--PriorityQueue",
            "date_published": "2022-09-29T07:07:41.000Z",
            "content_html": "<h1 id=\"其他集合\"><a class=\"anchor\" href=\"#其他集合\">#</a> 其他集合</h1>\n<p>因为像 ArrayList，LinkedList 之类的容器比较简单，此处不会过多解释，只会列出一些需要注意的点。</p>\n<p><strong>ArrayList</strong>：</p>\n<ul>\n<li>ArrayList 为了效率没有实现同步，有需求的情况下需要自己实现。</li>\n<li>向 ArrayList 中加入元素（add）时，都会进行容量检查，扩容都会交给 grow 方法。</li>\n<li><code>remove</code>  函数中，删除中间某一个元素会导致后面的元素向前移动，需要将最后一个位置赋为 null（为了让 GC 起作用）。</li>\n<li><code>tirmToSize()</code> ，将数组容量修改为当前元素个数大小； <code>indexOf()</code>  与 <code>lastIndexOf()</code> <br />\n 就是获取元素第一次 / 最后一次出现的 index。</li>\n<li><code>modCount</code>  是指集合创建以来修改的次数，他保证在迭代器循环中，如果出现集合的修改就停止迭代。</li>\n</ul>\n<p><strong>LinkedList</strong>：</p>\n<ul>\n<li>LinkedList 可以考虑作为栈 / 队列，Java 官方不建议使用 Stack。但是 ArrayDeque 是栈或者队列的<br />\n首选，性能更好。</li>\n<li>LinkedList 没有哑节点，当链表为空的时候 first 和 last 都指向 null。</li>\n</ul>\n<p><strong>ArrayDeque</strong>：</p>\n<ul>\n<li>\n<p><code>Deque</code>  是 &quot;double ended queue&quot;, 表示双向的队列，英文读作 &quot;deck&quot;.。</p>\n</li>\n<li>\n<p>ArrayDeque 是非线程安全的，不允许加入 null。</p>\n</li>\n</ul>\n<h1 id=\"priorityqueue\"><a class=\"anchor\" href=\"#priorityqueue\">#</a> PriorityQueue</h1>\n<p>优先队列保证每次取出的元素都是队列中最小的（构造时可以传入比较器 <code>Comparator</code> ，所以想要每次取出都是最大的，只需要反过来即可）。</p>\n<p>PriorityQueue 不允许放入 <code>null</code>  元素，<strong>内部通过数组实现小根堆</strong>，小根堆抽象上可以理解为完全二叉树。</p>\n<p>数组映射完全二叉树的算数关系为：</p>\n<ul>\n<li><code>leftNode = ParentNode*2 + 1</code></li>\n<li><code>rightNode = ParentNode*2 + 2</code></li>\n<li><code>ParentNode = (node - 1)/2</code></li>\n</ul>\n<blockquote>\n<p><em>PriorityQueue</em> 的 <code>peek()</code>  和 <code>element</code>  操作是常数时间， <code>add()</code> ,  <code>offer()</code> , 无参数的 <code>remove()</code>  以及 <code>poll()</code>  方法的时间复杂度都是<em> log (N)</em>。</p>\n</blockquote>\n<p><code>add()</code>  和 <code>remove()</code>  失败后就会抛出异常，而 <code>offer()</code>  和 <code>poll()</code>  就是返回 <code>false</code> 。</p>\n<h2 id=\"小根堆解析\"><a class=\"anchor\" href=\"#小根堆解析\">#</a> 小根堆解析</h2>\n<p>此处不讲解 PriorityQueue 源码，而是理解小根堆的维护流程</p>\n<p><strong>加入节点</strong>：队列只允许从队尾加入元素，大致流程如下图。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/29/a2497ab926b94de8.jpg\" alt=\"\" /></p>\n<p>删除节点：</p>\n<ul>\n<li>优先队列出队操作会导致根节点被删除，此时需要将最后一个节点放到根节点的位置在进行下降调整。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/29/0681d1a809288d78.jpg\" alt=\"\" /></p>\n<ul>\n<li>如果是其他关于小根堆的删除，当删除节点是尾节点时，直接删除即可。</li>\n<li>当节点在中间，我们就只看以该节点尾根节点的子树，将数组最后一个节点移到当前节点，再调整。</li>\n</ul>\n<h1 id=\"小根堆代码\"><a class=\"anchor\" href=\"#小根堆代码\">#</a> 小根堆代码</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 模拟小根堆的增加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> minHeap <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 假设参数合法，数组不出现越界</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> minHeap<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 当前父节点，index 是当前 val 位于的位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>index <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            index <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            p <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        minHeap<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> minHeap <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>minHeap<span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 假设 - 1 为 null</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">/** 小根堆是完全二叉树，左节点下标为奇数，右节点为偶数</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            一直向下找右节点直到到达最后一层，在倒数第二层会出现</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            1） 该层不存在右孩子</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            2） 该层存在右孩子</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 权值大的节点向下沉</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> r <span class=\"token operator\">&lt;</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                index <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>r <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minHeap<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                index <span class=\"token operator\">=</span> r<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>r <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token comment\">// 如果当前节点小于左右子节点，则完成</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">&lt;</span> size <span class=\"token operator\">&amp;&amp;</span> minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            minHeap<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            minHeap<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9DYXJwZW50ZXJMZWUvcC81NDg4MDcwLmh0bWw=\">http://www.cnblogs.com/CarpenterLee/p/5488070.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9jb2xsZWN0aW9uL2phdmEtY29sbGVjdGlvbi1Qcmlvcml0eVF1ZXVlLmh0bWw=\">https://pdai.tech/md/java/collection/java-collection-PriorityQueue.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java基础"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/28/Docker/Docker(7)-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/",
            "url": "https://cecilia.cool/2022/09/28/Docker/Docker(7)-%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/",
            "title": "Docker(7)--资源管理",
            "date_published": "2022-09-28T08:16:58.000Z",
            "content_html": "<h1 id=\"容器控制操作\"><a class=\"anchor\" href=\"#容器控制操作\">#</a> 容器控制操作</h1>\n<blockquote>\n<p>补充一些 Docker 的命令，对于这种单纯的命令查看，建议直接看菜鸟教程。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 进入容器，退出：ctrl+P，ctrl+Q；终止容器运行的程序：ctrl+C</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> attach 容器ID/名称</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 执行命令，这里执行的是 bash，并开启一个可输入终端</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器ID/名称 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># （假设容器可以执行 java），就相当于让容器执行 java -version</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> 容器ID/名称 <span class=\"token function\">java</span> <span class=\"token parameter variable\">-version</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 允许容器处理善后再停止运行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">kill</span> 容器ID/名称</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># 直接强制停止容器</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">docker</span> stop 容器ID/名称</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># 启动容器（一般是容器被 stop 之后）</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">docker</span> start 容器ID/名称</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># 重启容器</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">docker</span> restart 容器ID/名称</pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\"># 暂停容器 (unpause-- 取消暂停)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">docker</span> pause 容器ID/名称</pre></td></tr></table></figure><h1 id=\"物理资源管理\"><a class=\"anchor\" href=\"#物理资源管理\">#</a> 物理资源管理</h1>\n<ul>\n<li>内存分配：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-m</span> 50M --memory-swap<span class=\"token operator\">=</span>100M nagocoler/springboot-test:1.0</pre></td></tr></table></figure><p><code>-m</code>  对容器的物理内存的限制， <code>--memory-swap</code>  对内存和交换分区总和的限制。默认都是 - 1，即没有任何限制。如果仅指定 <code>-m</code> ，那么交换内存的限制也为 <code>-m</code>  指定的参数。</p>\n<ul>\n<li>CPU 进行限额：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-c</span> <span class=\"token number\">1024</span> ubuntu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-c</span> <span class=\"token number\">512</span> ubuntu</pre></td></tr></table></figure><p>对 CPU 的分配只有多容器才生效，默认是 1024，如果 CPU 不紧张，依然可以使用全部 CPU 资源。</p>\n<blockquote>\n<p>通过 Ubuntu 命令： <code>sudo apt install stress</code>  在容器中下载压力测试工具来看一下进程分配权重对进程获得 CPU 资源的影响。</p>\n</blockquote>\n<p>还可以限制容器使用 CPU：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> --cpuset-cpus<span class=\"token operator\">=</span><span class=\"token number\">1</span> ubuntu</pre></td></tr></table></figure><blockquote>\n<p>选项后面的值不是 CPU 的数量，而是 CPU 的 “编号”，即这个容器只用 1 这个 CPU，所以指定两个 CPU 时也可以这样： <code>docker run -it --cpuset-cpus=0,1 ubuntu</code> 。</p>\n</blockquote>\n<p>命令 <code>--cpus</code>  来限制使用 CPU 资源数（个数）： <code>docker run -it --cpus=1 ubuntu</code> 。</p>\n<h1 id=\"容器监控\"><a class=\"anchor\" href=\"#容器监控\">#</a> 容器监控</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> stats</pre></td></tr></table></figure><p>可以实时对容器的各项状态进行监控，包括内存使用、CPU 占用、网络 I/O、磁盘 I/O 等信息。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/28/2e4f267ce01df490.jpg\" alt=\"\" /></p>\n<p><code>top</code>  命令可以查看容器进程：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">top</span> 容器ID/名称</pre></td></tr></table></figure><p>对于容器监管，也有页面版本的，官方<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLnBvcnRhaW5lci5pby9zdGFydC9pbnN0YWxsL3NlcnZlci9kb2NrZXIvbGludXg=\">下载教程</span>，此处不过多讲解。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvendoa3BpL2txNnJsZw==\">https://www.yuque.com/qingkongxiaguang/zwhkpi/kq6rlg</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kb2NrZXIvZG9ja2VyLXN0YXJ0LXN0b3AtcmVzdGFydC1jb21tYW5kLmh0bWw=\">https://www.runoob.com/docker/docker-start-stop-restart-command.html</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/27/Docker/Docker(6)-%E6%95%B0%E6%8D%AE%E5%8D%B7%E7%AE%A1%E7%90%86/",
            "url": "https://cecilia.cool/2022/09/27/Docker/Docker(6)-%E6%95%B0%E6%8D%AE%E5%8D%B7%E7%AE%A1%E7%90%86/",
            "title": "Docker(6)--数据卷管理",
            "date_published": "2022-09-27T08:46:08.000Z",
            "content_html": "<h1 id=\"数据卷\"><a class=\"anchor\" href=\"#数据卷\">#</a> 数据卷</h1>\n<blockquote>\n<p>基于分层机制，在容器中操作的文件都是在最顶层进行，这也导致容器的销毁会导致数据丢失。通过数据卷可以实现数据共享和持久化。</p>\n</blockquote>\n<h2 id=\"文件挂载\"><a class=\"anchor\" href=\"#文件挂载\">#</a> 文件挂载</h2>\n<p>Linux 根目录以外的文件想要被访问，就需要将其关联到根目录下的某个目录实现，这种关联就叫挂载，目录就是挂载点，解除关联就是卸载。</p>\n<blockquote>\n<p>最直接的就是读取 U 盘的文件，如果没有挂载操作，就只能在图形化界面使用 U 盘，在命令行找不到的。</p>\n</blockquote>\n<p>进行挂载时建议重新创建一个文件夹，如果使用了系统文件夹（etc 之类的），挂载操作会使得原有目录中文件被隐藏，可能会导致系统崩溃。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mount</span> 设备号 挂载点目录</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">umount</span> 挂载点目录</pre></td></tr></table></figure><h2 id=\"容器持久化\"><a class=\"anchor\" href=\"#容器持久化\">#</a> 容器持久化</h2>\n<blockquote>\n<p>我们可以让容器将文件保存到宿主主机上，这样就算容器销毁，文件也会在宿主主机上保留，下次创建容器时，依然可以从宿主主机上读取到对应的文件。</p>\n</blockquote>\n<p>在宿主机创建需要挂载到容器的目录：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">mkdir</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 随便创建点文件表示有内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">vim</span> test/hello.txt</pre></td></tr></table></figure><p>将 test 目录挂载到容器的某个目录上</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-v</span> ~test:/root/test ubuntu</pre></td></tr></table></figure><p>此时在容器中就可以访问宿主主机的文件，对挂载目录的文件进行编辑，就相当于编辑宿主主机的数据。在容器中创建文件，宿主主机也会创建相应文件。</p>\n<blockquote>\n<p>在容器中删除文件，不会影响主机的文件。</p>\n</blockquote>\n<p>可以部署 Nginx，在宿主主机上保存前端页面，然后将这个前端页面目录挂载到 Nignx 容器上，这样 Nginx 镜像有升级，容器需要删除重新创建也不会影响前端页面。</p>\n<p>我们这里使用的前端模板是<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib290c3RyYXBtYWRlLmNvbS8=\"> Arsha</span>（如何将文件传到 linux 上待会讲）。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-v</span> /win_data/Arsha:/usr/share/nginx/html/ <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 <span class=\"token parameter variable\">-d</span> nginx</pre></td></tr></table></figure><p>将解压出来的目录挂载到 Nginx 的默认站点目录 <code>/usr/share/nginx/html/</code> ，因为挂在后位于顶层，会替代镜像原有的文件。</p>\n<p>进入容器将 Nginx 服务启动：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start nginx</pre></td></tr></table></figure><blockquote>\n<p>在 windos 浏览器中输入 <code>IP:80</code> ，即可访问 nginx 服务，如果访问超时，可能是 linux80 端口被其他进程占用，最简单的就是重启一下 linux，再启动 nginx。</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/28/72cd9dda6c186381.jpg\" alt=\"\" /></p>\n<p>如果在挂载时没有指定宿主主机的目录，Docker 就会自动创建一个新的文件夹，并且会将容器中对应路径下的内容拷贝到这个自动创建的目录中，最后挂在到容器中，这种就是由 Docker 管理的数据卷了。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-v</span> /root/abc ubuntu</pre></td></tr></table></figure><p>要查看 Docker 将文件放在了宿主机哪个位置</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> inspect 容器名字/ID</pre></td></tr></table></figure><p>主要是看 Mount 这个部分</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/28/efea66dac14a3326.jpg\" alt=\"\" /></p>\n<p>Docker 支持从宿主主机复制文件到容器中（或者容器复制文件到宿主主机）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">cp</span> 主机文件 容器名/ID:文件夹路径</pre></td></tr></table></figure><h3 id=\"win文件传输到linux\"><a class=\"anchor\" href=\"#win文件传输到linux\">#</a> win 文件传输到 Linux</h3>\n<blockquote>\n<p>如果 linux 装在虚拟机上，虚拟机安装了 VMwareTools 后，一般可以实现文件直接从 win 拖动到虚拟机系统里面，但是有时候抽风又不能拖动。也可以将文件放到 U 盘里面，然后 U 盘挂载到 Linux 上，再将文件移动到 Linux 其他文件夹里面使用。（无语的是我这 U 盘挂载也出了问题）</p>\n</blockquote>\n<p>这里讲通过 pscp，命令行传输文件。</p>\n<ul>\n<li>在 Linux 中设置好 root 的密码： <code>sudo passwd</code> 。在根目录下创建 <code>win_data</code>  文件夹（名字其实随便）</li>\n<li>修改 <code>sshd_config</code>  文件，参考这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHVsaWFuZ3hpbmcvcC83NDI4NzM3Lmh0bWw=\">https://www.cnblogs.com/xuliangxing/p/7428737.html</span></li>\n<li>在 windos 下载好需要的文件</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/28/29425736a49aebd9.jpg\" alt=\"\" /></p>\n<ul>\n<li>下载 pscp：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hpYXJrLmdyZWVuZW5kLm9yZy51ay9+c2d0YXRoYW0vcHV0dHkvbGF0ZXN0Lmh0bWw=\">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</span></li>\n<li>将 <code>pscp.exe</code>  放在 C:\\Windows\\System32 文件夹下</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/28/0879d6517d9f457d.jpg\" alt=\"\" /></p>\n<ul>\n<li>在 C:Windows\\System32 下打开命令行，输入：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scp</span> 下载文件路径 root@IP:/win_data</pre></td></tr></table></figure><p>输入密码后就可以传输了，这里必须要使用 root，使用一般用户的话，权限不够会拒绝访问。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/28/6d1d04a4f34aac95.jpg\" alt=\"\" /></p>\n<ul>\n<li>最后在 <code>/win_data</code>  目录里解压压缩包就可以使将其挂载到 nginx 上了</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">unzip</span> Arsha.zip</pre></td></tr></table></figure><h2 id=\"容器数据共享\"><a class=\"anchor\" href=\"#容器数据共享\">#</a> 容器数据共享</h2>\n<blockquote>\n<p>容器与容器之间的数据共享</p>\n</blockquote>\n<p>一般思路是在宿主主机上创建公告目录，让需要共享的容器挂载到这个公共目录。也可以创建一个容器专门用于存放数据，即数据卷容器。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">-v</span> ~/test:/root/test <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>data_test ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> --volumes-from data_test ubuntu</pre></td></tr></table></figure><p>使用 <code>--volumes-from</code>  指定另一个容器，数据卷容器挂载的内容，在当前容器也存在，就算数据卷容器被删除，也不会影响这边，本质上还是让两个容器挂载了同样的目录实现数据共享。</p>\n<p>还可以将数据完全放到容器中，通过构建一个容器将打包好的数据分享给其他容器</p>\n<pre><code class=\"language-Dockerfile\">FROM ubuntu\nADD data.tar.gz /usr/share/nginx/html\nVOLUME /usr/share/nginx/html\n</code></pre>\n<p>指令 ADD，它跟 COPY 命令类似，也可以复制文件到容器中，但是它可以自动对压缩文件进行解压，这里只需要将压缩好的文件填入即可，后面的 VOLUME 指令就像我们使用 <code>-v</code>  参数一样，会创建一个挂载点在容器中</p>\n<p>然后构建</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> 镜像名 <span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>通过这个镜像创建按出来的容器，我们就可以使用了（假设容器名是 ubuntu_test）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 --volumes-from<span class=\"token operator\">=</span>ubuntu_test <span class=\"token parameter variable\">-d</span> nginx</pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Linux 文件挂载：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWljb2Rlci5uZXQvbGludXgvbGludXgtZmlsZS1tb3VudC5odG1s\">https://haicoder.net/linux/linux-file-mount.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmJzbWF4LmNvbS9BL2dWZG5PS1A4elcv\">https://www.bbsmax.com/A/gVdnOKP8zW/</span></p>\n<p>修改 sshd_config 文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veHVsaWFuZ3hpbmcvcC83NDI4NzM3Lmh0bWw=\">https://www.cnblogs.com/xuliangxing/p/7428737.html</span></p>\n<p>前端模板：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ib290c3RyYXBtYWRlLmNvbS8=\">https://bootstrapmade.com/</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/24/Docker/Docker(5)-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/",
            "url": "https://cecilia.cool/2022/09/24/Docker/Docker(5)-%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/",
            "title": "Docker(5)--网络配置",
            "date_published": "2022-09-24T04:28:58.000Z",
            "content_html": "<h1 id=\"docker默认网桥\"><a class=\"anchor\" href=\"#docker默认网桥\">#</a> Docker 默认网桥</h1>\n<p>安装 Docker 服务会默认创建一个 docker0 网桥，它在内核层连通了其他的物理或虚拟网卡，这就<strong>将所有容器和本地主机都放到同一个物理网络</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/26/6cd3d7a5835ed737.jpg\" alt=\"\" /></p>\n<p>容器有三种网络类型，分别是 <code>bridge</code> , <code>host</code> , <code>none</code> ，创建容器时默认是 <code>bridge</code> 。我们可以使用命令查看</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network <span class=\"token function\">ls</span></pre></td></tr></table></figure><p>先创建一个容器再来讲解</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">apt</span> update</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> net-tools iputils-ping <span class=\"token function\">curl</span></pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/26/30f79fa9a2b0bfe5.jpg\" alt=\"\" /></p>\n<p>可以看到这个容器的 <code>IP</code>  是 <code>172.17.0.3</code> 。该 ubuntu 容器启动时没有指定网络类型，默认就是 <code>bridge</code> ，我们看一下 <code>bridge</code>  的网络</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@w2d:~$ <span class=\"token function\">docker</span> network inspect bridge</pre></td></tr></table></figure><p>看关键部分</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"Config\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">\"Subnet\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"172.17.0.0/16\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">\"Gateway\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"172.17.0.1\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><blockquote>\n<p>我的终端倒是没有显示 Gateway 网关，这个其实就是 docker0 的 IP，我们创建的容器默认就是通过 docker0 桥接宿主机的网络。</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/26/726c5b32968c34d6.jpg\" alt=\"\" /></p>\n<h2 id=\"创建容器\"><a class=\"anchor\" href=\"#创建容器\">#</a> 创建容器</h2>\n<p>Docker 在创建一个容器的时候，会执行如下操作：</p>\n<ul>\n<li>\n<p>创建一对虚拟接口 / 网卡，也就是 veth pair，分别放到本地主机和新容器中；</p>\n</li>\n<li>\n<p>本地主机一端桥接到默认的 docker0 或指定网桥上，并具有一个唯一的名字，如 vethxxxxx；</p>\n</li>\n<li>\n<p>容器一端放到新容器中，并修改名字作为 eth0，这个网卡 / 接口只在容器的名字空间可见；</p>\n</li>\n<li>\n<p>从网桥可用地址段中（也就是与该 bridge 对应的 network）获取一个空闲地址分配给容器的 eth0，并配置默认路由到桥接网卡 vethxxxx。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果不指定 --network，创建的容器默认都会挂到 docker0 上，使用本地主机上 docker0 接口的 IP 作为所有容器的默认网关</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/26/324896ddff4fdafc.jpg\" alt=\"\" /></p>\n<h1 id=\"网络类型\"><a class=\"anchor\" href=\"#网络类型\">#</a> 网络类型</h1>\n<h2 id=\"默认网络类型\"><a class=\"anchor\" href=\"#默认网络类型\">#</a> 默认网络类型</h2>\n<p>之前使用 <code>docker network ls</code>  查看三种网络类型，有 <code>bridge</code> ， <code>host</code> ， <code>none</code> 。，使用 <code>--network</code>  可以指定网络</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--network</span><span class=\"token operator\">=</span>none ubuntu</pre></td></tr></table></figure><ul>\n<li><strong>none 网络</strong>：只有一个本地环回网络，通过 <code>ifconfig</code>  查看，只有一个本地环回 <code>lo</code>  网络设备：</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/26/ba906a10862142e3.jpg\" alt=\"\" /></p>\n<p>在这种网络模式下，容器无法连接到互联网：比如， <code>ping</code>  不通，纯纯单机运行。</p>\n<ul>\n<li><strong>bridger 网络</strong>：容器默认使用的网络类型，上文我们已经讲了，此处不再赘述。</li>\n<li><strong>host 网络</strong>：当容器连接到此网络，会共享宿主主机的网络，网络配置是完全一样。</li>\n</ul>\n<h2 id=\"自定义网络类型\"><a class=\"anchor\" href=\"#自定义网络类型\">#</a> 自定义网络类型</h2>\n<p>Docker 默认提供三种网络驱动： <code>bridge</code> 、 <code>overlay</code> 、 <code>macvlan</code> ，不同的驱动对应着不同的网络设备驱动，实现的功能也不一样，比如 bridge 类型的，其实就和我们前面介绍的桥接网络是一样的。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network create <span class=\"token parameter variable\">--driver</span> bridge <span class=\"token builtin class-name\">test</span></pre></td></tr></table></figure><p>这就是本文最开始的 <code>ifconfig</code>  多显示了一个网络设备，不同网络之间的通信是相互隔离的，无法进行通信，比如我们有一个在默认网络类型的 ubuntu 容器，有一个在 test 网络下的 ubuntu 容器，后者的网关是 <code>172.18.0.1</code> ，容器 IP 为 <code>172.18.0.2</code> ，在前者中想要执行命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ping</span> <span class=\"token number\">172.18</span>.0.2</pre></td></tr></table></figure><p>会失败，想要实现通信，需要将前者连接到另一个容器所属的网络下：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network connect test<span class=\"token punctuation\">(</span>网络类型<span class=\"token punctuation\">)</span> 容器ID/名称</pre></td></tr></table></figure><p>此时容器就可以互相通信。Docker 的 DNS 服务器可以不需要指定容器 IP，比如有两个可以互相通信的容器，在启动时分别用 <code>--name</code>  指定名称，通信时就可以使用名称而不是 IP（就像有一个 DNS 一样将名字解析成 IP）</p>\n<p>两个容器也可以共享一个网络设备，即两个容器共同使用一个 IP 地址，只需要在创建时指定：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>test02 <span class=\"token parameter variable\">--network</span><span class=\"token operator\">=</span>container:test02 ubuntu</pre></td></tr></table></figure><p>两个容器的 IP 地址和网卡的 Mac 地址是完全一样的，它们的网络现在是共享状态，此时在容器中访问，localhost，既是自己也是别人。</p>\n<p>可以在容器 1 中，安装 Nginx，然后再容器 2 中访问：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> systemctl nginx</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> systemctl start nginx</pre></td></tr></table></figure><p>访问到另一个容器中的 Nginx 服务器。</p>\n<blockquote>\n<p>另外两种类型的网络用于多主机通信，多主机通信会使用物理交换机，不同主机的网卡连接到同一台交换机，就相当于各自网桥在同一物理网络了。</p>\n</blockquote>\n<h2 id=\"容器外部网络\"><a class=\"anchor\" href=\"#容器外部网络\">#</a> 容器外部网络</h2>\n<p>在默认的三种的网络下，只有共享模式和桥接模式可以连接到外网，共享模式实际上就是直接使用宿主主机的网络设备连接到互联网，这里主要来看一下桥接模式。</p>\n<blockquote>\n<p>桥接模式容器发送数据包时，关键部分就是 NAT (Netwirk Address Translation)，将地址进行转换，再利用宿主主机的 IP 地址发送数据包出去。</p>\n</blockquote>\n<p>比如我们要访问互联网上的某个资源，要和服务器进行通信，那么就需要将数据包发送出去，同时服务器也要将数据包发送回来，我们可以知道服务器的 IP 地址，也可以直接去连接，因为服务器的 IP 地址是暴露在互联网上的，但是我们的局域网就不一样了，它仅仅局限在我们的家里，比如我们连接了家里的路由器，可以得到一个 IP 地址，但是你会发现，这个 IP 公网是无法直接访问到我们的，因为这个 IP 地址仅仅是一个局域网的 IP 地址，俗称内网 IP。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/27/dab39643f8e2041e.jpg\" alt=\"\" /></p>\n<p>这里就借助了 NAT 在帮助我们与互联网上的服务器进行通信，通过 NAT，可以实现将局域网的 IP 地址，映射为对应的公网 IP 地址，而 NAT 设备一端连接外网，另一端连接内网的所有设备，当我们想要与外网进行通信时，就可以将数据包发送给 NAT 设备，由它来将数据包的源地址映射为它在外网上的地址，这样服务器就能够发现它了，能够直接与它建立通信。当服务器发送数据回来时，也是直接交给 NAT 设备，然后再根据地址映射，转发给对应的内网设备（当然由于公网 IP 地址有限，所以一般采用 IP + 端口结合使用的形式 ANPT）。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/27/e05a018b5df6da55.jpg\" alt=\"\" /></p>\n<p>用百度查出来的 IP 和在命令行使用 <code>ipconfig(windows)</code>  查出来的不一样，前者是 NAT 设备的公网地址。</p>\n<p>Docker 中，内网数据包想要发送到互联网上的流程为：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/27/e4ebfbc4ba947097.jpg\" alt=\"\" /></p>\n<p>单纯依靠 NAT，只有主动与外界联系时，外界才知道我们。但是如果容器中部署了一些服务，需要外界主动连接容器的服务，就需要使用端口映射配置。</p>\n<blockquote>\n<p>外界连接，只知道 linux 的 IP 而不知道容器的 IP，就需要通过端口映射访问。端口映射可以将容器需要对外提供服务的端口映射到宿主主机的端口上，这样，当外部访问到宿主主机的对应端口时，就会直接转发给容器内映射的端口了。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 先部署一个 nginx 服务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 nginx</pre></td></tr></table></figure><p><code>-p</code>  参数是进行端口映射配置，规则为 <code>宿主端口:容器端口</code> ，其实关于端口映射之前的文章已经讲过了。</p>\n<p>然后在浏览器中输入： <code>Linux IP:80</code>  即可访问 nignx 服务。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2b3BzL2RvY2tlci9kb2NrZXItMDctbmV0d29yay5odG1s\">https://pdai.tech/md/devops/docker/docker-07-network.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvendoa3BpL2txNnJsZyM2N2ZiOTdlYQ==\">https://www.yuque.com/qingkongxiaguang/zwhkpi/kq6rlg#67fb97ea</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXQxMzUyLmNvbS8yMDUyODkyLmh0bWw=\">https://www.it1352.com/2052892.html</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/24/Docker/Docker(4)-webapp%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/",
            "url": "https://cecilia.cool/2022/09/24/Docker/Docker(4)-webapp%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/",
            "title": "Docker(4)--webapp应用实例",
            "date_published": "2022-09-24T03:34:17.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>本文通过 web 应用展示主机如何与 wen 容器之间通信，为后续讲解网络提供基础。</p>\n<h1 id=\"web的运行与访问\"><a class=\"anchor\" href=\"#web的运行与访问\">#</a> web 的运行与访问</h1>\n<h2 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h2>\n<blockquote>\n<p>找到一个 webapp 镜像即可。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull training/webapp</pre></td></tr></table></figure><p>下载完成后查看</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> images <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> webapp</pre></td></tr></table></figure><blockquote>\n<p>我们需要跑一下这个 webapp 里面的 app.py 文件，其实就是 hello world</p>\n</blockquote>\n<p>启动 webapp</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-P</span> training/webapp python app.py</pre></td></tr></table></figure><blockquote>\n<p><code>-d</code> ：让容器在后台运行</p>\n<p><code>-P</code> ：将容器内部使用的网络端口映射到主机上</p>\n</blockquote>\n<p>查看一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@w2d:~$ <span class=\"token function\">docker</span> <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>CONTAINER ID          PORTS                                   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>e7a994ce697c     <span class=\"token number\">0.0</span>.0.0:49153-<span class=\"token operator\">></span><span class=\"token number\">5000</span>/tcp, :::49153-<span class=\"token operator\">></span><span class=\"token number\">5000</span>/tcp</pre></td></tr></table></figure><p>这里因为界面显示不够，我就只保留了 ID 和端口号的相关信息。</p>\n<h2 id=\"访问\"><a class=\"anchor\" href=\"#访问\">#</a> 访问</h2>\n<p>上文端口号的解读是：Docker 开放 5000 端口（Python Flask 默认端口）映射到主机端口 49153.</p>\n<p>所以我们可以从 49153 这个端口来访问这个界面</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">netstat</span> <span class=\"token parameter variable\">-nltp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">49153</span></pre></td></tr></table></figure><blockquote>\n<p><code>netstat</code>  命令用于显示网络状态</p>\n</blockquote>\n<p>在命令行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> localhost:49153</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者在浏览器上访问，ip 是虚拟机 - Ubuntu 的 ip</span></pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/24/1d9b4aa085083f9e.jpg\" alt=\"\" /></p>\n<p>容器映射到主机的端口是随机的，但是可以用 - P 选项来指定端口</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-P</span> <span class=\"token number\">5001</span>:500 training/webapp python app.py</pre></td></tr></table></figure><blockquote>\n<p>如果浏览器访问不上，把镜像删了重新下载试试，反正是可以的</p>\n</blockquote>\n<h1 id=\"其他功能\"><a class=\"anchor\" href=\"#其他功能\">#</a> 其他功能</h1>\n<blockquote>\n<p>反正都是命令，快速过一下</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看容器 (映射) 端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> port ID</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看日志</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> logs ID</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 查看容器进程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">top</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 检查应用底层信息，返回 JSON 文件记录</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 容器配置和状态信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">docker</span> inspect ID</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 停止应用容器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">docker</span> stop ID</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># 重启容器</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">docker</span> restart/start ID</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># 移除容器，-f 就是强制删除，一般容器删除需要 </span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> ID</pre></td></tr></table></figure><h2 id=\"容器互联\"><a class=\"anchor\" href=\"#容器互联\">#</a> 容器互联</h2>\n<blockquote>\n<p>删除所有不再使用的容器： <code>docker container prune</code> 。</p>\n</blockquote>\n<p>创建数据库容器：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--name</span> db training/postgres</pre></td></tr></table></figure><p>db 容器与 web 容器建立互联关系</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-P</span> <span class=\"token number\">5001</span>:5000 <span class=\"token parameter variable\">--name</span> web <span class=\"token parameter variable\">--link</span> db:db training/webapp python app.py</pre></td></tr></table></figure><p><code>--link</code>  参数格式为  <code>--link name:alias</code> ，其中 name 是要链接的容器的名称，alias 是这个连接的别名。</p>\n<p>容器之间的连接信息的查看有两种方式：</p>\n<ul>\n<li>查看环境变量：</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># webapp 已经运行起来了，假设其名字为 web</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> web /bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># ====>，这里假设 ID 是 1cbc9aeba2a8</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>root@1cbc9aeba2a8:/opt/webapp<span class=\"token comment\"># env</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">DB_NAME</span><span class=\"token operator\">=</span>/web/db</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">DB_PORT_5432_TCP_ADDR</span><span class=\"token operator\">=</span><span class=\"token number\">172.17</span>.0.2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">DB_PORT</span><span class=\"token operator\">=</span>tcp://172.17.0.2:5432</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token assign-left variable\">DB_PORT_5432_TCP</span><span class=\"token operator\">=</span>tcp://172.17.0.2:5432</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">PWD</span></span><span class=\"token operator\">=</span>/opt/webapp</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token assign-left variable\">DB_PORT_5432_TCP_PORT</span><span class=\"token operator\">=</span><span class=\"token number\">5432</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">SHLVL</span></span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/root</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token assign-left variable\">DB_PORT_5432_TCP_PROTO</span><span class=\"token operator\">=</span>tcp</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token assign-left variable\">DB_ENV_PG_VERSION</span><span class=\"token operator\">=</span><span class=\"token number\">9.3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token assign-left variable\">_</span><span class=\"token operator\">=</span>/usr/bin/env</pre></td></tr></table></figure><blockquote>\n<p>DB_ 开头的环境变量是供 web 容器连接 db 容器使用，前缀采用大写的连接别名。<strong>只有在建立连接之后才会有，没有建立连接是没有这几个变量的</strong>。</p>\n</blockquote>\n<ul>\n<li>hosts 文件</li>\n</ul>\n<p>除了环境变量，Docker 还添加 host 信息到父容器的  <code>/etc/hosts</code>  的文件。下面是父容器 web 的 hosts 文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>root@1cbc9aeba2a8:/opt/webapp<span class=\"token comment\"># cat /etc/hosts</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">127.0</span>.0.1       localhost</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>::1     localhost ip6-localhost ip6-loopback</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fe00::0 ip6-localnet</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ff00::0 ip6-mcastprefix</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>ff02::1 ip6-allnodes</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>ff02::2 ip6-allrouters</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">172.17</span>.0.2      db d992e3c761e0</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">172.17</span>.0.3      1cbc9aeba2a8</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>root@1cbc9aeba2a8:/opt/webapp<span class=\"token comment\">#</span></pre></td></tr></table></figure><p>这里有 2 个 hosts:</p>\n<ul>\n<li>第一个， <code>172.17.0.2 db d992e3c761e0</code>  表示 db 容器的 ip, ID 和 Name</li>\n<li>第二个， <code>172.17.0.3 1cbc9aeba2a8</code>  表示 web 容器的 ip, ID</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>netstat 命令：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLW5ldHN0YXQuaHRtbD9pdmtfc2E9MTAyNDMyMHU=\">https://www.runoob.com/linux/linux-comm-netstat.html?ivk_sa=1024320u</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2b3BzL2RvY2tlci9kb2NrZXItMDMtYmFzaWMtd2ViLWFwcC5odG1s\">https://pdai.tech/md/devops/docker/docker-03-basic-web-app.html</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/22/Docker/Docker(3)-%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E4%B8%8E%E5%8F%91%E5%B8%83/",
            "url": "https://cecilia.cool/2022/09/22/Docker/Docker(3)-%E9%95%9C%E5%83%8F%E6%9E%84%E5%BB%BA%E4%B8%8E%E5%8F%91%E5%B8%83/",
            "title": "Docker(3)--镜像构建与发布",
            "date_published": "2022-09-22T02:46:18.000Z",
            "content_html": "<h1 id=\"构建镜像\"><a class=\"anchor\" href=\"#构建镜像\">#</a> 构建镜像</h1>\n<p>有些冷门的软件不在远程仓库里，此时就需要手动安装。我们以 Ubuntu 的 base 镜像中安装 Java 环境，并将其打包成新的镜像（这个新的镜像就是一个包含 Java 环境的 Ubuntu 系统镜像）。</p>\n<p>拉取启动 Ubuntu：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull ubuntu</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> ubuntu</pre></td></tr></table></figure><p>更新 apt（因为只有 base 镜像）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> update</pre></td></tr></table></figure><blockquote>\n<p>这一步我之前换不换源都会出错，反正就是更新失败，后来折腾了两三天，都没什么效果。最后把 wifi 换成热点就更新成功了。所以你如果更新失败，可以试着检查一下网络问题。</p>\n<p>也不用怀疑版本问题，本人用 Ubuntu 15 和 Ubuntu22 都更新成功过。</p>\n</blockquote>\n<p>安装 <code>jdk</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> <span class=\"token function\">install</span> openjdk-8-jdk</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果 apt 更新失败，后面的也会失败</span></pre></td></tr></table></figure><p>退出容器，将其构建为新的镜像，使用 commit 将容器保存为新的镜像：</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker commit 容器名称/ID 新的镜像名称</pre></td></tr></table></figure><p>此时再使用 <code>docker images</code>  就可以看到新构建的镜像了。</p>\n<blockquote>\n<p>但是这种构建方式 Docker 官方并不推荐。普通用户可以使用 Dockerfile 构建上述镜像</p>\n</blockquote>\n<p>创建名为 <code>Dockerfile</code>  的文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> Dockerfile</pre></td></tr></table></figure><p>我们需要在 <code>Dockerfile</code>  文件内部编写指令来告诉 Docker 需要构建镜像的相关信息</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> &lt;基础镜像></span></pre></td></tr></table></figure><p><code>FROM</code>  指令选择当前镜像的基础镜像（必须以该指令开始）。如果不需要任何基础镜像，使用 <code>scratch</code>  表示从零开始基础构建。</p>\n<p>在容器中运行命令安装 Java 环境</p>\n<figure class=\"highlight dockerfile\"><figcaption data-lang=\"Docker\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt update</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt install -y openjdk-8-jdk</span></pre></td></tr></table></figure><p>构建：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> <span class=\"token operator\">&lt;</span>镜像名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>构建目录<span class=\"token operator\">></span></pre></td></tr></table></figure><p>执行后，Docker 会在构建目录中寻找 Dockerfile 文件，然后开始依次执行 Dockerfile 中的指令：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/23/97bff6ac9d64700f.jpg\" alt=\"\" /></p>\n<p>每一个指令都会在镜像上创建一个新的层， <code>-t</code>  指定要创建的目标镜像名， <code>.</code>  是 Dockerfile 所在目录。</p>\n<h1 id=\"发布镜像\"><a class=\"anchor\" href=\"#发布镜像\">#</a> 发布镜像</h1>\n<p>我们可以将镜像上传到：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yZXBvc2l0b3JpZXM=\">https://hub.docker.com/repositories</span></p>\n<p>先在 hub.docker.com 上创建公共的镜像仓库，再将本地镜像上传，上传前可以将镜像名称修改规范：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> tag ubuntu-java-file:latest 用户名/仓库名称:版本</pre></td></tr></table></figure><p>然后本地上传：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> push nagocoler/ubuntu-java:1.0</pre></td></tr></table></figure><blockquote>\n<p>这里参考的青空の霞光的用户名 nagocoler 和仓库名 ubuntu-java</p>\n</blockquote>\n<p>公共仓库是可以被搜索和下载的，搜索使用 <code>search</code>  命令即可：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> search nagocoler/ubuntu-java</pre></td></tr></table></figure><p>再使用 pull 命令下载：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> pull nagocoler/ubuntu-java:1.0</pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvendoa3BpL2txNnJsZw==\">https://www.yuque.com/qingkongxiaguang/zwhkpi/kq6rlg</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2b3BzL2RvY2tlci9kb2NrZXItMDMtYmFzaWMyLmh0bWw=\">https://pdai.tech/md/devops/docker/docker-03-basic2.html</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/21/Docker/Docker(2)-%E9%95%9C%E5%83%8F%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/09/21/Docker/Docker(2)-%E9%95%9C%E5%83%8F%E5%9F%BA%E7%A1%80/",
            "title": "Docker(2)--镜像基础",
            "date_published": "2022-09-21T11:56:42.000Z",
            "content_html": "<h1 id=\"hello-world\"><a class=\"anchor\" href=\"#hello-world\">#</a> hello-world</h1>\n<p>要使用那些容器，首先需要拉取镜像到本地仓库，然后再运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 拉取 hello-world</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> pull hello-world:latest</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看本地仓库的镜像</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> images</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 在容器中运行 hello-world 实例</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token punctuation\">(</span>--name<span class=\"token operator\">=</span>XXX<span class=\"token punctuation\">)</span> hello-world</pre></td></tr></table></figure><blockquote>\n<p>拉取指定版本的镜像： <code>docker pull 名称:版本</code> ，默认是最新版本。run 命令 hi 自动给容器分配名称，也可以使用唯一名称指定。</p>\n</blockquote>\n<p>如果没有调整 docker 的镜像源，那么 docker 就是从<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\"> Docker Hub</span> 拉取的镜像到本地仓库。也可直接使用 <code>run</code>  来运行实例，如果本地仓库没有这个实例，那么就会从远端拉取镜像到仓库中。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/21/6378a12818c5974f.jpg\" alt=\"\" /></p>\n<blockquote>\n<p><code>docker images</code>  的结果有一列是 ID，如果希望删除一个镜像： <code>docker rmi -f  &lt;ID&gt;</code> 。</p>\n</blockquote>\n<p>Docker 允许在容器内运行应用程序： <code>docker run</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> run centos:latest /bin/echo <span class=\"token string\">\"Hello world\"</span></pre></td></tr></table></figure><p>如果本地仓库没有 centos 的镜像，那么就会先拉取 centos 镜像。看一下参数的含义：</p>\n<ul>\n<li>\n<p><code>docker</code> : Docker 的二进制执行文件。</p>\n</li>\n<li>\n<p><code>run</code> : 与前面的 docker 组合来运行一个容器。</p>\n</li>\n<li>\n<p><code>ubuntu:latest</code>  指定要运行的镜像，Docker 首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像。</p>\n</li>\n<li>\n<p><code>/bin/echo &quot;Hello world&quot;</code> : 在启动的容器里执行的命令</p>\n</li>\n</ul>\n<blockquote>\n<p>吐槽：我这拉取 centos 镜像文件好慢。。。</p>\n</blockquote>\n<p>如果我们只是想创建容器而不是去运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> create hello-world</pre></td></tr></table></figure><p>如果想要查看<strong>所有容器</strong>（不论是否运行）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># linux 的 ps 是查看进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 不加 - a 就只能查看运行的容器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span></pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/21/7bcf577b1cbd289f.jpg\" alt=\"\" /></p>\n<p>想要停止或者删除容器，就需要使用 ID 或者 NAMES 来指定容器，关于容器的相关操作：</p>\n<ul>\n<li>\n<p>删除容器： <code>docker rm &lt;容器名/ID&gt;</code> 。</p>\n</li>\n<li>\n<p>停止容器： <code>docker stop &lt;XXX&gt;</code> 。</p>\n</li>\n<li>\n<p>运行停止的容器： <code>docker start &lt;XXX&gt;</code> 。因为有些容器是执行完后马上停止，而不是像服务器那样阻塞从而一直保持运行状态。</p>\n</li>\n<li>\n<p>重启容器： <code>docker restart &lt;XXX&gt;</code> 。</p>\n</li>\n<li>\n<p>停止后自动删除： <code>docker run --rm &lt;XXX&gt;</code> 。</p>\n</li>\n</ul>\n<p>在指定 ID 时，可以不用将 ID 完整打出来，只要前面一部分能够<strong>唯一标识</strong>该容器即可。</p>\n<blockquote>\n<p>该部分通过 hello-world 的例子讲解了一些命令和容器操作</p>\n</blockquote>\n<h1 id=\"镜像结构\"><a class=\"anchor\" href=\"#镜像结构\">#</a> 镜像结构</h1>\n<p>先回顾一下镜像，容器与仓库的关系，这是官网的图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/21/8ef2d678187a6499.jpg\" alt=\"\" /></p>\n<p>可以看到，容器的建立（实例化）依赖于镜像，项目打包需要一个基本的操作系统环境，这样才能在操作系统中安装依赖，这种基本的系统镜像，叫做<strong> base 镜像</strong>。一般 base 镜像就是各个 Linux 操作系统的发行版。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果你执行过上面的 centos 的 hello world</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 就不需要再执行该语句</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> pull centos</pre></td></tr></table></figure><p>这就是 centos 的 base 镜像，<strong>base 镜像省去了内核</strong>，内存很小。<img data-src=\"https://s3.bmp.ovh/imgs/2022/09/21/2ccdcf9b038c620c.png\" alt=\"\" /></p>\n<h2 id=\"base镜像机制\"><a class=\"anchor\" href=\"#base镜像机制\">#</a> base 镜像机制</h2>\n<p><strong>Linux 操作系统</strong>有内核空间和用户空间组成，这里需要了解两个文件系统：</p>\n<ul>\n<li>bootfs 包含 BootLoader 和 Linux 内核，在内核启动后，bootfs 会自动卸载。</li>\n<li>rootfs 包含系统常见目录结构，包括 <code>/dev</code> ， <code>/bin</code>  等以及一些基本的文件和命令。</li>\n</ul>\n<p><strong>base 镜像底层会直接使用宿主主机的内核</strong>，而 rootfs 可以在不同容器中运行多种不同的版本，所以实际上 base 镜像只包含 CentOS 的 rootfs。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># uname 查看内核版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-r</span></pre></td></tr></table></figure><p>因此，Docker 能够同时模拟多种 Linux 操作系统环境。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 启动 base 镜像</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-it</span> centos</pre></td></tr></table></figure><p>参数 <code>-it</code>  进行启动，其中 <code>-i</code>  表示在容器上打开一个标准输入（STDIN）接口， <code>-t</code>  表示分配一个伪 tty 设备，可以支持终端登录（理解为伪终端），一般这两个是一起使用，否则 base 容器启动后就自动停止了。</p>\n<blockquote>\n<p>两个合起来的意思就是会弹出一个可以标准输入的终端提示符。</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/21/e0ad3e663ad0fd3e.jpg\" alt=\"\" /></p>\n<p>使用 <code>exit</code>  退出后（<strong>CTRL+D 也可以</strong>），容器也会停止，再次启动时，<strong>需要加上 <code>-i</code>  参数才能输入进行交互，否则就是后台运行</strong>。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> start <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span>容器ID<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"安装镜像\"><a class=\"anchor\" href=\"#安装镜像\">#</a> 安装镜像</h2>\n<p>前面提到为什么需要一个基本的操作系统，基于 base 镜像，我们可以在这基础上安装各种软件，使用分层结构，每安装一个软件，就在 base 镜像上叠加上去。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/21/2600c8683f6fa6f4.jpg\" alt=\"\" /></p>\n<p>** 所有的镜像会叠起来组成一个统一的文件系统，如果不同层中存在相同位置的文件，那么上层的会覆盖掉下层的文件，最终我们看到的是一个叠加之后的文件系统。** 当需要修改容器中的文件时，实际上并不会对镜像进行直接修改，而是在最顶上的容器层（最上面一般称为容器层，下面都是镜像层）进行修改。</p>\n<p>各个操作如下：</p>\n<ul>\n<li>\n<p>文件读取：要读取一个文件，Docker 会<strong>最上层往下</strong>依次寻找，找到后则打开文件。</p>\n</li>\n<li>\n<p>文件创建和修改：创建新文件会直接添加到容器层中，修改文件会从上往下依次寻找各个镜像中的文件，如果找到，则将其复制到容器层，再进行修改。</p>\n</li>\n<li>\n<p>删除文件：删除文件也会从上往下依次寻找各个镜像中的文件，一旦找到，并不会直接删除镜像中的文件，而是在容器层标记这个删除操作。</p>\n</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2b3BzL2RvY2tlci9kb2NrZXItMDItYmFzaWMuaHRtbA==\">https://pdai.tech/md/devops/docker/docker-02-basic.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvendoa3BpL2txNnJsZyNhMzI3ZGRmMg==\">https://www.yuque.com/qingkongxiaguang/zwhkpi/kq6rlg#a327ddf2</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/20/Docker/Docker(1)-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/",
            "url": "https://cecilia.cool/2022/09/20/Docker/Docker(1)-%E5%AE%B9%E5%99%A8%E6%8A%80%E6%9C%AF%E5%85%A5%E9%97%A8/",
            "title": "Docker(1)--容器技术入门",
            "date_published": "2022-09-20T03:56:30.000Z",
            "content_html": "<h1 id=\"虚拟化技术\"><a class=\"anchor\" href=\"#虚拟化技术\">#</a> 虚拟化技术</h1>\n<p>Virtualization 是一种资源管理技术，将计算机各种实体资源（服务器，内存，网络）予以抽象，打破实体结构间不可切割的障碍，使用户可以更好的方式利用资源。从而实现在同一主机上运行多个系统或应用。</p>\n<p>软件虚拟化技术是利用软件技术，在现有的物理平台上实现对物理平台访问的截获和模拟。有些软件虚拟化技术需要依赖硬件支持，比如：VMware，KVM。</p>\n<p>Docker 就是软件虚拟化，软件虚拟化分为好几类，Docker 实际是操作系统层虚拟化。<strong>操作系统级虚拟化也被称为容器化</strong>，它允许多个相互隔离的用户空间实例存在，这些用户空间实例也被<strong>容器</strong>。</p>\n<blockquote>\n<p>普通的进程可以看到计算机所有资源而容器只能看到分配给该容器的资源</p>\n</blockquote>\n<p>实现操作系统虚拟化需要用到<strong> Namespace</strong> 及<strong> cgroups</strong> 技术。</p>\n<p>因为不是主要讲解虚拟化技术的底层实现，所以详细可以看这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC9rZWx2aW54dXB0L2Jsb2cvMTYwMjk5MA==\">操作系统级虚拟化概述</span>。</p>\n<h2 id=\"docker虚拟化\"><a class=\"anchor\" href=\"#docker虚拟化\">#</a> Docker 虚拟化</h2>\n<p>Docker 是一个开源的应用容器引擎，它让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到安装了任何 Linux 发行版本的机器上。Docker 是直接运行在宿主操作系统之上的一个容器（操作系统级别的虚拟化），<strong>所有容器用的都是宿主操作系统的内核</strong>。</p>\n<p>Docker 能快速搭建开发环境，并且每个容器相互隔离：我们只需要将这些环境打包成镜像，到需要在服务器上部署时，可以直接下载镜像实现一键部署。</p>\n<h2 id=\"docker与虚拟机区别\"><a class=\"anchor\" href=\"#docker与虚拟机区别\">#</a> Docker 与虚拟机区别</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/20/204f57e058964113.jpg\" alt=\"\" /></p>\n<p><strong>虚拟机</strong></p>\n<ul>\n<li>基础设施（Infrastructure）：个人电脑，服务器，云主机。</li>\n<li>主操作系统（Host Operating System）：基础设施上运行的 MacOS，Windows 或者某个 Linux 发行版。</li>\n<li>虚拟机管理系统（Hypervisor）：利用 Hypervisor，可以在主操作系统之上运行多个不同的从操作系统。类型 1 的 Hypervisor 有支持 MacOS 的 HyperKit，支持 Windows 的 Hyper-V 以及支持 Linux 的 KVM。类型 2 的 Hypervisor 有 VirtualBox 和 VMWare。</li>\n<li><strong>操作系统（Guest Operating System）</strong>：假设你需要运行 3 个相互隔离的应用，则需要使用 Hypervisor 启动 3 个从操作系统，也就是 3 个虚拟机。这些虚拟机都非常大，也许有 700MB，这就意味着它们将占用 2.1GB 的磁盘空间。更糟糕的是，它们还会消耗很多 CPU 和内存。</li>\n<li>各种依赖：每一个从操作系统都需要安装许多依赖。如果你的的应用需要连接 PostgreSQL 的话，则需要安装 libpq-dev；如果你使用 Ruby 的话，应该需要安装 gems；如果使用其他编程语言，比如 Python 或者 Node.js，都会需要安装对应的依赖库。</li>\n</ul>\n<p><strong>Docker 容器</strong></p>\n<ul>\n<li>主操作系统（Host Operating System）：所有主流的 Linux 发行版都可以运行 Docker。对于 MacOS 和 Windows，也有一些办法 &quot;运行&quot;Docker。</li>\n<li>Docker 守护进程（Docker Daemon）：Docker 守护进程取代了 Hypervisor，它是运行在操作系统之上的后台进程，<strong>负责管理 Docker 容器</strong>。</li>\n<li>各种依赖。对于 Docker，<strong>应用的所有依赖都打包在 Docker 镜像中，Docker 容器是基于 Docker 镜像创建的</strong>。</li>\n<li>应用。应用的源代码与它的依赖都打包在 Docker 镜像中，不同的应用需要不同的 Docker 镜像。不同的应用运行在不同的 Docker 容器中，它们是相互隔离的。</li>\n</ul>\n<blockquote>\n<p>Docker 守护进程可以直接与主操作系统进行通信，为各个 Docker 容器分配资源；它还可以将容器与主操作系统隔离，并将各个容器互相隔离。</p>\n</blockquote>\n<h1 id=\"docker架构\"><a class=\"anchor\" href=\"#docker架构\">#</a> Docker 架构</h1>\n<p>Docker 是 C/S 架构，通过远程 API 来管理和创建容器。</p>\n<p>客户端：客户端通过命令行或者其他工具使用 Docker SDK 和 Docker 守护进程通信。</p>\n<p>主机：物理或虚拟机器，用于执行 Docker 守护进程和容器。</p>\n<p>其他的基本概念：</p>\n<ul>\n<li>\n<p><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。</p>\n</li>\n<li>\n<p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\n</li>\n<li>\n<p><strong>仓库（Repository）</strong>：仓库可看着一个代码控制中心，用来保存镜像。</p>\n</li>\n</ul>\n<h1 id=\"docker安装\"><a class=\"anchor\" href=\"#docker安装\">#</a> Docker 安装</h1>\n<blockquote>\n<p>我使用的系统是 Ubuntu 20.04.3 版本</p>\n</blockquote>\n<p>先安装一些工具</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ca-certificates <span class=\"token function\">curl</span> gnupg lsb-release</pre></td></tr></table></figure><p>再安装官方的 GPG key：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> /etc/apt/keyrings</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> gpg <span class=\"token parameter variable\">--dearmor</span> <span class=\"token parameter variable\">-o</span> /etc/apt/keyrings/docker.gpg</pre></td></tr></table></figure><p>将 Docker 的库添加到 apt 资源列表中：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb [arch=<span class=\"token variable\"><span class=\"token variable\">$(</span>dpkg --print-architecture<span class=\"token variable\">)</span></span> signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu <span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release <span class=\"token parameter variable\">-cs</span><span class=\"token variable\">)</span></span> stable\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/docker.list <span class=\"token operator\">></span> /dev/null</pre></td></tr></table></figure><p>更新 apt：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update</pre></td></tr></table></figure><p>安装 Docker CE 版本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker-ce</pre></td></tr></table></figure><p>等待安装后，查看 Docker 版本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> <span class=\"token parameter variable\">--version</span></pre></td></tr></table></figure><p>但是我们使用了 sudo 命令（因为当前用户使用权限可能不足），所以需要将当前用户加入到 Docker 组里面</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">usermod</span> <span class=\"token parameter variable\">-aG</span> <span class=\"token function\">docker</span> <span class=\"token operator\">&lt;</span>用户名<span class=\"token operator\">></span></pre></td></tr></table></figure><p>退出 ssh 终端，重新连接即可生效。</p>\n<p>我们可以先看一下 Docker 这个组</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这里把提示符部分也写出来是为了展示一下我的用户名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">cat</span> /etc/group</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 最后一排：docker:x:998:cyan</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 我已经执行过 usermod 命令了，所以 docker 组有 cyan 这个用户</span></pre></td></tr></table></figure><p>关于详细的 Linux 组的知识，你可以参考这篇文章：<a href=\"https://cecilia.cool/2022/07/31/Shell/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/\">Linux 文件权限</a>。</p>\n<blockquote>\n<p>如果加入组后权限依然不够，执行： <code>newgrp docker</code> 。newgrp 命令是登入群组。</p>\n</blockquote>\n<p>前文提到 Docker 架构（C/S），现在部署 Nginx 服务器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span>:80 nginx</pre></td></tr></table></figure><p>会从镜像仓库里面下载对应的镜像，下载完成后就在后台运行了</p>\n<blockquote>\n<p>在浏览器的 url 中输入虚拟机 IP，就能看到 Nginx 启动了</p>\n</blockquote>\n<p>该命令流程：</p>\n<ol>\n<li>Docker 客户端将操作发送给服务端，告诉服务端我们要运行 nginx 这个镜像。</li>\n<li>Docker 服务端先看看本地有没有这个镜像，发现没有。</li>\n<li>接着只能从公共仓库 Docker Hub 去查找下载镜像了。</li>\n<li>下载完成，镜像成功保存到本地。</li>\n<li>Docker<strong> 服务端加载 Nginx 镜像</strong>，启动容器开始正常运行。</li>\n</ol>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2b3BzL2RvY2tlci9kb2NrZXItMDEtZG9ja2VyLXZtLmh0bWw=\">https://pdai.tech/md/devops/docker/docker-01-docker-vm.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3Vhbmcvendoa3BpL2txNnJsZw==\">https://www.yuque.com/qingkongxiaguang/zwhkpi/kq6rlg</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9teS5vc2NoaW5hLm5ldC9rZWx2aW54dXB0L2Jsb2cvMTYwMjk5MA==\">https://my.oschina.net/kelvinxupt/blog/1602990</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vamllLWZhbmcvcC8xMDI3OTYyOS5odG1s\">https://www.cnblogs.com/jie-fang/p/10279629.html</span></p>\n</blockquote>\n",
            "tags": [
                "Docker"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/19/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A/",
            "url": "https://cecilia.cool/2022/09/19/%E4%BA%91%E8%AE%A1%E7%AE%97/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%BD%9C%E4%B8%9A/",
            "title": "云计算作业",
            "date_published": "2022-09-19T07:30:33.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>用 MapReduce 实现 wordCount（单词计数）</p>\n<blockquote>\n<p>软件 2004-20207127 云计算作业</p>\n</blockquote>\n<h1 id=\"相关类\"><a class=\"anchor\" href=\"#相关类\">#</a> 相关类</h1>\n<h2 id=\"wordcountmapper\"><a class=\"anchor\" href=\"#wordcountmapper\">#</a> WordCountMapper</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntWritable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LongWritable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Mapper</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCountMapper</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LongWritable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LongWritable</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">String</span> line<span class=\"token operator\">=</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> words<span class=\"token operator\">=</span>line<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> word <span class=\"token operator\">:</span> words<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"wordcountreduce\"><a class=\"anchor\" href=\"#wordcountreduce\">#</a> WordCountReduce</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntWritable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Reducer</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCountReduce</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Reducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> total<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntWritable</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            total<span class=\"token operator\">+=</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        context<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">(</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"wordcountmain\"><a class=\"anchor\" href=\"#wordcountmain\">#</a> WordCountMain</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>example</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>conf<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Configuration</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>fs<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Path</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntWritable</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Text</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Job</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileInputFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapreduce<span class=\"token punctuation\">.</span>lib<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">FileOutputFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCountMain</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//1. 建立连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Configuration</span> cfg<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token class-name\">Job</span> job<span class=\"token operator\">=</span><span class=\"token class-name\">Job</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span>cfg<span class=\"token punctuation\">,</span><span class=\"token string\">\"wc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setJarByClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WordCountMain</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">//2. 指定 mapper 和 reduce</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WordCountMapper</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setReducerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WordCountReduce</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 指定 mapper 输出类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapOutputKeyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapOutputValueClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 指定 reduce 输出类型</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputKeyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        job<span class=\"token punctuation\">.</span><span class=\"token function\">setMapOutputValueClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 指定输出路径</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">FileInputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInputPaths</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"S:/test/data.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">FileOutputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOutputPath</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"S:/test/M\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">//3. 运行</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">boolean</span> result<span class=\"token operator\">=</span>job<span class=\"token punctuation\">.</span><span class=\"token function\">waitForCompletion</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">?</span><span class=\"token string\">\"成功\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"失败\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">?</span><span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"运行结果\"><a class=\"anchor\" href=\"#运行结果\">#</a> 运行结果</h1>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/19/fc49e140e301e8d5.jpg\" alt=\"\" /></p>\n",
            "tags": [
                "云计算"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/15/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(5)-Http%E5%8D%8F%E8%AE%AE%E9%80%9A%E4%BF%A1/",
            "url": "https://cecilia.cool/2022/09/15/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(5)-Http%E5%8D%8F%E8%AE%AE%E9%80%9A%E4%BF%A1/",
            "title": "Netty框架(5)--Http协议通信",
            "date_published": "2022-09-15T03:07:20.000Z",
            "content_html": "<h1 id=\"通信协议设计\"><a class=\"anchor\" href=\"#通信协议设计\">#</a> 通信协议设计</h1>\n<p>在 TCP 网络编程中，发送方和接收方的数据包格式都是二进制，发送方将对象转化成二进制流发送给接收方，接收方获得<strong>二进制数据</strong>后需要知道如何解析成对象。</p>\n<p>一个完备的网络协议需要具备以下基本要素</p>\n<h2 id=\"魔数\"><a class=\"anchor\" href=\"#魔数\">#</a> 魔数</h2>\n<p>作用是防止任何人随便向服务器端口发送数据。服务端在接收到数据时会解析出前几个固定字节的魔数做对比，如果和约定的魔数不匹配，就会认为是非法数据。</p>\n<p>魔数的思想在压缩算法，Java Class 文件就有魔数 <code>0XCAFFBABE</code> ，调侃为咖啡宝贝，在加载 Class 文件时就会首先验证魔数的正确性。</p>\n<h2 id=\"序列化算法\"><a class=\"anchor\" href=\"#序列化算法\">#</a> 序列化算法</h2>\n<p>序列化算法表示数据发送方应该用何种方法将请求的对象转化为二进制，以及如何将二进制转化为对象等，如 JSON，Hessian，Java 自带序列化等。</p>\n<blockquote>\n<p>可以从 Http 协议中看出，完整的网络协议还需要长度域字段，请求数据，状态，保留字段，报文类型，协议版本号等。</p>\n</blockquote>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------------+</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span> 魔数 <span class=\"token number\">2</span>byte <span class=\"token operator\">|</span> 协议版本号 <span class=\"token number\">1</span>byte <span class=\"token operator\">|</span> 序列化算法 <span class=\"token number\">1</span>byte <span class=\"token operator\">|</span> 报文类型 <span class=\"token number\">1</span>byte  <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------------+</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span> 状态 <span class=\"token number\">1</span>byte <span class=\"token operator\">|</span>        保留字段 <span class=\"token number\">4</span>byte     <span class=\"token operator\">|</span>      数据长度 <span class=\"token number\">4</span>byte     <span class=\"token operator\">|</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------------+</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>                   数据内容 （长度不定）                          <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">+</span><span class=\"token comment\">---------------------------------------------------------------+</span></pre></td></tr></table></figure><h1 id=\"实现http协议通信\"><a class=\"anchor\" href=\"#实现http协议通信\">#</a> 实现 Http 协议通信</h1>\n<p>需要使用到我们上一篇讲到的解码器和编码器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpRequestDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">//Http 请求解码器</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">// 看看是个啥类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到客户端的数据：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              \t<span class=\"token comment\">// 收到浏览器请求后，我们需要给一个响应回去</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">//HTTP 版本为 1.1，状态码就 OK（200）即可</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">FullHttpResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token class-name\">DefaultFullHttpResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpVersion</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HTTP_1_1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                            <span class=\"token class-name\">HttpResponseStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              \t<span class=\"token comment\">// 直接向响应内容中写入数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                response<span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeCharSequence</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                                     <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 发送响应</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//HTTP 请求是一次性的，所以记得关闭</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpResponseEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 响应记得也要编码后发送哦</span></pre></td></tr></table></figure><p>用浏览器访问一下</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/15/baca09d46ab8eb8c.jpg\" alt=\"\" /></p>\n<p>控制台打印的类型为：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">class<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span>DefaultHttpRequest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">class<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>neety<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span>LastHttpContent</span>$<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">class<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>netty<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span>DefaultHttpRequest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">class<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>neety<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>codec<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span>LastHttpContent</span>$<span class=\"token number\">1</span></pre></td></tr></table></figure><p>可以看到一次请求是一个 <code>DefaultHttpRequest</code> + <code>LastHttpContent$1</code> ，这里有两组是因为浏览器请求了一个地址后紧接着又请求了网站的 favicon 图标。</p>\n<p>如果不希望一次请求被拆分为两个，可以在 <code>HttpRequestDecoder</code>  后面加上聚合器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将内容聚合为一个 FullHttpRequest，参数是最大内容长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpObjectAggregator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>我们再改一下 channelRead 里的内容</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">FullHttpRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FullHttpRequest</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"浏览器请求路径：\"</span><span class=\"token operator\">+</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 直接获取请求相关信息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">FullHttpResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultFullHttpResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpVersion</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HTTP_1_1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                                            <span class=\"token class-name\">HttpResponseStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeCharSequence</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 浏览器总共发送了两次请求</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 浏览器请求路径：/</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 浏览器请求路径：/favicon.ico</span></pre></td></tr></table></figure><p>如果我们是请求服务器网页资源，需要自定义一个解析器（本质就是通过请求路径拿到相关资源）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PageResolver</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token comment\">// 直接单例模式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">PageResolver</span> <span class=\"token constant\">INSTANCE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PageResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PageResolver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">PageResolver</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">INSTANCE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \t<span class=\"token comment\">// 请求路径给进来，接着我们需要将页面拿到，然后转换成响应数据包发回去</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FullHttpResponse</span> <span class=\"token function\">resolveResource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 判断一下是不是正常的路径请求</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>             <span class=\"token comment\">// 如果是直接请求根路径，那就默认返回 index 页面，否则就该返回什么路径的文件就返回什么</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            path <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"index.html\"</span> <span class=\"token operator\">:</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>stream <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 拿到文件输入流之后，才可以返回页面</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>stream<span class=\"token punctuation\">.</span><span class=\"token function\">available</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    stream<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">packet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpResponseStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OK</span><span class=\"token punctuation\">,</span> bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token comment\">// 数据先读出来，然后交给下面的方法打包</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      \t<span class=\"token comment\">// 其他情况一律返回 404</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">packet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpResponseStatus</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                           <span class=\"token string\">\"404 Not Found!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  \t<span class=\"token comment\">// 包装成 FullHttpResponse，把状态码和数据写进去</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">FullHttpResponse</span> <span class=\"token function\">packet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpResponseStatus</span> status<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token class-name\">FullHttpResponse</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">DefaultFullHttpResponse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpVersion</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HTTP_1_1</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        response<span class=\"token punctuation\">.</span><span class=\"token function\">content</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>channelRead</code>  方法中使用该类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">FullHttpRequest</span> request <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">FullHttpRequest</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 请求进来了直接走解析</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">PageResolver</span> resolver <span class=\"token operator\">=</span> <span class=\"token class-name\">PageResolver</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>resolver<span class=\"token punctuation\">.</span><span class=\"token function\">resolveResource</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">uri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"其他内置handler\"><a class=\"anchor\" href=\"#其他内置handler\">#</a> 其他内置 Handler</h1>\n<p>Netty 内置了其他很有用的 Handler，比如日志打印</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpRequestDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpObjectAggregator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LoggingHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LogLevel</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INFO</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token comment\">// 添加一个日志 Handler，在请求到来时会自动打印相关日志</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>每次请求的内容和详细信息都会在日志中出现，包括详细的数据包解析过程，请求头信息都是完整地打印在控制台上的。</p>\n<p>还可以使用 Handler 对 IP 地址进行过滤，比如我们不希望某些 IP 地址连接我们的服务器：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpRequestDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpObjectAggregator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RuleBasedIpFilter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IpFilterRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InetSocketAddress</span> inetSocketAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>inetSocketAddress<span class=\"token punctuation\">.</span><span class=\"token function\">getHostName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              \t<span class=\"token comment\">// 进行匹配，返回 false 表示匹配失败</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              \t<span class=\"token comment\">// 如果匹配失败，那么会根据下面的类型决定该干什么，</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 比如这里判断是不是本地访问的，如果是那就拒绝</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">IpFilterRuleType</span> <span class=\"token function\">ruleType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">IpFilterRuleType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REJECT</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">// 类型，REJECT 表示拒绝连接，ACCEPT 表示允许连接</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>IdleStateHandler</code>  可以对空闲的连接进行处理（idle-- 闲置的）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">IdleStateHandler</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 侦测连接空闲状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 第一个参数表示连接多少秒没有读操作时触发事件，第二个是写操作，</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token comment\">// 第三个是读写操作都算，0 表示禁用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 事件需要在 ChannelInboundHandlerAdapter 中进行监听处理</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到客户端数据：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">userEventTriggered</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> evt<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token comment\">// 这个方法原来是在这个时候用的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>evt <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">IdleStateEvent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">IdleStateEvent</span> event <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IdleStateEvent</span><span class=\"token punctuation\">)</span> evt<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">IdleState</span><span class=\"token punctuation\">.</span><span class=\"token constant\">WRITER_IDLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"长时间没有写操作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">IdleState</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READER_IDLE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"长时间没有读操作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5saWFuZ2xpYW5nbGVlLmNvbS8lRTQlQjglOTMlRTYlQTAlOEYvTmV0dHklMjAlRTYlQTAlQjglRTUlQkYlODMlRTUlOEUlOUYlRTclOTAlODYlRTUlODklOTYlRTYlOUUlOTAlRTQlQjglOEUlMjBSUEMlMjAlRTUlQUUlOUUlRTglQjclQjUtJUU1JUFFJThDLzA3JTIwJTIwJUU2JThFJUE1JUU1JUE0JUI0JUU2JTlBJTk3JUU4JUFGJUFEJUVGJUJDJTlBJUU1JUE2JTgyJUU0JUJEJTk1JUU1JTg4JUE5JUU3JTk0JUE4JTIwTmV0dHklMjAlRTUlQUUlOUUlRTclOEUlQjAlRTglODclQUElRTUlQUUlOUElRTQlQjklODklRTUlOEQlOEYlRTglQUUlQUUlRTklODAlOUElRTQlQkYlQTElRUYlQkMlOUYubWQ=\">利用 Netty 实现自定义协议通信</span></p>\n<p>语雀・青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2lieDZ1ZyMzNzY1MzU4OA==\">https://www.yuque.com/qingkongxiaguang/javase/ibx6ug#37653588</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/14/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(4)-%E7%BC%96%E7%A0%81%E5%99%A8%E4%B8%8E%E8%A7%A3%E7%A0%81%E5%99%A8/",
            "url": "https://cecilia.cool/2022/09/14/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(4)-%E7%BC%96%E7%A0%81%E5%99%A8%E4%B8%8E%E8%A7%A3%E7%A0%81%E5%99%A8/",
            "title": "Netty(4)--编码器与解码器",
            "date_published": "2022-09-14T01:22:06.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>编解码器分为两部分，解码器负责入站（可以理解为将字节流转为原来的格式）；编码器负责出站。</p>\n<ul>\n<li>解码器负责入站操作，需要实现 <code>ChannelInboundHandler</code>  接口，解码器本质上也是 <code>ChannelInboundHandler</code> 。</li>\n<li>编码器负责出站操作，需要实现 <code>ChannelOutboundhandler</code>  接口，编码器本质上也是 <code>ChannelOutboundHandler</code> 。</li>\n</ul>\n<h1 id=\"解码器\"><a class=\"anchor\" href=\"#解码器\">#</a> 解码器</h1>\n<p>Netty 提供了一些常用的<strong>解码器</strong>，他们都继承了 <code>ByteToMessageDecoder</code>  类 ：</p>\n<ul>\n<li><code>RedisDecoder</code>  基于 Redis 协议的解码器。</li>\n<li><code>XmlDecoder</code>  基于 XML 格式的解码器。</li>\n<li><code>JosnObjectDecoder</code>  基于 json 数据格式的解码器</li>\n<li><code>HttpObjectDecoder</code> : 基于 http 协议的解码器</li>\n</ul>\n<p>Netty 也提供了 <code>MessageToMeMessageDecoder</code> ，将一种格式转化为另一种格式的解码器。下面的类都继承了该抽象类。</p>\n<ul>\n<li><code>StringDecoder</code>  将接收到 <code>ByteBuf</code>  转化字符串</li>\n<li><code>ByteArrayDecoder</code>  将接收到 <code>ByteBuf</code>  转化为字节数组</li>\n<li><code>Base64Decoder</code>  将由 <code>ByteBuf</code>  或 <code>US-ASCII</code>  字符串编码的 Base64 解码为 <code>ByteBuf</code> 。</li>\n</ul>\n<p>解码器本质就是 <code>ChannelInboundHandler</code>  接口，所以上面所有的类其实都是实现了该接口。</p>\n<p>所以我们在流水线上就可以直接将解码器（编码器也是）当成 <code>ChannelHandler</code>  来使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token comment\">// 解码器本质上也算是一种 ChannelInboundHandlerAdapter，用于处理入站请求</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    <span class=\"token comment\">// 经过 StringDecoder 转换后，msg 直接就是一个字符串，所以打印就行了</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看一下 <code>StringDecoder</code>  类图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/14/c48d5bdb8a78fd87.jpg\" alt=\"\" /></p>\n<p>要使用自定义的解码器，我们可以继承 <code>MessageToMeMessage</code>  类，重写 <code>decode</code>  方法即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDecoder</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MessageToMessageDecoder</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> channelHandlerContext<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                          <span class=\"token class-name\">ByteBuf</span> buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据已收到，正在进行解码...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 直接转换为 UTF8 字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 解码后需要将解析后的数据丢进 List 中，如果丢进去多个数据，</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 相当于数据被分成了多个，后面的 Handler 就需要每个都处理一次</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"编码器\"><a class=\"anchor\" href=\"#编码器\">#</a> 编码器</h1>\n<p>Netty 提供了一些常用<strong>编码器</strong>类型，它们继承了 <code>MessageToByteEncoder</code>  类：</p>\n<ul>\n<li><code>ObjectEncoder</code> ：对象（需要实现 <code>Serializable</code>  接口）编码成字节流。</li>\n<li><code>SocketMessageEncoder</code> ：将 <code>SocketMessage</code>  编码为字节流。</li>\n<li><code>HAProxyMessageEncoder</code> ：将 <code>HAProxyMessage</code>  编码成字节流。</li>\n</ul>\n<p>Netty 也提供了 <code>MessageToMessageEncoder</code> ，将一种格式转化为另一种格式的编码器，下面类都是继承此类：</p>\n<ul>\n<li><code>RedisEncoder</code> ：将 Redis 协议的对象进行编码。</li>\n<li><code>StringEncoder</code> ：将字符串进行编码操作。</li>\n<li><code>Base64Encoder</code> ：将 Base64 字符串进行编码操作。</li>\n</ul>\n<p>我们编写一下客户端的代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Bootstrap</span> bootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> socketChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        socketChannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringDecoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 解码器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                                    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> channelHandlerContext<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                                                            <span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">> 接收到客户端发送的数据：\"</span> <span class=\"token operator\">+</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                                <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringEncoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt; 请输入要发送给服务端的内容：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 直接发送字符串就行</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端断开连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"编解码器\"><a class=\"anchor\" href=\"#编解码器\">#</a> 编解码器</h1>\n<p>它是既继承了 <code>ChannelInboundHandlerAdapter</code>  也实现了 <code>ChannelOutboundHandler</code>  接口，又能处理出站也能处理入站请求，实际上就是将之前的给组合到一起了，比如我们也可以实现一个缝合在一起的 <code>StringCodec</code>  类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 需要指定两个泛型，第一个是入站的消息类型，一个是出站的消息类型，出站是 String 类型，我们要转成 ByteBuf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StringCodec</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MessageToMessageCodec</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在处理出站数据...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 同样的，添加的数量就是出站的消息数量</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ByteBuf</span> buf<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"正在处理入站数据...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 和之前一样，直接一行解决</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"常用的解码器\"><a class=\"anchor\" href=\"#常用的解码器\">#</a> 常用的解码器</h1>\n<h2 id=\"fixedlengthframedecoder\"><a class=\"anchor\" href=\"#fixedlengthframedecoder\">#</a> FixedLengthFrameDecoder</h2>\n<p>固定长度解码器：通过构造函数设置固定长度的大小 <code>frameLength</code> ，无论接收方依次获取多大的数据，都会严格按照该大小进行解码，如果积累读取到长度大小 <code>frameLength</code>  的消息，解码器才会处理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有效解决粘包拆包问题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FixedLengthFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"delimiterbasedframedecoder\"><a class=\"anchor\" href=\"#delimiterbasedframedecoder\">#</a> DelimiterBasedFrameDecoder</h2>\n<p>特殊分隔符解码器，其重要属性：</p>\n<ul>\n<li><code>delimiters</code> ：指定特殊分隔符，通过写入 <code>ByteBuf</code>  作为参数传入。 <code>delimiters</code>  的类型是 <code>ByteBuf</code>  数组，所以可以同时指定多个分隔符。</li>\n<li><code>maxLength</code> ：报文最大长度限制，如果超过该长度还没有检测到分隔符，就会抛出 <code>TooLongFrameException</code>  异常，是对程序在极端情况下的一种保护。</li>\n<li><code>failFast</code> ：设置 <code>failFast</code>  可以控制抛出 <code>TooLongFrameException</code>  的时机。如果 <code>failFast = true</code> ，就会在超过 <code>maxLength</code>  立即抛出。反之，就会等到解码出一个完整的消息才会抛出异常。</li>\n<li><code>StripDelimiter</code> ：是判断解码后得到的消息是否去除分隔符</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DelimiterBasedFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"!\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 指定一个特定的分隔符，比如我们这里以感叹号为分隔符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  \t\t<span class=\"token comment\">// 在收到分隔符之前的所有数据，都作为同一个数据包的内容</span></pre></td></tr></table></figure><p>也可以这么写</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ByteBuf</span> delimiter <span class=\"token operator\">=</span> <span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">copiedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&amp;\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">DelimiterBasedFrameDecoder</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> delimiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"lengthfieldbasedframedecoder\"><a class=\"anchor\" href=\"#lengthfieldbasedframedecoder\">#</a> LengthFieldBasedFrameDecoder</h2>\n<p>长度域解码器：解决 TCP 拆包 / 粘包问题最常用的解码器、基本可以覆盖大部分基于长度拆包场景。</p>\n<p>属性：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 长度字段的偏移量，也就是存放长度数据的起始位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> lengthFieldOffset<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 长度字段所占用的字节数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> lengthFieldLength<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">/* 消息长度的修正值</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   在很多较为复杂一些的协议设计中，长度域不仅仅包含消息的长度，而且包含其他的数据，</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   如版本号、数据类型、数据状态等，那么这时候我们需要使用 lengthAdjustment 进行修正</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   lengthAdjustment = 包体的长度值 - 长度域的值</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> lengthAdjustment<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 解码后需要跳过的初始字节数，也就是消息内容字段的起始位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> initialBytesToStrip<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 长度字段结束的偏移量，</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// lengthFieldEndOffset = lengthFieldOffset + lengthFieldLength</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> lengthFieldEndOffset<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也有一些和上面两个解码器相似的属性。</p>\n<p>其实，如果对计算机网络的 TCP 协议和报文段传输比较熟悉，就知道该解码器的工作机制</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/14/f3327f194dd6c465.jpg\" alt=\"\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>语雀・青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2lieDZ1ZyM5MTA3MWE0Mg==\">https://www.yuque.com/qingkongxiaguang/javase/ibx6ug#91071a42</span></p>\n<p>51CTO：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuNTFjdG8uY29tL2FydGljbGUvNjM2MzQ5Lmh0bWw=\">https://www.51cto.com/article/636349.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5saWFuZ2xpYW5nbGVlLmNvbS8lRTQlQjglOTMlRTYlQTAlOEYvTmV0dHklMjAlRTYlQTAlQjglRTUlQkYlODMlRTUlOEUlOUYlRTclOTAlODYlRTUlODklOTYlRTYlOUUlOTAlRTQlQjglOEUlMjBSUEMlMjAlRTUlQUUlOUUlRTglQjclQjUtJUU1JUFFJThDLzA3JTIwJTIwJUU2JThFJUE1JUU1JUE0JUI0JUU2JTlBJTk3JUU4JUFGJUFEJUVGJUJDJTlBJUU1JUE2JTgyJUU0JUJEJTk1JUU1JTg4JUE5JUU3JTk0JUE4JTIwTmV0dHklMjAlRTUlQUUlOUUlRTclOEUlQjAlRTglODclQUElRTUlQUUlOUElRTQlQjklODklRTUlOEQlOEYlRTglQUUlQUUlRTklODAlOUElRTQlQkYlQTElRUYlQkMlOUYubWQ=\">技术文章摘抄</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5saWFuZ2xpYW5nbGVlLmNvbS8lRTQlQjglOTMlRTYlQTAlOEYvTmV0dHklMjAlRTYlQTAlQjglRTUlQkYlODMlRTUlOEUlOUYlRTclOTAlODYlRTUlODklOTYlRTYlOUUlOTAlRTQlQjglOEUlMjBSUEMlMjAlRTUlQUUlOUUlRTglQjclQjUtJUU1JUFFJThDLzA4JTIwJTIwJUU1JUJDJTgwJUU3JUFFJUIxJUU1JThEJUIzJUU3JTk0JUE4JUVGJUJDJTlBTmV0dHklMjAlRTYlOTQlQUYlRTYlOEMlODElRTUlOTMlQUElRTQlQkElOUIlRTUlQjglQjglRTclOTQlQTglRTclOUElODQlRTglQTclQTMlRTclQTAlODElRTUlOTklQTglRUYlQkMlOUYubWQ=\">开箱即用：Netty 支持哪些常用的解码器？</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/13/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(3)-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/",
            "url": "https://cecilia.cool/2022/09/13/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(3)-%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6/",
            "title": "Netty框架(3)--任务调度",
            "date_published": "2022-09-13T01:37:47.000Z",
            "content_html": "<h1 id=\"eventloop\"><a class=\"anchor\" href=\"#eventloop\">#</a> EventLoop</h1>\n<p>我们在上一章节的例子中，首先创建 bossGroup 和 workerGroup 两个 <code>EventLoopGroup</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 因为博客显示问题，我这里写成两行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">EventLoopGroup</span> bossGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">EventLoopGroup</span> workerGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们之前也提到，这两个类似于主从 Reactor。之前在编写 NIO 代码时，就是用了 <code>while</code>  循环，不断使用 <code>selector</code>  监听新的事件，EventLoop 也是这种思想，本质是事件等待 / 处理线程。</p>\n<p>但是这与 NIO 又有不同：</p>\n<ul>\n<li><code>EvetnLoopGroup</code>  包含多个 <code>EventLoop</code> 。</li>\n<li>一个 <code>EventLoop</code>  绑定一个线程，只有第一次执行时才会通过 <code>ThreadFactory</code>  创建线程</li>\n<li>一个 <code>Channel</code>  只会绑定一个 <code>EventLoop</code> ，绑定后不会修改。但是一个 <code>EventLoop</code>  可以被多个 <code>Channel</code>  绑定（多对一的关系）</li>\n</ul>\n<p>先看一下示意图：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/13/f46a4aa6c8e4214a.jpg\" alt=\"\" /></p>\n<p>我们之前写的代码，多个 <code>Channel</code>  注册到同一个 EventLoop 中，本身没有什么问题。但是我们将数据的读写和数据的处理（其他操作）放在了一起，如果某一个 <code>Channel</code>  的数据处理阻塞了，就会导致其他 <code>Channel</code>  也阻塞。<strong>所以使用 Netty 进行程序开发时，我们需要对 ChannelHandler 的实现逻辑有充分的风险意识</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端发送的数据：\"</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                   buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 这里我们直接卡 10 秒假装在处理任务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token comment\">// 就会导致阻塞，其他 Channel 不能处理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>在 IO 多路复用详解就说过，Reactor 模型是事件驱动，在完成读写请求时不会阻塞，因为只有客户端真的发送了读写请求，服务端才会进行读写操作。所以会出现阻塞的只有数据处理那一部分。</p>\n</blockquote>\n<p>我们回忆一下多线程 Reactor 模型中，Handler 负责处理读写，其他任务（解码，编码等）都交给线程池处理</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token constant\">POOL</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端数据：\"</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                   <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                              buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Netty 处理这种情况，可以再创建一个 <code>EventLoopGroup</code>  来专门处理阻塞事件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">EventLoopGroup</span> handlerGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端发送的数据：\"</span><span class=\"token operator\">+</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    handlerGroup<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 由于继承自 ScheduledExecutorService，直接提交任务</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>当然也可以写成流水线，一个 ChannelHandler 处理读写事件，然后将任务传给下一个 ChannelHandler，处理阻塞时间</p>\n</blockquote>\n<p>最后顺便给出客户端代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 客户端也通过 Bootstrap 启动</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Bootstrap</span> bootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 客户端只需要一个 EventLoop 即可</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t\t <span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        \t <span class=\"token punctuation\">.</span><span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                 <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                     channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelHandlerContextAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                         <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                         <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">ChannelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span><span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> thorws <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                             <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Byte</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                             <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">> 接收到客户端发送数据：\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                                               buf<span class=\"token punctuation\">,</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                         <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                 <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>             <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">Channel</span> channel <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Scanner</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;&lt; 请输入要发送给服务端的内容\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span>unPooled<span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"异步获得结果\"><a class=\"anchor\" href=\"#异步获得结果\">#</a> 异步获得结果</h1>\n<h2 id=\"channelfuture\"><a class=\"anchor\" href=\"#channelfuture\">#</a> ChannelFuture</h2>\n<p>Netty 中的 Channel 相关操作都是异步进行的，并不是在当前线程同步执行，我们不能立即得到执行结果。所以想要得到结果就需要使用 Future</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 先看一下使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ByteBuf</span> buff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端发送的数据：\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                      buff<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">ChannelFuture</span> future <span class=\"token operator\">=</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpool</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"任务完成状态：\"</span> <span class=\"token operator\">+</span> funture<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>ChannelFuture</code>  继承 <code>Netty</code>  自定义的 <code>Future</code> ，但是这个自定义的 <code>Future</code>  接口也是继承了 <code>j.u.c</code>  里面的 <code>Future</code>  接口。而我们也是主要讲解 <code>ChannelFuture</code> 。</p>\n</blockquote>\n<p>包括服务端启动也是返回的 <code>ChannelFuture</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ChannelFuture</span> future <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>服务端启动比较慢，所以一开始直接获取 <code>isDone</code>  的结果会返回 <code>false</code> 。如果需要当服务端启动后我们才能进行下一步操作，相当于把异步恢复成同步，有两种方案</p>\n<ul>\n<li>方案一：使用 <code>sync</code>  方法</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ChannelFuture</span> future <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>future<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 让线程同步等待任务返回</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// false</span></pre></td></tr></table></figure><ul>\n<li>方案二：设置监听器</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ChannelFuture</span> future <span class=\"token operator\">=</span> bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 直接添加监听器，当任务完成时自动执行，但是注意执行也是异步的，不是在当前线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>future<span class=\"token punctuation\">.</span><span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelFutureListener</span><span class=\"token punctuation\">)</span> channelFuture <span class=\"token operator\">-></span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                   <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是服务端启动完成之后要做的事情！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ChannelFuture</code>  中定义了监听方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChannelFuture</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Channel</span> <span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 我们可以直接获取此任务的 Channel</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ChannelFuture</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericFutureListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                              <span class=\"token class-name\">Future</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 当任务完成时，会直接执行 GenericFutureListener 的任务，注意执行的位置也是在 EventLoop 中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isVoid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 返回类型是否为 void</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>GenericFutureListener</code>  是一个函数接口，只有一个 <code>operationComplete</code>  方法，可以使用 Lambda 表达式。而且，执行任务的线程在完成任务后就会执行事件监听里的任务（而不是在定义事件监听的线程中执行）。</p>\n</blockquote>\n<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<p>该接口支持手动设定成功和失败的结果：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 此接口也是继承自 Netty 中的 Future 接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">setSuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 手动设定成功</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">trySuccess</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">setFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 手动设定失败</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryFailure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">setUncancellable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 这些就和之前的 Future 是一样的了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericFutureListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                           <span class=\"token class-name\">Future</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">addListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericFutureListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                            <span class=\"token class-name\">Future</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericFutureListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                              <span class=\"token class-name\">Future</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">removeListeners</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GenericFutureListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                               <span class=\"token class-name\">Future</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">V</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> var1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">awaitUninterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Promise</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">syncUninterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该接口也是可以获取异步执行结果情况</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端发送的数据：\"</span><span class=\"token operator\">+</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ChannelPromise</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DefaultChannelPromise</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        promise<span class=\"token punctuation\">.</span><span class=\"token function\">sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 同步等待一下</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>promise<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Netty 源码之 EventLoopGroup：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpeWkuem9uZS9uZXR0eS9FdmVudExvb3BHcm91cC5odG1sI211bHRpdGhyZWFkZXZlbnRsb29wZ3JvdXA=\">https://www.zhiyi.zone/netty/EventLoopGroup.html#multithreadeventloopgroup</span></p>\n<p>语雀・青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2lieDZ1ZyNiN2RjNmY4Nw==\">https://www.yuque.com/qingkongxiaguang/javase/ibx6ug#b7dc6f87</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFybi5saWFuZ2xpYW5nbGVlLmNvbS8lRTQlQjglOTMlRTYlQTAlOEYvTmV0dHklMjAlRTYlQTAlQjglRTUlQkYlODMlRTUlOEUlOUYlRTclOTAlODYlRTUlODklOTYlRTYlOUUlOTAlRTQlQjglOEUlMjBSUEMlMjAlRTUlQUUlOUUlRTglQjclQjUtJUU1JUFFJThDLzA0JTIwJUU0JUJBJThCJUU0JUJCJUI2JUU4JUIwJTgzJUU1JUJBJUE2JUU1JUIxJTgyJUVGJUJDJTlBJUU0JUI4JUJBJUU0JUJCJTgwJUU0JUI5JTg4JTIwRXZlbnRMb29wJTIwJUU2JTk4JUFGJTIwTmV0dHklMjAlRTclOUElODQlRTclQjIlQkUlRTklQUIlOTMlRUYlQkMlOUYubWQ=\">技术文章摘抄</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/12/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(2)-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/09/12/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(2)-%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/",
            "title": "Netty框架(2)--Channel通道",
            "date_published": "2022-09-12T13:44:11.000Z",
            "content_html": "<h1 id=\"netty基础代码\"><a class=\"anchor\" href=\"#netty基础代码\">#</a> Netty 基础代码</h1>\n<p>我们先来看一下 Netty 搭建服务端和客户端一个简单的例子</p>\n<p>服务端：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 使用 NioEventLoopGroup 实现类，创建 BossGroup 和 WorkerGroup</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/** 其他的还有 EpollEventLoopGroup，但是仅支持 Linux，这是 Netty 基于 Linux 底层</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \tEpoll 单独编写的一套本地实现，没有使用 NIO 那套 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">EventLoopGroup</span> bossGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> workerGroup <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NioEventLoopGroup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建服务端启动引导类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ServerBootstrap</span> bootstrap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerBootstrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 可链式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    bootstrap</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">group</span><span class=\"token punctuation\">(</span>bossGroup<span class=\"token punctuation\">,</span> workerGroup<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 指定事件循环组</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NioServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 指定为 NIO 的 ServerSocketChannel</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">childHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">//SocketChannel 不是 NIO 里面的，是 Netty 的</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                            <span class=\"token comment\">//ctx 是上下文，msg 是收到的消息，默认以 ByteBuf 形式（也可以是其他形式，后面再说）</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 类型转换一下</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                               <span class=\"token string\">\" >> 接收到客户端发送的数据：\"</span><span class=\"token operator\">+</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                            <span class=\"token comment\">// 通过上下文可以直接发送数据回去，注意要 writeAndFlush 才能让客户端立即收到</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">// 最后绑定端口，启动</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    bootstrap<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>客户端：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接到服务端！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要发送给服务端的内容：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已发送！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 直接从通道中读取数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到服务器返回：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务端很多陌生的类，这就是我们之后要讲解的，客户端的代码应该很熟悉了。</p>\n<p>服务端前两行代码，一个是创建 bossGroup 和 workerGroup，另一个是创建服务端启动引导类 ServerBootstrap。（bootstrap 翻译为引导程序）。</p>\n<blockquote>\n<p>看后面的链式代码就知道，我们通过 ServerBootstrap 配置相关信息。比如设置 group，channel，handler 等。</p>\n</blockquote>\n<h1 id=\"channel通道\"><a class=\"anchor\" href=\"#channel通道\">#</a> Channel 通道</h1>\n<p>Netty 的 Channel 没有直接使用 NIO 的 Channel，通道支持 IO 操作，但是所有的 IO 操作都是<strong>异步</strong>的（Netty）。意味着任何 IO 调用都将立即返回，但不能保证请求的 IO 操作在调用时已经完成。它会返回一个 ChannelFuture 实例（在 JUC 里面我们就将结果关于这种异步获取结果的 FutureTask 类），该实例将在请求的 IO 操作成功，失败或取消时通知你。</p>\n<p>关于 <code>Channel</code> ，在 Netty 中，还有 <code>ChannelHandler</code>  和 <code>ChannelPipeline</code>  两个组件。</p>\n<ul>\n<li>ChannelHandler 负责 Channel 的逻辑处理，其实就是 Reactor 里面的 Handler。</li>\n<li>ChannelPipeline 负责管理 ChannelHandler，他是一个流水线容器，存储结构为双向链表。</li>\n<li>从上面的代码可以看出，通过链式代码，我们不断将 <code>ChannelInboundHandlerAdapter</code> （实现了 ChannelHandler）加入到 Pipe 中</li>\n</ul>\n<blockquote>\n<p>一个 <code>Channel</code>  包含一个 <code>ChannelPipeline</code> ，所有 <code>ChannelHandler</code>  都会顺序加入到 <code>ChannelPipeline</code>  中，创建 <code>Channel</code>  时会自动创建一个 <code>ChannelPipeline</code> ；每个 <code>Channel</code>  都会有一个 <code>ChannelPipeline</code> ，这个关联关系是永久性的。</p>\n</blockquote>\n<p>关系图如下：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/750be0a66f935589.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>其实 <code>ChannelPipeline</code>  维护的是由 <code>ChannelHandlerContext</code>  组成的双向链表，只是每一个 <code>ChannelHandlerContext</code>  又关联着一个 <code>ChannelHandler</code> 。</p>\n</blockquote>\n<p>我们现在来看一下源码</p>\n<p><code>Channel</code>  源码，里面方法比较多，这里我们只看几个重要的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Channel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AttributeMap</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChannelOutboundInvoker</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Comparable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Channel</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ChannelId</span> <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 通道 ID</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 获取此通道所属的 EventLoop，因为一个 Channel 在它的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 生命周期内只能注册到一个 EventLoop 中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">EventLoop</span> <span class=\"token function\">eventLoop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//Channel 是具有层级关系的，这里是返回父 Channel</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Channel</span> <span class=\"token function\">parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 通道当前的相关状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isRegistered</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 关闭通道，但是会用到 ChannelFuture</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">ChannelFuture</span> <span class=\"token function\">closeFuture</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 流水线，例子中我们就是通过 pipeline 拿到管道，</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 然后加入 ChannelHandler</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">ChannelPipeline</span> <span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     <span class=\"token comment\">// 可以直接从 Channel 拿到 ByteBufAllocator 的实例，来分配 ByteBuf</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">ByteBufAllocator</span> <span class=\"token function\">alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token class-name\">Channel</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">Channel</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 刷新，基操</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其中 <code>pipeline()</code>  方法在例子中使用到了，我们再来看一下 <code>ChannelHandler</code> 。该接口定义了一些负责完成具体请求的方法，例子中使用到的 <code>ChannelInboundHandlerAdapter</code>  抽象类是 <code>ChannelInboundHandler</code>  的接口实现，用于处理入站数据（Inbound 表示入站，Outbound 表示出站），抽象类重写对应方法进行请求处理，这些方法会在合适的时间被调用。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      \t<span class=\"token comment\">//ctx 是上下文，msg 是收到的消息，以 ByteBuf 形式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 类型转换一下</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                           <span class=\"token operator\">+</span><span class=\"token string\">\" >> 接收到客户端发送的数据：\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                           <span class=\"token operator\">+</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 通过上下文可以直接发送数据回去，注意要 writeAndFlush 才能让客户端立即收到</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrappedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们先看顶层接口 <code>ChannelHandler</code> ：只有一些流水线相关的回调方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChannelHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  \t<span class=\"token comment\">// 当 ChannelHandler 被添加到流水线中时调用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">handlerAdded</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 当 ChannelHandler 从流水线中移除时调用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">handlerRemoved</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 还有一个过时方法，不管</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看下一级接口 <code>ChannelInboundHandler</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//ChannelInboundHandler 用于处理入站相关事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ChannelInboundHandler</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ChannelHandler</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  \t<span class=\"token comment\">/** 当 Channel 已经注册到自己的 EventLoop 上时调用，前面我们说了，</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    一个 Channel 只会注册到一个 EventLoop 上，注册到 EventLoop 后，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    这样才会在发生对应事件时被通知。*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelRegistered</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 从 EventLoop 上取消注册时</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelUnregistered</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 当 Channel 已经处于活跃状态时被调用，此时 Channel 已经连接 / 绑定，并且已经就绪</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelActive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 跟上面相反，不再活跃了，并且不在连接它的远程节点</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelInactive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 当从 Channel 读取数据时被调用，可以看到数据被自动包装成了一个 Object（默认是 ByteBuf）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> var2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 上一个读取操作完成后调用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelReadComplete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t<span class=\"token comment\">// 暂时不介绍</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">userEventTriggered</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> var2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">// 当 Channel 的可写状态发生改变时被调用</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">channelWritabilityChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 出现异常时被调用</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionCaught</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> var1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> var2<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在我们就可以看到， <code>ChannelInboundHandler</code>  负责处理请求，是事件驱动的。上面用到的 <code>ChannelInboundHandlerAdapter</code>  实际上就是对这些方法实现的抽象类，相比直接用接口，我们可以只重写我们需要的方法，没有重写的方法会默认向流水线下一个 <code>ChannelHandler</code>  发送。</p>\n<blockquote>\n<p>与之对应的还有 <code>ChannelOutboundHandler</code> ，用于处理出站相关操作，此处不再讲解</p>\n</blockquote>\n<p>最后我们看一下 <code>ChannelPipeline</code> ，这个双向链表容器保存著 <code>ChannelHandler</code> ，里面的 <code>ChannelHandler</code>  顺序存储，从客户端发送过来的请求，入站会依次经过 <code>ChannelHandler</code> ，直到它被某一个 <code>handler</code>  完成请求，然后出站时会经过处理出站的 <code>ChannelHandler</code> 。</p>\n<p>比如我们希望创建两个入站的 <code>ChannelHandler</code> ，一个用于接收请求并处理，一个用于处理当前接收请求过程中出现的异常。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">childHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInitializer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \tchannel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端发送数据：\"</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                       buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token comment\">// 此处故意人为抛出异常</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是异常\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>               <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionCaught</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span><span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"处理异常：\"</span> <span class=\"token operator\">+</span> cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果我们不在 <code>ChannelHandler</code>  重写对应方法，他就会默认传播到流水线下一个 <code>ChannelHandler</code> 。也有人为传递</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exceptionCaught</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span><span class=\"token class-name\">Throwable</span> cause<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通过 ChannelHandlerContext 来向下传递，ChannelHandlerContext</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 是在 Handler 添加进 Pipeline 中时就被自动创建的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fireExceptionCaught</span><span class=\"token punctuation\">(</span>cause<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>关于通道，最后我们看一下出站的 <code>ChannelHandler</code>  相关的机制</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    channel<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 直接获取 pipeline，然后添加两个 Handler</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1接收到客户端发送的数据：\"</span><span class=\"token operator\">+</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fireChannelRead</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelInboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuf</span><span class=\"token punctuation\">)</span> msg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2接收到客户端发送的数据：\"</span><span class=\"token operator\">+</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StandardCharsets</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTF_8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">writeAndFlush</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"伞兵一号卢本伟\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里我们使用 channel 的 write</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelOutboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChannelPromise</span> promise<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1号出站：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">addLast</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ChannelOutboundHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ChannelHandlerContext</span> ctx<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> msg<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ChannelPromise</span> promise<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2号出站：\"</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 继续 write 给其他的出站 Handler，不然到这里就断了</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    ctx<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重点就是按照顺序存储，但是第一个 <code>ChannelOutbindHandlerAdapter</code>  并没有 <code>write</code>  方法。这是因为当我们入站的 <code>ChannelHandler</code>  完成操作后（比如写请求，就需要有一个 <code>ChannelHandler</code>  调用 <code>write</code>  方法），就会从当前位置倒着找 <code>ChannelOutbindHandler</code> ，找到第一个，再调用。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/13/b7dc75cd969eca8c.jpg\" alt=\"\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>知一码园：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpeWkuem9uZS9uZXR0eS9DaGFubmVsLmh0bWw=\">https://www.zhiyi.zone/netty/Channel.html</span></p>\n<p>Netty Channel 组件作用：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHJvZ3JhbW1pbmdodW50ZXIuY29tL2FydGljbGUvMTI3MTIwNDI0NTEv\">https://www.programminghunter.com/article/12712042451/</span></p>\n<p>语雀・青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2lieDZ1ZyNmNDQzYTkzNA==\">https://www.yuque.com/qingkongxiaguang/javase/ibx6ug#f443a934</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/09/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(1)-Netty%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/09/09/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/Netty%E6%A1%86%E6%9E%B6(1)-Netty%E5%9F%BA%E7%A1%80/",
            "title": "Netty框架(1)--Netty基础",
            "date_published": "2022-09-09T02:53:03.000Z",
            "content_html": "<h1 id=\"nio存在的问题\"><a class=\"anchor\" href=\"#nio存在的问题\">#</a> NIO 存在的问题</h1>\n<p>之前我们写的代码，当客户端断开连接时（客户端运行结束），就会报错</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/09/90e8cc353264d4bf.jpg\" alt=\"NIO存在的问题\" /></p>\n<p>当我们的客户端主动与服务端断开连接时，会导致 READ 事件一直被触发，也就是说 <code>selector.select()</code>  会直接通过，并且是可读的状态，但是我们发现实际上读到是数据是一个空的（上面的图中在空轮询两次后抛出异常了，也有可能是无限的循环下去）所以这里我们得稍微处理一下：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 这里我们需要判断一下，如果 read 操作得到的结果是 - 1，那么说明服务端已经断开连接了</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端已经断开连接了：\"</span><span class=\"token operator\">+</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 直接关闭此通道</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 继续进行选择</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端数据：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是这里的弊端也很明显，断开的客户端连接会一直进行空轮询。</p>\n<p>还有一个问题</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 由于底层 epoll 机制的问题，导致 select 方法可能会一直返回 0，造成无限循环的情况。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听到 \"</span><span class=\"token operator\">+</span>count<span class=\"token operator\">+</span><span class=\"token string\">\" 个事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> selectionKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> selectionKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这个 BUG 也是由客户端主动断开连接导致的。</p>\n<blockquote>\n<p>这是 JDK 官方的 BUG 反馈</p>\n<ol>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHAlM0ElMkYlMkZidWdzLmphdmEuY29tJTJGYnVnZGF0YWJhc2UlMkZ2aWV3X2J1Zy5kbyUzRmJ1Z19pZCUzRDY2NzAzMDI=\">JDK-6670302 : (se) NIO selector wakes up with 0 selected keys infinitely</span></p>\n</li>\n<li>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmppYW5zaHUuY29tLz90PWh0dHAlM0ElMkYlMkZidWdzLmphdmEuY29tJTJGYnVnZGF0YWJhc2UlMkZ2aWV3X2J1Zy5kbyUzRmJ1Z19pZCUzRDY0MDM5MzM=\">JDK-6403933 : (se) Selector doesn't block on Selector.select(timeout) (lnx)</span></p>\n</li>\n</ol>\n</blockquote>\n<p>JDK NIO API 描述的 Selector 的 selector 方法会一直阻塞，直到 IO 事件到达或者超时，但是 Linux 平台上有时会出现问题，某些场景下 select 方法会直接返回，即使没有超时并且也没有 IO 事件到达。它会导致线程陷入死循环，让 CPU 上升到 100%。直到现在 JDK 都没有完全解决该问题。</p>\n<h1 id=\"netty框架\"><a class=\"anchor\" href=\"#netty框架\">#</a> Netty 框架</h1>\n<p>该框架 API 简单，开发门槛低；功能强大，内置多种编码解码功能。Java 版本的 Minecraft 服务器就是使用 Netty 框架作为网络通信的基础</p>\n<p>先导包</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.netty<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>netty-all<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>4.1.76.Final<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"bytebuf\"><a class=\"anchor\" href=\"#bytebuf\">#</a> ByteBuf</h2>\n<p>Netty 使用的缓冲区不是 ByteBuffer，而是自定义的 ByteBuf 类其特点是：</p>\n<ul>\n<li>\n<p>写操作完成后无需进行 <code>flip()</code>  翻转。</p>\n</li>\n<li>\n<p>具有比 ByteBuffer 更快的响应速度。</p>\n</li>\n<li>\n<p>动态扩容。</p>\n</li>\n</ul>\n<p>内部数组实际的读取是两个指针在维护（读指针和写指针），进行读写操作，相应的指针就会移动，但是读指针不能超过写指针。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 创建初始容量为 10 的 ByteBuf 缓冲区，Unpooled 是用于快速生成 ByteBuf 的工具类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//Unpooled 是池化的意思，ByteBuf 有池化和非池化两种，区别在于对内存的复用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"初始状态：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">888888888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 写入一个 Int 数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写入Int后：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    buf<span class=\"token punctuation\">.</span><span class=\"token function\">readShort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 无需翻转，直接读取一个 short 数据出来</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"读取Short后：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 丢弃操作，会将当前的可读部分内容丢到最前面，并且读写指针向前移动丢弃的距离</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    buf<span class=\"token punctuation\">.</span><span class=\"token function\">discardReadBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"丢弃之后：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    buf<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 清空操作，清空之后读写指针都归零</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"清空之后：\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ByteBuf 支持动态扩容，每次扩容都会 x2，如果不希望扩容，可以在生成 ByteBuf 时指定 maxCapacity</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// maxCapacity = 30</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>缓冲区的实现模式分为：堆缓冲区模式（数组实现），直接缓冲区模式（申请堆外内存），符合缓冲区模式。</strong></p>\n<p>想要创建直接缓冲区，直接调用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">directBuffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 拿不到数组，因为底层不是数组实现</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复合模式可以拼凑组合其他缓冲区，如果希望对两个缓冲区内容进行操作，不需要再单独创建一个新的缓冲区，而是直接将其进行拼接。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个复合缓冲区</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">CompositeByteBuf</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">compositeBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>buf<span class=\"token punctuation\">.</span><span class=\"token function\">addComponent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">copiedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>buf<span class=\"token punctuation\">.</span><span class=\"token function\">addComponent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Unpooled</span><span class=\"token punctuation\">.</span><span class=\"token function\">copiedBuffer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>关于缓冲区，最后看一下 Unpooled 工具类是如何创建 buffer 的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Unpooled</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ByteBufAllocator</span> <span class=\"token constant\">ALLOC</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 内部是有一个 ByteBufAllocator 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ByteOrder</span> <span class=\"token constant\">BIG_ENDIAN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ByteOrder</span> <span class=\"token constant\">LITTLE_ENDIAN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ByteBuf</span> <span class=\"token constant\">EMPTY_BUFFER</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ByteBuf</span> <span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token constant\">ALLOC</span><span class=\"token punctuation\">.</span><span class=\"token function\">heapBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 缓冲区的创建操作是依靠 ByteBufAllocator 来进行的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  \t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">//ALLOC 在静态代码块中进行指定，实际上真正的实现类是 UnpooledByteBufAllocator</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token constant\">ALLOC</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">UnpooledByteBufAllocator</span><span class=\"token punctuation\">.</span><span class=\"token constant\">DEFAULT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token constant\">BIG_ENDIAN</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteOrder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BIG_ENDIAN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token constant\">LITTLE_ENDIAN</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteOrder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LITTLE_ENDIAN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token constant\">EMPTY_BUFFER</span> <span class=\"token operator\">=</span> <span class=\"token constant\">ALLOC</span><span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 空缓冲区容量和最大容量都是 0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">assert</span> <span class=\"token constant\">EMPTY_BUFFER</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">EmptyByteBuf</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"EMPTY_BUFFER must be an EmptyByteBuf.\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ByteBufAllocator 负责分配缓冲区，有两个具体的实现类： <code>UnpooledByteBufAllocator</code>  和 <code>PooledByteBufAllocator</code> 。一个是非池化缓冲区生成器，另一个是池化缓冲区生成器。</p>\n<blockquote>\n<p>池化是将缓冲区通过设置内存池进行内存块复用，避免频繁的内存申请。尤其是在使用堆外内存时，避免多次重复通过底层 malloc () 函数系统调用申请内存造成的性能损失。</p>\n</blockquote>\n<h2 id=\"零拷贝简介\"><a class=\"anchor\" href=\"#零拷贝简介\">#</a> 零拷贝简介</h2>\n<blockquote>\n<p>此处对零拷贝做简单的讲解</p>\n</blockquote>\n<p>零拷贝是一种<strong> I/O 操作优化技术</strong>，可以快速高效地将数据从文件系统移动到网络接口，而不需要将其从内核空间复制到用户空间。</p>\n<p>这里象征性复习一下内核空间与用户空间：</p>\n<p>早期操作系统不区分用户与内核，但是程序往往会因为某些原因（误操作，代码没写对等）在访问任意内存空间时造成操作系统崩溃，比如清除操作系统的内存数据。根据 CPU 指令重要成都对指令进行分级：Ring0~Ring3（Linux 只是用 0 和 3）。Ring3 只能访问用户空间（运行在用户态）Ring0 访问任意空间（运行在内核态）。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/d342892940c2fa14.jpg\" alt=\"\" /></p>\n<p>比如创建一个线程，实际是要交给操作系统为我们分配，需要操作系统帮助我们完成系统调用，是内核在处理而不是程序（此时就是程序陷入内核态）。当操作系统完成分配，代码返回得到线程对象，之后又继续由程序操作（内核态转回了用户态）</p>\n<p>而文件操作也是这样，传统使用 IO，将磁盘数据发送到网络，流程如下</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/25957eee4e014389.jpg\" alt=\"\" /></p>\n<p>整个过程有四次拷贝数据，浪费时间，如果能让过用户空间，减少拷贝次数。</p>\n<p>实现零拷贝，演示三种方案</p>\n<ul>\n<li>虚拟内存：内核空间和用户空间的虚拟地址指向同一个物理地址，相当于直接共用了一块区域</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/e6bc56bc0d9c3618.jpg\" alt=\"\" /></p>\n<ul>\n<li>mmap/write 内存映射：将内核空间中的缓存直接映射到用户空间缓存，就是直接作为映射存在，当我们需要将数据发送到 Socket 缓冲区时，直接在内核空间中进行操作就行了</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/e67004f84f8769fb.jpg\" alt=\"\" /></p>\n<ul>\n<li>sendfile 方式：在 Linux2.1 开始，引入了 sendfile 方式来简化操作，我们可以直接告诉内核要把哪个文件数据拷贝拷贝到 Socket 上，直接在内核空间中一步到位</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/bf6615b7a8e70a35.jpg\" alt=\"\" /></p>\n<h2 id=\"netty工作模型\"><a class=\"anchor\" href=\"#netty工作模型\">#</a> Netty 工作模型</h2>\n<p>使用主从 Reactor 模型，先看对比图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/12/b66c2c0d915b3463.jpg\" alt=\"\" /></p>\n<p>Boss Group 相当于主 Reactor，处理客户端的连接，Worker Group 相当于从 Reactor，负责处理读写事件（的轮询，一定要注意，实际的读写操作是 Handler 负责处理）。两个 Group 都是使用 EventLoop（事件循环）。</p>\n<p>上图可能不太醒目，也可以看这张图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/13/fc36cb17a20f7461.jpg\" alt=\"\" /></p>\n<blockquote>\n<p>此处仅对工作模型简单介绍</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kYTNhY2NmYmUzMTA=\">https://www.jianshu.com/p/da3accfbe310</span></p>\n<p>青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2lieDZ1Zw==\">https://www.yuque.com/qingkongxiaguang/javase/ibx6ug</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/05/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(0)-Socket%E5%85%A5%E9%97%A8/",
            "url": "https://cecilia.cool/2022/09/05/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(0)-Socket%E5%85%A5%E9%97%A8/",
            "title": "网络编程(0)--Socket详解",
            "date_published": "2022-09-05T10:57:04.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>该部分之所以为 0，是因为在之后 <code>NIO</code> ， <code>AIO</code>  的学习都会大量用到 <code>Socket</code>  的知识，所以为了更好的让读者阅读下去，这里开始对 <code>Socket</code>  做出一点补充。</p>\n<p>客户端与服务器连接之后，通过对 <code>Socket</code>  对象的写入和读取进行通信。</p>\n<p>连接过程：</p>\n<ul>\n<li>服务器实例化一个  <code>ServerSocket</code>  对象，表示通过服务器上的端口通信。</li>\n<li>服务器调用  <code>ServerSocket</code>  类的  <code>accept() </code> 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</li>\n<li>服务器正在等待时，一个客户端实例化一个  <code>Socket</code>  对象，指定服务器名称和端口号来请求连接。</li>\n<li><code>Socket</code>  类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个  <code>Socket</code>  对象能够与服务器进行通信。</li>\n<li>在服务器端， <code>accept() </code> 方法返回服务器上一个新的  <code>socket</code>  引用，该  <code>socket</code>  连接到客户端的  <code>socket</code> 。</li>\n</ul>\n<p><code>TCP</code>  是双向通信协议，服务器和客户端可以同时互相发消息。<strong>客户端的 Socket 的输出流就是服务端的输入流，客户端的输入流就是服务端的输出流</strong>。</p>\n<h1 id=\"相关实现类\"><a class=\"anchor\" href=\"#相关实现类\">#</a> 相关实现类</h1>\n<h2 id=\"serversocket类\"><a class=\"anchor\" href=\"#serversocket类\">#</a> ServerSocket 类</h2>\n<p>服务器应用程序通过该类获取端口（构造函数传入端口），并且监听客户端请求。</p>\n<p>构造方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 其他三个构造方法，从右至左依次减少一个参数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用指定的端口、侦听 backlog 和要绑定到的本地 IP 地址创建服务器。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> port<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InetAddress</span> address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></pre></td></tr></table></figure><p>相关方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取该 Socket 监听的端口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getLocalPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 侦听并接受到此套接字的连接</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Socket</span> <span class=\"token function\">accpet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将 ServerSocket 绑定到特定地址 (IP 地址和端口号)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketAddress</span> host<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> backlog<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"socket类\"><a class=\"anchor\" href=\"#socket类\">#</a> Socket 类</h2>\n<p>客户端和服务端通信使用的套接字，客户端要获取一个 <code>Socket</code>  直接实例化，服务端通过 <code>accept</code>  方法返回值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 连接到指定主机的指定端口号上</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 连接到指定 IP 地址的指定端口号</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InetAddress</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> port<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当  <code>Socket</code>  构造方法返回，并没有简单的实例化了一个  <code>Socket</code>  对象，它实际上会尝试连接到指定的服务器和端口。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将此套接字连接到服务器，并指定一个超时值。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketAddress</span> host<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> timeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 返回套接字连接的地址。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">InetAddress</span> <span class=\"token function\">getInetAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 返回套接字连接的远程端口，本地端口是 getLocalPort</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取输入 / 输出流</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">OutputStream</span> <span class=\"token function\">getOutpurStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"inetaddress类\"><a class=\"anchor\" href=\"#inetaddress类\">#</a> InetAddress 类</h2>\n<p>该类表示互联网协议（IP），该类的核心方法，直接在 IDE 里面打出 <code>get</code>  即可。</p>\n<h1 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h1>\n<p>客户端代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 输出流，发送数据给服务端</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> out <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 其实也可以是输入流，无非就是接收来自服务器的数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>服务端代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 也可以用其他借助装饰者类实现更多功能的类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        server<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实服务端应该是 <code>while</code>  循环不断获取客户端传过来的连接。我们看到客户端和服务端可以传输数据，这也是 IO 流，比如服务端要获取客户端传过来的数据，就需要调用 <code>read</code>  方法，如果客户端那边数据没准备好，就会一直阻塞在这里。</p>\n<p>客户端是一样的道理。既然存在阻塞，那么在设计的时候就存在同步异步问题，也就是之后涉及的 NIO，AIO 等知识。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmEtbmV0d29ya2luZy5odG1s\">https://www.runoob.com/java/java-networking.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/04/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(5)-AIO%E5%9F%BA%E6%9C%AC%E8%AF%A6%E8%A7%A3/",
            "url": "https://cecilia.cool/2022/09/04/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(5)-AIO%E5%9F%BA%E6%9C%AC%E8%AF%A6%E8%A7%A3/",
            "title": "网络编程(5)--AIO基本详解",
            "date_published": "2022-09-04T07:58:57.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>前面三种 IO 模型：阻塞式同步，非阻塞式同步，多路复用都是采用的应用主动询问操作系统。也就导致他们都会在执行 <code>read</code>  函数中阻塞住。</p>\n<p>异步 IO 采用的是 “订阅 - 通知” 模式：应用程序向操作系统注册 IO 监听，然后继续做自己的事情，当操作系统发生 IO 事件，并且准备好数据后，再主动通知应用程序，触发相应的函数。</p>\n<p>异步 IO 也是操作系统进行支持的，Windows 系统提供的异步 IO 技术为 <code>IOCP</code> （I/O Completion Port，I/O 完成端口）。Linux 使用的是 <code>epoll</code>  多路复用 IO 技术模拟异步 IO。</p>\n<h1 id=\"java对异步io的支持\"><a class=\"anchor\" href=\"#java对异步io的支持\">#</a> Java 对异步 IO 的支持</h1>\n<p>通常我们使用线程池用于执行异步任务，提交任务的线程讲任务提交到线程池就可以立马返回，不必等到任务正在完成，等我们需要执行结果时，通过传递一个回调函数的方式，任务结束后调用这个函数（<a href=\"https://cecilia.cool/2022/08/24/Java/%E5%B9%B6%E5%8F%91/Java%E7%BA%BF%E7%A8%8B%E6%B1%A02-FutureTask/\">FutureTask</a>）。</p>\n<p>Java 中的异步 IO 也是一样的，都是由一个线程池来负责执行任务，然后使用回调或自己去查询结果。</p>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/02/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(4)-NIO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%AF%A6%E8%A7%A3/",
            "url": "https://cecilia.cool/2022/09/02/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(4)-NIO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8%E8%AF%A6%E8%A7%A3/",
            "title": "网络编程(4)--IO多路复用详解",
            "date_published": "2022-09-02T01:20:52.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>关于多路复用（windows 下使用 select）的简单介绍已经在<strong> Unix IO 模型</strong>和<strong> NIO 基础详解</strong>中大致提到，并给出了代码实现。本文会对相关方法和模型进行详细讲解。</p>\n<p>多路复用 IO 技术最适用的是 “高并发” 场景，所谓<strong>高并发是指 1 毫秒内至少同时有上千个连接请求准备好</strong>。</p>\n<pre><code>try(ServerSocket server = new ServerSocket(8888)) &#123;\n    Socket s = server.accept();\n\n    System.out.println(&quot;服务端收到连接&quot;);\n\n    BufferedReader reader = new BufferedReader(new InputStreamReader(s.getInputStream()));\n\n    System.out.println(&quot;服务端读取数据： &quot; + reader.readLine());\n\n    OutputStreamWriter write = new OutputStreamWriter(s.getOutputStream());\n\n    write.write(&quot;服务端已收到数据&quot;);\n    write.flush();\n&#125;\n</code></pre>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">OutputStreamWriter</span> write <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    write<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端发送数据：xyz\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    write<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端发送数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端收到数据： \"</span><span class=\"token operator\">+</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"模型\"><a class=\"anchor\" href=\"#模型\">#</a> 模型</h1>\n<h2 id=\"传统io模型\"><a class=\"anchor\" href=\"#传统io模型\">#</a> 传统 IO 模型</h2>\n<p>一个 <code>Server</code>  对接 N 个客户端，在客户端连接之后，为每个客户端都分配一个执行线程。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/02/d6855af86b51f707.jpg\" alt=\"传统IO模型\" /></p>\n<p>从图中可以看出其特点：</p>\n<ul>\n<li>每个客户端连接到达之后，服务端会分配一个线程给该客户端，该线程会处理包括读取数据，解码，业务计算，编码，以及发送数据整个过程；</li>\n<li>同一时刻，服务端的吞吐量与服务器所提供的线程数量是呈线性关系的。</li>\n</ul>\n<p>但是这也有很大问题：</p>\n<ul>\n<li>\n<p>服务器并发量严重依赖于服务端能创建的线程数。</p>\n</li>\n<li>\n<p>服务端在获取客户端连接，读取数据，以及写入数据的过程都是阻塞类型的，在网络状况不好的情况下，这将极大的降低服务器每个线程的利用率，从而降低服务器吞吐量。</p>\n</li>\n</ul>\n<blockquote>\n<p>如果每一个客户端都维持一个与登陆服务器的连接。那么服务器将<strong>维护</strong>多个和客户端的连接以出来和客户端的 contnect 、read、write ，特别是对于长链接的服务，有多少个 c 端，就需要在 s 端维护同等的 IO 连接。这对服务器来说是一个很大的开销。</p>\n</blockquote>\n<p>代码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 服务端 -- 其实这里应该写死循环的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Server</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocket</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务端收到连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务端读取数据： \"</span> <span class=\"token operator\">+</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">OutputStreamWriter</span> write <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token comment\">// 两边接收数据都是 readLine，所以必须加换行符</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            write<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务端已收到数据\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            write<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 客户端</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NIOClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Socket</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token class-name\">OutputStreamWriter</span> write <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutputStreamWriter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 两边接收数据都是 readLine，所以必须加换行符</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            write<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端发送数据：xyz\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            write<span class=\"token punctuation\">.</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端发送数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">BufferedReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端收到数据： \"</span><span class=\"token operator\">+</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>你也可以试着使用通道和缓冲区实现，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tsNjh0eSNkZDkzZDcxNA==\">参考链接</span>。</p>\n</blockquote>\n<h2 id=\"io多路复用\"><a class=\"anchor\" href=\"#io多路复用\">#</a> I/O 多路复用</h2>\n<p>之前讲了 I/O 多路复用的模型介绍大概，这里我们给出源码实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocketChannel</span> serverChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 开启一个新的 Selector，这玩意也是要关闭释放资源的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 要使用选择器进行操作，必须使用非阻塞的方式，这样才不会像阻塞 IO 那样卡在 accept ()，</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 而是直接通过，让选择器去进行下一步操作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 将 ServerChannel 注册到选择器上，此时只有选择器只会监听这一个通道</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 因为是 ServerSocketChannel 这里我们就监听 accept 就可以了，等待客户端连接</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_ACCEPT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 无限循环等待新的用户网络操作</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token comment\">// 每次选择都可能会选出多个已经就绪的网络操作，没有操作时会暂时阻塞</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听到 \"</span><span class=\"token operator\">+</span>count<span class=\"token operator\">+</span><span class=\"token string\">\" 个事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 如果是第一次循环，拿到的事件 SelectionKey 绑定的通道都是 ServerChannel</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> selectionKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> selectionKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 根据不同的事件类型，执行不同的操作即可</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// 该事件绑定的通道就是 ServerChannel</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 如果 ServerSocketChannel 已经做好准备处理 Accept</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 我们现在知道了有一个客户端需要连接（之后可能会发送数据给服务端）</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 所以我们将客户端的通道初始化</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端已连接，IP地址为：\"</span><span class=\"token operator\">+</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    <span class=\"token comment\">// 现在连接就建立好了，接着我们需要将连接也注册选择器</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_READ</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token comment\">// 这样就在连接建立时完成了注册</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token comment\">// 如果当前连接有可读的数据并且可以写，那么就开始处理</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                    <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端数据：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    <span class=\"token comment\">// 直接向通道中写入数据就行</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token comment\">// 别关，说不定用户还要继续通信呢</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token comment\">// 处理完成后，一定记得移出迭代器，不然下次还有</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面是关于服务器的代码，最主要的就是 <code>SelectionKey</code> ，它包含了监听事件注册时的通道，比如一开始我们将通道 <code>ServerSocketChannel</code>  注册到选择器，然后在 <code>if</code>  选择语句中拿到的 <code>key</code>  就包含 <code>ServerSocket</code> 。</p>\n<p><code>SelectionKey</code>  有一个 <code>channel()</code>  方法，使用时需要强转一下。因为第一个 <code>if</code>  已经有了 <code>ServerSocketChannel</code>  的引用，就没必要调用 <code>cahnel()</code> 。</p>\n<p>之后的客户端代码就比较简单了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 创建一个新的 SocketChannel，通过通道进行通信</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> <span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"localhost\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token class-name\">Scanner</span> scanner <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已连接到服务端！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 咱给它套个无限循环，这样就能一直发消息了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入要发送给服务端的内容：\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> scanner<span class=\"token punctuation\">.</span><span class=\"token function\">nextLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 直接向通道中写入数据，真舒服</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已发送！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 直接从通道中读取数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"收到服务器返回：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>请读者将这部分代码弄清楚，不清楚就去查，下面给大家几篇写的比较好的博客</p>\n<blockquote>\n<p>田守枝 Java 技术博客（讲解细致，建议收藏）：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50aWFuc2hvdXpoaS5jb20vYXBpL3R1dG9yaWFscy9uZXR0eS8zMTg=\">http://www.tianshouzhi.com/api/tutorials/netty/318</span></p>\n<p>并发编程网（很短，推荐看一下）：<span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS9zZXJ2ZXItc29ja2V0LWNoYW5uZWwv\">http://ifeve.com/server-socket-channel/</span></p>\n<p>CSDN（这篇博客我只看了前面几句话，提到了我忽略的点）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvbGRfX19wbGF5L2FydGljbGUvZGV0YWlscy8xMDY2NjM3NzY=\">https://blog.csdn.net/cold___play/article/details/106663776</span></p>\n</blockquote>\n<p>但是这个也存在问题：比如一个线程忙不过来（真实），所以之后的 <code>Reactor</code>  模型会使用到线程池。</p>\n<h2 id=\"单线程reactor模型\"><a class=\"anchor\" href=\"#单线程reactor模型\">#</a> 单线程 Reactor 模型</h2>\n<p><code>Reactor</code>  模型主要是对服务器进行优化，首先我们抽象出两个组件</p>\n<ul>\n<li><code>Reactor</code>  线程：负责响应 IO 事件，并分发到 <code>Handler</code>  处理器。新的事件包含连接建立就绪，读就绪，写就绪等。</li>\n<li>Handler 处理器：执行<strong>非阻塞</strong>的操作（因为 <code>Selector</code>  只有监听到了真正要执行的事件，才会将该事件交给 <code>Handler</code>  执行，所以不存在阻塞操作）。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/07/315c775016584c9b.jpg\" alt=\"图片源自青空の霞光\" /></p>\n<p><code>JDK1.4</code>  提供了一套非阻塞 <code>IO</code>  的 <code>API</code> ，本质是以<strong>事件驱动</strong>来处理网络事件的， <code>Reactor</code>  是基于该 <code>API</code>  提出的一套 <code>IO</code>  模型。</p>\n<p>该模型主要分为四个部分：客户端连接，Reactor，Acceptor，Handler。</p>\n<p><code>Reactor</code>  模型是以事件进行驱动的（应该已经很了解事件驱动了吧），其能够将接收客户端连接，+ 网络读和网络写，以及<strong>业务计算进行拆分</strong>，从而极大的提升处理效率；Reactor 模型是异步<strong>非阻塞</strong>模型，工作线程在没有网络事件时可以处理其他的任务，而不用像传统 IO 那样必须阻塞等待。</p>\n<blockquote>\n<p><code>Acceptor</code>  处理客户端新连接，并分派请求到处理器链（ <code>Reactor</code> ）</p>\n</blockquote>\n<p>下图是比较正经（难懂）的图。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/03/b23b2105c197fe2f.jpg\" alt=\"Reactor模型\" /></p>\n<p>我们先看一下 <code>Handler</code>  代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 执行非阻塞操作，请记住，read 在这里也是非阻塞</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端数据：\"</span><span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                               <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>接着是 <code>Acceptor</code> ，非常快就能看完。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Acceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServerSocketChannel</span> serverChannel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Selector</span> selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Acceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocketChannel</span> serverChannel<span class=\"token punctuation\">,</span><span class=\"token class-name\">Selector</span> selector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverChannel <span class=\"token operator\">=</span> serverChannel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selector <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"客户端已连接，IP地址为：\"</span> <span class=\"token operator\">+</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                              channel<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 注册时，创建好对应的 Handler，这样在 Reactor 中分发的时候就可以直接调用 Handler</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span><span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_READ</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后看一下 <code>Reactor</code>  的实现，这里的 <code>dispatch</code>  使用了 <code>attachment</code>  方法</p>\n<blockquote>\n<p>选择键支持将单个任意对象附加到某个键的操作。可通过 <code>attach()</code>  方法附加对象，然后通过 <code>attachment()</code>  方法获取该对象。我们在 Acceptor 和 Handler 都没有使用 <code>attach</code>  方法，而是在注册时绑定 <code>SelectionKey key=channel.register(selector,SelectionKey.OP_READ,theObject);</code></p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reactor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Closeable</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServerSocketChannel</span> serverChannel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Selector</span> selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Reactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        serverChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 从这里可以看到，Reactor 并不处理连接，而是将需要连接的</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 事件交给 acceptor 处理</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_ACCEP</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                                  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Acceptor</span><span class=\"token punctuation\">(</span>serverChannel<span class=\"token punctuation\">,</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"监听到 \"</span> <span class=\"token operator\">+</span> count <span class=\"token operator\">+</span> <span class=\"token string\">\" 个事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectionKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> set<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasnext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 通过 dispatch 方法分发出去</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>selectionKey key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token class-name\">Object</span> att  <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">attachment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>att <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token comment\">// Handler 和 Acceptor 都实现自 Runnable 接口，这里就统一调用一下</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">)</span> att<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        selector<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     </pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>需要注意的是，这是单线程模式，也就是说，Reactor 和 Hander 都是处于一条线程执行。由于是单线程，只要有一个 handler 出现阻塞，其他的 Client 都会被阻塞，并且不能充分利用多核资源。所以单线程模型仅仅适用于 handler 中业务处理组件能快速完成的场景。</p>\n</blockquote>\n<p>所以整个流程图也可以这么画（其实这个图画的不准确， <code>client</code>  应该指向 <code>Reactor</code> ，而且此处也省略了 <code>dispatch</code> ）。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/04/1fd0e8d34115ad66.jpg\" alt=\"Reactor单线程模型\" /></p>\n<h2 id=\"多线程reactor模型\"><a class=\"anchor\" href=\"#多线程reactor模型\">#</a> 多线程 Reactor 模型</h2>\n<p>先看一下<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vMzc3MzcxNjEvP3NwbV9pZF9mcm9tPTMzMy45OTkuMC4w\">青空の霞光</span>给的图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/07/c06c6ae8afed08f1.jpg\" alt=\"\" /></p>\n<p>相关改进为：</p>\n<ul>\n<li>将 <code>Handler</code>  处理器的执行放入线程池，多线程进行业务处理。<strong>此时 handler 处理的是非阻塞任务</strong>。所以这个模型又叫做：<strong>业务处理与 IO 分离</strong>。</li>\n<li>对于 <code>Reactor</code>  而言，仍然是单线程。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/04/76186bdd3784f6b0.jpg\" alt=\"Reactor多线程模型\" /></p>\n<p>特点：</p>\n<ul>\n<li>\n<p>有一个专门的 NIO 线程用于监听服务器，接收客户端的 TCP 连接请求以及网络读写事件的处理（可以看到 <code>read</code>  和 <code>send</code>  仍然是 <code>Reactor</code>  在处理）。</p>\n</li>\n<li>\n<p>接收到连接之后，将该链接交给线程池，这些 NIO 线程负责消息的读取，解码，编码和发送。</p>\n</li>\n</ul>\n<p>在绝大多数场景下，Reactor 多线程模型可以满足性能需求，但是仅仅使用一个 NIO 线程负责监听和处理所有客户端连接同时还要负责处理网络读写可能会存在性能问题，比如<strong>百万客户端并发连接，或则服务端需要多客户端的握手信息进行安全认证，认证本身非常消耗性能</strong>。</p>\n<p>代码：我们只需要修改一下 <code>Handler</code>  即可</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Handler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 把线程池给安排了，10 个线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 真正项目开发，线程池一般是自定义的。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token constant\">POOL</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> channel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>channel <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token constant\">POOL</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接收到客户端数据：\"</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"已收到！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"主从reactor多线程模型\"><a class=\"anchor\" href=\"#主从reactor多线程模型\">#</a> 主从 Reactor 多线程模型</h2>\n<p>先看一下简化图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/07/bbcf85b18177c5c2.jpg\" alt=\"\" /></p>\n<p>之前的模型既要处理客户端连接，又要处理网络读写，但是网络读写在高并发情况下会成为系统的一个瓶颈。所以将 <code>Reactor</code>  拆分为 <code>mainReactor</code>  和 <code>subReactor</code> 。即使用线程池进行网络读写，只是用一个线程专门接收客户端连接。</p>\n<ul>\n<li><code>mainReactor</code>  主要进行客户端连接的处理，处理完成之后将该链接交给 <code>subReactor</code>  处理客户端的网络读写。</li>\n<li><code>subReactor</code>  使用一个线程池来支撑，而其他业务操作也是用一个线程池。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/04/f9e540e1a225450d.jpg\" alt=\"主从Reactor模型\" /></p>\n<p>通过这种方式，服务器的性能将会大大提升，在可见情况下，其基本上可以支持百万连接。如果想看具体的函数调用，可以看这篇：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phY2tfX2lUL2FydGljbGUvZGV0YWlscy8xMDcwMTA0ODY=\">深入理解主从 Reactor 多线程模型</span>。</p>\n<p>这次改动比较多，我们首先设计一下从 <code>Reactor</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//SubReactor 作为从 Reactor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SubReactor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Closeable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 每个从 Reactor 也有一个 Selector</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Selector</span> selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  \t<span class=\"token comment\">// 创建一个 4 线程的线程池，也就是四个从 Reactor 工作</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> <span class=\"token constant\">POOL</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">SubReactor</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> reactors <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubReactor</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> selectedIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 采用轮询机制，每接受一个新的连接，就轮询分配给四个从 Reactor</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 在一开始的时候就让 4 个从 Reactor 跑起来</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                reactors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SubReactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token comment\">// 一开就将从 Reactor 放到线程池中运行</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token constant\">POOL</span><span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>reactors<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 轮询获取下一个 Selector（Acceptor 用）</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Selector</span> <span class=\"token function\">nextSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> reactors<span class=\"token punctuation\">[</span>selectedIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        selectedIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>selectedIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> selector<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SubReactor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 启动后直接等待 selector 监听到对应的事件即可，其他的操作逻辑和 Reactor 一致</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" >> 监听到 \"</span><span class=\"token operator\">+</span>count<span class=\"token operator\">+</span><span class=\"token string\">\" 个事件\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> selectionKeys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> iterator <span class=\"token operator\">=</span> selectionKeys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SelectionKey</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token class-name\">Object</span> att <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">attachment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>att <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">)</span> att<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        selector<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>我们设计的 <code>SubReactor</code>  没有 <code>ServerSocketChannel</code> ，而是每个从 <code>Reactor</code>  都有一个 <code>Selector</code> ，在主 <code>Reactor</code>  中通过 <code>nextSelector</code>  静态方法轮流获得不同从 <code>Reactor</code>  的 <code>Selector</code> 。</p>\n</blockquote>\n<p>最后修改一下 <code>Acceptor</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Acceptor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServerSocketChannel</span> serverChannel<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 只需要一个 ServerSocketChannel 就行了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Acceptor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocketChannel</span> serverChannel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>serverChannel <span class=\"token operator\">=</span> serverChannel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">SocketChannel</span> channel <span class=\"token operator\">=</span> serverChannel<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 还是正常进行 Accept 操作，得到 SocketChannel</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" >> 客户端已连接，IP地址为：\"</span><span class=\"token operator\">+</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">getRemoteAddress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">SubReactor</span><span class=\"token punctuation\">.</span><span class=\"token function\">nextSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 选取下一个从 Reactor 的 Selector</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            selector<span class=\"token punctuation\">.</span><span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 在注册之前唤醒一下防止卡死</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_READ</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Handler</span><span class=\"token punctuation\">(</span>channel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意现在注册的是从 Reactor 的 Selector</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>需要注意，不同的人设计在代码实现方面可能不同，重点是 <code>Reactor</code>  的思想，主 <code>Reactor</code>  处理连接（也就是调用 <code>Acceptor</code> ）将 <code>SocketChannel</code>  注册到选择器上（因为之后就要进行读写操作），此时这个连接之后的读写请求都会发送给从 <code>Reactor</code>  的选择器，这也就规避了主 <code>Reactor</code>  处理读写请求。但是最终去完成这个请求的还是 <code>Handler</code> 。</p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9kYi5wcm8vZGIvNTAwMTY=\">理解 Reactor 模型</span>（这篇文章关于多线程 Reactor 的图有些不准确）</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLW5pby1zZWxlY3QtZXBvbGwuaHRtbA==\">https://pdai.tech/md/java/io/java-io-nio-select-epoll.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phY2tfX2lUL2FydGljbGUvZGV0YWlscy8xMDcwMTA0ODY=\">https://blog.csdn.net/Jack__iT/article/details/107010486</span></p>\n<p>青空の霞光：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tsNjh0eQ==\">https://www.yuque.com/qingkongxiaguang/javase/kl68ty</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/09/01/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(3)-NIO%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/",
            "url": "https://cecilia.cool/2022/09/01/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(3)-NIO%E5%9F%BA%E7%A1%80%E8%AF%A6%E8%A7%A3/",
            "title": "网络编程(3)--NIO基础详解",
            "date_published": "2022-09-01T03:13:56.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>BIO</code>  是阻塞的，如果没有多线程， <code>BIO</code>  就需要一直占用 <code>CPU</code> ，而 <code>NIO</code>  则是非阻塞 <code>IO</code> ， <code>NIO</code>  在获取连接或者请求时，即使没有取得连接和数据，也不会阻塞程序。NIO 的服务器实现模式为一个线程可以处理多个请求。</p>\n<p><code>I/O</code>  与  <code>NIO</code>  最重要的区别是数据打包和传输的方式， <code>I/O</code>  以流的方式处理数据，而  <code>NIO </code> 以块的方式处理数据。</p>\n<p>面向流的  <code>I/O</code>  一次处理一个字节数据：一个输入流产生一个字节数据，一个输出流消费一个字节数据。为流式数据创建过滤器非常容易，链接几个过滤器，以便每个过滤器只负责复杂处理机制的一部分。不利的一面是，面向流的  <code>I/O</code>  通常相当慢。</p>\n<h1 id=\"相关知识\"><a class=\"anchor\" href=\"#相关知识\">#</a> 相关知识</h1>\n<h2 id=\"通道\"><a class=\"anchor\" href=\"#通道\">#</a> 通道</h2>\n<p>通道（ <code>Channel</code>  接口）是对流的模拟，既可以用来进行读操作，又可以用来进行写操作。</p>\n<p>通道与流的不同之处在于，流只能在一个方向上移动 (一个流必须是  <code>InputStream</code>  或者  <code>OutputStream</code>  的子类)，而通道是双向的，可以用于读、写或者同时用于读写。</p>\n<p><code>NIO</code>  中常用的 <code>Channel</code>  有：</p>\n<ul>\n<li>\n<p>FileChannel: 从文件中读写数据；</p>\n</li>\n<li>\n<p>DatagramChannel: 通过 UDP 读写网络中数据；</p>\n</li>\n<li>\n<p>SocketChannel: 通过 TCP 读写网络中数据；</p>\n</li>\n<li>\n<p>ServerSocketChannel: 可以监听新进来的 TCP 连接，对每一个新进来的连接都会创建一个 SocketChannel。</p>\n</li>\n</ul>\n<p>我们先看一下 <code>Channel</code>  内部代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Channel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Closeable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通道是否处于开启状态</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 因为通道开启也需要关闭，所以实现了 Closeable 接口，所以这个方法懂的都懂</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/06/a30745dcd72b9009.jpg\" alt=\"通道接口结构\" /></p>\n<p>最后整合为 <code>ByteChannel</code>  接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ByteChannel</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ReadableByteChannel</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">WritableByteChannel</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们对比一下不使用通道和使用通道</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不使用通道</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 将 System.in 作为输入流</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">InputStream</span> in <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>len <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data = \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span>en<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 使用通道</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">ReadableByteChannel</span> readChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">Channels</span><span class=\"token punctuation\">.</span><span class=\"token function\">newChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Syetem</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 将通道中的数据写到缓冲区，缓冲区最多一次装 10 个</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        readChannel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 翻转缓冲区</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"filechannel\"><a class=\"anchor\" href=\"#filechannel\">#</a> FileChannel</h4>\n<p>通道一个重要的特点就是能够双向传输数据。但是 <code>FileInputStream</code>  得到的通道只能输入， <code>FileOutputStream</code>  得到的通道只能输出。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">FileChannel</span> channel <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以通过 <code>RandomAccessFile</code>  创建通道</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      通过 RandomAccessFile 进行创建，注意后面的 mode 有几种：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      r        以只读的方式使用</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      rw   读操作和写操作都可以</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      rws  每当进行写操作，同步的刷新到磁盘，刷新内容和元数据</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      rwd  每当进行写操作，同步的刷新到磁盘，刷新内容</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 这里设定为支持读写，这样创建的通道才能具有这些功能</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RandomAccessFile</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">FileChannel</span> channel <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>   <span class=\"token comment\">// 通过 RandomAccessFile 创建一个通道</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"伞兵二号马飞飞准备就绪！\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 注意读取也是从现在的位置开始</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"写操作完成之后文件访问位置：\"</span><span class=\"token operator\">+</span>channel<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 需要将位置变回到最前面，这样下面才能从文件的最开始进行读取</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        channel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>除了基本的读写操作，也可以对文件进行截断： <code>channel.truncate(20)</code> 。就只会保留前 20 个字节</p>\n</blockquote>\n<p>示例：文件拷贝</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在缓冲区也有文件复制的案例，但是此处我们直接使用写好的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token class-name\">FileOutputStream</span> out <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">FileChannel</span> inChannel <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        inChannel<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>inChannel<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 也可以反向操作</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>inChannel<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>inChannel<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"文件锁filelock\"><a class=\"anchor\" href=\"#文件锁filelock\">#</a> 文件锁 FileLock</h4>\n<p>我们可以创建一个跨进程文件锁来防止多个进程之间的文件争抢操作（注意这里是进程，不是线程）FileLock 是文件锁，它能保证同一时间只有一个进程（程序）能够修改它，或者都只可以读，这样就解决了多进程间的同步文件，保证了安全性。但是需要注意的是，它进程级别的，不是线程级别的，他可以解决多个进程并发访问同一个文件的问题，但是它不适用于控制同一个进程中多个线程对一个文件的访问。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">RandomAccessFile</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomAccessFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"rw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">FileChannel</span> <span class=\"token class-name\">Channel</span> <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 上锁：对 0~6 个字节上锁，false 表示独占锁，其他进程连读都不可以</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">FileLock</span> lock <span class=\"token operator\">=</span> channel<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 也可以：channel.getLock (0,channel.size (),false);</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 释放锁</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    lock<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>为了快速讲完这部分内容，笔者简化了一些细节</p>\n<blockquote>\n<p>独占锁如果出现了交叉部分，也会被阻塞（人之常情嘛）。共享锁就是将参数设置为 true。还有一个 <code>trylock</code>  的方法，它会尝试去获得锁，如果失败就返回 <code>null</code> （这让我想起 <code>AQS</code>  里面的 <code>tryAccquire</code>  方法）。</p>\n</blockquote>\n<h2 id=\"缓冲区\"><a class=\"anchor\" href=\"#缓冲区\">#</a> 缓冲区</h2>\n<p>发送给通道的所有数据都必须首先放到缓冲区中，从通道读取的任何数据都要先读到缓冲区。不会直接对通道进行读写数据，而是要先经过缓冲区。</p>\n<p>缓冲区实质上是一个<strong>数组</strong>，但它不仅仅是一个数组。缓冲区提供了对数据的结构化访问，而且还可以跟踪系统的读 / 写进程。</p>\n<p>缓冲区状态变量：</p>\n<ul>\n<li><code>capacity</code> : 最大容量；</li>\n<li><code>position</code> : 当前已经读写的字节数；</li>\n<li><code>limit</code> : 还可以读写的字节数。</li>\n</ul>\n<p>常见的缓冲区有（都是 <code>Buffer</code>  抽象类的子类）：</p>\n<ul>\n<li>ByteBuffer</li>\n<li>CharBuffer</li>\n<li>ShortBuffer</li>\n<li>IntBuffer</li>\n<li>LongBuffer</li>\n<li>FloatBuffer</li>\n<li>DoubleBuffer</li>\n</ul>\n<h3 id=\"相关方法\"><a class=\"anchor\" href=\"#相关方法\">#</a> 相关方法</h3>\n<h4 id=\"获取对象\"><a class=\"anchor\" href=\"#获取对象\">#</a> 获取对象</h4>\n<p>这里以 <code>IntBuffer</code>  为例，我们想要获得一个 <code>IntBuffer</code>  的实例化对象，需要调用 <code>allocate</code>  方法或者 <code>wrap</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1. 申请容量为 10 的 int 缓冲区</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">IntBuffer</span> buffer1 <span class=\"token operator\">=</span> <span class=\"token class-name\">IntBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 2. 将现有数组直接转换为缓冲区</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">IntBuffer</span> buffer2 <span class=\"token operator\">=</span> <span class=\"token class-name\">IntBuffer</span><span class=\"token punctuation\">,</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 看一下内部两个方法的相关实现</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>capacity <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeapIntBuffer</span><span class=\"token punctuation\">(</span>capacity<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 这里也能说明 HeapIntBuffer 是 IntBuffer 子类</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  \t<span class=\"token comment\">//HeapIntBuffer 是在堆内存中存放数据，本质上就数组，一会我们可以在深入看一下</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      \t<span class=\"token comment\">// 创建了一个新的 HeapIntBuffer 对象，并且给了初始数组以及截取的起始位置和长度</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeapIntBuffer</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IllegalArgumentException</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里涉及到一个新的类，我们先看一下总体的类结构</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/06/2c96523c4e767ff8.jpg\" alt=\"类结构\" /></p>\n<p>我们看一下两个类的构造方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// IntBuffer 构造方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hb<span class=\"token punctuation\">;</span>                  <span class=\"token comment\">// 只有在堆缓冲区实现时才会使用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">boolean</span> isReadOnly<span class=\"token punctuation\">;</span>                 <span class=\"token comment\">// 只有在堆缓冲区实现时才会使用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">IntBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> mark<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lim<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> hb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>mark<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> lim<span class=\"token punctuation\">,</span> cap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 调用 Buffer 类的构造方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hb <span class=\"token operator\">=</span> hb<span class=\"token punctuation\">;</span>    <span class=\"token comment\">//hb 就是真正我们要存放数据的数组，堆缓冲区底层其实就是这么一个数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>offset <span class=\"token operator\">=</span> offset<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 起始偏移位置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// HeapIntBuffer 构造方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">HeapIntBuffer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> off<span class=\"token punctuation\">,</span> off <span class=\"token operator\">+</span> len<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  \t<span class=\"token comment\">//mark 是标记，off 是当前起始下标位置，off+len 是最大下标位置，</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//buf.length 是底层维护的数组真正长度，buf 就是数组，最后一个 0 是起始偏移位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"写操作\"><a class=\"anchor\" href=\"#写操作\">#</a> 写操作</h4>\n<p><code>Buffer</code>  中所有的 <code>put</code>  函数。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在指定位置插入数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 直接将 src 全部插入缓冲区，但是不能超过缓冲区大小</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 直接存放数组中的内容，同上，但是可以指定存放一段范围</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 直接存放另一个缓冲区中的内容</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntBuffer</span> src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们看做简单的 <code>put</code>  源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    hb<span class=\"token punctuation\">[</span><span class=\"token function\">ix</span><span class=\"token punctuation\">(</span><span class=\"token function\">nextPutIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 将 i 的值加上我们之前设定的 offset 偏移量值，但是默认是 0（非 0 的情况后面会介绍）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">ix</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextPutIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> p <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取 Buffer 类中的 position 位置（一开始也是 0）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">>=</span> limit<span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 位置肯定不能超过底层数组最大长度，否则越界</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferOverflowException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    position <span class=\"token operator\">=</span> p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 获取之后会使得 Buffer 类中的 position+1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 返回当前的位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果将 <code>offset</code>  看为 0，那么整个函数就是在数组 <code>hb</code>  的 <code>position</code>  位置加入元素</p>\n<p>示例：快速复制文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fastCopy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> dist<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 获得源文件的输入字节流 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">FileInputStream</span> fin <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* 获取输入字节流的文件通道 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">FileChannel</span> fcin <span class=\"token operator\">=</span> fin<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* 获取目标文件的输出字节流 */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">FileOutputStream</span> fout <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/* 获取输出字节流的通道 */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">FileChannel</span> fcout <span class=\"token operator\">=</span> fout<span class=\"token punctuation\">.</span><span class=\"token function\">getChannel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 为缓冲区分配 1024 个字节 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocateDirect</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* 从输入通道中读取数据到缓冲区中 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> fcin<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">/* read () 返回 -1 表示 EOF */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/* 切换读写 */</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">/* 把缓冲区的内容写入输出文件中 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        fcout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">/* 清空缓冲区 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以看一下整个 <code>buffer</code>  的状态变化，此处我们假设大小为 8 字节</p>\n<p>①新建一个大小为 8 个字节的缓冲区，此时 position 为 0，而 limit = capacity = 8。capacity 变量不会改变，下面的讨论会忽略它。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/01/77fb2a16735a25dc.jpg\" alt=\"buffer变化1\" /></p>\n<p>② 从输入通道中读取 5 个字节数据写入缓冲区中，此时 position 移动设置为 5，limit 保持不变。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/01/6df58dfb355cd5fd.jpg\" alt=\"buffer变化2\" /></p>\n<p>③ 在将缓冲区的数据写到输出通道之前，需要先调用 flip () 方法，这个方法将 limit 设置为当前 position，并将 position 设置为 0。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/01/fc7668224747f135.jpg\" alt=\"buffer变化3\" /></p>\n<p>④ 从缓冲区中取 4 个字节到输出缓冲中，此时 position 设为 4。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/01/e41dc8148e004937.jpg\" alt=\"buffer变化4\" /></p>\n<p>⑤ 最后需要调用 clear () 方法来清空缓冲区，此时 position 和 limit 都被设置为最初位置。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/01/34a021e1ad767087.jpg\" alt=\"buffer变化5\" /></p>\n<blockquote>\n<p>为什么缓冲区在写之后读需要使用 <code>flip</code>  函数呢？我们从图中看出 <code>flip</code>  之后会将 Position 置为 0。从读到写不需要翻转（如果是覆盖写的话）</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Buffer</span> <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 修改 limit 值，当前写到哪里，下次读的最终位置就是这里</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    limit <span class=\"token operator\">=</span> position<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    position <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//position 归零</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    mark <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 标记还原为 - 1，但是现在我们还没用到</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们通过 <code>put</code>  方法来深入理解一下 <code>flip</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntBuffer</span> src<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">isReadOnly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadOnlyBufferException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 非常重要，在这里就是确定 src 的元素个数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 你现在是读 src，你应该将 src 转换为读状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferOverflowException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p><code>remaining()</code>  在读缓冲区时的结果期望是缓冲区数据个数，在写缓冲区时的结果期望是缓冲区的剩余容量。</p>\n</blockquote>\n<p>为什么我要强调期望呢？因为如果不恰当使用 <code>flip</code> ，得到的结果就不是期望值。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">remaining</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// 计算并获取当前缓冲区的剩余空间</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> rem <span class=\"token operator\">=</span> limit <span class=\"token operator\">-</span> position<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 最大容量减去当前位置，就是剩余空间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> rem <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> rem <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 没容量就返回 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果是写缓冲区， <code>limit-position</code>  就是剩余容量；使用 <code>flip</code>  之后， <code>limit-position</code>  就是缓冲区包含的数据个数。所以， <code>flip</code>  的本质就是通过改变 <code>limit</code>  和 <code>position</code>  的值来改变二者之差的含义。・</p>\n<h4 id=\"读操作\"><a class=\"anchor\" href=\"#读操作\">#</a> 读操作</h4>\n<p>为什么我们需要翻转操作，因为我们读写数据都是依托于 <code>position</code>  定位的。写入 / 读取（ <code>get()</code>  方法）都会使 <code>position</code>  加一。如果超出范围抛出异常。</p>\n<p>当然也可以用 <code>get(i)</code>  来指定读取第 <code>i</code>  个元素。</p>\n<p>看一下有哪些重载的 <code>get</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只有这个方法不会改变 position</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token keyword\">int</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 实际是调用下面那个方法</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dst<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> offset<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们也可以使用 <code>array()</code>  方法直接返回 <code>hb</code>  数组。但是这直接将 <code>hb</code>  底层数组暴露在外面，所有修改都会生效在缓冲区。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hb <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 为空那说明底层不是数组实现的，肯定就没法转换了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isReadOnly<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 只读也是不让直接取出的，因为一旦取出去岂不是就能被修改了</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadOnlyBufferException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> hb<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 直接返回 hb</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后，缓冲区还有一个 <code>mark</code>  操作，类似原理在缓冲流已经讲过了，此处不加赘述。当然缓冲区还有其他一些操作，这里笔者觉得不宜写太多，建议就是遇到了不懂就去浏览器搜。</p>\n<p>只读缓冲区： <code>HeapIntBufferR</code>  是 <code>HeapIntBuffer</code>  的子类，初始化为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">IntBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">IntBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">IntBuffer</span> readBuffer <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">asReadOnlyBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">IntBuffer</span> <span class=\"token function\">asReadOnlyBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 注意这里并不是直接创建了 HeapIntBuffer，而是 HeapIntBufferR，并且直接复制的 hb 数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HeapIntBufferR</span><span class=\"token punctuation\">(</span>hb<span class=\"token punctuation\">,</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">markValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                 <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                 offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h2>\n<p>这个其实就是<strong> Unix IO 模型</strong>讲到的多路复用， <code>NIO</code>  实现了 <code>IO</code>  多路复用中的 Reactor 模型，一个线程使用一个选择器 Selector 通过轮询的方式去监听多个通道 <code>Channel</code>  上的事件，从而让一个线程就可以处理多个事件。</p>\n<p>通过配置监听的通道 Channel 为非阻塞，那么当 Channel 上的 IO 事件未到达时，就不会进入阻塞状态一直等待，而是继续轮询其它 Channel，找到 IO 事件已经到达的 Channel 执行。</p>\n<blockquote>\n<p>只有套接字 Channel 才能配置非阻塞，而 FileChannel 不能（FileChannel 配置非阻塞也没有意义）。</p>\n</blockquote>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/01/c631fb000c1a9630.jpg\" alt=\"选择器\" /></p>\n<h3 id=\"创建选择器\"><a class=\"anchor\" href=\"#创建选择器\">#</a> 创建选择器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"通道注册到选择器\"><a class=\"anchor\" href=\"#通道注册到选择器\">#</a> 通道注册到选择器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ServerSocketChannel</span> ssChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_ACCEPT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通道配置必须为非阻塞模式，最后一行代码需要指定注册的具体事件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 SelectionKey 中定义</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">OP_READ</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">OP_WRITE</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">OP_CONNECT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">OP_ACCEPT</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"监听事件\"><a class=\"anchor\" href=\"#监听事件\">#</a> 监听事件</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用  <code>select()</code>  来监听到达的事件，它会一直阻塞直到有至少一个事件到达。</p>\n<h3 id=\"获取到达的事件\"><a class=\"anchor\" href=\"#获取到达的事件\">#</a> 获取到达的事件</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> leys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keyIterator <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"事件循环\"><a class=\"anchor\" href=\"#事件循环\">#</a> 事件循环</h3>\n<p>一次 <code>select()</code>  调用不能处理所有事件，并且服务器端有可能需要一直监听事件，因此服务器端处理事件的代码一般会放在一个死循环内。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keyIterator <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"套接字-nio-实例\"><a class=\"anchor\" href=\"#套接字-nio-实例\">#</a> 套接字 NIO 实例</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NIOServer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 创建选择器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Selector</span> selector <span class=\"token operator\">=</span> <span class=\"token class-name\">Selector</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 将通道注册到选择器上（设置非阻塞）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">ServerSocketChannel</span> ssChannel <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">open</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_ACCEPT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> ssChannel<span class=\"token punctuation\">.</span><span class=\"token function\">socket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">InetSocketAddress</span> address <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            selector<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> selector<span class=\"token punctuation\">.</span><span class=\"token function\">selectedKeys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">></span></span> keyIterator <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token class-name\">SelectionKey</span> key <span class=\"token operator\">=</span> keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                    <span class=\"token class-name\">ServerSocketChannel</span> ssChannel1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerSocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token comment\">// 雾浮起为每个新连接创建一个 SocketChannel</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">SocketChannel</span> sChannel <span class=\"token operator\">=</span> ssChannel1<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">configureBlocking</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// 该连接主要用于从客户端读取数据</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span><span class=\"token class-name\">SelectionKey</span><span class=\"token punctuation\">.</span><span class=\"token constant\">OP_READ</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token function\">isReadable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    <span class=\"token class-name\">SocketChannel</span> sChannel <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span><span class=\"token punctuation\">)</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">channel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">readDataFromSocketChannel</span><span class=\"token punctuation\">(</span>sChannel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                    sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                keyIterator<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">readDataFromSocketChannel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SocketChannel</span> sChannel<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token class-name\">ByteBuffer</span> buffer <span class=\"token operator\">=</span> <span class=\"token class-name\">ByteBuffer</span><span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token class-name\">StringBuilder</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> sChannel<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token keyword\">int</span> limit <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>limit<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> limit<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                dst<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span>buffer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            data<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>dst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>客户端</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NIOClient</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8888</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">OutputStream</span> out <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLW5pby5odG1s\">https://pdai.tech/md/java/io/java-io-nio.html</span></p>\n<p>语雀（青空の霞光）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueXVxdWUuY29tL3Fpbmdrb25neGlhZ3VhbmcvamF2YXNlL2tsNjh0eSNlNGY1MmViYw==\">https://www.yuque.com/qingkongxiaguang/javase/kl68ty#e4f52ebc</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3R1dG9yaWFscy5qZW5rb3YuY29tL2phdmEtbmlvL2luZGV4Lmh0bWw=\">Java NIO Tutorial  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tL25pby5odG1s\">Java NIO 浅析  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9lZHVjYXRpb24vamF2YS9qLW5pby9qLW5pby5odG1s\">IBM: NIO 入门  (opens new window)</span></p>\n<p>Eckel B, 埃克尔，昊鹏，等. Java 编程思想 [M]. 机械工业出版社，2002.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9lZHVjYXRpb24vamF2YS9qLW5pby9qLW5pby5odG1s\">IBM: NIO 入门  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tamF2YWlvL2luZGV4Lmh0bWw=\">IBM: 深入分析 Java I/O 的工作机制  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tY2hpbmVzZWNvZGluZy9pbmRleC5odG0=\">IBM: 深入分析 Java 中的中文编码问题  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9qYXZhL2otbG8tc2VyaWFsL2luZGV4Lmh0bWw=\">IBM: Java 序列化的高级认识  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hpbWlzby9hcnRpY2xlL2RldGFpbHMvMjQ5OTA0OTk=\">NIO 与传统 IO 的区别  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3N0Zy10dWQuZ2l0aHViLmlvL3NlZGMvTGVjdHVyZS93czEzLTE0LzUuMy1EZWNvcmF0b3IuaHRtbCNtb2RlPWRvY3VtZW50\">Decorator Design Pattern  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2xhYm9qYXZhLmJsb2dzcG90LmNvbS8yMDEyLzEyL3NvY2tldC1tdWx0aWNhc3QuaHRtbA==\">Socket Multicast</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTc0MTkxNjI0MzMxMTAwMTc0\">https://juejin.cn/post/6974191624331100174</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/31/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(2)-BIO%E8%AF%A6%E8%A7%A3/",
            "url": "https://cecilia.cool/2022/08/31/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(2)-BIO%E8%AF%A6%E8%A7%A3/",
            "title": "网络编程(2)--BIO详解",
            "date_published": "2022-08-31T10:47:08.000Z",
            "content_html": "<h1 id=\"重要概念\"><a class=\"anchor\" href=\"#重要概念\">#</a> 重要概念</h1>\n<ul>\n<li><code>阻塞IO</code>  和  <code>非阻塞IO</code></li>\n</ul>\n<p>这两个概念是 <code>程序级别</code> 的。主要描述的是程序请求操作系统 IO 操作后，如果 IO 资源没有准备好，那么程序该如何处理的问题：前者等待；后者继续执行 (并且使用线程一直轮询，直到有 IO 资源准备好了)。</p>\n<p>程序级别的差异表现在开发人员如何编写代码来实现不同功能。</p>\n<ul>\n<li><code>同步IO</code>  和  <code>非同步IO</code></li>\n</ul>\n<p>这两个概念是 <code>操作系统级别</code> 的。主要描述的是操作系统在收到程序请求 IO 操作后，如果 IO 资源没有准备好，该如何响应程序的问题：前者不响应，直到 IO 资源准备好以后；后者返回一个标记 (好让程序和自己知道以后的数据往哪里通知)，当 IO 资源准备好以后，再用事件机制返回给程序。</p>\n<h1 id=\"传统的bio通信简介\"><a class=\"anchor\" href=\"#传统的bio通信简介\">#</a> 传统的 BIO 通信简介</h1>\n<p>我们这里讲的 <code>IO</code>  是以套接字为数据载体的 <code>BS</code>  架构层面，以前大多数网络通信是阻塞模式：</p>\n<ul>\n<li>\n<p>客户端向服务器端发出请求后，客户端会一直等待 (不会再做其他事情)，直到服务器端返回结果或者网络出现问题。</p>\n</li>\n<li>\n<p>服务器端同样的，当在处理某个客户端 A 发来的请求时，另一个客户端 B 发来的请求会等待，直到服务器端的这个处理线程完成上一个处理。</p>\n</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/31/079d2509a6ab9a23.jpg\" alt=\"BS示意图\" /></p>\n<p>尽管可以使用多线程，主线程接收请求，其他线程来处理请求。但是仍然存在局限，数据报文的接收仍然需要一个一个的来，并且在 <code>Linux</code>  系统中，可以创建的线程是有限的。每个线程都是较大的资源消耗， <code>JVM</code>  创建一个线程时，回味起分配堆栈空间，默认为 <code>128K</code> 。如果应用程序大量使用长连接，线程不会关闭，系统资源消耗容易失控（此处可以联想 QQ，如果不发消息，该线程也会被占用）。</p>\n<h1 id=\"代码实践\"><a class=\"anchor\" href=\"#代码实践\">#</a> 代码实践</h1>\n<p>我们通过 <code>socket</code>  模拟 <code>BIO</code>  的实现逻辑</p>\n<p>建立 <code>Server</code> ，建立 <code>ServerSocket</code>  对象，绑定端口，等待连接，如果连接成功就新建一个线程去处理连接</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> server <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Socket</span> socket<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 绑定端口</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token class-name\">ServerSocket</span> serverSocket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServerSocket</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InetSocketAddress</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 死循环一直等待客户端发送请求</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token comment\">// 等待连接  阻塞</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待连接\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                socket <span class=\"token operator\">=</span> serverSocket<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"连接成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 连接成功后新开一个线程去处理这个连接</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bytes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"等待读取数据\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                            <span class=\"token comment\">// 等待读取数据    阻塞</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> socket<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>bytes<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"数据读取成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>建立 <code>Client</code> -- 客户端代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Socket</span> socket<span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Socket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">8080</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">getOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"一条数据\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从代码可以看到，当服务端接收到一个客户端请求时，会新开一个线程来执行任务，在 <code>IO</code>  时会被阻塞。从前面我们对各种 <code>IO</code>  讲解时知道， <code>read</code>  方法，如果 <code>IO</code>  没有准备好，就会阻塞。不论是阻塞 IO，非阻塞 IO，多路复用，信号驱动，都会在 <code>read</code>  方法存在阻塞的情况。</p>\n<p>如果操作系统没有发现有套接字从指定的端口 X 来，那么操作系统就会等待。这样 <code>serverSocket.accept()</code>  方法就会一直等待。这就是为什么 <code>accept()</code>  方法为什么会阻塞：它内部的实现是使用的操作系统级别的同步 IO。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>掘金：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTc0MTkxNjI0MzMxMTAwMTc0\">https://juejin.cn/post/6974191624331100174</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLWJpby5odG1s\">https://pdai.tech/md/java/io/java-io-bio.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/30/Java/%E5%B9%B6%E5%8F%91/Java%E7%BA%BF%E7%A8%8B%E6%B1%A01-%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%BB%93%E6%9E%84/",
            "url": "https://cecilia.cool/2022/08/30/Java/%E5%B9%B6%E5%8F%91/Java%E7%BA%BF%E7%A8%8B%E6%B1%A01-%E7%9B%B8%E5%85%B3%E7%B1%BB%E7%BB%93%E6%9E%84/",
            "title": "Java线程池(1)--相关类结构",
            "date_published": "2022-08-30T01:46:50.000Z",
            "content_html": "<h1 id=\"类结构关系图\"><a class=\"anchor\" href=\"#类结构关系图\">#</a> 类结构关系图</h1>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/30/d1bcfa7989f8d9ea.jpg\" alt=\"UML类图\" /></p>\n<h1 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h1>\n<h2 id=\"excutor\"><a class=\"anchor\" href=\"#excutor\">#</a> Excutor</h2>\n<blockquote>\n<p><code>Executor</code>  接口提供一种将任务提交从任务运行分离开来的方法。通常使用  <code>Executor</code>  而不是显式地创建线程。</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> command<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般来说，任务提交给 <code>Excutor</code> ，任务不会在提交线程中运行，而是交给其他线程</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPerTaskExecutor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是 <code>Excutor</code>  也不是严格异步，最简单的情况下， <code>Excutor</code>  可以在调用者线程中立即运行提交的任务</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">DirectExecutor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Executor</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        r<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其实就是看实现类如何编写代码。<strong>Executor</strong> 的主要作用：提供了一种显示创建线程的方式。</p>\n<ul>\n<li><code>JDK1.5</code>  之前的方式： <code>Thread</code>  +  <code>Runnable</code></li>\n<li><code>Executor</code>  提供的的方式： <code>Executor</code>  +  <code>Runnable</code></li>\n</ul>\n<h2 id=\"executorservice\"><a class=\"anchor\" href=\"#executorservice\">#</a> ExecutorService</h2>\n<blockquote>\n<p><code>ExecutorService</code>  继承自 <code>Executor</code>  接口， <code>ExecutorService</code>  提供了<strong>管理终止</strong>的方法，以及可为跟踪一个或多个异步任务执行状况而生成  <code>Future</code>  的方法。 可以关闭  <code>ExecutorService</code> ，这将导致其停止接受新任务。关闭后，执行程序将最后终止，这时没有任务在执行，也没有任务在等待执行，并且无法提交新任务。</p>\n</blockquote>\n<p>详细讲解就是：</p>\n<ul>\n<li><strong>ExecutorService 接口</strong>是一个<strong>执行器</strong>，它可以终止任务。</li>\n<li><strong>ExecutorService 接口</strong>还提供了返回<strong> Future 接口</strong>的方法，这个方法可以用于追踪一个或多个异步任务的执行情况。</li>\n<li><strong>ExecutorService</strong> 可以手动关闭，这种操作会导致它拒绝新的任务。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 不再接受新任务，允许之前已经提交的方法执行完毕，然后再关闭执行器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 阻止正在等待的任务开启，并且会试图停止正在执行的任务，然后关闭执行器。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">shutdownNow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ExecutorService</code>  还有一个重要的方法： <code>submit()</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这表示 <code>ExecutorService</code>  可以接收 <code>Runnable</code> ，也可以接收 <code>Callable&lt;T&gt;</code> 。</p>\n<p>下面给一个简单的示例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//newCachedThreadPool 就是一个线程池</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newCachedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//ExecutorService 通过 submit 提交任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- ExecutorService begin.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- ExecutorService end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--- ExecutorService is interrupted.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其他一些重要方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在线程池服务执行 shutdown () 或者 shutdownNow () 方法之后，所有的任务是否已经完成</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果没有执行 shutdown () 或者 shutdownNow () 方法，则永远返回 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 阻塞等待所有的任务终止</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 如果等待时间超时，则返回 false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 如果当前线程被 interrupt，则抛出 InterruptedException 异常</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果线程池了执行 shutdown () 或者 shutdownNow () 方法，并且所有的任务都已经完成，则返回 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 如果线程池未执行 shutdown () 或者 shutdownNow () 方法，则永远返回 false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">awaitTermination</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"scheduledexecutorservice\"><a class=\"anchor\" href=\"#scheduledexecutorservice\">#</a> ScheduledExecutorService</h2>\n<p>从 <code>Scheduled</code>  可以看出与定时有关。可以在<strong>给定延时</strong>之后调度任务，也可以根据指定的周期调度任务。</p>\n<ul>\n<li><strong>schedule () 方法</strong>可以创建含有<strong>延时 (delays)<strong> 变量的任务，然后返回一个可以用于</strong>取消</strong>或<strong>检查运行状态</strong>的<strong> Future 对象</strong>。如果 <code>delays&lt;=0</code> ，则会立即执行。</li>\n<li><strong>scheduleAtFixedRate () 方法</strong>和<strong> scheduleWithFixedDelay () 方法</strong>可以创建并运行<strong>定期运行</strong>的任务。</li>\n</ul>\n<p>详细方法说明：</p>\n<p>1. <code>schedule(Runnable command,long delay, TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (delay) 之后，运行 Runnable 任务。</li>\n<li>此任务只运行一次。</li>\n</ul>\n<p>2. <code>schedule(Callable callable,long delay, TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (delay) 之后，运行 Callable 任务。</li>\n<li>此任务只运行一次。</li>\n</ul>\n<p>3. <code>scheduleWithFixedDelay(Runnable command,long initialDelay,long delay,TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (initialDelay) 之后，开始周期性的运行 Runnable 任务。</li>\n<li>周期性：上一次任务执行完成之后，等待一段时间 (delay)，然后开始下一次任务。</li>\n</ul>\n<p>4. <code>scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit)</code> ：</p>\n<ul>\n<li>在一定延时 (initialDelay) 之后，开始周期性的运行 Runnable 任务。</li>\n<li>周期性：每过一段时间 (period)，就开始运行一次 Runnable 任务。</li>\n<li>如果任务的执行时间大于等待周期 (period)：上一次任务执行完成之后，立即开始下一次任务。也就是说：每过一段时间 (任务执行时间)，就开始运行一次 Runnable 任务。</li>\n</ul>\n<h2 id=\"abstractexecutorservice\"><a class=\"anchor\" href=\"#abstractexecutorservice\">#</a> AbstractExecutorService</h2>\n<blockquote>\n<p><code>AbstractExecutorService</code>  继承自 <code>ExecutorService</code>  接口，其提供  <code>ExecutorService</code>  执行方法的默认实现。此类使用  <code>newTaskFor()</code>  返回的 RunnableFuture 实现  <code>submit</code> 、 <code>invokeAny</code>  和  <code>invokeAll</code>  方法，默认情况下， <code>RunnableFuture</code>  是此包中提供的  <code>FutureTask</code>  类。</p>\n</blockquote>\n<p><code>invokeAny()</code>  是调用<strong> newTaskFor () 方法对任务进行了包装为 RunnableFuture 对象</strong>，然后调用了<strong>本对象的 execute () 方法提交任务</strong>，并返回异步计算结果对象。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtb3ZlcnZpZXcuaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-juc-overview.html</span></p>\n<p>Executor 接口学习笔记：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmNoYW81MjcyL2FydGljbGUvZGV0YWlscy83OTgyOTQwNw==\">https://blog.csdn.net/hanchao5272/article/details/79829407</span></p>\n<p>ExecutorService 接口学习笔记：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmNoYW81MjcyL2FydGljbGUvZGV0YWlscy83OTgzMDI0NQ==\">https://blog.csdn.net/hanchao5272/article/details/79830245</span></p>\n<p>ScheduleExecutorService 接口学习笔记：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hhbmNoYW81MjcyL2FydGljbGUvZGV0YWlscy83OTgzNDc0NA==\">https://blog.csdn.net/hanchao5272/article/details/79834744</span></p>\n<p>简书：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83NDE4YmVkZDUyMGY=\">https://www.jianshu.com/p/7418bedd520f</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/29/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(1)-Unix%20IO%E6%A8%A1%E5%9E%8B/",
            "url": "https://cecilia.cool/2022/08/29/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B(1)-Unix%20IO%E6%A8%A1%E5%9E%8B/",
            "title": "网络编程(1)--Unix IO模型",
            "date_published": "2022-08-29T09:11:42.000Z",
            "content_html": "<h1 id=\"io模型\"><a class=\"anchor\" href=\"#io模型\">#</a> I/O 模型</h1>\n<p>Unix 包含物种 <code>IO</code>  模型，分别是：阻塞 <code>IO</code> 、非阻塞 <code>IO</code> 、 <code>IO</code>  多路复用、信号驱动 <code>IO</code> 、异步 <code>IO</code> 。和 Java 的 <code>IO</code>  模型有下列对应（不严格）</p>\n<table>\n<thead>\n<tr>\n<th>Java-IO 模型</th>\n<th>Unix-IO 模型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BIO</td>\n<td>阻塞式 IO</td>\n</tr>\n<tr>\n<td>NIO</td>\n<td>IO 多路复用</td>\n</tr>\n<tr>\n<td>AIO</td>\n<td>异步 IO</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"内核态与用户态\"><a class=\"anchor\" href=\"#内核态与用户态\">#</a> 内核态与用户态</h2>\n<p>我们将文件从磁盘加载到内存中。操作系统是怎么做的？</p>\n<ul>\n<li>进程陷入内核态，通过系统调用执行文件阅读。</li>\n<li>系统调用结束后，返回用户态。<br />\n所以 Unix 的五种 IO 模型的不同指出，就是这两个步骤的处理流程不同。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/263fe8ccf6ac446f.jpg\" alt=\"内核态与用户态\" /></p>\n<p>详细可以参考这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAzOTc3NDc4NA==\">从根上理解用户态与内核态</span>。</p>\n<h2 id=\"阻塞式io\"><a class=\"anchor\" href=\"#阻塞式io\">#</a> 阻塞式 I/O</h2>\n<p>应用进程被阻塞，知道数据复制到应用进程缓冲区才返回。应该注意到，在阻塞的过程中，其它程序还可以执行，因此阻塞不意味着整个操作系统都被阻塞。因为其他程序还可以执行，因此不消耗  <code>CPU</code>  时间，这种模型的执行效率会比较高。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/2a980fa2571b2c21.jpg\" alt=\"阻塞式I/O\" /></p>\n<h2 id=\"非阻塞式-io\"><a class=\"anchor\" href=\"#非阻塞式-io\">#</a> 非阻塞式 I/O</h2>\n<p>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知 I/O 是否完成，这种方式称为轮询 ( <code>polling</code> )。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/84ce0bff467e53e2.jpg\" alt=\"非阻塞式IO模型\" /></p>\n<h2 id=\"io-多路复用\"><a class=\"anchor\" href=\"#io-多路复用\">#</a> I/O 多路复用</h2>\n<blockquote>\n<p>I/O 多路复用是指用一个线程检查多个文件描述符（Socket）的状态。</p>\n</blockquote>\n<p>类似与非阻塞，只不过轮询不是由用户线程去执行，而是由内核去轮询，内核监听程序监听到数据准备好后，调用内核函数复制数据到用户态。 <code>select</code>  系统调用（poll，充当代理类的角色，不断轮询注册到它这里的所有需要 <code>IO</code>  的文件描述符，有结果时，把结果告诉被代理的 <code>recvfrom</code>  函数，再去拿数据。</p>\n<p>一个线程可以对多个 <code>IO</code>  端口进行监听，当 <code>socket</code>  有读写事件时分发到<strong>具体的线程</strong>进行处理。模型如下所示：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/934a13f46855bf91.jpg\" alt=\"多路复用\" /></p>\n<p>我们着重讲解一下多路复用，这在之后讲解 <code>Reactor</code>  模型会用到。传统的 <code>I/O</code>  有个很大的缺点就是，为每一个客户端连接都准备一个线程，如果客户端是长连接（如果客户端还不发送数据，服务端线程会一直阻塞在 <code>read</code>  那里），线程也就要一直维护。随着这样的客户端连接越来越多，就会导致服务器资源耗尽。一个客户端会有很多种<strong>状态</strong>：读写，解码，编码，连接等，我们通过 <code>Selector</code>  选择器轮询这些客户端，只有客户端在对应的状态才会创建线程进行处理（比如真正开始读写才会创建线程执行，当然，这些由线程池维护）。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/07/4d3abcf790e05c9b.jpg\" alt=\"\" /></p>\n<p>关于复用的几个系统调用（看不懂就算了）：</p>\n<h3 id=\"select\"><a class=\"anchor\" href=\"#select\">#</a> select</h3>\n<blockquote>\n<p>select 函数监视的文件描述符分 3 类，分别是 writefds、readfds、和 exceptfds。调用后 select 函数会阻塞，直到有描述符就绪（有数据 可读、可写、或者有 except），或者超时（timeout 指定等待时间，如果立即返回设为 null 即可），函数返回。当 select 函数返回后，可以通过遍历 fdset，来找到就绪的描述符。</p>\n</blockquote>\n<h3 id=\"poll\"><a class=\"anchor\" href=\"#poll\">#</a> poll</h3>\n<blockquote>\n<p>poll 本质上和 select 没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个 fd 对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历完所有 fd 后没有发现就绪设备，则挂起当前进程，直到设备就绪或者主动超时，被唤醒后它又要再次遍历 fd。这个过程经历了多次无谓的遍历。</p>\n</blockquote>\n<h3 id=\"epoll\"><a class=\"anchor\" href=\"#epoll\">#</a> epoll</h3>\n<blockquote>\n<p>epoll 支持水平触发和边缘触发，最大的特点在于边缘触发，它只告诉进程哪些 fd 刚刚变为就绪态，并且只会通知一次。还有一个特点是，epoll 使用 “事件” 的就绪通知方式，通过 epoll_ctl 注册 fd，一旦该 fd 就绪，内核就会采用类似 callback 的回调机制来激活该 fd，epoll_wait 便可以收到通知。</p>\n</blockquote>\n<h2 id=\"信号驱动-io\"><a class=\"anchor\" href=\"#信号驱动-io\">#</a> 信号驱动 I/O</h2>\n<p>应用进程使用  <code>sigaction</code>  系统调用，内核立即返回，应用进程可以继续执行，也就是说等待数据阶段应用进程是非阻塞的。内核在数据到达时向应用进程发送  <code>SIGIO</code>  信号，应用进程收到之后在信号处理程序中调用  <code>recvfrom</code>  将数据从内核复制到应用进程中。</p>\n<p>相比于非阻塞式  <code>I/O</code>  的轮询方式，信号驱动  <code>I/O</code>  的  <code>CPU</code>  利用率更高。</p>\n<p>缺点：信号  <code>I/O</code>  在大量  <code>IO</code>  操作时可能会因为信号队列溢出导致没法通知。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/d11f190edcb68560.jpg\" alt=\"\" /></p>\n<h2 id=\"异步io\"><a class=\"anchor\" href=\"#异步io\">#</a> 异步 I/O</h2>\n<p>在上面四种 <code>I/O</code>  模型中我们看到，进程在调用 <code>recvfrom</code>  到处理数据报时都会被阻塞，而异步 <code>I/O</code>  做到了真正的非阻塞。异步 <code>I/O</code>  也是依靠信号通知，但是通知的时候并不是数据报准备好了，而是 <code>I/O</code>  操作已经完成。</p>\n<p>主进程只负责做自己的事情，等 <code>IO</code>  操作完成 (数据成功从内核缓存区复制到应用程序缓冲区) 时通过回调函数对数据进行处理。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/a4dae8581b870ade.jpg\" alt=\"\" /></p>\n<p>相对于同步 <code>IO</code> ，异步 <code>IO</code>  不是顺序执行。用户进程进行 <code>aio_read</code>  系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情。等到 <code>socket</code>  数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。 <code>IO</code>  两个阶段，进程都是非阻塞的。</p>\n<p>要实现真正的异步  <code>I/O</code> ，操作系统需要做大量的工作。目前  <code>Windows</code>  下通过  <code>IOCP</code>  实现了真正的异步  <code>I/O</code> 。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLW1vZGVsLmh0bWw=\">https://pdai.tech/md/java/io/java-io-model.html</span></p>\n<p>Stevens W R, Fenner B, Rudoff A M. UNIX network programming[M]. Addison-Wesley Professional, 2004.</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9saW51eC9saWJyYXJ5L2wtYXN5bmMv\">Boost application performance using asynchronous I/O  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS93aW5kb3dzL2Rlc2t0b3AvYWEzNjU2ODModj12cy44NSkuYXNweA==\">Synchronous and Asynchronous I/O  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwMzA2Mzg1OQ==\">Linux IO 模式及 select、poll、epoll 详解  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYW5pZWwuaGF4eC5zZS9kb2NzL3BvbGwtdnMtc2VsZWN0Lmh0bWw=\">poll vs select vs event-based  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy51bGR1enNvZnQuY29tLzIwMTQvMDEvc2VsZWN0LXBvbGwtZXBvbGwtcHJhY3RpY2FsLWRpZmZlcmVuY2UtZm9yLXN5c3RlbS1hcmNoaXRlY3RzLw==\">select / poll / epoll: practical difference for system architects  (opens new window)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDQxNDEyMjE0Nzk4Iw==\">unix 网络编程 第一卷</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNzI4NzE4NDYyOTkw\">五种 IO 模型介绍和对比</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGemh1YW5sYW4uemhpaHUuY29tJTJGcCUyRjQzOTMzNzE3\">一文读懂高性能网络编程中的 I/O 模型</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmp1ZWppbi5jbi8/dGFyZ2V0PWh0dHBzJTNBJTJGJTJGd3d3LmppYW5zaHUuY29tJTJGcCUyRmRmZDk0MGU3ZmNhMg==\">聊聊 IO 多路复用之 select、poll、epoll 详解</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/29/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(4)-%E5%B8%B8%E8%A7%81%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://cecilia.cool/2022/08/29/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(4)-%E5%B8%B8%E8%A7%81%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "IO(4)--常见类的使用",
            "date_published": "2022-08-29T02:56:25.000Z",
            "content_html": "<h1 id=\"io常见类\"><a class=\"anchor\" href=\"#io常见类\">#</a> IO 常见类</h1>\n<p>Java 的  <code>I/O</code>  大概可以分成以下几类:</p>\n<ul>\n<li>磁盘操作: File</li>\n<li>字节操作: InputStream 和 OutputStream</li>\n<li>字符操作: Reader 和 Writer</li>\n<li>对象操作: Serializable</li>\n<li>网络操作: Socket</li>\n</ul>\n<p>像 <code>FileInputStream</code>  这样的类都是字节操作的子类，不算入常见类讲解，之后会对这些子类单独开坑。</p>\n<h1 id=\"文件流\"><a class=\"anchor\" href=\"#文件流\">#</a> 文件流</h1>\n<h2 id=\"file类\"><a class=\"anchor\" href=\"#file类\">#</a> File 类</h2>\n<p><code>File</code>  类可以用于表示文件和目录的信息，但是它不表示文件的内容。不能访问文件内容本身，需要通过输入输出流进行访问。访问路径可以是绝对 / 相对路径。相对路径是由系统属性 <code>user.dir</code>  指定，即为 Java VM 所在路径。</p>\n<p>可以递归列出目录下所有文件</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listAllFiles</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">isFile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> file <span class=\"token operator\">:</span> dir<span class=\"token punctuation\">.</span><span class=\"token function\">listFiles</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">listAllFiles</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>File</code>  类中大部分方法都是判断类的方法，返回一个 <code>boolean</code>  值，方法体简单，此处不会过多讲解，详细全面的方法可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLm9yYWNsZS5jb20vamF2YXNlLzgvZG9jcy9hcGkv\"> Java8 API 文档</span>。</p>\n<ul>\n<li><code>public void deleteOnExit()</code> ：在 VM 关闭的时候，删除该文件或者目录，不像 <code>delete()</code>  方法一调用就删除。一般用于临时文件比较合适。</li>\n<li><code>public boolean renameTo(File dest)</code> ：重命名此 File 对象所对应的文件或目录，如果重命名成功，则返回 true；否则，返回 false。</li>\n<li><code>public boolean setReadOnly()</code> ：设置此 File 对象为只读权限。</li>\n<li><code>public boolean setWritable(boolean writable, boolean ownerOnly)</code> ：写权限设置， <code>writable</code>  如果为 <code>true</code> ，允许写访问权限；如果为 <code>false</code> ，写访问权限是不允许的。 <code>ownerOnly</code>  如果为 <code>true</code> ，则写访问权限仅适用于所有者；否则它适用于所有人。</li>\n<li><code>public boolean setWritable(boolean writable)</code> ： 底层实现是：通过 <code>setWritable(writable, true)</code>  实现，默认是仅适用于文件或目录所有者。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">setWritable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> writable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">setWritable</span><span class=\"token punctuation\">(</span>writable<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 同样的，还有 setReadable，setExecutable 方法</span></pre></td></tr></table></figure><ul>\n<li><code>public static File createTempFile(String prefix, String suffix, File directory)</code> ：在指定的临时文件目录 <code>directort</code>  中，创建一个临时空文件。可以直接使用 File 类来调用，使用给定前缀、系统生成的随机数以及给定后缀作为文件名。 <code>prefix</code>  至少 3 字节长。如果 <code>suffix</code>  设置为 <code>null</code> ，则默认后缀为 <code>.tmp</code> 。</li>\n<li><code>public String[] list()</code> ：列出 <code>File</code>  对象的所有子文件名和路径名，返回的是 <code>String</code>  数组。</li>\n</ul>\n<h3 id=\"文件过滤器\"><a class=\"anchor\" href=\"#文件过滤器\">#</a> 文件过滤器</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">File</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:testDir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nameArr <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".doc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name <span class=\"token operator\">:</span> nameArr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里的 <code>list</code>  函数接收一个 Lambda 表达式，其方法如下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">FilenameFilter</span> filter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">String</span> names<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>names <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>filter <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> names<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 将符合条件的文件加入到返回值中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> names<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>filter<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            v<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">FilenameFilter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> dir<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"字节流相关\"><a class=\"anchor\" href=\"#字节流相关\">#</a> 字节流相关</h2>\n<p>这里介绍关于 <code>InputStream</code>  和 <code>OutputStream</code>  最简单的使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> in<span class=\"token punctuation\">,</span><span class=\"token class-name\">File</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">InputStream</span> input <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">OutputStream</span> output <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">20</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        output<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"字符流相关\"><a class=\"anchor\" href=\"#字符流相关\">#</a> 字符流相关</h2>\n<p>最简单的使用，逐行输出文本</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">copyFile</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">File</span> in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">FileReader</span> filReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileReader</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">BufferReader</span> bufferReader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReaderBuffer</span><span class=\"token punctuation\">(</span>fileReader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> line<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> bufferReader<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 装饰者模式使得 BufferedReader 组合了一个 Reader 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 在调用 BufferedReader 的 close () 方法时会去调用 Reader 的 close () 方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 因此只要一个 close () 调用即可</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    bufferedReader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"序列化\"><a class=\"anchor\" href=\"#序列化\">#</a> 序列化</h2>\n<p>一般为了将一个对象存储到文件中，我们可以使用 <code>Json</code> ，也可以使用序列化，<strong>序列化就是将一个对象转换成字节序列，方便存储和传输</strong>。你可以将需要存储的对象（多个）放在一个 <code>list</code>  或者 <code>map</code>  集合中，然后再通过序列化将集合放入文件中（但是你打开文件里面是乱码，不像 <code>Json</code>  可以清晰的看到保存的实际内容）。</p>\n<p>相关方法：</p>\n<ul>\n<li>序列化: ObjectOutputStream.writeObject ()</li>\n<li>反序列化: ObjectInputStream.readObject ()</li>\n</ul>\n<p>看看最基本的使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">A</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">String</span> objectFile <span class=\"token operator\">=</span> <span class=\"token string\">\"file/a1\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ObjectOutputStream</span> objectOutputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span>objectFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    objectOutputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">ObjectInputStream</span> objectInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectInputStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>objectFile<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">A</span> a2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span> objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    objectInputStream<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"x = \"</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"y = \"</span> <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不会对静态变量进行序列化，因为序列化只是<strong>保存对象的状态</strong>，静态变量属于类的状态。对于非静态属性，也可以使用 <code>transient</code>  关键字，该关键字可以避免被修饰属性序列化。</p>\n<p>例如 <code>ArrayList</code>  中存储数据的数组  <code>elementData</code>  是用  <code>transient</code>  修饰的，因为这个数组是动态扩展的，并不是所有的空间都被使用，因此就不需要所有的内容都被序列化。通过重写序列化和反序列化方法，使得可以只序列化数组中有内容的那部分数据。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> elementData<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ArrayList</code>  中实现了 <code>writeObject</code>  和 <code>readObject</code></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectOutputStream</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token comment\">// 防止序列化期间有修改</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> expectedModCount <span class=\"token operator\">=</span> modCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 写出非 transient 非 static 属性（会写出 size 属性）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token comment\">// ArrayList 不可能只有一个数组需要序列化吧</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultWriteObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 写出大小作为与 clone（）行为兼容的容量</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        s<span class=\"token punctuation\">.</span><span class=\"token function\">writeInt</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 依次写出元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            s<span class=\"token punctuation\">.</span><span class=\"token function\">writeObject</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果有修改，抛出异常</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>modCount <span class=\"token operator\">!=</span> expectedModCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConcurrentModificationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般地，只要实现了 Serializable 接口即可自动序列化， <code>writeObject()</code>  和 <code>readObject()</code>  是为了自己控制序列化的方式，这两个方法必须声明为 <code>private</code> ，在 <code>java.io.ObjectStreamClass#getPrivateMethod()</code>  方法中通过反射获取到 <code>writeObject()</code>  这个方法。</p>\n<p><code>readObject</code>  同理</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>ObjectInputStream</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throws</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>IOException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ClassNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 声明为空数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    elementData <span class=\"token operator\">=</span> <span class=\"token constant\">EMPTY_ELEMENTDATA</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 读入非 transient 非 static 属性（会读取 size 属性）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">defaultReadObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 读入元素个数，没什么用，只是因为写出的时候写了 size 属性，读的时候也要按顺序来读</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    s<span class=\"token punctuation\">.</span><span class=\"token function\">readInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ignored</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 计算容量</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">int</span> capacity <span class=\"token operator\">=</span> <span class=\"token function\">calculateCapacity</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">SharedSecrets</span><span class=\"token punctuation\">.</span><span class=\"token function\">getJavaOISAccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">checkArray</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 检查是否需要扩容</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token function\">ensureCapacityInternal</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> elementData<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 依次读取元素到数组中</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">readObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"缓冲流\"><a class=\"anchor\" href=\"#缓冲流\">#</a> 缓冲流</h1>\n<p>缓冲流也分输入流和输出流，字节流和字符流。使用方法大同小异，这里以缓冲流的字节输入流 <code>BufferedInputStream</code>  为例讲解。</p>\n<p>构造方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Buffer size &lt;= 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStream</span> in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_BUFFER_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般接收的参数可以是 <code>FileInputStream</code> ，如果你了解<strong>装饰者模式</strong>，就会对这种设计非常熟悉。</p>\n<p>缓冲流的出现主要是 <code>FileInputStream</code>  这样的文件类都是直接和硬盘进行交互，但是磁盘的随机读取是十分消耗时间的。我们可以假设这么一种情况：一般我们使用 <code>FileInputstream</code>  时，都会在外界定义一个数组，然后循环调用 <code>read</code>  函数将磁盘中的数据读到数组中。但是这有一个问题，我们假设定义的数组很小，那么要将磁盘中的数据全部都出来就需要调用多次 <code>read</code>  方法。假设循环第一次调用 <code>read</code>  方法，磁盘将磁头定位到相应位置（这个过程对于 CPU 来说非常慢），然后转动磁盘进行顺序读取。此时电脑中其他程序也需要访问磁盘中的数据，那么磁盘又需要重新转动磁头定位到磁盘中相应的位置进行数据读取。到了后面的循环调用 <code>read</code> ，由于磁头并不在第一次 <code>read</code>  读取到的磁盘区域，所以磁头又要重新定位......</p>\n<p>所以缓冲流就是将我们定义的那个数组放到类里面进行封装，同时提供一些其他便于使用的方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//read 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>read</code>  对外提供的方法没有变化，只是说返回的结果不一定是从硬盘中直接读取的，也可能是从缓冲数组返回的。</p>\n<p>这里着重讲一下 <code>mark</code>  方法和 <code>reset</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//mark 方法能够在当前位置打一个标记，之后再次调用 reset 方法，\"指针就会回到标记处\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> readlimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    marklimit <span class=\"token operator\">=</span> readlimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    markpos <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">getBufIfOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cause exception if closed</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markpos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Resetting to invalid mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    pos <span class=\"token operator\">=</span> markpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方法的实现很简单，只是设置了几个变量的值，所以我们需要看一下 <code>BufferedInputStream</code>  相关的变量设计</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 缓冲数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">byte</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//mark 方法最多保存的字节</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> marklimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 标记位置</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> markpos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 数组中存储的数据个数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 源码注释为缓冲数组中最后一个有效的元素的下标 + 1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 当前读取到数组中的位置</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以思考一下，如果没有 <code>mark</code>  和 <code>reset</code>  方法（以及相关的属性都没有），那么关于缓冲的设计，无非就是当 <code>(pos==buff.length)</code>  时将 <code>pos</code>  设为 0，然后重新读一组数组覆盖 <code>buff</code>  数组。</p>\n<p>再复杂一点就是，有次读取也许并不会将数组填满（这很正常，比如磁盘中数组不足以填满缓冲数组），假设长度为 10，有可能读了 9 个数据进去，此时 <code>count=9</code> 。那么我们在重新覆盖数组前，应该先判断一下 <code>pos&gt;=count</code>  这个条件。</p>\n<p>所以我们来看一下 <code>read</code>  源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">>=</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 数组中所有数据都被读取了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 重新填入数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">>=</span> count<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果重新填入数据都 pos 仍然大于 count，说明没有数据了</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 反正就是返回读到的元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">getBufIfOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>pos<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xff</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果我们不考虑 <code>mark</code>  方法的实现，那么 <code>fill()</code>  应该这么实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">getBufIfOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取缓冲数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> \tpos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    count <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 读取数据到缓冲数组中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">getInIfOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 读取到数据</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        count <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 如果没有数据了，fill 结束时 pos 和 count 都是 0，在 read 中就返回 - 1</span></pre></td></tr></table></figure><p>但是如果要考虑 mark 标记，我们就不能随意覆盖标记，我们先举一种极端的情况</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">FileInputStream</span> in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">BufferedInputStream</span> bI <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        bI<span class=\"token punctuation\">.</span><span class=\"token function\">mark</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 我们允许打上标记后，如果进行了 > 40 次 read，reset 可能会失效</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            bI<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        bI<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上面的代码，我们只设置了缓冲区数组大小为 4，但是 mark 的参数是 40，我们在 reset 处打断点查看一下变量</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/09/05/0b2154c97cf6a393.jpg\" alt=\"mark参数\" /></p>\n<p>显然 mark 参数会影响数组大小（其实是赋值给 <code>marklimit</code> ，然后在 <code>fill</code>  中扩容的），但是代码注释中我也写了是可能会失效， <code>BufferedInputStream</code>  你可以理解为是尽力在维护保存这个标记，如果 mark 的参数 <code>k</code>  很小，也就是使用者能够容忍在额外调用了 <code>k</code>  次 <code>read</code>  后 <code>reset</code>  会失效的，但是如果缓冲数组能够在读取了 <code>k</code>  次后还能保存标记位，它是会去保存的。所以我们就需要看一下 <code>fill</code>  原本完整的代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token function\">getBufIfOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//markpos &lt; 0 说明没有调用过 mark，也就是不考虑 mark 的情况</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markpos <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>           </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">>=</span> buffer<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//no room left in buffer -- 需要扩容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markpos <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 将 markpos 到末尾的数据都重新复制到数组前面的位置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 此时不用管 marklimit, 因为现在是调用 reset 一定能回到标志处</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">// 这就是上面所说的尽量保存标记位</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 你可以想想，如果 marklimit 很小，但是数组仍会保存这个标记位</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> pos <span class=\"token operator\">-</span> markpos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> markpos<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            pos <span class=\"token operator\">=</span> sz<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            markpos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> marklimit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 此时 markpos 一定为 0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 哪怕尽量保存，当 markpos 不断前移，直到为 0 时，就不能再保存了</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 所以此时就会失效</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 所以你会看到，当 marklimit 很小时，会出现两种情况</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token comment\">// 1. 如果数组很大很大，失效就会出现得更晚（其实次数就是 length）</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token comment\">// 2. 如果数组很小（但是依然 >=marklimit), 失效也会很早（次数其实也是 length）</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            markpos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>       </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> <span class=\"token constant\">MAX_BUFFER_SIZE</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutOfMemoryError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Required array size too large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token comment\">// 如果我们设置的 marklimit 很大很大，超过了 length</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token comment\">// 那么数组就应该迎合使用者，哪怕对数组扩容也要在 marklimit 失效前保存标记位</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 这里采用的是二倍扩容</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token keyword\">int</span> nsz <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">MAX_BUFFER_SIZE</span> <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                pos <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> <span class=\"token constant\">MAX_BUFFER_SIZE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nsz <span class=\"token operator\">></span> marklimit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                nsz <span class=\"token operator\">=</span> marklimit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">byte</span> nbuf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>nsz<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> nbuf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>bufUpdater<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> nbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stream closed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            buffer <span class=\"token operator\">=</span> nbuf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    count <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token function\">getInIfOpen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        count <span class=\"token operator\">=</span> n <span class=\"token operator\">+</span> pos<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>差不多缓冲流就是这样了，在装饰者模式下，实现简单易懂。</p>\n<h1 id=\"转换流\"><a class=\"anchor\" href=\"#转换流\">#</a> 转换流</h1>\n<p>假设我们只拿到了 <code>FileInputStream</code> ，却希望使用字符流，这里还是需要借助装饰者模式</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InputStreamReader</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">reader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        e<span class=\"token punctuation\">.</span>printStackTrace</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 普通的字符流是：Reader reader = new FileReader ();</span></pre></td></tr></table></figure><p><code>writer</code>  是差不多的，不再赘述。</p>\n<h1 id=\"打印流\"><a class=\"anchor\" href=\"#打印流\">#</a> 打印流</h1>\n<p>平时使用的 <code>System.out</code>  就是打印流 <code>PrnitStream</code> ，该类也继承了 <code>FilterOutputStream</code>  类。存在自动帅那些机制，当向打印流中写入一个字节数组后自动调用 <code>flush</code>  方法。内部不会抛出异常，而是使用 <code>checkError()</code>  方法进行错误检查。他能格式化任意类型并以字符串的形式写入到输出流中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Strin</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PrintStream</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PrintStream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        stream<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>掘金：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MTI2ODU4NDI4NDI0I2hlYWRpbmctNg==\">https://juejin.cn/post/6844904126858428424#heading-6</span></p>\n<p>ArrayList 是如何实现序列化的：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNTYxNTA3L2FydGljbGUvZGV0YWlscy8xMDk0Mzk2OTM=\">https://blog.csdn.net/qq_43561507/article/details/109439693</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLWJhc2ljLXVzYWdlLmh0bWw=\">https://pdai.tech/md/java/io/java-io-basic-usage.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/29/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(3)-OutputStream%E6%BA%90%E7%A0%81/",
            "url": "https://cecilia.cool/2022/08/29/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(3)-OutputStream%E6%BA%90%E7%A0%81/",
            "title": "IO(3)--OutputStream源码",
            "date_published": "2022-08-28T23:53:40.000Z",
            "content_html": "<h1 id=\"类结构\"><a class=\"anchor\" href=\"#类结构\">#</a> 类结构</h1>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/29/e599d6a89199aff1.jpg\" alt=\"UML\" /></p>\n<h1 id=\"源码解析\"><a class=\"anchor\" href=\"#源码解析\">#</a> 源码解析</h1>\n<p>我们已经分析了 <code>InputStream</code> ，这两个很相似，一个 <code>read</code>  对应一个 <code>write</code> ，也是使用了装饰者模式，这里直接给出源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SOutputStream</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Closeable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Flushable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 将指定的字节写入输出流</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 将指定的 byte 数组的字节全部写入输出流</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 将指定的 byte 数组中从偏移量 off 开始的 len 个字节写入输出流</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>off <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>off <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                   <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>off <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>off <span class=\"token operator\">+</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IndexOutOfBoundsException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">[</span>off <span class=\"token operator\">+</span> i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 刷新输出流，并强制写出所有缓冲的输出字节</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 关闭输出流，并释放与该流有关的所有资源</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/27/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(2)-InputStream%E6%BA%90%E7%A0%81/",
            "url": "https://cecilia.cool/2022/08/27/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(2)-InputStream%E6%BA%90%E7%A0%81/",
            "title": "IO(2)--InputStream源码",
            "date_published": "2022-08-27T01:58:11.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在阅读本文之前，请先看完上一篇文章中 <code>IO</code>  的类设计使用了装饰者模式。 <code>InputStream</code>  表示输入，是指外界对程序进行数据的输入。它是一个抽象类，即表示所有字节输入流实现类的基类。它的作用就是抽象地表示所有从不同数据源产生输入的类。</p>\n<h1 id=\"核心方法\"><a class=\"anchor\" href=\"#核心方法\">#</a> 核心方法</h1>\n<p><code>InputStream</code>  的三个 <code>read</code>  是最核心的方法（<strong>JDK8</strong>），分别是</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读取下一个字节的数据，如果没有则返回 - 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 具体实现之后分析</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span> b<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在<strong> JDK9</strong> 和<strong> JDK11</strong> 又新增了其他几个方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JDK9 新增：读取 InputStream 中的所有剩余字节，调用 readNBytes (Integer.MAX_VALUE) 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readAllBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// JDK11 更新：读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readNBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// JDK9 新增：从输入流读取请求的字节数并保存在 byte 数组中； 此方法会一直阻塞，直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">readNBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> off<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// JDK9 新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">transferTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputStream</span> out<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>其他的重要方法之后会在源码讲解提到。</p>\n<h1 id=\"源码解析\"><a class=\"anchor\" href=\"#源码解析\">#</a> 源码解析</h1>\n<p><code>InputStream</code>  有几个重要的属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 当使用 skip 方法时，最大的 buffer size 大小</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_SKIP_BUFFER_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">2048</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 默认的 buffer size（JDK8 没有该属性）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">DEFAULT_BUFFER_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">8192</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 由于一些 VM 在数组中保留一些头字，所以尝试分配较大的阵列可能会导致</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// OutOfMemoryError（请求的阵列大小超过 VM 限制）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">MAX_BUFFER_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span> <span class=\"token operator\">-</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>read(byte b[], int off, int len)</code>  方法：因为代码比较简单，读者可以自行在 <code>IDE</code>  中查看，这里给出流程图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/27/03f2dc59b76e0b13.jpg\" alt=\"read方法\" /></p>\n<p><code>readNBytes(int len)</code>  方法：代码较长，但是都比较简单</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 读取 InputStream 中的剩余字节的指定上限大小的字节内容；此方法会一直阻塞，</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 直到读取了请求的字节数、检测到流结束或引发异常为止。此方法不会关闭输入流。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">readNBytes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 边界检查</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"len &lt; 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> bufs <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 缓存每次读取到的内容放到 bufs，最后组装成 result</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最后读取到的内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> total <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">int</span> remaining <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 剩余字节长度</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 初始化缓存数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>remaining<span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_BUFFER_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> nread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 读取到结束为止，结束条件：要么 buf 被读满，要么 remaining==0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> nread<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                         <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> nread<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            nread <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            remaining <span class=\"token operator\">-=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nread <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">MAX_BUFFER_SIZE</span> <span class=\"token operator\">-</span> total <span class=\"token operator\">&lt;</span> nread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OutOfMemoryError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Required array size too large\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            total <span class=\"token operator\">+=</span> nread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                result <span class=\"token operator\">=</span> buf<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bufs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                    bufs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    bufs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                bufs<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 如果读不到内容（返回 - 1）或者没有剩余的字节，则跳出循环</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> remaining <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>bufs <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> total <span class=\"token operator\">?</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            result <span class=\"token operator\">:</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">// 组装最后的 result</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>total<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">int</span> offset <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    remaining <span class=\"token operator\">=</span> total<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b <span class=\"token operator\">:</span> bufs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        offset <span class=\"token operator\">+=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        remaining <span class=\"token operator\">-=</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从这两个方法可以看出， <code>InputStream</code>  最核心的就是 <code>read()</code>  方法，子类如何实现该方法决定了子类的作用。所以类似其他的 <code>int readNBytes(byte[],int,int)</code>  之类的，其实现都很简单。</p>\n<p>关于 <code>read(byte[],int,int)</code>  和 <code>readNBytes(byte[],int,int)</code>  的区别：</p>\n<ul>\n<li><code>read(byte[], int, int)</code>  是尝试读到最多 <code>len</code>  个 <code>bytes</code> ，但是<strong>读取到的内容长度可能是小于 len</strong> 的。</li>\n<li><code>readNBytes(byte[], int, int)</code>  会一直（ <code>while</code>  循环）查找直到 <code>stream</code>  尾为止。</li>\n</ul>\n<p>这里需要注意的是 <code>skip</code>  方法的实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 跳过指定个数的字节不读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> remaining <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> nr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAX_SKIP_BUFFER_SIZE</span><span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> skipBuffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>remaining <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        nr <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>skipBuffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nr <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        remaining <span class=\"token operator\">-=</span> nr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> n <span class=\"token operator\">-</span> remaining<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>skip</code>  方法不是说在数据源中跳过 <code>n</code>  个字节然后再使用 <code>read</code>  读取，而是将这 <code>n</code>  个字节读到一个缓存数组中，方法结束后该数组又会被回收，但是文件指针在数据源中的位置确实移动了 <code>n</code>  个字节。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MAX_SKIP_BUFFER_SIZE</span><span class=\"token punctuation\">,</span> remaining<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这行代码决定了跳过字节数是有限制的，最多是 <code>2048</code>  个字节。</p>\n<p><code>transferTo</code>  方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// JDK9 新增：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">long</span> <span class=\"token function\">transferTo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OutputStream</span> out<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>out<span class=\"token punctuation\">,</span> <span class=\"token string\">\"out\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">long</span> transferred <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token constant\">DEFAULT_BUFFER_SIZE</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>read <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">DEFAULT_BUFFER_SIZE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        out<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        transferred <span class=\"token operator\">+=</span> read<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> transferred<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLWJhc2ljLWNvZGUtaW5wdXRzdHJlYW0uaHRtbA==\">https://pdai.tech/md/java/io/java-io-basic-code-inputstream.html</span></p>\n<p>并发编程网：<span class=\"exturl\" data-url=\"aHR0cDovL2lmZXZlLmNvbS9qYXZhLWlvLSVFNCVCOSU4Qi1pbnB1dHN0cmVhbSVFNiVCQSU5MCVFNyVBMCU4MS8=\">http://ifeve.com/java-io-%E4%B9%8B-inputstream%E6%BA%90%E7%A0%81/</span></p>\n<p>stackoverflow：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTM3NTQzODcvamF2YS1yZWFkLXZzLXJlYWRuYnl0ZXMtb2YtdGhlLWlucHV0c3RyZWFtLWluc3RhbmNl\">https://stackoverflow.com/questions/53754387/java-read-vs-readnbytes-of-the-inputstream-instance</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/26/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(1)-%E5%88%86%E7%B1%BB/",
            "url": "https://cecilia.cool/2022/08/26/Java/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/IO(1)-%E5%88%86%E7%B1%BB/",
            "title": "Java IO(1)--分类",
            "date_published": "2022-08-26T05:42:44.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>为了分类方便和知识的连贯性，这里就将 IO 的部分（关于文件流的操作）也放到网络编程的 <code>Tags</code>  里面。真正的网络编程大概就是从 <code>Socket</code>  那一块开始讲解，接着就是缓冲区，通道以及 NIO 的各种详解。</p>\n<h1 id=\"传输方式\"><a class=\"anchor\" href=\"#传输方式\">#</a> 传输方式</h1>\n<p>分为字节流和字符流： <code>字节</code> 是个计算机看的， <code>字符</code> 才是给人看的。</p>\n<p>字节流主要是 <code>InputStream</code>  和 <code>OutputStream</code>  派生出来的一些列类。字符流主要 <code>Reader</code>  和 <code>Writer</code>  派生出来的类。</p>\n<h2 id=\"字节流和字符流区别\"><a class=\"anchor\" href=\"#字节流和字符流区别\">#</a> 字节流和字符流区别</h2>\n<ul>\n<li>\n<p>字节流读取单个字节，字符流读取单个字符 (一个字符根据编码的不同，对应的字节也不同，如 UTF-8 编码中文汉字是 3 个字节，GBK 编码中文汉字是 2 个字节。)</p>\n</li>\n<li>\n<p>字节流用来处理二进制文件 (图片、MP3、视频文件)，字符流用来处理文本文件 (可以看做是特殊的二进制文件，使用了某种编码，人可以阅读)。</p>\n</li>\n</ul>\n<h2 id=\"编码与解码\"><a class=\"anchor\" href=\"#编码与解码\">#</a> 编码与解码</h2>\n<p>编码是将字符转为字节，解码是将字节组合成字符。编码和解码过程使用不同的编码方式那么就出现了乱码。</p>\n<p>Java 使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。</p>\n<h1 id=\"数据操作\"><a class=\"anchor\" href=\"#数据操作\">#</a> 数据操作</h1>\n<p>分类大致看下表</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类别</th>\n<th style=\"text-align:center\">对应类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">文件</td>\n<td style=\"text-align:center\">FileInputStream,FileOutputStream,FileReader,FileWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">数组</td>\n<td style=\"text-align:center\">ByteArrayInputStream,ByteArrayOutputStream,CharArrayReader、CharArrayWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">管道</td>\n<td style=\"text-align:center\">PipedInputStream、PipedOutputStream、PipedReader、PipedWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">基本数据类型</td>\n<td style=\"text-align:center\">DataInputStream、DataOutputStream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">缓冲</td>\n<td style=\"text-align:center\">BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">打印</td>\n<td style=\"text-align:center\">PrintStream、PrintWriter</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">对象序列化反序列化</td>\n<td style=\"text-align:center\">ObjectInputStream、ObjectOutputStream</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">转换</td>\n<td style=\"text-align:center\">InputStreamReader、OutputStreamWriter</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"设计模式\"><a class=\"anchor\" href=\"#设计模式\">#</a> 设计模式</h1>\n<p><code>IO</code>  使用了<a href=\"https://cecilia.cool/2022/08/24/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B-%E8%A3%85%E9%A5%B0/\">装饰者模式</a>，以 <code>InputStream</code>  为例：</p>\n<ul>\n<li>\n<p><code>InputStream</code>  是抽象组件。</p>\n</li>\n<li>\n<p><code>FileInputStream</code>  是 <code>InputStream</code>  子类，为具体组件，提供字节流的输入操作。</p>\n</li>\n<li>\n<p><code>FilterInputStream</code>  属于抽象装饰者，提供额外功能</p>\n</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/26/f54be56eb22c08b8.jpg\" alt=\"IO使用装饰者模式\" /></p>\n<p>实例化一个具有缓存功能的字节流对象时，只需要在  <code>FileInputStream</code>  对象上再套一层  <code>BufferedInputStream</code>  对象即可。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">FileInputStream</span> fileInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span>filePath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">BufferedInputStream</span> bufferedInputStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedInputStream</span><span class=\"token punctuation\">(</span>fileInputStream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9pby9qYXZhLWlvLWJhc2ljLWNhdGVnb3J5Lmh0bWw=\">https://pdai.tech/md/java/io/java-io-basic-category.html</span></p>\n</blockquote>\n",
            "tags": [
                "网络编程"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/24/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B-%E8%A3%85%E9%A5%B0/",
            "url": "https://cecilia.cool/2022/08/24/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B-%E8%A3%85%E9%A5%B0/",
            "title": "结构型--装饰者模式",
            "date_published": "2022-08-24T13:37:10.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>装饰器模式（Decorator Pattern）允许向一个现有的对象<strong>添加新的功能</strong>，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个<strong>包装</strong>。</p>\n<p>** 这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。** 一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p>\n<p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>\n<h1 id=\"相关结构\"><a class=\"anchor\" href=\"#相关结构\">#</a> 相关结构</h1>\n<p>在装饰者模式中，为了让系统具有更好的灵活性和可扩展性，我们通常会定义一个抽象装饰类，而将具体的装饰类作为它的子类。</p>\n<h2 id=\"component\"><a class=\"anchor\" href=\"#component\">#</a> Component</h2>\n<p>抽象构件：它是具体构件和抽象装饰类的共同父类，声明了在具体构件中实现的业务方法，它的引入可以使客户端以一致的方式处理<strong>未被装饰的对象</strong>以及<strong>装饰之后的对象</strong>，实现客户端的透明操作。</p>\n<h2 id=\"concretecomponent\"><a class=\"anchor\" href=\"#concretecomponent\">#</a> ConcreteComponent</h2>\n<p>具体构件（就是要被装饰的类）：它是抽象构件类的子类，用于定义具体的构件对象，实现了在抽象构件中声明的方法，<strong>装饰器可以给它增加额外的职责（方法）</strong>。</p>\n<h2 id=\"decorator\"><a class=\"anchor\" href=\"#decorator\">#</a> Decorator</h2>\n<p>抽象装饰类：它也是抽象构件类的子类，用于给具体构件增加职责，但是具体职责在其子类中实现。它<strong>维护一个指向抽象构件对象的引用，通过该引用可以调用装饰之前构件对象的方法</strong>，并通过其子类扩展该方法，以达到装饰的目的。</p>\n<h2 id=\"concretedecorator\"><a class=\"anchor\" href=\"#concretedecorator\">#</a> ConcreteDecorator</h2>\n<p>具体装饰类：它是抽象装饰类的子类，负责向构件添加新的职责。每一个具体装饰类都定义了一些新的行为，它可以调用在抽象装饰类中定义的方法，并可以增加新的方法用以扩充对象的行为。</p>\n<h1 id=\"例子\"><a class=\"anchor\" href=\"#例子\">#</a> 例子</h1>\n<p>为了能够更方便理解例子，这里先给一下 <code>UML</code>  类图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/26/12afa26882288dae.jpg\" alt=\"UML类图\" /></p>\n<p>设计不同种类的饮料，饮料可以添加配料，比如可以添加牛奶，并且支持动态添加新配料。每增加一种配料，该饮料的价格就会增加，要求计算一种饮料的价格。</p>\n<p>在 DarkRoast 饮料上新增新添加 Mocha 配料，之后又添加了 Whip 配料。DarkRoast 被 Mocha 包裹，Mocha 又被 Whip 包裹。它们都继承自相同父类，都有 cost () 方法，外层类的 cost () 方法调用了内层类的 cost () 方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Component 设计</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> interfacce <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// ConcreteComponent</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DarkRoast</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// Decorator</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CondimentDecorator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Beverage</span> beverage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面已经提到， <code>Decorator</code>  是一个抽象类，具体的装饰由子类实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ConcreteDecorator-A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Milk</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CondimentDecorator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Milk</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Beverage</span> beverage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beverage <span class=\"token operator\">=</span> beverage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> beverage<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// ConcreteDecorator-B</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mocha</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CondimentDecorator</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mocha</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Beverage</span> beverage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beverage <span class=\"token operator\">=</span> beverage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> beverage<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Beverage</span> beverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HouseBlend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        beverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mocha</span><span class=\"token punctuation\">(</span>beverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        beverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Milk</span><span class=\"token punctuation\">(</span>beverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>beverage<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kZXNpZ24tcGF0dGVybi9kZWNvcmF0b3ItcGF0dGVybi5odG1s\">https://www.runoob.com/design-pattern/decorator-pattern.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2LXNwZWMvcGF0dGVybi8xMl9kZWNvcmF0b3IuaHRtbA==\">https://pdai.tech/md/dev-spec/pattern/12_decorator.html</span></p>\n<p>稀土掘金：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjgxMzIyNjQ3NTY2\">https://juejin.cn/post/6844903681322647566</span></p>\n</blockquote>\n",
            "tags": [
                "设计模式"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/24/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B-%E9%80%82%E9%85%8D%E5%99%A8/",
            "url": "https://cecilia.cool/2022/08/24/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E7%BB%93%E6%9E%84%E5%9E%8B-%E9%80%82%E9%85%8D%E5%99%A8/",
            "title": "结构型--适配器模式",
            "date_published": "2022-08-24T13:37:10.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。</p>\n<p>适配器模式将一个类的接口转换成用户希望的另一个接口，它使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/30/363342117a084bd9.jpg\" alt=\"示例\" /></p>\n<h1 id=\"实现\"><a class=\"anchor\" href=\"#实现\">#</a> 实现</h1>\n<p>鸭子 (Duck) 和火鸡 (Turkey) 拥有不同的叫声，Duck 的叫声调用 quack () 方法，而 Turkey 调用 gobble () 方法。</p>\n<p>要求将 Turkey 的  <code>gobble()</code>  方法适配成 Duck 的  <code>quack() </code> 方法，从而让火鸡冒充鸭子！</p>\n<p>接口：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Turkey</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">gobble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WildTurkey</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Turkey</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">gobble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gobble!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 火鸡 -> 鸭子</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TurkeyAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Duck</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Turkey</span> turkey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TurkeyAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Turkey</span> turkey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>turkey <span class=\"token operator\">=</span> turkey<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        turkey<span class=\"token punctuation\">.</span><span class=\"token function\">gobble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Client</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Turkey</span> turkey <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WildTurkey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Duck</span> duck <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TurkeyAdapter</span><span class=\"token punctuation\">(</span>turkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        duck<span class=\"token punctuation\">.</span><span class=\"token function\">quack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们也可以看一下其他示例：</p>\n<p>我们有一个 <em> <code>MediaPlayer</code> </em> 接口和一个实现了 <em> <code>MediaPlayer</code> </em> 接口的实体类 <em> <code>AudioPlayer</code> </em>。默认情况下，<em> <code>AudioPlayer</code> </em> 可以播放 mp3 格式的音频文件。</p>\n<p>我们还有另一个接口 <em> <code>AdvancedMediaPlayer</code> </em> 和实现了 <em> <code>AdvancedMediaPlayer</code> </em> 接口的实体类。该类可以播放 vlc 和 mp4 格式的文件。</p>\n<p>我们想要让 <em> <code>AudioPlayer</code> </em> 播放其他格式的音频文件（在上面的例子中，其实就是火鸡冒充鸭子）。为了实现这个功能，<strong>我们需要创建一个实现了 <em> <code>MediaPlayer</code> </em> 接口的适配器类 <em> <code>MediaAdapter</code> </em>，并使用 <em> <code>AdvancedMediaPlayer</code> </em> 对象来播放所需的格式。</strong></p>\n<p>体现在 <code>UML</code>  中即为</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/30/3f8436392da4a3ad.jpg\" alt=\"UML\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kZXNpZ24tcGF0dGVybi9hZGFwdGVyLXBhdHRlcm4uaHRtbA==\">https://www.runoob.com/design-pattern/adapter-pattern.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2LXNwZWMvcGF0dGVybi85X2FkYXB0ZXIuaHRtbA==\">https://pdai.tech/md/dev-spec/pattern/9_adapter.html</span></p>\n</blockquote>\n",
            "tags": [
                "设计模式"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/24/Java/%E5%B9%B6%E5%8F%91/Java%E7%BA%BF%E7%A8%8B%E6%B1%A02-FutureTask/",
            "url": "https://cecilia.cool/2022/08/24/Java/%E5%B9%B6%E5%8F%91/Java%E7%BA%BF%E7%A8%8B%E6%B1%A02-FutureTask/",
            "title": "Java线程池(2)--FutureTask",
            "date_published": "2022-08-24T06:02:39.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>FutureTask</code>  为  <code>Future</code>  提供了<strong>基础</strong>实现（言外之意就是也提供了一些功能性函数供我们创建自定义  <code>task</code>  类使用），如获取任务执行结果 ( <code>get</code> ) 和取消任务 ( <code>cancel</code> ) 等。如果任务尚未完成，获取任务执行结果时将会阻塞。一旦执行结束，任务就不能被重启或取消 (除非使用 <code>runAndReset</code>  执行计算)。 <code>FutureTask</code>  常用来封装  <code>Callable</code>  和  <code>Runnable</code> ，也可以作为一个任务提交到线程池中执行。 <code>FutureTask</code>  的线程安全由 <code>CAS</code>  来保证。</p>\n<h1 id=\"两种异步模型\"><a class=\"anchor\" href=\"#两种异步模型\">#</a> 两种异步模型</h1>\n<p>在 <code>Java</code>  的并发编程中，大体上会分为两种异步编程模型，一类是以异步的形式来并行运行其他的任务，<strong>不需要</strong>返回任务的结果数据。一类是以异步的形式运行其他任务，<strong>需要</strong>返回结果。</p>\n<h2 id=\"无返回结果异步模型\"><a class=\"anchor\" href=\"#无返回结果异步模型\">#</a> 无返回结果异步模型</h2>\n<p>无返回结果的异步任务可以直接丢进线程或线程池中运行。想要获取运行结果的话，可以调用回调方法。具体实现是定义一个回调接口，并在接口中定义接收任务结果数据的方法。任务运行后调用接口方法，执行回调接口实现类中的逻辑处理结果数据</p>\n<ul>\n<li>定义回调接口</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义任务结果数据的封装类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">T</span> <span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>定义任务结果数据的封装类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskResult</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 任务状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> taskStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 任务消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> taskMessage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 任务结果数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> taskResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"TaskResult&#123;\"</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token string\">\"taskStatus=\"</span> <span class=\"token operator\">+</span> taskStatus <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token string\">\", taskMessage='\"</span> <span class=\"token operator\">+</span> taskMessage <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token string\">\", taskResult='\"</span> <span class=\"token operator\">+</span> taskResult <span class=\"token operator\">+</span> <span class=\"token char\">'\\''</span> <span class=\"token operator\">+</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token char\">'&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>创建回调接口的实现类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskHandler</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TaskResult</span> <span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TaskResult</span> taskResult<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    \t<span class=\"token comment\">//TODO 拿到结果数据后进一步处理</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>taskResult<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">return</span> taskResult<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>创建任务的执行类</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskExecutor</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> taskCallable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> taskParameter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> taskCallable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> taskParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskCallable <span class=\"token operator\">=</span> taskCallable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskParameter <span class=\"token operator\">=</span> taskParameter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">//TODO 一系列业务逻辑，将结果数据封装成 TaskResult 对象并返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">TaskResult</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskStatus</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>taskParameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        result<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskResult</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"异步回调成功\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        taskCallable<span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>运行一下</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TaskCallableTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">TaskCallable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">TaskResult</span><span class=\"token punctuation\">></span></span> taskCallable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">TaskExecutor</span> taskExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TaskExecutor</span><span class=\"token punctuation\">(</span>taskCallable<span class=\"token punctuation\">,</span> <span class=\"token string\">\"测试回调任务\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>taskExecutor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 结果：TaskResult &#123;taskStatus=1, taskMessage=' 测试回调任务 ', taskResult=' 异步回调成功 '&#125;</span></pre></td></tr></table></figure><h2 id=\"有返回结果模型\"><a class=\"anchor\" href=\"#有返回结果模型\">#</a> 有返回结果模型</h2>\n<p>我们自己定义接口并实现回调方法比较麻烦，JDK 提供了可以直接返回异步结果的处理方案。</p>\n<ul>\n<li>使用 <code>Future</code>  接口获取异步结果，常与线程池一起使用。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//submit 提交任务</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> future <span class=\"token operator\">=</span> executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        \t<span class=\"token keyword\">return</span> <span class=\"token string\">\"测试Future获取异步结果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>future<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程池关闭</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>使用 <code>FutureTask</code>  获取异步结果， <code>FutureTask</code>  类既可以结合 <code>Thread</code>  类使用也可以结合线程池使用。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配合 Thread 使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"测试FutureTask获取异步结果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 配合线程池使用，和 Future 没什么区别</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">ExecutorService</span> executorService <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> futureTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       \t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"测试FutureTask获取异步结果\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>futureTask<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    executorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"相关类解析\"><a class=\"anchor\" href=\"#相关类解析\">#</a> 相关类解析</h1>\n<h2 id=\"callable接口\"><a class=\"anchor\" href=\"#callable接口\">#</a> Callable 接口</h2>\n<p>泛型接口，对比 <code>Runnable</code>  不会返回数据，也不会抛出异常</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FunctionalInterface</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 函数式接口</span></pre></td></tr></table></figure><p>复习一下，在 <code>JDK 1.8</code>  中只声明有一个方法的接口为函数式接口，函数式接口可以使用 <code>@FunctionalInterface</code>  注解修饰，也可以不使用 <code> @FunctionalInterface</code>  注解修饰。只要一个接口中只包含有一个方法（可以有默认方法），那么，这个接口就是函数式接口。</p>\n<h2 id=\"future接口\"><a class=\"anchor\" href=\"#future接口\">#</a> Future 接口</h2>\n<p>泛型接口，代表异步计算的结果，在两种异步模型中可以看出 <code>Future</code>  的使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 取消异步任务的执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 判断任务是否被取消</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 判断任务是否已经完成，如果任务被取消或者抛出异常，也是 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">isDone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 带超时时间的 get () 版本，如果阻塞等待过程中超时则会抛出 TimeoutException 异常</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> timeout<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>cancel</code>  函数：如果异步任务已经完成或者已经被取消，或者由于某些原因不能取消，则会返回 <code>false</code> 。如果任务还没有被执行，则会返回 tr・ue 并且异步任务不会被执行。如果任务已经开始执行了但是还没有执行完成，若 <code>mayInterruptIfRunning</code> （当前传递的 <code>boolean</code>  类型参数）为 <code>true</code> ，则会立即中断执行任务的线程并返回 <code>true</code> ，若 <code>mayInterruptIfRunning</code>  为 <code>false</code> ，则会返回 <code>true</code>  且不会中断任务执行线程。</li>\n</ul>\n<h2 id=\"runnablefuture接口\"><a class=\"anchor\" href=\"#runnablefuture接口\">#</a> RunnableFuture 接口</h2>\n<p><code>RunnableFuture</code>  继承了 <code>Runnable</code>  接口和 <code>Future</code>  接口，而 <code>FutureTask</code>  实现了 <code>RunnableFuture</code>  接口。所以它既可以作为 <code>Runnable</code>  被线程执行，又可以作为 <code>Future</code>  得到 <code>Callable</code>  的返回值。 <code>RunnableFuture</code>  接口想要其实现类实现的功能就是相当于一个拥有 <code>run</code>  方法的 <code>future</code>  接口。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">RunnableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Future</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"futuretask解析\"><a class=\"anchor\" href=\"#futuretask解析\">#</a> FutureTask 解析</h1>\n<h2 id=\"关键属性\"><a class=\"anchor\" href=\"#关键属性\">#</a> 关键属性</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 内部持有的 callable 任务，运行完毕后置空</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 从 get () 中返回的结果或抛出的异常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> outcome<span class=\"token punctuation\">;</span> <span class=\"token comment\">// non-volatile, protected by state reads/writes</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 运行 callable 的线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Thread</span> runner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 使用 Treiber 栈保存等待线程</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">WaitNode</span> waiters<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FutureTask</code>  还有几个属性表示状态</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 任务状态</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NEW</span>          <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">COMPLETING</span>   <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">NORMAL</span>       <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">EXCEPTIONAL</span>  <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANCELLED</span>    <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INTERRUPTING</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INTERRUPTED</span>  <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>FutureTask</code>  的状态是非常重要的，这里详细讲一下：</p>\n<ul>\n<li>\n<p><code>state</code>  是 <code>volatile</code>  修饰，确保了其他线程对其修改的可见性。</p>\n</li>\n<li>\n<p>如果任务状态不是 <code>NEW</code> ，就说明任务已经完成了。任务如果处于取消或者中断，也被认定为完成了。</p>\n</li>\n<li>\n<p><code>COMPLETING</code>  和 <code>INTERRUPTING</code>  是中间态，只会<strong>存在短暂时间</strong>。</p>\n</li>\n</ul>\n<p>任务的<strong>初始状态</strong>都是 <code>NEW</code> ，由构造函数保证。</p>\n<p>任务的<strong>终止状态</strong>有 4 种：</p>\n<ul>\n<li><code>NORMAL</code> ：任务正常执行完毕</li>\n<li><code>EXCEPTIONAL</code> ：任务执行过程种发生异常</li>\n<li><code>CANCELLED</code> ：任务被取消</li>\n<li><code>INTERRUPTED</code> ：任务被中断</li>\n</ul>\n<p>任务的<strong>中间状态</strong>有 2 种：</p>\n<ul>\n<li><code>COMPLETING</code> ：正在设置任务结果</li>\n<li><code>INTERRUPTING</code> ：正在中断运行任务的线程</li>\n</ul>\n<p>尽管状态比较多，但是转换路径是固定的。任务的中间状态是一个瞬态，它非常的短暂。而且<strong>任务的中间态并不代表任务正在执行，而是任务已经执行完了，正在设置最终的返回结果</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/25/7faf75cf765b58ca.jpg\" alt=\"状态转换\" /></p>\n<h2 id=\"内部队列\"><a class=\"anchor\" href=\"#内部队列\">#</a> 内部队列</h2>\n<p><code>FutureTask</code>  中有一个属性是 <code>private volatile WaitNode waiters</code> 。这个类是 <code>FutureTask</code>  的静态内部类，先来看一下这个类的源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WaitNode</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">WaitNode</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">WaitNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> thread <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>队列的实现是一个单向链表，它表示<strong>所有等待任务执行完毕的线程的集合</strong>。这个队列存放的不是执行任务的线程，而是获取结果的线程。我们假设执行任务的线程是线程 <code>t</code> ，获取任务结果的线程 <code>s</code> 。如果 <code>s</code>  在任务完成前就调用 <code>get</code>  方法获取结果，就会在一个等待队列中挂起，直到任务执行完毕被唤醒。如果你想知道本质，可以向下翻，看看 <code>get</code>  方法的源码，该方法会检测任务是否执行完</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    s <span class=\"token operator\">=</span> <span class=\"token function\">awaitDone</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>awaitDone</code>  函数会在之后详细讲到。</p>\n<p>值得一提的是， <code>FutureTask</code>  中的这个单向链表是当做<strong>栈</strong>来使用的，确切来说是当做 <code>Treiber</code>  栈来使用的，不了解 <code>Treiber</code>  栈是个啥的可以简单的把它当做是一个<strong>线程安全</strong>的栈，它使用 <code>CAS</code>  来完成入栈出栈操作 (想进一步了解的话可以看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMjQ2MzMzMA==\">这篇文章</span>)。为啥要使用一个线程安全的栈呢，<strong>因为同一时刻可能有多个线程都在获取任务的执行结果</strong>，如果任务还在执行过程中，则这些线程就要被包装成 <code>WaitNode</code>  扔到 <code>Treiber</code>  栈的栈顶，即完成入栈操作，这样就有可能出现多个线程同时入栈的情况，因此需要使用 CAS 操作保证入栈的线程安全，对于出栈的情况也是同理。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/25/e03943daf8f237ea.jpg\" alt=\"队列\" /></p>\n<h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> callable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>callable <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// ensure visibility of callable</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> runnable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callable <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">callable</span><span class=\"token punctuation\">(</span>runnable<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// ensure visibility of callable</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最终所做的事情其实就是两个：初始化 <code>callable</code>  和状态 <code>state</code> ，如果不需要返回值 <code>result</code>  可以传 <code>null</code> 。我们顺便看一下 <code>Executors.callable()</code>  方法，</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 把 Runnable 转换成 Callable</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">callable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RunnableAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里采用的是适配器模式，调用 <code>RunnableAdapter&lt;T&gt;(task, result)</code>  方法来适配，关于适配器模式，我过几天来填坑。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">RunnableAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>task <span class=\"token operator\">=</span> task<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-run\"><a class=\"anchor\" href=\"#核心方法-run\">#</a> 核心方法 - run ()</h2>\n<p>在 <code>new</code>  了一个 <code>FutureTask</code>  对象之后，接下来就是在另一个线程中执行这个 <code>Task</code> , 无论是通过直接 <code>new</code>  一个 <code>Thread</code>  还是通过线程池，执行的都是 <code>run()</code>  方法，接下来就看看 <code>run()</code>  方法的实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果不是新建任务或者 CAS 替换失败，函数执行结束</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 此处 CAS 是将 runnner 设置为当前线程，在此之前 runner 都是 null</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">!=</span> <span class=\"token constant\">NEW</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">!</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> runnerOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                                     <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">Callable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">></span></span> c <span class=\"token operator\">=</span> callable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> state <span class=\"token operator\">==</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">V</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">boolean</span> ran<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                result <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行任务</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                ran <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                ran <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">setException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ran<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置执行结果</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        runner <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 在执行过程中被中断了，需要处理中断逻辑</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> <span class=\"token constant\">INTERRUPTING</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token function\">handlePossibleCancellationInterrupt</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 处理中断逻辑</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>run</code>  方法出现的其他方法也需要说一下，当 <code>call()</code>  函数执行成功，会通过 <code>set</code>  函数设置结果</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// CAS 更改状态 NEW --> COMPLETING</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 设置 FutureTask 属性 outcome 为 v，其实就是设置返回结果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        outcome <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// final state</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">finishCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行完毕，唤醒等待线程</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>唤醒等待线程的 <code>finishCompletion</code>  源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finishCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// assert state > COMPLETING;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WaitNode</span> q<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> waitersOffset<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 移除等待线程</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 自旋遍历等待线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    q<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 唤醒等待线程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">WaitNode</span> next <span class=\"token operator\">=</span> q<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// unlink to help gc</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                q <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 任务完成后调用函数，自定义扩展</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    callable <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// to reduce footprint</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果在 <code>run</code>  期间发生中断，就会进入中断的处理逻辑</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">handlePossibleCancellationInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 在中断者中断线程之前可能会延迟，所以我们只需要让出 CPU 时间片自旋等待</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">INTERRUPTING</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> <span class=\"token constant\">INTERRUPTING</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// wait out pending interrupt</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-get\"><a class=\"anchor\" href=\"#核心方法-get\">#</a> 核心方法 - get ()</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取执行结果</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">V</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&lt;=</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 处于未完成状态</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token function\">awaitDone</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// 该方法之后会讲到，0L 表示无限等待</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取执行结果或抛出执行期间的异常</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 返回执行结果或抛出异常</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">V</span> <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ExecutionException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">Object</span> x <span class=\"token operator\">=</span> outcome<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// \t获得结果</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">>=</span> <span class=\"token constant\">CANCELLED</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CancellationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExecutionException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-cancel\"><a class=\"anchor\" href=\"#核心方法-cancel\">#</a> 核心方法 - cancel ()</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> mayInterruptIfRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 如果当前 Future 状态为 NEW，根据参数修改 Future 状态为 INTERRUPTING 或 CANCELLED</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">==</span> <span class=\"token constant\">NEW</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>          <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">NEW</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              mayInterruptIfRunning <span class=\"token operator\">?</span> <span class=\"token constant\">INTERRUPTING</span> <span class=\"token operator\">:</span> <span class=\"token constant\">CANCELLED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mayInterruptIfRunning<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 可以在运行时中断</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> runner<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    t<span class=\"token punctuation\">.</span><span class=\"token function\">interrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// final state</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">putOrderedInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> stateOffset<span class=\"token punctuation\">,</span> <span class=\"token constant\">INTERRUPTED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">finishCompletion</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除并唤醒所有等待线程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心方法-awaitdone\"><a class=\"anchor\" href=\"#核心方法-awaitdone\">#</a> 核心方法 - awaitDone ()</h2>\n<p>在具体分析它的源码之前，有一点我们先特别说明一下， <code>FutureTask</code>  中会涉及到两类线程，一类是执行任务的线程，它只有一个， <code>FutureTask</code>  的 <code>run</code>  方法就由该线程来执行；一类是获取任务执行结果的线程，它可以有多个，这些线程可以并发执行，每一个线程都是独立的，都可以调用 <code>get</code>  方法来获取任务的执行结果。如果任务还没有执行完，则这些线程就需要进入 <code>Treiber</code>  栈中挂起，直到任务执行结束，或者等待的线程自身被中断。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">awaitDone</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> timed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> nanos<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> deadline <span class=\"token operator\">=</span> timed <span class=\"token operator\">?</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> nanos <span class=\"token operator\">:</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">WaitNode</span> q <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">boolean</span> queued <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 自旋</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 获取并清除中断状态</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">removeWaiter</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除等待 WaitNode</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> s <span class=\"token operator\">=</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">></span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                q<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 置空等待节点的线程</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">COMPLETING</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// cannot time out yet</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>q <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            q <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WaitNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queued<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//CAS 修改 waiter</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            queued <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> waitersOffset<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                                                 q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            nanos <span class=\"token operator\">=</span> deadline <span class=\"token operator\">-</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">nanoTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nanos <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token function\">removeWaiter</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 超时，移除等待节点</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">parkNanos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> nanos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞当前线程</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 阻塞当前线程</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该方法的大框架就是自旋，我们先检测当前线程是否被中断了，这是因为 <code>get</code>  方法是阻塞式的，如果等待的任务还没有执行完，则调用 <code>get</code>  方法的线程会被扔到 <code>Treiber</code>  栈中挂起等待，直到任务执行完毕。但是，如果任务迟迟没有执行完毕，则我们也有可能直接中断在 <code>Treiber</code>  栈中的线程，以停止等待。</p>\n<p><code>removeWaiter</code>  的作用是将参数中的 <code>node</code>  从等待队列（即 <code>Treiber</code>  栈）中移除。如果此时线程还没有进入 <code>Treiber</code>  栈，则  <code>q=null</code> ，那么 <code>removeWaiter(q)</code>  啥也不干。在这之后，我们就直接抛出了 <code>InterruptedException</code>  异常。</p>\n<p>之后</p>\n<ul>\n<li>如果任务已经进入终止态（ <code>s &gt; COMPLETING</code> ），我们就直接返回任务的状态；</li>\n<li>否则，如果任务正在设置执行结果（ <code>s == COMPLETING</code> ），我们就让出当前线程的 CPU 资源继续等待</li>\n<li>否则，就说明任务还没有执行，或者任务正在执行过程中，那么这时，如果 q 现在还为 null, 说明当前线程还没有进入等待队列，于是我们新建了一个 <code>WaitNode</code> ,  <code>WaitNode</code>  的构造函数我们之前已经看过了，就是生成了一个记录了当前线程的节点；</li>\n<li>如果 <code>q</code>  不为 <code>null</code> ，说明代表当前线程的 <code>WaitNode</code>  已经被创建出来了，则接下来如果 <code>queued=false</code> ，表示当前线程还没有入队，所以我们执行了:</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>queued <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> waitersOffset<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>它的等价代码就是</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>q<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> waiters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前节点的 next 指向目前的栈顶元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果栈顶节点在这个过程中没有变，即没有发生并发入栈的情况</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>waiters的值还是上面q<span class=\"token punctuation\">.</span>next所使用的waiters值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    waiters <span class=\"token operator\">=</span> q<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改栈顶的指针，指向刚刚入栈的节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后就是一些超时结束等待和自行阻塞的函数。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtZXhlY3V0b3ItRnV0dXJlVGFzay5odG1s\">https://pdai.tech/md/java/thread/java-thread-x-juc-executor-FutureTask.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGluZ2h1LWphdmEvcC84OTkxODI0Lmh0bWwlRTQlQkIlQTUlRTUlOEYlOEFodHRwczovL3d3dy5qaWFuc2h1LmNvbS9wL2Q2MWQ3ZmZhNmFiYw==\">https://www.cnblogs.com/linghu-java/p/8991824.html 以及 https://www.jianshu.com/p/d61d7ffa6abc</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hpbmd6aG9uZzEyOC9hcnRpY2xlL2RldGFpbHMvODA1NTM3ODk=\">https://blog.csdn.net/xingzhong128/article/details/80553789</span></p>\n<p>冰河《深入理解高并发编程》（第 1 版）</p>\n<p>讲得很详细，强烈推荐：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxNjU3MjU5MSNpdGVtLTQ=\">https://segmentfault.com/a/1190000016572591#item-4</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/23/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A76-StampedLock/",
            "url": "https://cecilia.cool/2022/08/23/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A76-StampedLock/",
            "title": "Java8新特性--StampedLock",
            "date_published": "2022-08-23T05:54:59.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>一般应用，都是读多写少， <code>ReentrantReadWriteLock</code>  因读写互斥，故读时阻塞写，因而性能上上不去。可能会使写线程饥饿， <code>StampedLock</code>  营运而生。</p>\n<p>``StampedLock <code>并没有使用</code>  AQS <code>，</code> API <code>相对复杂，内壁实现比</code>  ReentrantReadWriteLock <code>复杂得多，所以本文就不对源码进行过多解释。有点就是吞吐量相对</code>  ReentrantReadWriteLock` 有显著提升。</p>\n<h1 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h1>\n<p>获取锁的方法都会返回一个邮戳 <code>Stamp</code> ， <code>Stamp=0</code>  表示获取失败，其余都表示成功。释放锁时，也需要一个邮戳 <code>Stamp</code> ，这个 <code>Stamp</code>  必须和获得锁时的 <code>Stamp</code>  一致。</p>\n<p>看一个简单的例子</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StampedLock</span> sl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StampedLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> deltaX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> deltaY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>       <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>       <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>           x <span class=\"token operator\">+=</span> deltaX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>           y <span class=\"token operator\">+=</span> deltaY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>           sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockWrite</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用到了 Stamp 释放锁</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>       <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点</h1>\n<ul>\n<li><code>StampedLock</code>  不支持锁重入，写锁的重入会造成死锁。但是支持三种模式：写锁，悲观锁，乐观锁。</li>\n<li>只允许一个线程获取写锁，写锁和悲观读锁是互斥的。</li>\n<li>允许多 个线程同时获取乐观锁和悲观读锁。</li>\n</ul>\n<h1 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h1>\n<p>我们先来看一下 <code>JDK1.8</code>  源码自带的案例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StampedLockDemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StampedLock</span> sl <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StampedLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//【写锁 (排它锁)】</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> deltaX<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> deltaY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">/**stampedLock 调用 writeLock 和 unlockWrite 时候都会导致 stampedLock 的 stamp 值的变化</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>         * 即每次 + 1（不是狭义的加一），直到加到最大值，然后从 0 重新开始 </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         **/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span>sl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 写锁</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            x <span class=\"token operator\">+=</span>deltaX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            y <span class=\"token operator\">+=</span>deltaY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockWrite</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放写锁</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">//【乐观读锁】</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">double</span> <span class=\"token function\">distanceFromOrigin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// A read-only method</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>         * tryOptimisticRead 是一个乐观的读，使用这种锁的读不阻塞写</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>         * 每次读的时候得到一个当前的 stamp 值（类似时间戳的作用）</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>         */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">tryOptimisticRead</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 这里就是读操作，读取 x 和 y，因为读取 x 时，y 可能被写了新的值，所以下面需要判断</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">double</span> currentX <span class=\"token operator\">=</span> x<span class=\"token punctuation\">,</span> currentY <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">/** 如果读取的时候发生了写，则 stampedLock 的 stamp 属性值会变化，此时需要重读，</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>         * 再重读的时候需要加读锁（并且重读时使用的应当是悲观的读锁，即阻塞写的读锁）</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>         * 当然重读的时候还可以使用 tryOptimisticRead，此时需要结合循环了，即类似 CAS 方式</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>         * 读锁又重新返回一个 stampe 值 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sl<span class=\"token punctuation\">.</span><span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果验证失败（读之前已发生写）</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 悲观读锁</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                currentX <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                currentY <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockRead</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 释放读锁</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token comment\">// 读锁验证成功后执行计算，即读的时候没有发生写</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>currentX <span class=\"token operator\">*</span>currentX <span class=\"token operator\">+</span> currentY <span class=\"token operator\">*</span>currentY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> </pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">//【悲观读锁】</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">moveIfAtOrigin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> newX<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> newY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// upgrade</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 读锁（这里可用乐观锁替代）</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">long</span> stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 循环，检查当前状态是否符合</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span> <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">==</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>             * 转换当前读戳为写戳，即上写锁</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>             * 1. 写锁戳，直接返回写锁戳</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>             * 2. 读锁戳且写锁可获得，则释放读锁，返回写锁戳</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>             * 3. 乐观读戳，当立即可用时返回写锁戳</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>             * 4. 其他情况返回 0</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>             */</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token keyword\">long</span> ws <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">tryConvertToWriteLock</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 如果写锁成功</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">!=</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>              stamp <span class=\"token operator\">=</span> ws<span class=\"token punctuation\">;</span><span class=\"token comment\">// 替换票据为写锁</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>              x <span class=\"token operator\">=</span> newX<span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改数据</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>              y <span class=\"token operator\">=</span> newY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token comment\">// 转换为写锁失败</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token comment\">// 释放读锁</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlockRead</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token comment\">// 获取写锁（必要情况下阻塞一直到获取写锁成功）</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                stamp <span class=\"token operator\">=</span> sl<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token comment\">// 释放锁（可能是读 / 写锁）</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            sl<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span>stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>灰信网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZnJlZXNpb24uY29tL2FydGljbGUvMTcwNjIxMjU1NS8=\">https://www.freesion.com/article/1706212555/</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1zdGFtcGVkbG9jay5odG1s\">https://pdai.tech/md/java/java8/java8-stampedlock.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aXphcmRmb3JjZWwuZ2l0Ym9va3MuaW8vamF2YTgtbmV3LWZlYXR1cmVzL2NvbnRlbnQvMTAuaHRtbA==\">https://wizardforcel.gitbooks.io/java8-new-features/content/10.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aXphcmRmb3JjZWwuZ2l0Ym9va3MuaW8vamF2YTgtdHV0b3JpYWxzL2NvbnRlbnQvSmF2YSUyMDglMjAlRTUlQjklQjYlRTUlOEYlOTElRTYlOTUlOTklRTclQTglOEIlMjBUaHJlYWRzJTIwJUU1JTkyJThDJTIwRXhlY3V0b3JzLmh0bWw=\">https://wizardforcel.gitbooks.io/java8-tutorials/content/Java 8 并发教程 Threads 和 Executors.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/22/Java/%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91-ThreadLocal/",
            "url": "https://cecilia.cool/2022/08/22/Java/%E5%B9%B6%E5%8F%91/Java%E5%B9%B6%E5%8F%91-ThreadLocal/",
            "title": "Java并发-ThreadLocal",
            "date_published": "2022-08-22T05:03:54.000Z",
            "content_html": "<h1 id=\"静态类\"><a class=\"anchor\" href=\"#静态类\">#</a> 静态类</h1>\n<p>我们先介绍一下<strong>静态类</strong>，这在之后的讲解会用到。静态类只能是内部类，如果外部类使用 <code>static</code>  会报错。</p>\n<p>首先，静态类被 <code>static</code>  修饰，静态代码（方法，属性等）的使用方式不依赖于实例对象。静态类中可以有非静态属性，要使用非静态属性就需要依赖实例对象，而且这个非静态属性并不是所有类共享。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">public</span>  <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">A</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token class-name\">A</span> a2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        a1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>a2<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Test</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 结果是 0，说明 a1 和 a2 不共享 count</span></pre></td></tr></table></figure><p><strong>静态类不能访问外部类的非静态成员</strong>。</p>\n<h1 id=\"threadlocal简介\"><a class=\"anchor\" href=\"#threadlocal简介\">#</a> ThreadLocal 简介</h1>\n<p>线程安全的解决思路可以有：</p>\n<ul>\n<li>\n<p>互斥同步： <code>synchronized</code>  和 <code>ReentrantLock</code>  等加锁。</p>\n</li>\n<li>\n<p>非阻塞同步： <code>CAS，AtomicXXX</code>  等硬件实现原子操作。</p>\n</li>\n<li>\n<p>无同步方案：栈封闭，本地存储（ThreadLocal），可重入代码。</p>\n</li>\n</ul>\n<p>本文将会讲解本地存储 --  <code>ThreadLocal</code> 。</p>\n<p><code>ThreadLocal</code>  是一个将在多线程中为每一个线程创建单独的变量副本的类；当使用 <code>ThreadLocal</code>  来维护变量时， <code>ThreadLocal</code>  会为每个线程创建单独的变量副本，避免因多线程操作共享变量而导致的数据不一致的情况。</p>\n<p>先看一下基本的使用，<strong>一定要先看看</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalTest</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> threadLocal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 创建第一个线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span> threadA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadA：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程A本地变量中的值为：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 创建第二个线程</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">Thread</span> threadB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ThreadB：\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程B本地变量中的值为：\"</span> <span class=\"token operator\">+</span> threadLocal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 启动线程 A 和线程 B</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        threadA<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        threadB<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 每次的打印结果可能不一致</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 线程 B 本地变量中的值为：ThreadB：Thread-1</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 线程 A 本地变量中的值为：ThreadA：Thread-0</span></pre></td></tr></table></figure><h1 id=\"相关的类\"><a class=\"anchor\" href=\"#相关的类\">#</a> 相关的类</h1>\n<h2 id=\"entry\"><a class=\"anchor\" href=\"#entry\">#</a> Entry</h2>\n<p>该类是 <code>ThreadLocalMap</code>  的内部静态类，它是实际存储单元，也就是说，线程 <code>Thread</code>  将资源存储在 <code>ThreadLocalMap</code>  属性 <code>threadLocals</code>  中，而其实真正存储的是 <code>Entry</code> ，以键值对的形式存储。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Entry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WeakReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        value <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以看到， <code>Entry</code>  里面有一个<strong>非静态</strong>属性 <code>Object value</code> ，其实存储的就是资源副本。在上面的例子中， <code>value</code>  其实就是 <code>String</code>  类型，在线程 <code>A</code>  中的值就是： <code>ThreadA：Thread-0</code> ；在线程 <code>B</code>  中的值 i 就是： <code>ThreadB：Thread-1</code> 。</p>\n<p><code>Entry</code>  存储的另一个属性就是 <code>ThreadLocal</code> ，到这我们可以知道 <code>Entry</code>  是以键值对的形式存储资源的 <code>&lt;ThreadLocal,Object&gt;</code> 。所以例子中，从图像来看是这样的。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/22/90d3d2b93ed0f243.jpg\" alt=\"Entry关系图\" /></p>\n<p>查看 <code>ThreadLocalMap</code>  源码可以看到，其实其内部有一个 <code>Entry</code>  数组，查找时是根据哈希码查找的。</p>\n<h2 id=\"threadlocalmap\"><a class=\"anchor\" href=\"#threadlocalmap\">#</a> ThreadLocalMap</h2>\n<p>这是 <code>ThreadLocal</code>  的一个静态内部类，根据其给定的方法可以快速查找当前线程对应的 <code>Entry</code> 。先来看一下其相关属性</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">INITIAL_CAPACITY</span> <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> threshold<span class=\"token punctuation\">;</span> <span class=\"token comment\">// The next size value at which to resize，Default to 0</span></pre></td></tr></table></figure><p>我们再看一下 <code>ThreadLocalMap</code>  是如何查找 <code>Entry</code>  的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Entry</span> <span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 通过 ThreadLocal 的哈希码拿到数组下标</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>table<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取对于 Entry</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 处理哈希冲突</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 这里就是当发生哈希冲突，在 table 数组中循环向后移位查找</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">getEntryAfterMiss</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后需要强调的是，我们在外部使用的是 <code>ThreadLocal</code>  的 <code>get</code>  和 <code>set</code> （以及 <code>remove</code> ），这些函数的实现其实就是调用其内部类 <code>ThreadLocalMap</code> ，所以 <code>getEntry</code>  接收的参数其实就是其外部类的实例。</p>\n<p>知道其大致结构和使用，剩下的分析方法类似，不再赘述。</p>\n<h1 id=\"threadlocal详解\"><a class=\"anchor\" href=\"#threadlocal详解\">#</a> ThreadLocal 详解</h1>\n<p>已经学习了前面两个内部类的原理，我们这里直接看源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> threadLocals <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得线程 t 的 threadLocals 属性</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>threadLocals <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">ThreadLocalMap<span class=\"token punctuation\">.</span>Entry</span> e <span class=\"token operator\">=</span> threadLocals<span class=\"token punctuation\">.</span><span class=\"token function\">getEntry</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过 ThreadLocal 实例找到值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">T</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 如果线程的 threadLocals 还没有初始化</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">setInitialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 初始化值，其实主要是因为 threadLocals==null，该函数要调用 createMap</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> <span class=\"token function\">setInitialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token class-name\">T</span> value <span class=\"token operator\">=</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回 null</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对线程 t 创建 ThreadLocalMap</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里重点提一下 <code>createMap</code>  函数</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> firstValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    t<span class=\"token punctuation\">.</span>threadLocals <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> firstValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>静态内部类的一个好处就是，它可以先实例化而不用管外部类是否实例化。静态类的另一个意义就是外部类需要访问内部类而内部类不需要访问外部类。从上面的讲解可以看到， <code>ThreadLocalMap</code>  唯一需要依赖的就是外部类的实例化对象。</p>\n<p>再看一下 <code>set</code>  函数，很简单，此处不再解释。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">ThreadLocalMap</span> map <span class=\"token operator\">=</span> <span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>map <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">createMap</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"补充\"><a class=\"anchor\" href=\"#补充\">#</a> 补充</h1>\n<p>之前我对这些知识的讲解，为了更容易让读者理解，说得比较通俗，为了构建一个系统的知识体系，这里会引用其他博客对整个 <code>ThreadLocal</code>  的讲解。</p>\n<h2 id=\"threadlocalmap对象是什么\"><a class=\"anchor\" href=\"#threadlocalmap对象是什么\">#</a> ThreadLocalMap 对象是什么</h2>\n<p>本质上来讲，它就是一个 <code>Map</code> , 但是这个 <code>ThreadLocalMap</code>  与我们平时见到的 <code>Map</code>  有点不一样</p>\n<ul>\n<li>它没有实现 <code>Map</code>  接口；</li>\n<li>它没有 <code>public</code>  的方法，最多有一个 <code>default</code>  的构造方法，<strong>因为这个 <code>ThreadLocalMap</code>  的方法仅仅在 <code>ThreadLocal</code>  类中调用</strong>，属于静态内部类</li>\n<li>该类仅仅用了一个 <code>Entry</code>  数组来存储 <code>Key</code> ,  <code>Value</code> ;  <code>Entry</code>  并不是链表形式，而是每个 <code>bucket</code>  里面仅仅放一个 <code>Entry</code> ;</li>\n</ul>\n<p>上文讲到查找是与哈希码有关，这里我们可以学习一下 <code>ThreadLocalMap</code>  是怎么处理哈希冲突的</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//set 函数 -- 将 & lt;k,v > 插入到数组中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tab <span class=\"token operator\">=</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span>threadLocalHashCode <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取下标</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 根据 threshold 可知，table 中一定有 1/3 以上为 null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>         e <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         e <span class=\"token operator\">=</span> tab<span class=\"token punctuation\">[</span>i <span class=\"token operator\">=</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> k <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果该位置的 key 相同，说明之前已经为 key 找到对应的下标</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            e<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">//k 为 null，说明之前有 key 占有过，但是被清空了，所以当前 key 可以直接写进去</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token function\">replaceStaleEntry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 此时还没将 & lt;key,value > 放入 table 中，当前 i 的 Entry 为 null，可以放进去</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    tab<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Entry</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>size<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// 一些移出和扩容操作</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">cleanSomeSlots</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> sz<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> sz <span class=\"token operator\">>=</span> threshold<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token function\">rehash</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">//nextIndex 函数，也就是出现了哈希冲突，如何找下一个下标 -- 直接加 1</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">nextIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>再看一下 <code>get</code>  方法上面已经讲了，此处不再赘述。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC10aHJlYWRsb2NhbC5odG1s\">https://pdai.tech/md/java/thread/java-thread-x-threadlocal.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ZraW5nX3dhbmcvYXJ0aWNsZS9kZXRhaWxzLzE0MjI1Mzc5\">https://blog.csdn.net/vking_wang/article/details/14225379</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvbW8zLXktNDVfYW81NGI1VDdlejdpQQ==\">https://mp.weixin.qq.com/s/mo3-y-45_ao54b5T7ez7iA</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cueHR0YmxvZy5jb20vP3A9MzA4Nw==\">https://www.xttblog.com/?p=3087</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dodXQyMDEwaGovYXJ0aWNsZS9kZXRhaWxzLzgxNDEzODg3\">https://blog.csdn.net/whut2010hj/article/details/81413887</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODM5OTc5NQ==\">https://segmentfault.com/a/1190000018399795</span></p>\n<p>冰河《深入理解高并发编程》第 1 版</p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/20/Java/%E5%B9%B6%E5%8F%91/JUC_locks5-ReentrantReadWriteLock/",
            "url": "https://cecilia.cool/2022/08/20/Java/%E5%B9%B6%E5%8F%91/JUC_locks5-ReentrantReadWriteLock/",
            "title": "J.U.C.locks(5)--ReentrantReadWriteLock",
            "date_published": "2022-08-20T09:54:35.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>在看本文时，您需要有 <code>AQS</code>  和 <code>ReentrantLock</code>  基础。在阅读源码前，我们先看一下这个类的最简单的应用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">ReentrantReadWriteLock</span> rw <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">ReentrantReadWriteLock<span class=\"token punctuation\">.</span>ReadLock</span> r <span class=\"token operator\">=</span> rw<span class=\"token punctuation\">.</span><span class=\"token function\">readLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">ReentrantReadWriteLock<span class=\"token punctuation\">.</span>WriteLock</span> w <span class=\"token operator\">=</span> rw<span class=\"token punctuation\">.</span><span class=\"token function\">writeLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            r<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1获取读锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1释放读锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            r<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            w<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2获取写锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2释放写锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            w<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            r<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3获取读锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t3释放读锁\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            r<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>t3<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>具体输出每次可能会不一样。</p>\n<h1 id=\"内部结构\"><a class=\"anchor\" href=\"#内部结构\">#</a> 内部结构</h1>\n<p>该类有五个内部类</p>\n<p><img data-src=\"https://cdn.jsdelivr.net/gh/Cyan-N/Images/1cf1e3de42128443.jpg\" alt=\"ReentrantReadWriteLock内部类\" /></p>\n<h2 id=\"内部类sync\"><a class=\"anchor\" href=\"#内部类sync\">#</a> 内部类 Sync</h2>\n<p><code>Sync</code>  抽象类继承 AQS 抽象类</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Sync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>Sync</code>  类内部也存在两个内部类： <code>HoldCounter</code>  和 <code>ThreadLocalHoldCounter</code> 。</p>\n<h3 id=\"holdcounter\"><a class=\"anchor\" href=\"#holdcounter\">#</a> HoldCounter</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// HoldCounter-- 计数器，主要与读锁配套使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HoldCounter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 计数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程的 TID 属性的值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> tid <span class=\"token operator\">=</span> <span class=\"token function\">getThreadId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>count</code>  表示某个<strong>读</strong>线程<strong>重入的次数</strong>， <code>tid</code>  表示该线程的 <code>tid</code>  字段的值，该字段可以唯一标识一个线程。</p>\n<h2 id=\"threadlocalholdcounter\"><a class=\"anchor\" href=\"#threadlocalholdcounter\">#</a> ThreadLocalHoldCounter</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 本地线程计数器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadLocalHoldCounter</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ThreadLocal</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HoldCounter</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 重写初始化方法，在没有进行 set 的情况下，获取的都是该 HoldCounter 值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HoldCounter</span> <span class=\"token function\">initialValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HoldCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>ThreadLocalHoldCounter</code>  重写了 <code>ThreadLocal</code>  的 <code>initialValue</code>  方法，** <code>ThreadLocal</code>  类可以将线程与对象相关联。** 在没有进行 <code>set</code>  的情况下， <code>get</code>  到的均是 <code>initialValue</code>  方法里面生成的那个 <code>HolderCounter</code>  对象。</p>\n<h2 id=\"理解计数器\"><a class=\"anchor\" href=\"#理解计数器\">#</a> 理解计数器</h2>\n<p>这两个类很重要，都是与读锁相关的，强调：<strong>多个不同的线程可以同时获得一个读锁</strong>。其中，当一个线程获取了读锁，它就会分配一个 <code>HoldCounter</code>  用来记录它的获取锁的次数。多个线程同时获取读锁，就会产生多个 <code>HoldCounter</code> ，它们存放在 <code>ThreadLocalHoldCounter</code>  中，该类继承了 <code>ThreadLocal</code> ， <code>Thread</code>  有一个属性就是 <code>ThreadLocal.ThreadLocalMap threadLocals = null;</code> 。关于 <code>threadLocals</code> ，之后会再开一个坑。现在你就只需要知道 <code>ThreadLocalHoldCounter</code>  用于存放 HoldCouter 即可。</p>\n<p>在 <code>ReentrantReadWriteLock</code>  中相关的<strong>属性</strong>表示为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 存放 HoldCounter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">ThreadLocalHoldCounter</span> readHolds<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 上一个获取读锁的线程的 HoldCounter，减少查找 readHolds</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">HoldCounter</span> cachedHoldCounter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 第一个获取读锁的线程的 HoldCounter，也是为了减少 readHolds 次数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token class-name\">Thread</span> firstReader <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">int</span> firstReaderHoldCount<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>计数器的初始化和改变发生在获取锁和释放锁的过程，所以此处我们先看一下获取读锁的源码（ <code>Sync</code>  源码），因为读锁是共享锁，所以是 <code>shared</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> unused<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取读锁的两个前提，暂时不用管</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">exclusiveCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> current<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">sharedCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取读锁状态，后文会讲到</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 判断是否应该阻塞，与锁的公平性有关，暂时不管</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">readerShouldBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        r <span class=\"token operator\">&lt;</span> <span class=\"token constant\">MAX_COUNT</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span> c <span class=\"token operator\">+</span> <span class=\"token constant\">SHARED_UNIT</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 重点，1. 如果没有一个线程获得读锁，那么当前线程就设置为 firstReader</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            firstReader <span class=\"token operator\">=</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            firstReaderHoldCount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstReader <span class=\"token operator\">==</span> current<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 2. 如果当前线程就是第一个线程（锁重入）</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            firstReaderHoldCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token class-name\">HoldCounter</span> rh <span class=\"token operator\">=</span> cachedHoldCounter<span class=\"token punctuation\">;</span><span class=\"token comment\">// 上一次拿到读锁的线程的 HoldCounter</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rh <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> rh<span class=\"token punctuation\">.</span>tid <span class=\"token operator\">!=</span> <span class=\"token function\">getThreadId</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 3.rh 为空或者当前线程和上次获取读锁的线程不一致</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                cachedHoldCounter <span class=\"token operator\">=</span> rh <span class=\"token operator\">=</span> readHolds<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//get () 函数会通过 currentThread () 函数拿到对应的 HoldCounter</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rh<span class=\"token punctuation\">.</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                readHolds<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>rh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 设置</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            rh<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">fullTryAcquireShared</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 自旋获取锁</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"sync的基本函数\"><a class=\"anchor\" href=\"#sync的基本函数\">#</a> Sync 的基本函数</h2>\n<ul>\n<li>构造函数：在 <code>Sync</code>  的构造函数中设置了本地线程计数器和 <code>AQS</code>  的状态 <code>state</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Sync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 本地线程计数器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    readHolds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadLocalHoldCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 设置 AQS 的状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ensures visibility of readHolds</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对 <code>ReentrantReadWriteLock</code>  对象的操作绝大多数都转发至 <code>Sync</code>  对象进行处理，所以要对 <code>Sync</code>  类中的重点函数进行分析。</p>\n<ul>\n<li><code>sharedCount</code>  函数：标识占有<strong>读锁</strong>的线程数量</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sharedCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>    <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> c <span class=\"token operator\">>>></span> <span class=\"token constant\">SHARED_SHIFT</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>SHARED_SHIFT</code>  是 <code>Sync</code>  重要的变量，值为 16。直接将 <code>state</code>  右移 16 位，就可以得到读锁的线程数量，因为 <code>state</code>  的高 16 位表示读锁，对应的低十六位表示写锁数量。</p>\n<ul>\n<li><code>exclusiveCount</code>  函数：表示占有<strong>写锁</strong>的线程数量</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">exclusiveCount</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> c <span class=\"token operator\">&amp;</span> <span class=\"token constant\">EXCLUSIVE_MASK</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>写锁占有的最大线程数量是 <code>(1 &lt;&lt; 16) - 1</code> ， 直接将状态 <code>state</code>  和 <code>(2^16 - 1)</code>  做与运算，其等效于将 <code>state</code>  模上 <code>2^16</code> 。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/20/54200b15d89a0deb.jpg\" alt=\"ReentrantReadWriteLock读写锁状态\" /></p>\n<p>写线程获取锁修改 <code>state</code> ，就是正常的 <code>+1</code> ，可以理解为低 16 位 + 1；而读线程获取锁修改 <code>state</code> ，是高 16 位 + 1，即为每次 s <code>tate+=SHARED_UNIT</code> ，SHARED_UNIT 是一个很大数（ <code>1&lt;&lt;16+1</code> ），每次读锁 <code>state</code>  加这么大个数，怎么是 + 1 呢，这里就要理解高 16 位 + 1 是在二进制下 + 1。</p>\n<h2 id=\"重写aqs函数\"><a class=\"anchor\" href=\"#重写aqs函数\">#</a> 重写 AQS 函数</h2>\n<p>为了减轻读者阅读压力，之后的方法不会给出所有源码，而是以流程图的形式，建议自己结合源码阅读。之前我们讲了 <code>exclusiveCount</code>  函数，配合 <code>getState</code>  获得写线程的数量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//c 的前 16 位是读锁数量，后 16 位是写锁数量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> w <span class=\"token operator\">=</span> <span class=\"token function\">exclusiveCount</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 获得写锁的数量</span></pre></td></tr></table></figure><p>现在我们就可以学习重写 <code>AQS</code>  里的重要函数：</p>\n<ul>\n<li><code>tryRelease</code>  函数：先检测当前线程是否是独占线程，再是否资源，之后会判断是否释放成功（完全释放，如果还有重入则不算成功），设置释放后的状态。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/21/c738f5e6e9f48b26.jpg\" alt=\"tryRelease函数\" /></p>\n<ul>\n<li><code>tryAcquire</code>  函数：从上面的内容可以看出，单独看 <code>c</code>  是没有多大意义的。所以要判断 <code>w</code>  的值。并发环境中，一个资源，如果所有线程都是读操作，那么就没必要加锁，如果存在写操作，那么<strong>读操作和写操作都要加锁。<strong>这也就是说，如果 <code>c != 0 &amp;&amp; w == 0</code> ，说明</strong>只有读锁，而没有写锁，但是此时线程想要获取写锁也是不允许的</strong>。 <code>tryAcquire</code>  的大致流程就是这样的，先判断有没有读锁，在判断当前写锁的独占线程是不是自己，最后判断获取的锁线程数量会不会超过 <code>MAX_COUNT</code> 。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/21/a1d528bbb62fe895.jpg\" alt=\"tryAcquire函数\" /></p>\n<p><code>tryAcquire</code>  和 <code>tryRelease</code>  都是与写操作相关的，我们知道， <code>AQS</code>  除了独占模式，还有共享模式，需要重写 <code>tryReleaseShared</code>  和 <code>tryAcquireShared</code>  函数。而若干个线程的读操作可以再共享模式中执行。</p>\n<ul>\n<li><code>tryAcquireShared</code>  函数：如果该资源被别的线程的写锁获取，那么该线程就不能再获取读锁。也就是说，<strong>一个线程想要获取读锁，必须是两种前提之一：1 是整个同步器都没有写线程；2 就是哪怕有写线程，这个线程也必须是自己这个线程</strong>。该函数我们在讲计数器时也看了源码和注释，所以此处直接给出流程图。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/21/b2433f1d5bc0c19e.jpg\" alt=\"tryAcquireShared函数\" /></p>\n<p>此处不必过多追究 <code>threadLocals</code> ，之后会讲到的。</p>\n<ul>\n<li><code>tryReleaseShared</code>  函数：一个线程释放读锁时，需要的改动其实就是 <code>HoldCounter</code> ，所以大致流程就是判断 <code>firstReader</code> 。接着修改自身的 <code>HoldCounter</code>  等，最后死循环直到成功 <code>CAS</code>  修改读锁状态。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/21/dfecf123841434e4.jpg\" alt=\"tryReleaseShared函数\" /></p>\n<h1 id=\"锁的公平性\"><a class=\"anchor\" href=\"#锁的公平性\">#</a> 锁的公平性</h1>\n<p>与 <code>ReentrantLock</code>  一样，该类的读写锁都是默认非公平的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ReentrantReadWriteLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> fair<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    sync <span class=\"token operator\">=</span> fair <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NonfairSync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    readerLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ReadLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    writerLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WriteLock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>NonfairSync</code>  和 <code>FairSync</code>  继承 <code>Sync</code> ，实现的是两种阻塞策略 —— <code>writerShouldBlock</code>  和 <code>readerShouldBlock</code> 。</p>\n<h2 id=\"nonfairsync\"><a class=\"anchor\" href=\"#nonfairsync\">#</a> NonfairSync</h2>\n<ul>\n<li><code>writerShouldBlock</code> ：写锁在抢锁前永远不会阻塞，非公平性</li>\n<li><code>readerShouldBlock</code> ：读线程抢锁之前，如果队列 <code>head</code>  后继（ <code>head.next</code> ）是独占节点时阻塞。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonfairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">8159625535654395037L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">writerShouldBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// writers can always barge</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">readerShouldBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 判断 AQS 队列的第一个元素是否是独占线程（写线程）</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">apparentlyFirstQueuedIsExclusive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"fairsync\"><a class=\"anchor\" href=\"#fairsync\">#</a> FairSync</h2>\n<p>无论是写线程还是读线程，只要同步队列中有其他节点在等待锁，就阻塞，这就是公平性。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2274990926593161451L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">writerShouldBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">readerShouldBlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//  hasQueuedPredecessors () 判断同步队列是否有等待更久的节点</span></pre></td></tr></table></figure><p>此时你再去阅读 <code>Sync</code>  重写的 <code>AQS</code>  方法，你就会对线程是否应该阻塞有更清晰认识。非公平锁在 <code>tryAcquire</code>  中始终不会管同步队列是否存在等待更久的节点，而是直接去 <code>CAS</code>  替换抢锁。</p>\n<h1 id=\"读写锁的调用\"><a class=\"anchor\" href=\"#读写锁的调用\">#</a> 读写锁的调用</h1>\n<p>之前我们说过，对 <code>ReentrantReadWriteLock</code>  对象的操作绝大多数都转发至 <code>Sync</code>  对象进行处理，其实就是 <code>ReadLock</code>  和 <code>WriteLock</code>  的方法实际是在调用 <code>Sync</code>  的方法。</p>\n<h2 id=\"readlock\"><a class=\"anchor\" href=\"#readlock\">#</a> ReadLock</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ReadLock 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sync<span class=\"token punctuation\">.</span><span class=\"token function\">acquireShared</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Sync 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//tryAcquireShared 返回 - 1  获取锁失败，1 获取锁成功</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 获取锁失败入同步队列</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token function\">doAcquireShared</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其他的都是差不多的，此处不再赘述。</p>\n<h2 id=\"writelock\"><a class=\"anchor\" href=\"#writelock\">#</a> WriteLock</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// WriteLock 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sync<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Sync 方法，其实是 AQS 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 若没有抢到锁，则进入等待队列</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span><span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EXCLUSIVE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 自己中断自己</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">selfInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其他的都是差不多的，此处不再赘述。</p>\n<h1 id=\"使用注意\"><a class=\"anchor\" href=\"#使用注意\">#</a> 使用注意</h1>\n<p>列出 <code>ReentrantReadWriteLock</code>  使用的注意：</p>\n<ul>\n<li>有读锁和写锁，如果获取了读锁，不能重入写锁；反之则可以。</li>\n</ul>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLVJlZW50cmFudFJlYWRXcml0ZUxvY2suaHRtbA==\">https://pdai.tech/md/java/thread/java-thread-x-lock-ReentrantReadWriteLock.html</span></p>\n<p>ReentrantReadWriteLock 原理详解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS9zdGVmYW54ZnkvNTA4MzM5NiNSZWVudHJhbnRSZWFkV3JpdGVMb2NrXzk=\">https://blog.51cto.com/stefanxfy/5083396#ReentrantReadWriteLock_9</span></p>\n<p>死磕 Java 并发：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY21zYmxvZ3MuY29tL2FydGljbGUvMTM5MTI5Nzg1MzEwNzg2NzY0OCVFRiVCQyU4OCVFNSU4NSVCNiVFNSVBRSU5RSVFNSU5MCU4RCVFNSVBRCU5N2R1Y2slRTQlQjglOEQlRTUlQkYlODUlRTglQkYlOTklRTQlQjklODglRTglOEElQjElRTUlOTMlQTglRUYlQkMlODk=\">https://www.cmsblogs.com/article/1391297853107867648（其实名字 duck 不必这么花哨）</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/20/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A75-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96/",
            "url": "https://cecilia.cool/2022/08/20/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A75-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E6%96%AD%E4%BC%98%E5%8C%96/",
            "title": "Java8新特性(5)--类型推断优化",
            "date_published": "2022-08-20T07:17:13.000Z",
            "content_html": "<h1 id=\"泛型简介\"><a class=\"anchor\" href=\"#泛型简介\">#</a> 泛型简介</h1>\n<p>泛型是 <code>Java SE 1.5</code>  的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。理解 <code>Java</code>  泛型最简单的方法是把它看成一种便捷语法，能节省你某些 <code>Java</code>  类型转换 (casting) 上的操作。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 有泛型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>box<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Apple</span> apple <span class=\"token operator\">=</span> box<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 没有泛型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Apple</span> apple <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Apple</span><span class=\"token punctuation\">)</span>box<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在以前的版本中使用泛型类型，需要在声明并赋值的时候，两侧都加上泛型类型。例如:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>很明显，在声明变量时已经指定了参数类型，在初始化对象时还需要再指定。在 <code>Java 7 </code> 得到改进</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> myMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 注意后面的 \"&lt;>\"</span></pre></td></tr></table></figure><p>编译器会根据变量声明时的泛型类型自动推断出实例化 <code>HashMap</code>  时的泛型类型。再次提醒一定要注意 new  <code>HashMap</code>  后面的 “&lt;&gt;”，只有加上这个 “&lt;&gt;” 才表示是自动类型推断，否则就是非泛型类型的 <code>HashMap</code> ，并且在使用编译器编译源代码时会给出一个警告提示。</p>\n<p>但是 <code>Java SE 7</code>  在创建泛型实例时的类型推断是有限制的：只有构造器的参数化类型在<strong>上下文中被显著的声明</strong>了，才可以使用类型推断，否则不行。例如：下面的例子在 <code>java 7</code>  无法正确编译。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 由于 addAll 期望获得 Collection&lt;? extends String > 类型的参数，因此下面的语句无法通过</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>addAll</code>  的函数原型是</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> <span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collection</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// List 就是继承了 Collection</span></pre></td></tr></table></figure><h1 id=\"java8改进\"><a class=\"anchor\" href=\"#java8改进\">#</a> Java8 改进</h1>\n<p><code>java8</code>  里面泛型的目标类型推断主要 2 个:</p>\n<ul>\n<li>\n<p>支持通过<strong>方法</strong>上下文推断泛型目标类型。</p>\n</li>\n<li>\n<p>支持在<strong>方法</strong>调用链路当中，泛型类型推断传递到最后一个方法。</p>\n</li>\n</ul>\n<p>之前的 <code>Java7</code>  是<strong>构造器</strong>上下文。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">nil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">cons</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Z</span> head<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Z</span><span class=\"token punctuation\">></span></span> tail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token class-name\">E</span> <span class=\"token function\">head</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以这么使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过方法赋值的目标参数来自动推断泛型的类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">nil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 而不是显示的指定类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//List&lt;String> l = List.&lt;String>nil();</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 通过前面方法参数类型推断泛型的类型</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">cons</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token punctuation\">.</span><span class=\"token function\">nil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 而不是显示的指定类型</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//List.cons(42, List.&lt;Integer>nil());</span></pre></td></tr></table></figure><p>你记住 <code>Java8</code>  可以从方法上下文获取目标类型即可。之前的 <code>list.addAll(new ArrayList&lt;&gt;());</code> ， <code>list</code>  这个引用就指明了类型，所以 <code>Java8</code>  编译器可以推断出。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC10eXBlLmh0bWw=\">https://pdai.tech/md/java/java8/java8-type.html</span></p>\n<p>注：网上关于 Java8 类型推断优化好多都一模一样，连吐槽都一样，一点都没有改过，由于它们都大多没写发布时间，我也不知道谁抄谁的。</p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A74-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3/",
            "url": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A74-%E7%B1%BB%E5%9E%8B%E6%B3%A8%E8%A7%A3%E4%B8%8E%E9%87%8D%E5%A4%8D%E6%B3%A8%E8%A7%A3/",
            "title": "Java8新特性(4)--类型注解与重复注解",
            "date_published": "2022-08-19T14:26:44.000Z",
            "content_html": "<h1 id=\"java5的注解\"><a class=\"anchor\" href=\"#java5的注解\">#</a> Java5 的注解</h1>\n<p>注解就相当于一种标记，在程序中加了注解就等于为程序加了某种标记。告诉 <code>javac</code>  编译器或者 java 开发工具…… 向其传递某种信息，作为一个标记。</p>\n<p>同时注解分为三个阶段（注解的生命周期）： <code>java</code>  源文件 --&gt;  <code>class</code>  文件 --&gt; 内存中的字节码。由元注解 <code>Retention</code>  决定，注解的默认阶段是 <code>Class</code> 。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">注解</th>\n<th style=\"text-align:center\">阶段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">@Retention(RetentionPolicy.SOURCE)</td>\n<td style=\"text-align:center\">源文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">@Retention(RetentionPolicy.CLASS)</td>\n<td style=\"text-align:center\">class 文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">RetentionPolicy.RUNTIME</td>\n<td style=\"text-align:center\">内存中的字节码</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"java8的注解\"><a class=\"anchor\" href=\"#java8的注解\">#</a> Java8 的注解</h1>\n<p><code>Java8</code>  主要是两点改进：类型注解和重复注解。</p>\n<h2 id=\"类型注解\"><a class=\"anchor\" href=\"#类型注解\">#</a> 类型注解</h2>\n<p>在 <code>java 8</code>  之前，注解只能是在声明的地方所使用，比如类，方法，属性； <code>java 8</code>  里面，注解可以应用在任何地方。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建类实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token annotation punctuation\">@Interned</span> <span class=\"token class-name\">MyObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 类型映射</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>myString <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> str<span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//implements 语句</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">UnmodifiableList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">implements</span> <span class=\"token annotation punctuation\">@Readonly</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@Readonly</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//throw exception 声明</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">monitorTemperature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token annotation punctuation\">@Critical</span> <span class=\"token class-name\">TemperatureException</span> <span class=\"token punctuation\">&#123;</span> … <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类型注解只是语法而不是语义，并不会影响 java 的编译时间，加载时间，以及运行时间，也就是说，编译成 <code>class</code>  文件的时候并不包含类型注解。</p>\n<p>在枚举类型 <code>ElementType</code>  中新增了两个</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Type parameter declaration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @since 1.8 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 表示该注解能写在类型变量的声明语句中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token constant\">TYPE_PARAMETER</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// Use of a type</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// @since 1.8</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 表示该注解能写在使用类型的任何语句中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token constant\">TYPE_USE</span></pre></td></tr></table></figure><p><code>Java8</code>  并没有集成关于类型注解的使用框架，它需要开发者自己去搭建框架来使用，比如<strong>华盛顿大学</strong>开发出来的第三方插件工具<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jaGVja2VyZnJhbWV3b3JrLm9yZy8=\"> Cheker Framework</span>。类型注解被用来支持在 <code>Java</code>  程序中做强类型检查，配合上述工具可以在编译时检测出 <code>runtime error</code> 。</p>\n<p>注意：使用 <code>Checker Framework</code>  可以找到类型注解出现的地方并检查。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">checkers<span class=\"token punctuation\">.</span>nullness<span class=\"token punctuation\">.</span>quals<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Object</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 使用 javac 编译，上述是通过的</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>javac <span class=\"token operator\">-</span>processor <span class=\"token class-name\"><span class=\"token namespace\">checkers<span class=\"token punctuation\">.</span>nullness<span class=\"token punctuation\">.</span></span>NullnessChecker</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">.</span>java</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 但是改为下面代码就不会通过</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Object</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意 <code>java 5,6,7</code>  版本是不支持注解 <code>@NonNul</code> l，但 <code>checker framework </code> 有个向下兼容的解决方案，就是将类型注解 <code>@NonNull</code>  用 /**/ 注释起来。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">checkers<span class=\"token punctuation\">.</span>nullness<span class=\"token punctuation\">.</span>quals<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestDemo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">sample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">/*@NonNull*/</span> <span class=\"token class-name\">Object</span> my <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有时间我再出一篇关于 <code>Checker Framework</code>  的使用文章吧，确实很简单，就是官网是英文的让我这个英语天坑看着难受。</p>\n<h2 id=\"关于jsr-308\"><a class=\"anchor\" href=\"#关于jsr-308\">#</a> 关于 JSR 308</h2>\n<p>你可以就把 <code>JSR 308</code>  与类型注解挂钩。</p>\n<p><code>JSR 308</code>  想要解决在 Java 1.5 注解中出现的两个问题:</p>\n<ul>\n<li>在句法上对注解的限制：只能把注解写在声明的地方</li>\n<li>类型系统在语义上的限制：类型系统还做不到预防所有的 bug</li>\n</ul>\n<p><code>JSR 308</code>  通过如下方法解决上述两个问题:</p>\n<ul>\n<li>对 Java 语言的句法进行扩充，允许注解出现在更多的位置上。包括：方法接收器 (method receivers，译注：例 <code>public int size() @Readonly &#123; … &#125;)</code> ，泛型参数，数组，类型转换，类型测试，对象创建，类型参数绑定，类继承和 throws 子句。其实就是类型注解，现在是 java 8 的一个特性</li>\n<li>通过引入可插拔的类型系统 (pluggable type systems) 能够创建功能更强大的注解处理器。类型检查器对带有类型限定注解的源码进行分析，一旦发现不匹配等错误之处就会产生警告信息。其实就是 check framework</li>\n</ul>\n<p>对 JSR308，有人反对，觉得更复杂更静态了，比如</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@NotEmpty</span> <span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span> strings <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>换成动态语言为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"two\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>有人赞成，说到底，代码才是 “最根本” 的文档。代码中包含的注解清楚表明了代码编写者的意图。当没有及时更新或者有遗漏的时候，恰恰是注解中包含的意图信息，最容易在其他文档中被丢失。而且将运行时的错误转到编译阶段，不但可以加速开发进程，还可以节省测试时检查 bug 的时间。</p>\n<p>关于 <code>JSR 308</code>  的争议，可以看这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaW5mb3EuY24vYXJ0aWNsZS8yMDA4LzA1L2pzci0zMDg=\">JSR 308：Java 语言复杂度在恣意增长？</span>。</p>\n<h2 id=\"重复注解\"><a class=\"anchor\" href=\"#重复注解\">#</a> 重复注解</h2>\n<p>允许在同一申明类型 (类，属性，或方法) 的多次使用同一个注解。</p>\n<p>在 <code>JDK1.8</code>  之前使用重复注解的解决方案</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 注解</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">String</span> <span class=\"token function\">role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authorities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Authority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepeatAnnotationUseOldVersion</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Authorities</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>由另一个注解来存储重复注解，在使用时候，用存储注解 <code>Authorities</code>  来扩展重复注解。</p>\n<p><code>Java8</code>  的做法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Repeatable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Authorities</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authority</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token class-name\">String</span> <span class=\"token function\">role</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Authorities</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Authority</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RepeatAnnotationUseNewVersion</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Admin\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Authority</span><span class=\"token punctuation\">(</span>role<span class=\"token operator\">=</span><span class=\"token string\">\"Manager\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomeThing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>创建重复注解 <code>Authority</code>  时，加上 <code>@Repeatable</code> , 指向存储注解 <code>Authorities</code> ，在使用时候，直接可以重复使用 <code>Authority</code>  注解。从上面例子看出， <code>java 8</code>  里面做法更适合常规的思维，可读性强一点。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC10eXBlLWFubm8uaHRtbA==\">https://pdai.tech/md/java/java8/java8-type-anno.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1hbm5vLXJlcGVhdC5odG1s\">https://pdai.tech/md/java/java8/java8-anno-repeat.html</span></p>\n<p>冰河的博客：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmluZ2hlMDAxL3AvMTMwMzM0NDcuaHRtbA==\">https://www.cnblogs.com/binghe001/p/13033447.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A73-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/",
            "url": "https://cecilia.cool/2022/08/19/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A73-%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95/",
            "title": "Java8新特性(3)--默认方法",
            "date_published": "2022-08-19T08:00:30.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>接口可以有实现方法，而且不需要实现类实现其方法，只需要在方法名前加上 <code>default</code>  关键字。</p>\n<p>为什么要有这个特性？首先，之前的接口是个双刃剑，<strong>好处是面向抽象而不是面向具体编程</strong>，缺陷是，当需要修改接口时候，需要修改全部实现该接口的类，目前的 java 8 之前的集合框架没有 foreach 方法，通常能想到的解决办法是在 JDK 里给相关的接口添加新的方法及实现。然而，对于已经发布的版本，是没法在给接口添加新方法的同时不影响已有的实现。所以引进的默认方法。<strong>他们的目的是为了解决接口的修改与现有的实现不兼容的问题</strong>。</p>\n<p>在简单点说就是，假设我某一个接口需要定义一个新的行为，这个行为提取出来的公共行为，如果没有默认方法，就需要在所有实现类上修改，保证其完整实现其接口。</p>\n<h1 id=\"java8抽象类与接口\"><a class=\"anchor\" href=\"#java8抽象类与接口\">#</a> Java8 抽象类与接口</h1>\n<p>java 8 的接口都有实现方法了，跟抽象类还有什么区别？其实还是有的，请看下表对比。</p>\n<table>\n<thead>\n<tr>\n<th>相同点</th>\n<th>不同点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>都是抽象类型</td>\n<td><strong>抽象类不可以多重继承，接口可以</strong> (无论是多重类型继承还是多重行为继承)</td>\n</tr>\n<tr>\n<td>都可以有实现方法 (以前接口不行)</td>\n<td>抽象类和接口所反映出的设计理念不同。其实抽象类表示的是”is-a” 关系，接口表示的是”like-a” 关系</td>\n</tr>\n<tr>\n<td>都可以不需要实现类或者继承者去实现所有方法，(以前不行，现在接口中默认方法不需要实现者实现)</td>\n<td>接口中定义的变量默认是<strong> public static final</strong> 型，且必须给其初值，所以实现类中不能改变其值；抽象类中的变量默认是 friendly 型，其值可以在子类中重新定义，也可以重新赋值。</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"多重继承冲突\"><a class=\"anchor\" href=\"#多重继承冲突\">#</a> 多重继承冲突</h1>\n<p>接口可以书写默认方法了，然后又因为接口之间是可以多继承的，因而实质上 Java 8 的接口多继承其实也会涉及到实现多继承的问题。下面我们通过一个实例来看看 <code>Java</code>  它在语法层面的解决方案</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Father</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"爸爸吃饭方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 会报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"妈妈吃饭方式...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 不报错</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Son</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Mother</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"儿子自己的吃饭方式~~~\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\">// 注意这种语法是调用 【指定接口】的 defualt 方法：</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 若接口名字没有冲突，直接 super 调用即可～～～</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">Mother</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当接口的方法前面相同时，才会出现冲突。类中的方法优先级最高。类或者父类中的方法实现优先级大于任何接口的默认方法。如果最后还是无法判断，那么实现类必须通过显示复写方式复写默认方法，再通过 <code>super</code>  调用指定接口的实现。 <code>Java8</code>  在语言层面上，对若出现接口 <code>default</code>  方法冲突的解决方案是：不作为。其实不作为也是一种作为，它让编译器去提示调用者必须显示的 <code>override</code>  这个冲突的方法，让 coder 自己去决定调用逻辑。</p>\n<p>其实，更为直白的解释，就是寻找唯一默认方法的最短路径，上述例子，从 <code>Son</code>  实现类找 <code>eat</code>  的实现，从 <code>Son</code>  到 <code>Father</code>  和 <code>Son</code>  到 <code>Mother</code>  距离是一样的，所以会报错。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A's aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">C</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">aa</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C's aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">D</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>从 <code>D</code>  找 <code>aa</code>  方法，从 <code>D</code>  到 <code>C</code>  是最短的。</p>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>默认方法给予我们修改接口而不破坏原来的实现类的结构提供了便利，目前 java 8 的集合框架已经大量使用了默认方法来改进了，当我们最终开始使用 Java 8 的 lambdas 表达式时，提供给我们一个平滑的过渡体验。也许将来我们会在 API 设计中看到更多的默认方法的应用。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1kZWZhdWx0Lmh0bWwj\">https://pdai.tech/md/java/java8/java8-default.html#</span></p>\n<p>聊聊 java 中的多继承：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9hcnRpY2xlLzkxMTUxMA==\">https://developer.aliyun.com/article/911510</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/18/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A72-Optional%E7%B1%BB/",
            "url": "https://cecilia.cool/2022/08/18/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A72-Optional%E7%B1%BB/",
            "title": "Java8新特性(2)--Optional类",
            "date_published": "2022-08-18T15:40:58.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>Optional</code>  类的引入很好的解决空指针异常。它是一个可以为 <code>null</code>  的容器对象， <code>Optional</code>  本身没有引入新技术，你可以把它看作对象的包装类，通过将对象封装在 <code>Optional</code>  中，可以省去大量空指针检查。</p>\n<p>相关的方法可以快速阅读<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmE4LW9wdGlvbmFsLWNsYXNzLmh0bWw=\">菜鸟教程</span>。这里大致提一些相关的行为：</p>\n<ul>\n<li>获取 <code>Optional</code>  里的值，如果该值为空，返回默认值（可以指定默认值，有点像 <code>HashMap</code>  中的 <code>getOrDefault</code> ）</li>\n<li>检测 <code>Optional</code>  里的值，（ <code>ifPresent</code>  方法接收 <code>Consumer</code>  接口，来对值进行操作）</li>\n<li>构造器私有，通过其他方法（静态）检测要构造对象所传入的对象是否为 <code>null</code> ，来选择调用构造器。</li>\n</ul>\n<h1 id=\"入门\"><a class=\"anchor\" href=\"#入门\">#</a> 入门</h1>\n<p>举例来说，一个人可能有车也可能没有，那么  <code>Person</code>  类内部  <code>car</code>  变量就不应该声明为  <code>Car</code> ，当变量存在时， <code>Optional</code>  类只是对  <code>Car</code>  的简单封装。变量不存在时，会使用  <code>Optional.empty()</code>  方法返回空的  <code>Optional</code>  对象。如下所示：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/19/496146745a92782a.png\" alt=\"image-20220819112640846\" /></p>\n<p>但是  <code>null</code>  引用和  <code>Optional.empty()</code>  有什么本质区别？从语义上，它们可以当成一回事儿，但实际上差别非常大：如果尝试解引用一个  <code>null</code> ，一定会触发  <code>NullPointerException</code> ，不过使用  <code>Optional.empty()</code>  是一个有效对象。</p>\n<h1 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h1>\n<p>这里有 <code>empty(),of(),ofNullable()</code>  三个静态方法，都可以用来创建 <code>Optional</code>  对象，再次强调， <code>Optional</code>  的构造器是私有的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token constant\">EMPTY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> value <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里要说明的是， <code>Optional</code>  有一个 <code>EMPTY</code>  的静态属性。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> <span class=\"token constant\">EMPTY</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Optional</code>  是不对外提供对 <code>value==null</code>  时修改 <code>value</code>  的方法的，因为 <code>ifPresent</code>  会进行 <code>null</code>  值检测</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">ifPresent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> consumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            consumer<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>所以一个空的 <code>Optional</code>  就永远不会被加入新的值（因为无法修改），这也就意味着，所有的空的 <code>Optional</code>  都可以指向同一个空的 <code>Optional</code> ，这就是 <code>EMPTY</code> 。</p>\n<h1 id=\"其他方法\"><a class=\"anchor\" href=\"#其他方法\">#</a> 其他方法</h1>\n<h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map</h2>\n<p>源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofNullable</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>它和 <code>ifPresent</code>  的区别在于， <code>map</code>  接收的时 <code>Function</code>  接口，存在返回值， <code>map</code>  会将 <code>apply</code>  的返回值封装在一个新的 <code>Optional</code>  中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//map 方法执行传入的 lambda 表达式参数对 Optional 实例的值进行修改。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 为 lambda 表达式的返回值创建新的 Optional 实例作为 map 方法的返回值。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name <span class=\"token operator\">=</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> upperName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>upperName<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No value found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出：ABC</span></pre></td></tr></table></figure><h2 id=\"flatmap\"><a class=\"anchor\" href=\"#flatmap\">#</a> flatMap</h2>\n<p>源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">U</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>mapper<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以看到，它和 <code>map</code>  的差别就是返回语句， <code>flatmap</code>  只是对 <code>apply</code>  函数返回值进行空值判断，而不将它封装在 <code>Optional</code>  中。但是，从函数定义可以看到， <code>flatMap</code>  其实返回的还是一个 <code>Optional</code> ，所以 <code>mapper.apply</code>  必须返回 <code>Optional</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>upperName <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>upperName<span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No value found\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 输出 SANAULLA</span></pre></td></tr></table></figure><h2 id=\"fliter\"><a class=\"anchor\" href=\"#fliter\">#</a> fliter</h2>\n<p><code>filter</code>  方法通过传入限定条件对 <code>Optional</code>  实例的值进行过滤。如果有值并且满足断言条件返回包含该值的 <code>Optional</code> ，否则返回空 <code>Optional</code> 。要加入判定条件，从这里可以知道， <code>fliter</code>  应该实现 <code>Predicate</code>  接口（断定型接口）。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Optional</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> predicate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token class-name\">Objects</span><span class=\"token punctuation\">.</span><span class=\"token function\">requireNonNull</span><span class=\"token punctuation\">(</span>predicate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 如果为空</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> <span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmE4LW9wdGlvbmFsLWNsYXNzLmh0bWw=\">https://www.runoob.com/java/java8-optional-class.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1vcHRpb25hbC5odG1s\">https://pdai.tech/md/java/java8/java8-optional.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/17/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A71-%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/",
            "url": "https://cecilia.cool/2022/08/17/Java/Java8/Java8%E6%96%B0%E7%89%B9%E6%80%A71-%E5%87%BD%E6%95%B0%E7%BC%96%E7%A8%8B/",
            "title": "Java8新特性(1)--函数编程",
            "date_published": "2022-08-17T14:12:34.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>Lambda</code>  允许把函数作为一个方法的参数（函数作为参数传递进方法中）。使用  <code>Lambda</code>  表达式可以使代码变的更加简洁紧凑。</p>\n<p>以下是 lambda 表达式的重要特征:</p>\n<ul>\n<li>** 可选类型声明：** 不需要声明参数类型，编译器可以统一识别参数值。</li>\n<li>** 可选的参数圆括号：** 一个参数无需定义圆括号，但多个参数需要定义圆括号。</li>\n<li>** 可选的大括号：** 如果主体包含了一个语句，就不需要使用大括号。</li>\n<li>** 可选的返回关键字：** 如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定表达式返回了一个数值。</li>\n</ul>\n<p>具体代码为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 不需要参数，返回值为 5  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token number\">5</span>  </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 2. 接收一个参数 (数字类型), 返回其 2 倍的值  </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x <span class=\"token operator\">-></span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 3. 接受 2 个参数 (数字), 并返回他们的差值  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x – y  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 4. 接收 2 个 int 型整数，返回他们的和  </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 5. 接受一个 string 对象，并在控制台打印，不返回任何值 (看起来像是返回 void)  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>面向对象编程是对数据进行抽象，而函数式编程是对行为进行抽象。现实世界中，数据和行为并存，程序也是如此，因此这两种编程方式我们都得学。</p>\n</blockquote>\n<h1 id=\"主要内容\"><a class=\"anchor\" href=\"#主要内容\">#</a> 主要内容</h1>\n<h2 id=\"变量作用域\"><a class=\"anchor\" href=\"#变量作用域\">#</a> 变量作用域</h2>\n<p><code>Lambda</code>  使用的变量，必须被 <code>final</code>  修饰或者含有隐性 <code>final</code> 。同样的，变量在 <code>Lambda</code>  表达式中也不能被修改。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// n = 9;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Runnable</span> r <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// n = 9;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//n 既不能在表达式中被修改，也不能在 Lambda 表达式之外被修改。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 总之，n 是不可修改的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"方法引用\"><a class=\"anchor\" href=\"#方法引用\">#</a> 方法引用</h2>\n<p>方法引用的可以简化 <code>Lambda</code>  表达式，但是在方法引用中不能有任何参数修改</p>\n<p>构造引用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">Student</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span></pre></td></tr></table></figure><p>对象 **:😗* 实例方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// public void forEach(Consumer&lt;? super E> action) </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//forEach 需要重写 Consumer 的 accept 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 使用方法引用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> s <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类名 **:😗* 静态方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Double</span><span class=\"token punctuation\">></span></span> stream <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">generate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token operator\">::</span><span class=\"token function\">random</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类名 **:😗* 实例方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/*  这里如果使用第一句话，编译器会有提示: Can be replaced with Comparator.naturalOrder，这句话告诉我们</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  String 已经重写了 compareTo () 方法，在这里写是多此一举，这里为什么这么写，是因为为了体现下面</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  这句编译器的提示: Lambda can be replaced with method reference。好了，下面的这句就是改写成方法引用之后: </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  TreeSet&lt;String> set = new TreeSet&lt;>((s1,s2) -> s1.compareTo(s2));</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> set <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TreeSet</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">compareTo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"注解-functioninterface\"><a class=\"anchor\" href=\"#注解-functioninterface\">#</a> 注解 @FunctionInterface</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Documented</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span><span class=\"token constant\">RUNTIME</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TYPE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">FunctionalInterface</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>该注解只能修饰接口。被 <code>FunctionalInterface</code>  注解修饰的接口，只能有一个抽象方法，被实现的方法必须被<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xNDg4MTEz\"> defalut</span> 修饰。</p>\n<p>如果声明的方法和 <code>java.lang.Object</code>  中的某个方法一样，它可以不当做未实现的方法，不违背这个原则:：一个被它注解的接口只能有一个抽象方法。</p>\n<p>比如 <code>java public interface Comparator&lt;T&gt; &#123; int compare(T o1, T o2); boolean equals(Object obj); &#125;</code> 。</p>\n<p>编译器会自动把满足 <code>function interface</code>  要求的接口自动识别为 <code>function interface</code> ，所以你才不需要对上面示例中的 ITest 接口增加 <code>@FunctionInterface</code>  注解。</p>\n<h2 id=\"内置四大函数接口\"><a class=\"anchor\" href=\"#内置四大函数接口\">#</a> 内置四大函数接口</h2>\n<ul>\n<li>消费型接口： <code>Consumer&lt; T&gt; void accept(T t)</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> greeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>firstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>greeter<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Luke\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Skywalker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>供给型接口： <code>Supplier &lt; T&gt; T get()</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">></span></span> personSupplier <span class=\"token operator\">=</span> <span class=\"token class-name\">Person</span><span class=\"token operator\">::</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>personSupplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// new Person</span></pre></td></tr></table></figure><ul>\n<li>断定型接口： <code> Predicate&lt;T&gt; boolean test(T t)</code> 。返回值类型是固定的 <code>boolean</code> 。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>redicate<span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> predicate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>predicate<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Predicate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> isEmpty <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token operator\">::</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>函数型接口： <code>Function&lt;T,R&gt; R apply(T t)</code> ，有参有返回值的抽象方法。</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> toInteger <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qYXZhL2phdmE4LWxhbWJkYS1leHByZXNzaW9ucy5odG1s\">https://www.runoob.com/java/java8-lambda-expressions.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS9qYXZhOC9qYXZhOC1zdHJlYW0uaHRtbA==\">https://pdai.tech/md/java/java8/java8-stream.html</span></p>\n</blockquote>\n",
            "tags": [
                "Java8"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/17/Java/%E5%B9%B6%E5%8F%91/JUC_locks4-Reentrantlock/",
            "url": "https://cecilia.cool/2022/08/17/Java/%E5%B9%B6%E5%8F%91/JUC_locks4-Reentrantlock/",
            "title": "J.U.C.locks(4)--Reentrantlock",
            "date_published": "2022-08-17T05:33:43.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>之后介绍的工具类很多都是基于 <code>AQS</code>  实现的，所以关于 <code>AQS</code>  的两篇文章请务必先看完：AQS 上，AQS 下。</p>\n<p><code>Reentrantlock</code>  是可重入锁，内部实现了公平锁，也实现了非公平锁。在看下面的内容时，可以带着下面的问题思考：</p>\n<ul>\n<li>\n<p>什么是可重入，什么是可重入锁？它用来解决什么问题？</p>\n</li>\n<li>\n<p><code>ReentrantLock</code>  的核心是 <code>AQS</code> ，那么它怎么来实现的，继承吗？说说其类内部结构关系。</p>\n</li>\n<li>\n<p><code>ReentrantLock</code>  是如何实现公平锁的？</p>\n</li>\n<li>\n<p><code>ReentrantLock</code>  是如何实现非公平锁的？</p>\n</li>\n<li>\n<p><code>ReentrantLock</code>  默认实现的是公平还是非公平锁？</p>\n</li>\n<li>\n<p>使用 <code>ReentrantLock</code>  实现公平和非公平锁的示例？</p>\n</li>\n<li>\n<p><code>ReentrantLock</code>  和 <code>Synchronized</code>  的对比？</p>\n</li>\n</ul>\n<h1 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h1>\n<p><code>ReentrantLock</code>  有三个内部类，具体看下图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/17/1c541052a7533ea7.png\" alt=\"image-20220817141354041\" /></p>\n<p>从上图可以看出， <code>ReentrantLock</code>  实现了公平与非公平的同步器，接下来我们详细分析一下源码</p>\n<h2 id=\"sync\"><a class=\"anchor\" href=\"#sync\">#</a> Sync</h2>\n<p><code>Sync</code>  实现的是非公平的获取锁 --  <code>nonfairTryAcquire</code> ，但是无论是公平还是非公平，某些方法是一致的，所以 <code>Sync</code>  直接重写了 <code>tryRelease</code>  方法， <code>isHeldExclusively</code>  方法，而将 <code>tryAcquire</code>  的实现留给了两个子类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 非公平方式获取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">nonfairTryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 当前线程</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取状态</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 表示没有线程正在竞争该锁</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 比较并设置状态成功，状态 0 表示锁没有被占用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 设置当前线程独占</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 当前线程拥有该锁</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> nextc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> acquires<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 增加重入次数</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// overflow</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\">// 设置状态</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 成功</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 失败</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果你很细心，应该发现了上面的代码和我们在 AQS 上实现的自定义同步器的 <code>tryAcquire</code>  很相似。就是基本的获取锁或者重入锁然后改变 <code>state</code>  的状态。</p>\n<p>对于 <code>tryRelease</code>  和 <code>isHeldExclusively</code>  等方法，就不再赘述。</p>\n<p><code>Sync</code>  类存在如下方法和作用如下：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/17/3fc03d7a89136ab2.png\" alt=\"image-20220817140901105\" /></p>\n<h1 id=\"nonfairsync\"><a class=\"anchor\" href=\"#nonfairsync\">#</a> NonfairSync</h1>\n<p><code>NonfairSync</code>  类继承了 <code>Sync</code>  类，表示采用非公平策略获取锁，其实现了 <code>Sync</code>  类中抽象的 <code>lock</code>  方法，源码如下:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 非公平锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NonfairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 版本号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7316153563782823691L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获得锁</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 比较并设置状态成功，状态 0 表示锁没有被占用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 把当前线程设置独占了锁</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token comment\">// 锁已经被占用，或者 set 失败</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 以独占模式获取对象，忽略中断</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">nonfairTryAcquire</span><span class=\"token punctuation\">(</span>acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里提一下， <code>unlock</code>  是由 <code>ReentrantLock</code>  实现的。从 <code>lock</code>  方法的源码可知，<strong>每一次都尝试获取锁</strong>，而并不会按照公平等待的原则进行等待，让等待时间最久的线程获得锁。</p>\n<h1 id=\"fairsync\"><a class=\"anchor\" href=\"#fairsync\">#</a> FairSync</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 公平锁</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FairSync</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Sync</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 版本序列化</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3000897897090466540L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 以独占模式获取对象，忽略中断</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 尝试公平获取锁</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquires<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 获取当前线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> current <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// 获取状态</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 状态为 0</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 不存在已经等待更久的线程并且比较并且设置状态成功</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 设置当前线程独占</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 状态不为 0，即资源已经被线程占据</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">// 下一个状态</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">int</span> nextc <span class=\"token operator\">=</span> c <span class=\"token operator\">+</span> acquires<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextc <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 超过了 int 的表示范围</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Maximum lock count exceeded\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token comment\">// 设置状态</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>我们可以看到，在公平获取锁中，如果当前线程可以拿到锁，它会检测在阻塞队列中是有节点等待得更久，而不会越过这些等待得更久的节点自己去获取节点。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>而非公平节点就是直接尝试获取锁资源</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> acquires<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在公平与非公平，也体现在 <code>lock</code>  上，如果是公平锁，是不能直接就去尝试 <code>CAS</code>  替换，因为阻塞队列中可能有等待更久的节点，所以需要在 <code>tryAcquire</code>  中判断一下，而非公平锁是直接可以在 <code>lock</code>  中先 <code>CAS</code>  替换一下，不用考虑是否阻塞队列中是否有等待更久的节点。</p>\n<h1 id=\"公平性的详解\"><a class=\"anchor\" href=\"#公平性的详解\">#</a> 公平性的详解</h1>\n<p>我们之前说过， <code>AQS</code>  的同步队列是严格先进先出的队列（除非一个节点被设为 <code>CANCLLED</code> ，然后被删除），否则一定是队首的节点先出去。也就是说，** 如果一个节点进入了队列，在 <code>AQS</code>  的机制下，它不可能比队首节点先获取锁资源。** 所以 <code>ReentrantLock</code>  实现的非公平锁，不是说阻塞队列中的后面的节点可以比队首节点先获取资源，这是不可能的。</p>\n<p>请一定要记住， <code>AQS</code>  里面的先进先出的同步队列是调度策略，通过维护先进先出的同步队列实现公平的调度，，这是不能被子类改变的。而所谓的公平的获取锁，我们假设一个线程 <code>t</code>  刚被创建并想要获取资源，如果阻塞队列中存在节点（不是指 <code>head</code>  那个哑节点），那么线程 <code>t</code>  就不能去获取资源（无论这个资源是否被其他线程独占），而是需要去同步队列进行排队。</p>\n<p>但是非公平锁，就是线程 <code>t</code>  可以不用检测同步队列是否有线程，而是直接尝试去获取，如果没有获取成功，再去阻塞队列排队。</p>\n<p>上述实现基于一个重要的 <code>AQS</code>  方法： <code>hasQueuedPredecessors</code> 。它会判断当前线程是否需要入队，其实就是检测队列中是否有节点。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">hasQueuedPredecessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 读取头节点</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token comment\">// 读取尾节点</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Node</span> h <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//s 是首节点 h 的后继节点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">Node</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> h <span class=\"token operator\">!=</span> t <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">=</span> h<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">!=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在讲解方法之前，先回忆一下 <code>enq</code>  方法，我们现在先假设同步队列<strong>没有被初始化</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 假设线程 t 执行该方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 此时 tail == head == null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token comment\">// 此时 tail = null,head = new Node (),head.next = null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 如果在该位置断开，由线程 s 执行 hasQueuedPredecessors 方法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 返回的是 true，因为此时虽然没有初始化完，但是已经有线程准备加入队列中了</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            \t<span class=\"token comment\">// 如果在该位置断开，由线程 s 执行 hasQueuedPredecessors 方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            \t<span class=\"token comment\">//h == t 返回 false，表示 s 线程不需要加入同步队列，离谱吧，我真的无语</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetTail</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                t<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么为什么会这样呢？ <code>he == t</code>  的意思其实是， <code>head</code>  是哑节点，不参与排队，所以此时队列中就没有节点，就不需要排队。出现这样的情况很简单，就是当所有的节点都出队之后，同步队列就是 <code>head == tail</code> ，但是这导致在 <code>enq</code>  函数中出现了漏洞，我也没查到相关的文献，可能是我哪里没学懂，但是我是真的不理解。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLVJlZW50cmFudExvY2suaHRtbCMlRTUlQjglQTYlRTclOUQlODBiYXQlRTUlQTQlQTclRTUlOEUlODIlRTclOUElODQlRTklOUQlQTIlRTglQUYlOTUlRTklOTclQUUlRTklQTIlOTglRTUlOEUlQkIlRTclOTAlODYlRTglQTclQTM=\">Java 全栈知识体系</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGVlc2Y0NTYvcC81MzgzNjA5Lmh0bWw=\">JDK1.8 源码分析之 ReentrantLock (三)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zODEwNjMyMi9hcnRpY2xlL2RldGFpbHMvMTA3MTU0OTYx\">AQS-hasQueuedPredecessors () 解析</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHVkbi5jb20vbmV3cy82MmQzYzI4Mjg2NGQ1YzczYWNiZTFlODQuaHRtbA==\">AQS 之 hasQueuedPredecessors 方法源码分析</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/16/Java/%E5%B9%B6%E5%8F%91/JUC_locks3-AQS%E4%B8%8B/",
            "url": "https://cecilia.cool/2022/08/16/Java/%E5%B9%B6%E5%8F%91/JUC_locks3-AQS%E4%B8%8B/",
            "title": "J.U.C.locks(3)--AQS下",
            "date_published": "2022-08-16T01:46:21.000Z",
            "content_html": "<h1 id=\"模板方法模式\"><a class=\"anchor\" href=\"#模板方法模式\">#</a> 模板方法模式</h1>\n<p>同步器的设计是基于模板方法模式的，如果需要自定义同步器一般的方式是这样 (模板方法模式很经典的一个应用)。 <code>AQS</code>  底层使用模板方法，使用者继承 <code>AbstractQueuedSynchronizer</code>  并重写指定的方法。(这些重写方法很简单，无非是对于共享资源 <code>state</code>  的获取和释放) 将 AQS 组合在自定义同步组件的实现中，并调用其模板方法，而这些模板方法会调用使用者重写的方法。</p>\n<p>AQS 使用了模板方法模式，自定义同步器时需要重写下面几个 AQS 提供的模板方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 该线程是否正在独占资源。只有用到 condition 才需要去实现它。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 独占方式。尝试获取资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 独占方式。尝试释放资源，成功则返回 true，失败则返回 false。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 共享方式。尝试获取资源。负数表示失败；0 表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 共享方式。尝试释放资源，成功则返回 true，失败则返回 false。</span></pre></td></tr></table></figure><p>这些方法的实现必须是内部线程安全的，并且通常应该简短而不是阻塞。AQS 类中的其他方法都是 final ，所以无法被其他类使用，只有这几个方法可以被其他类使用。关于模板方法，可以参考这篇文章：<a href=\"https://cecilia.cool/2022/08/07/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/\">行为型 - 模板方法</a>。</p>\n<h1 id=\"conditionobject内部类\"><a class=\"anchor\" href=\"#conditionobject内部类\">#</a> ConditionObject 内部类</h1>\n<p><code>ConditionObject</code>  实现了 <code>Condition</code>  接口，该接口在 <code>j.u.c.lock</code>  包下，先来看一下源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Condition</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 等待，当前线程在接到信号或被中断之前一直处于等待状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 等待，当前线程在接到信号之前一直处于等待状态，不响应中断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">awaitUninterruptibly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 等待，当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态 </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">long</span> <span class=\"token function\">awaitNanos</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> nanosTimeout<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 等待，当前线程在接到信号、被中断或到达指定等待时间之前一直处于等待状态。此方法在行为上等效于: awaitNanos (unit.toNanos (time)) > 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span> unit<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 等待，当前线程在接到信号、被中断或到达指定最后期限之前一直处于等待状态</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">boolean</span> <span class=\"token function\">awaitUntil</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Date</span> deadline<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 唤醒一个等待线程。如果所有的线程都在等待此条件，则选择其中的一个唤醒。在从 await 返回之前，该线程必须重新获取锁。</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 唤醒所有等待线程。如果所有的线程都在等待此条件，则唤醒所有线程。在从 await 返回之前，每个线程都必须重新获取锁。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">signalAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>很明显， <code>Condition</code>  定义了条件操作的规范。由于 <code>ConditionObject</code>  源码比较长，这里建议自己去看一下源码，之后会结合流程图讲解几个重要的方法。</p>\n<h2 id=\"唤醒函数\"><a class=\"anchor\" href=\"#唤醒函数\">#</a> 唤醒函数</h2>\n<p>主要是 <code>signal</code>  和 <code>signalAll</code> ，先看源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">signal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 只有获取锁，才能调用 signal 线程</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalMonitorStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Node</span> first <span class=\"token operator\">=</span> firstWaiter<span class=\"token punctuation\">;</span><span class=\"token comment\">// 拿到等待队列的头节点</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>first <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">doSignal</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 唤醒头节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSignal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> first<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>firstWaiter <span class=\"token operator\">=</span> first<span class=\"token punctuation\">.</span>nextWaiter<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 等待队列头节点向下移动</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            lastWaiter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        first<span class=\"token punctuation\">.</span>nextWaiter <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 需要唤醒的节点移出等待队列</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">transferForSignal</span><span class=\"token punctuation\">(</span>first<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>             <span class=\"token punctuation\">(</span>first <span class=\"token operator\">=</span> firstWaiter<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 此时 node 已经移出等待队列了</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">transferForSignal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 这里如果 node 的状态是 CANCELLED，就会失败，node 也就自然而然从队列中删除，等待 GC</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CONDITION</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token comment\">// 修改成功，加入同步队列，返回 node 的前驱节点</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">int</span> ws <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//ws > 0 是 CANCELLED</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对应的流程图如下</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/16/57b0196e8d0c797b.png\" alt=\"image-20220816124802107\" /></p>\n<p><code>signalAll</code>  是差不多的，在 <code>doSignalAll</code>  只不过是不断循环从而唤醒等待队列中的所有函数</p>\n<h2 id=\"等待函数\"><a class=\"anchor\" href=\"#等待函数\">#</a> 等待函数</h2>\n<p><code>AQS</code>  维护一个单链表队列，该队列为等待队列（也叫条件队列），当线程调用 <code>await</code>  时，就会进入等待队列。从 <code>Condition</code>  接口中可以看出，大部分函数都是和 <code>await</code>  有关，先看一下最简单的 <code>await</code> 。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InterruptedException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token function\">addConditionWaiter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将当前线程封装为 node，加入 Condition 队列，此时 node 状态为 CODITION</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 彻底释放已经被当前线程占用的同步资源，会唤醒后继节点，返回原本占有的同步资源数量  </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 如果线程没有锁资源，抛出异常并且 node 节点状态为 CANCELLED</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> savedState <span class=\"token operator\">=</span> <span class=\"token function\">fullyRelease</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> interruptMode <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token comment\">// 如果该节点还不存在与同步等待队列中，就阻塞掉自己  </span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  \t <span class=\"token comment\">// 这里这样判断的原因是因为 signal 方法会将条件等待队列中的相应节点转移到同步队列中。</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isOnSyncQueue</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 完成进入等待队列吗，锁资源释放。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 如果被外界 interrupt，就会返回 - 1 或 1，会中断标记清空</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>interruptMode <span class=\"token operator\">=</span> <span class=\"token function\">checkInterruptWhileWaiting</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token comment\">//acquireQueued 方法只会在成功获取到同步资源之后才会返回，返回就表明成功获取到同步资源，</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 并且返回值为 true 表明在尝试获取同步资源的过程中发生了中断，需要恢复中断</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> savedState<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> interruptMode <span class=\"token operator\">!=</span> <span class=\"token constant\">THROW_IE</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        interruptMode <span class=\"token operator\">=</span> <span class=\"token constant\">REINTERRUPT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nextWaiter <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// clean up if cancelled</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">unlinkCancelledWaiters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 根据 interruptMode 是否重新中断</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>interruptMode <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">reportInterruptAfterWait</span><span class=\"token punctuation\">(</span>interruptMode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>看流程图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/16/dea46e6cb133ee9d.png\" alt=\"image-20220816141909290\" /></p>\n<p>关于恢复中断的机制， <code>park</code>  方法被唤醒之后，发现被中断过 ( <code>interruptMode</code>  将不为 0) 则跳出循环 。如果被中断过，这里也会根据情况返回处理中断异常的方式：</p>\n<ul>\n<li>如果仅仅发生了中断没有发送 signal，或者中断发生在 signal 之前，则返回 THROW_IE,</li>\n<li>如果中断与 signal 同时发生或者发生在 signal 之后，则返回 REINTERRUPT</li>\n<li>如果没有中断发生，说明不是被中断唤醒，那么继续判断 while 条件，是否已经存在于同步等待队列，如果不在同步等待队列则继续阻塞</li>\n</ul>\n<h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdHhtZnovcC8xNDc1NTkyMC5odG1s\">https://www.cnblogs.com/txmfz/p/14755920.html</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/07/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/",
            "url": "https://cecilia.cool/2022/08/07/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%A1%8C%E4%B8%BA%E5%9E%8B-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/",
            "title": "行为型-模板方法",
            "date_published": "2022-08-07T13:48:23.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>一个抽象类公开定义了执行它的方法的方式 / 模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p>\n<p>关键代码框架在抽象类中实现，其他步骤在子类实现。模板方法需要加上 <code>final</code>  防止被重写。要注意的是，子类要重写的不是模板方法，而是子类需要重写的方法。抽象类可以通过模板方法来规定一整套行为流程，但是流程中各个行为可以由子类自己实现。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Game</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token comment\">// 模板</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 初始化游戏</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 开始游戏</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">startPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 结束游戏</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">endPlay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//initialize,startPlay,endPlay 方法可以由子类重写</span></pre></td></tr></table></figure><h1 id=\"意图\"><a class=\"anchor\" href=\"#意图\">#</a> 意图</h1>\n<p>模板方法可以定义算法框架，将一些步骤的实现延迟到子类，通过模板方法，子类可以重新定义算法的某些步骤，而不用改变算法的结构。</p>\n<h1 id=\"举例\"><a class=\"anchor\" href=\"#举例\">#</a> 举例</h1>\n<p>泡茶和泡咖啡都有类似的流程（烧水，倒入杯中），但是某些步骤会有点不一样（加调料，brew-- 酝酿？），要求复用那些相同步骤的代码。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/07/20a244dbdd6e5c6a.png\" alt=\"image-20220807222733874\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>菜鸟教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9kZXNpZ24tcGF0dGVybi90ZW1wbGF0ZS1wYXR0ZXJuLmh0bWw=\">https://www.runoob.com/design-pattern/template-pattern.html</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvZGV2LXNwZWMvcGF0dGVybi8xN190ZW1wbGF0ZS5odG1s\">https://pdai.tech/md/dev-spec/pattern/17_template.html</span></p>\n</blockquote>\n",
            "tags": [
                "设计模式"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/07/Java/%E5%B9%B6%E5%8F%91/JUC_locks2-AQS%E4%B8%8A/",
            "url": "https://cecilia.cool/2022/08/07/Java/%E5%B9%B6%E5%8F%91/JUC_locks2-AQS%E4%B8%8A/",
            "title": "J.U.C.locks(2)--AQS上",
            "date_published": "2022-08-07T09:40:57.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>在 <code>locks</code>  包下有一个类是 <code>AbstractQueuedSynchronizer</code> ，其简写就是 <code>AQS</code> ， <code>AQS</code>  是一个用来构建锁和同步器的框架，使用 <code>AQS</code>  能简单且高效地构造出应用广泛的大量的同步器。</p>\n<p><code>AQS</code>  是一个提供给用户自定义同步器的简单框架。其内部严格使用先进先出的阻塞队列，并且构造出来的同步器依赖于一个 <code>int</code>  类型的 <code>state</code>  来判断是否有线程占用锁。 <code>AQS</code>  提供独占模式（ <code>exclusive</code> ）和共享模式（ <code>shared</code> ），用户自定义的同步器一般支持一种模式，当然有些同步器两种也支持。</p>\n<p><code>AQS</code>  核心思想是，如果被请求的共享资源<strong>空闲</strong>，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态；如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的<strong>机制</strong>，这个机制 <code>AQS</code>  是用<strong> CLH 队列锁</strong>实现的，即将暂时获取不到锁的线程加入到队列中。</p>\n<p>想要借助 <code>AQS</code>  实现自定义的同步器，需要继承 <code>AQS</code>  类，在注释中， <code>AQS</code>  说明子类应该是一个内部类。</p>\n<blockquote>\n<p>Subclasses should be defined as non-public internal helperclasses that are used to implement the synchr onization properties of their enclosing class.</p>\n</blockquote>\n<p>继承 <code>AQS</code>  后，需要重写几个必要的方法，实际上，子类也只能重写这几个方法，因为其他方法都被 <code>final</code>  修饰。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 前两个是独占模式需要重写的方法    </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// 后两个是共享模式需要重写的方法</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">int</span> <span class=\"token function\">tryAcquireShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryReleaseShared</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token comment\">// 判断是否同步只与当前线程保持一致</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isHeldExclusively</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UnsupportedOperationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"实现自定义同步器\"><a class=\"anchor\" href=\"#实现自定义同步器\">#</a> 实现自定义同步器</h1>\n<p>继承 <code>AQS</code>  的子类应该是非公有的内部类，实现的同步器依赖 <code>int state</code>  值判断当前锁是否被占用，这个 <code>state</code>  值代表的含义由用户自己来决定，我们这里用 0 表示没有线程占用锁，1 表示有 1 个线程占用锁，x+1 表示某个线程第 x 次重入这把锁。此次自定义同步器仅支持独占模式。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLock</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Syn</span> syn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>syn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Syn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Syn</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquire<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取当前 state 状态</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">// 定义 state 状态，o-- 没有资源，1-- 有一个线程获得资源</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 必须死用 CAS，如果在 CAS 之前有其他线程拿到了，那么就直接返回 false</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程获取锁资源，将该线程设为独占线程</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 重入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">int</span> nextC <span class=\"token operator\">=</span> acquire <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>nextC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该线程不是当前锁的独占线程，无法获得锁</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">!=</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalMonitorStateException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> arg<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">boolean</span> free <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果存在锁重入，也就是 state>1，那么锁其实并没有 release</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                free <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token keyword\">return</span> free<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showLockThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"当前独占锁资源的Thread: \"</span> <span class=\"token operator\">+</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>syn<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>syn<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showLockThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>syn<span class=\"token punctuation\">.</span><span class=\"token function\">showLockThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样，我们的自定义同步器就实现了，现在使用一下</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">MyLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyLock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1 start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1 get lock---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t1 unlock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2 start---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2 get lock---\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t2 unlock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">showLockThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>结果：</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>t1 start---</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>t2 start---</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>t1 get lock---</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>当前独占锁资源的 Thread: t1</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>t1 unlock</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>t2 get lock---</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>t2 unlock</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>*/</span></pre></td></tr></table></figure><h1 id=\"aqs属性\"><a class=\"anchor\" href=\"#aqs属性\">#</a> AQS 属性</h1>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AbstractQueuedSynchronizer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractOwnableSynchronizer</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">implements</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span>Serializable</span> <span class=\"token punctuation\">&#123;</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// part1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 版本号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">7373984972572414691L</span><span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 头节点</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> head<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 尾结点</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">transient</span> <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> tail<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> state<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 自旋时间</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> spinForTimeoutThreshold <span class=\"token operator\">=</span> <span class=\"token number\">1000L</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// part2</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// Unsafe 类实例</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">//state 内存偏移地址</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> stateOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">//head 内存偏移地址</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> headOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//state 内存偏移地址</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> tailOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">//tail 内存偏移地址</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> waitStatusOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">//next 内存偏移地址</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> nextOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">// 静态初始化块</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            stateOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"state\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            headOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"head\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            tailOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">AbstractQueuedSynchronizer</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            waitStatusOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"waitStatus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            nextOffset <span class=\"token operator\">=</span> unsafe<span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"next\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>part1</code>  部分，内部要维护一个 <code>FIFO</code>  的队列，该队列其实是一个双向链表，所以 <code>AQS</code>  内部存在 <code>head,tail</code>  两个 <code>Node</code>  节点。 <code>Node</code>  是 <code>AQS</code>  的内部类， <code>AQS</code>  将一个线程封装为 <code>Node</code>  放入队列中。</p>\n<p>然后就是 <code>state</code> ， <code>AQS</code>  提供了三个方法供用户使用， <code>getState(),setState(int),compareAndSetState(int)</code> 。</p>\n<p><code>part2</code>  部分，因为 <code>AQS</code>  中有很多 <code>CAS</code>  操作，所以必须要提前拿到各个字段在其类中的地址偏移量。</p>\n<h1 id=\"node内部类\"><a class=\"anchor\" href=\"#node内部类\">#</a> Node 内部类</h1>\n<p>先给源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 模式，分为共享与独占</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 共享模式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> <span class=\"token constant\">SHARED</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 静态变量，在独占模式中，t 线程拿到锁资源，EXCLUSIVE = t</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> <span class=\"token constant\">EXCLUSIVE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 结点状态</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// CANCELLED，值为 1，表示当前的线程被取消</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// SIGNAL，值为 - 1，表示当前节点的后继节点包含的线程需要运行，也就是 unpark</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// CONDITION，值为 - 2，表示当前节点在等待 condition，也就是在 condition 队列中</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// PROPAGATE，值为 - 3，表示当前场景下后续的 acquireShared 能够得以执行</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 值为 0，表示当前节点在 sync 队列中，等待着获取锁</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CANCELLED</span> <span class=\"token operator\">=</span>  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">SIGNAL</span>    <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">CONDITION</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token constant\">PROPAGATE</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 结点状态</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> waitStatus<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 前驱结点</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> prev<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 后继结点</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Node</span> next<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 结点所对应的线程</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 下一个等待者</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token class-name\">Node</span> nextWaiter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">// 结点是否在共享模式下等待</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">isShared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> nextWaiter <span class=\"token operator\">==</span> <span class=\"token constant\">SHARED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">// 获取前驱结点，若前驱结点为空，抛出异常</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">predecessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NullPointerException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token comment\">// 保存前驱结点</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> prev<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前驱结点为空，抛出异常</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">NullPointerException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token comment\">// 前驱结点不为空，返回</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 无参构造方法</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextWaiter <span class=\"token operator\">=</span> mode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 构造方法</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> waitStatus<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">=</span> waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> thread<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重点看 <code>Node</code>  的属性，关于 <code>Node</code>  中常量的含义，可以参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RyYXl2b25ubi9hcnRpY2xlL2RldGFpbHMvMTA5Mjg1ODYy\">AQS 中 Node 状态</span>。</p>\n<p>先讲一下双向链表的出入队机制，一开始， <code>AQS</code>  的 <code>head,tail</code>  都是 <code>null</code> ，当加入第一个节点时（ <code>addWaiter</code>  方法），会检查 <code>tail==null</code> ，如果是 <code>null</code> ，就说明队列为空，就会初始化队列，让 <code>head,tail</code>  指向 <code>new Node</code> ，此时头节点和尾节点指向同一个，没有实际意义的节点。然后再把要加入的节点加入到 <code>head</code>  后面，接着 <code>tail</code>  指向新加入的节点（ <code>enq</code>  方法实现）。</p>\n<p>我们看一下两个方法的源代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 暂时不用管 mode，addWaiter 是将当前线程加入同步队列</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Node</span> node <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Node</span> pred <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pred <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetTail</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 队列没有初始化或者 CAS 失败，进入 enq 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">enq</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 无限循环，直到节点通过 CAS 加入到队列中</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 初始化队列</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetHead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                tail <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetTail</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                t<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>关于 <code>Node</code>  的状态，也就是 <code>waitStatus</code> ，之后会详细讲到。</p>\n<h1 id=\"同步队列详解\"><a class=\"anchor\" href=\"#同步队列详解\">#</a> 同步队列详解</h1>\n<p>在并发环境中，一个线程如果尝试获得锁资源失败后，会进入阻塞状态，同时进入阻塞队列。尽管不同的同步器对队列中的线程调度不同，可能是为了避免饥饿使用 <code>FIFO</code> ，也可能为了提高吞吐量使用其他调度，比如优先级之类的。但是其他的并发流程大致是一样的，比如阻塞后进入同步队列，调用了 <code>wait,await</code>  之类的函数会进入等待队列。该部分会讲解 <code>AQS</code>  如何维护同步队列（阻塞队列）。</p>\n<h2 id=\"acquire函数\"><a class=\"anchor\" href=\"#acquire函数\">#</a> acquire 函数</h2>\n<p><code>AQS</code>  中队列是双向链表，一个线程只有在通过 <code>acquire(int arg)</code>  获取资源失败后，才会被包装成 <code>Node</code>  加入队列中，该队列是 <code>FIFO</code>  的。所以我们先看一下 <code>acquire(int arg)</code>  源码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span><span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">EXCLUSIVE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token function\">selfInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>acquire</code>  会先尝试获取资源，也就是 <code>tryAcquire</code> ，而这个正是我们需要重写的方法，以上面的自定义同步器重写的 <code>tryAcquire</code>  为例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> acquire<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">compareAndSetState</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">,</span>acquire<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token function\">setExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在同步器中设置独占线程</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            \t<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时已经拿到锁资源了</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">==</span> <span class=\"token function\">getExclusiveOwnerThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>acquire<span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处是锁重入，不必担心并发问题，因为锁资源在当前线程手中。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// CAS 操作失败（有其他线程更快拿到锁）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>尝试获取资源失败后， <code>AQS</code>  就会将该线程加入同步队列中 —— <code>addWaiter(Node.EXCLUSIVE),arg)</code> 。</p>\n<p>我们之前看源码，发现 <code>addWaiter</code>  传入的参数其实并不是当前线程封装的 <code>Node</code> ，参数名是 <code>mode</code> ，我们看一下官方注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * Creates and enqueues node for current thread and given mode.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @param mode Node.EXCLUSIVE for exclusive, Node.SHARED for shared</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * @return the new node</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">addWaiter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> mode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>而我们在 <code>acquire</code>  中传入的是 <code>Node.EXCLUSIVE</code> ，就表示当前节点是独占模式的节点。为什么要这么区分呢？因为有些自定义同步器既可以独占模式，又可以共享模式，而 <code>AQS</code>  只会维护一个同步队列，那么两种模式下的节点都会在同一个节点中，所以需要区分。</p>\n<p>当节点加入到队列中后， <code>AQS</code>  让该线程再做一次尝试获取锁资源。但是这种尝试是有条件的，因为 <code>AQS</code>  是严格的 <code>FIFO</code> ，所以只有当该线程在同步队列中前一个节点是头节点才允许再次尝试获取资源（头节点 <code>head</code>  指向一个没有任何意义的节点）。只有这样，才能是公平的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acquireQueued</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token keyword\">boolean</span> failed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">boolean</span> interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span><span class=\"token function\">predecessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//node 的前一个节点，其实就是 node.prev</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> head <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 如果 node 前一个节点是 head 并且再次尝试获取资源成功</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token function\">setHead</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 那么 node 就不应该在同步队列中了，设置 node 为 head</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    p<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                    failed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token keyword\">return</span> interrupted<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回 false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldParkAfterFailedAcquire</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token function\">parkAndCheckInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                    interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>failed<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token function\">cancelAcquire</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果不看 <code>shouldParkAfterFailedAcquire(p,node)</code>  这一部分的语句，该方法就会陷入死循环，糟糕的是，即使第二个 <code>if</code>  语句将 <code>interrupted = true</code> ，但是只要第一个 <code>if</code>  语句不满足，就会一直死循环。</p>\n<p>其实这正是设计的高明之处，我们猜测这部分语句可能存在 <code>park</code>  语句，让线程停下来。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">shouldParkAfterFailedAcquire</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">parkAndCheckInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    interrupted <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后当独占线程通过 <code>release</code>  方法释放了锁资源，同时 <code>release</code>  通过同步队列中 <code>head</code>  下一个节点取得该节点的线程 <code>t</code> ，然后通过 <code>LockSupport.unpark(t)</code>  来恢复 <code>t</code>  的运行，此时 <code>t</code>  还是在死循环中，但是下一次循环，他就会再次尝试获取锁资源。</p>\n<p>并不是大家想像的那种有个线程一直在那里死循环浪费 CPU 资源，而是通过 <code>park</code>  直接让他阻塞。</p>\n<p>** 上述只是我的猜测，下面一起来看源码 **。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 传入的前一个节点，当前节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">shouldParkAfterFailedAcquire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> pred<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> ws <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//pred 节点的状态为 SIGNAL，SIGNAL 表示该节点的后继节点 (即将) 被阻塞 (通过 park)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">==</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 状态为 CANCELLED，需要从队列中删除</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> pred <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        pred<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 为 PROPAGATE -3 或者是 0 表示无状态，(为 CONDITION -2 时，表示此节点在 condition queue 中) </span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 不能进行 park 操作</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 一开始，head 的 waitStatus 是 0，如果 pred 是 head，首先会在 tryAcquire 返回 false</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 然后就会检查是否需要 park，在 head.waitStatus==0 的情况下，head 的 waitStatus</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 会被设置为 SIGNAL，之后再 acquireQueued 里面循环一次，最后 node 的线程 park</span></pre></td></tr></table></figure><p>只有当该节点的前驱结点的状态为 <code>SIGNAL</code>  时，才可以对该结点所封装的线程进行 <code>park</code>  操作。否则，将不能进行 <code>park</code>  操作。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进行 park 操作并且返回该线程是否被中断</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">parkAndCheckInterrupt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在许可可用之前禁用当前线程，并且设置了 blocker</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">interrupted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 当前线程是否已被中断，并清除中断标记位</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>parkAndCheckInterrupt</code>  方法里的逻辑是首先执行 <code>park</code>  操作，即禁用当前线程，然后返回该线程是否已经被中断。</p>\n<p>最后看一下 <code>final</code>  里面的 <code>cancelAcuqire</code>  方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 取消继续获取 (资源)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cancelAcquire</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 设置 node 结点的 thread 为空</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    node<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 找到 node 前驱结点中第一个状态小于 0 的结点，即不为 CANCELLED 状态的结点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">Node</span> pred <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        node<span class=\"token punctuation\">.</span>prev <span class=\"token operator\">=</span> pred <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 获取 pred 结点的下一个结点</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Node</span> predNext <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置 node 结点的状态为 CANCELLED</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    node<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">CANCELLED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> tail <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compareAndSetTail</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//node 结点为尾结点，则设置尾结点为 pred 结点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 比较并设置 pred 结点的 next 节点为 null</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">compareAndSetNext</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> predNext<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//node 结点不为尾结点，或者比较设置不成功</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> ws<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pred <span class=\"token operator\">!=</span> head <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ws <span class=\"token operator\">=</span> pred<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span> <span class=\"token operator\">||</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SIGNAL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            pred<span class=\"token punctuation\">.</span>thread <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// (pred 结点不为头节点，并且 pred 结点的状态为 SIGNAL) 或者 </span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                                <span class=\"token comment\">//pred 结点状态小于等于 0，并且比较并设置等待状态为 SIGNAL 成功，并且 pred 结点所封装的线程不为空</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 保存结点的后继</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">Node</span> next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> next<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 后继不为空并且后继的状态小于等于 0</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token function\">compareAndSetNext</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">,</span> predNext<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 比较并设置 pred.next = next;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token function\">unparkSuccessor</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放 node 的前一个结点</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span> <span class=\"token comment\">// help GC</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在，再来看 <code>acquireQueued</code>  方法的整个的逻辑。逻辑如下:</p>\n<ul>\n<li>判断结点的前驱是否为 <code>head</code>  并且是否成功获取 (资源)。</li>\n<li>若步骤 1 均满足，则设置结点为 <code>head</code> ，之后会判断是否 <code>finally</code>  模块，然后返回。</li>\n<li>若步骤 2 不满足，则判断是否需要 <code>park</code>  当前线程，是否需要 <code>park</code>  当前线程的逻辑是判断结点的前驱结点的状态是否为 <code>SIGNAL</code> ，若是，则 <code>park</code>  当前结点，否则，不进行 <code>park</code>  操作。</li>\n<li>若 <code>park</code>  了当前线程，之后某个线程对本线程 <code>unpark</code>  后，并且本线程也获得机会运行。那么，将会继续进行步骤①的判断。</li>\n</ul>\n<p>最后的 <code>cancelAcquire</code>  和 <code>unparkSuccessor</code>  只需要记住，是将 <code>node</code>  设为 <code>CANCELLED</code> ，执行后面的函数，会释放 <code>node</code>  的后继节点。</p>\n<p>阅读这些源码是有必要的，最后给一个流程图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/11/d9bf2b419b32da5b.jpg\" alt=\"ACQ--acquire执行流程\" /></p>\n<h2 id=\"release函数\"><a class=\"anchor\" href=\"#release函数\">#</a> release 函数</h2>\n<p>以独占模式释放对象，先看源码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">tryRelease</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 释放成功</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 保存头节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">Node</span> h <span class=\"token operator\">=</span> head<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> h<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 头节点不为空并且头节点状态不为 0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">unparkSuccessor</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放头节点的后继结点</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>tryRelease</code>  需要我们手动重写，在上面自定义同步器的例子中， <code>release</code>  在锁重入时会返回 <code>false</code> 。如果 <code>tryRelease</code>  成功，那么如果头节点不为空并且头节点的状态不为 0，则释放头节点的后继节点。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 释放后继结点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unparkSuccessor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> node<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 获取 node 结点的等待状态</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> ws <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>waitStatus<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 状态值小于 0，为 SIGNAL -1 或 CONDITION -2 或 PROPAGATE -3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ws <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 比较并且设置结点等待状态，设置为 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">compareAndSetWaitStatus</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> ws<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 获取 node 节点的下一个结点</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Node</span> s <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 下一个结点为空或者下一个节点的等待状态大于 0，即为 CANCELLED</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//s 赋值为空</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        s <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 从尾结点开始从后往前开始遍历</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span> t <span class=\"token operator\">=</span> tail<span class=\"token punctuation\">;</span> t <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">!=</span> node<span class=\"token punctuation\">;</span> t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">// 找到等待状态小于等于 0 的结点，找到最前的状态小于等于 0 的结点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>waitStatus <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 保存结点</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                s <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 该结点不为为空，释放许可</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>详细流程看下图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/11/3b5873dbcddf51d0.jpg\" alt=\"unparkSuccessor流程\" /></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>AQS 中 acquire (int) 方法调用 selfInterrupt 的理解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZDI0Ni5jb20vYXJ0aWNsZS8xNjE4OTc2NTA1NTg2\">https://ld246.com/article/1618976505586</span></p>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLUFic3RyYWN0UXVldWVkU3luY2hyb25pemVyLmh0bWwjJUU3JUIxJUJCJUU3JTlBJTg0JUU2JUEwJUI4JUU1JUJGJTgzJUU2JTk2JUI5JUU2JUIzJTk1LS0tYWNxdWlyZSVFNiU5NiVCOSVFNiVCMyU5NQ==\">https://pdai.tech/md/java/thread/java-thread-x-lock-AbstractQueuedSynchronizer.html# 类的核心方法 ---acquire 方法</span></p>\n<p>ASQ 中 cancelAcquire 何时会运行：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3ppeWFfYW5hbi9hcnRpY2xlL2RldGFpbHMvMTIyMDA5MjE1\">https://blog.csdn.net/ziya_anan/article/details/122009215</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/06/Shell/gawk%E7%A8%8B%E5%BA%8F%E8%BF%9B%E9%98%B6/",
            "url": "https://cecilia.cool/2022/08/06/Shell/gawk%E7%A8%8B%E5%BA%8F%E8%BF%9B%E9%98%B6/",
            "title": "gawk程序进阶",
            "date_published": "2022-08-06T07:53:00.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>关于 <code>gawk</code>  进阶，你可以参考这篇博客，很详细，但是请一定要看本文的<strong>结束语</strong></p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpbG9uZ3N5L2FydGljbGUvZGV0YWlscy83NzA5NTEwMz9vcHNfcmVxdWVzdF9taXNjPSUyNTdCJTI1MjJyZXF1ZXN0JTI1NUZpZCUyNTIyJTI1M0ElMjUyMjE2NTk3NzgxMDExNjc4MjI0NjQxMjQ2NyUyNTIyJTI1MkMlMjUyMnNjbSUyNTIyJTI1M0ElMjUyMjIwMTQwNzEzLjEzMDEwMjMzNC5wYyUyNTVGYWxsLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY1OTc3ODEwMTE2NzgyMjQ2NDEyNDY3JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+Zmlyc3RfcmFua19lY3BtX3YxfnBjX3JhbmtfMzQtMS03NzA5NTEwMy1udWxsLW51bGwuMTQyJTVFdjM5JTVFcGNfcmFua18zNCwxODUlNUV2MiU1RWNvbnRyb2wmYW1wO3V0bV90ZXJtPWdhd2slMjAlRTYlQTAlQkMlRTUlQkMlOEYlRTUlOEMlOTYlRTYlODklOTMlRTUlOEQlQjAmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">gawk 进阶</span>。</p>\n</blockquote>\n<h1 id=\"内建变量\"><a class=\"anchor\" href=\"#内建变量\">#</a> 内建变量</h1>\n<p><code>gawk</code>  程序使用内建变量来引用程序的数据里的一些特殊功能。</p>\n<h2 id=\"字段和记录分隔符的变量\"><a class=\"anchor\" href=\"#字段和记录分隔符的变量\">#</a> 字段和记录分隔符的变量</h2>\n<p>类似于 <code>$1,$2</code>  是数据字段变量，其根据字段分隔符来划定，默认情况下，字段分隔符是空白字符 (空格或制表符)。可以使用内建变量 <code>FS</code>  更改字段分隔符（ <code>shell</code>  脚本里面用的是 <code>IFS</code> ）</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>FIELDWIDTHS--由空格分隔的一列数字，定义了每个数据字段确切宽度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>FS--输入字段之间分隔符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>OFS--输出字段之间分隔符</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>RS--输入记录分隔符</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ORS--输出记录分隔符</pre></td></tr></table></figure><p>默认情况下， <code>OFS</code>  是空格，所以 <code>print $1,$2,$3 --&gt; field1 field2 field3</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;OFS=\"-\"&#125; &#123;print $1,$2,$3&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dog-monkey-cat</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dog monkey <span class=\"token function\">cat</span> mouse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 在 print 中，使用，隔开每个变量，同时 FS=\",\" 要使用双引号</span></pre></td></tr></table></figure><p>设置 <code>FIELDWIDTHS</code>  时，该变量允许你不依靠字段分隔符来读取记录，一旦设置， <code>gawk</code>  就会忽略 <code>FS</code> ，并根据提供的字段宽度来计算字段。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FIELDWIDTHS=\"3 5 2 5\"&#125;&#123;print $1,$2,$3,$4&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 那么字段 $1 长度为 3,$2 长度为 5...</span></pre></td></tr></table></figure><p>变量 <code>RS</code>  和 <code>ORS</code>  定义了 <code>gawk</code>  程序如何处理数据流中的记录，默认下，都为换行符，默认的 <code>RS</code>  值表明，<br />\n输入数据流中的每行新文本就是一条新纪录。</p>\n<p>你如果不是很清楚，可以参照这篇文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3lpaWZhYS9hcnRpY2xlL2RldGFpbHMvNzg4MjcwODA/b3BzX3JlcXVlc3RfbWlzYz0lMjU3QiUyNTIycmVxdWVzdCUyNTVGaWQlMjUyMiUyNTNBJTI1MjIxNjU5NzczNzA1MTY3ODE2ODUzODI0MzglMjUyMiUyNTJDJTI1MjJzY20lMjUyMiUyNTNBJTI1MjIyMDE0MDcxMy4xMzAxMDIzMzQuLiUyNTIyJTI1N0QmYW1wO3JlcXVlc3RfaWQ9MTY1OTc3MzcwNTE2NzgxNjg1MzgyNDM4JmFtcDtiaXpfaWQ9MCZhbXA7dXRtX21lZGl1bT1kaXN0cmlidXRlLnBjX3NlYXJjaF9yZXN1bHQubm9uZS10YXNrLWJsb2ctMn5hbGx+YmFpZHVfbGFuZGluZ192Mn5kZWZhdWx0LTEtNzg4MjcwODAtbnVsbC1udWxsLjE0MiU1RXYzOSU1RXBjX3JhbmtfMzQsMTg1JTVFdjIlNUVjb250cm9sJmFtcDt1dG1fdGVybT1nYXdrJTIwUlMmYW1wO3NwbT0xMDE4LjIyMjYuMzAwMS40MTg3\">RS、FS 与 ORS、OFS 等内置变量的用法</span>。</p>\n<h2 id=\"数据变量\"><a class=\"anchor\" href=\"#数据变量\">#</a> 数据变量</h2>\n<p><code>gawk</code>  还提供了一些内建变量帮助你了解数据发生了什么变化，并提取 <code>shell</code>  环境的变化，太多了，挑几个写。</p>\n<p><code>ARGC</code>  和 <code>ARGV</code>  变量允许从 <code>shell</code>  中获取命令行参数的<strong>总数</strong>以及它们的值， <code>gawk</code>  并不会将程序脚本当成命令行参数的一部分。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;print ARGC,ARGV[1]&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2</span> data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># ARGC 表示参数为两个，包括 gawk 命令和 data 参数 (程序脚本不是参数！)</span></pre></td></tr></table></figure><p><code>ENVIRON</code> -- 使用关联数组来提取 <code>shell</code>  环境变量，该数组用文本作为数组的引索值，而不是数值。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;print ENVIRON[\"HOME\"],ENVIRON[\"PATH\"]&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/home/cyan /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</pre></td></tr></table></figure><h1 id=\"自定义变量\"><a class=\"anchor\" href=\"#自定义变量\">#</a> 自定义变量</h1>\n<p><code>gawk</code>  自定义变量不能以数字开头，直接赋值即可，不需要使用 <code>$</code> ，同时， <code>gawk</code>  包含了标准算数操作符 <code>(*,^,**,%...)</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;x=4; x= x ** 3 + 1; print x&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">65</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;x=4; x= x ^ 3 + 1; print x&#125;'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">65</span></pre></td></tr></table></figure><h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<p><code>gawk</code>  使用关联数组提供数组功能，不同之处在于，其引索值可以是任意文本字符串，每个引索字符串都必须能够唯一标识出赋给他的数据元素。每个数组名自定义，数据引索值自定义！</p>\n<p>基本定义格式： <code>arr[index_1]=val_1</code> 。</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>1.遍历数组变量：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    for(var in array)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        statements</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &#125;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>2.删除数组变量：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    delete array[index]</pre></td></tr></table></figure><h1 id=\"使用模式\"><a class=\"anchor\" href=\"#使用模式\">#</a> 使用模式</h1>\n<p><code>gawk</code>  支持多种类型的匹配模式来过滤数据，与 <code>sed</code>  大同小异， <code>BEGIN</code>  和 <code>END</code>  关键字用在读取数据流之前 / 后执行命令的特殊模式，也存在其他特殊模式，用于在<strong>匹配</strong>数据流时执行一些命令。</p>\n<h2 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h2>\n<p>正则表达式必须出现在要控制的程序脚本的左花括号之前。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\"&#125; /11/&#123;print $1&#125;'</span> data</pre></td></tr></table></figure><h2 id=\"匹配操作符matching-operator\"><a class=\"anchor\" href=\"#匹配操作符matching-operator\">#</a> 匹配操作符 (matching operator)</h2>\n<p>匹配操作符是波浪线 <code>~</code> ，允许将正则表达式限定在记录中的特定数据字段。</p>\n<p>正则表达式有一定局限性，因为我们现在处理的数据，从行记录数据细化到了某个字段的数据（通过 <code>FS</code>  字段分隔符细化），所以，比如我想匹配每行中，第五个字段中是否有 <code>cat</code>  这个单词，单使用正则表达式是做不到的。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$5</span> ~ /cat/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># $5 表示行记录数据中第五个字段，该表达式会过滤出第五个字段包含 cat 的所有记录</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这是一个强大的功具 -- 用于在数据文件中搜索特定的数据元素</span></pre></td></tr></table></figure><p>它还可以和 <code>!</code>  一起使用，用于排除，没错，和 <code>sed</code>  一样的功能</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$1</span> <span class=\"token operator\">!</span>~ /expression/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果匹配失败就会执行指令</span></pre></td></tr></table></figure><h2 id=\"数学表达式\"><a class=\"anchor\" href=\"#数学表达式\">#</a> 数学表达式</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> -F: <span class=\"token string\">'$4 == 0&#123;print $1&#125;'</span> /etc/passwd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 该脚本查看第四个数据字段含有 0 的值 (组 ID=0--root 用户组)</span></pre></td></tr></table></figure><p>常见的比较： <code>&gt;= , &lt;= , == ...</code> ，也可以对文本数据使用表达式： <code>gawk '$1 == &quot;data&quot;&#123;print $2&#125;' data</code> 。</p>\n<h1 id=\"结构化语句\"><a class=\"anchor\" href=\"#结构化语句\">#</a> 结构化语句</h1>\n<h2 id=\"if语句\"><a class=\"anchor\" href=\"#if语句\">#</a> if 语句</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstatement1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者是：if (condition) statement</span></pre></td></tr></table></figure><p>如果要在 <code>if</code>  语句中执行多条语句，要使用花括号，当然， <code>gawk</code>  也支持 <code>else</code>  子句。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstatements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 也可以在单行使用 else，只是需要加；if (condition) statements; else statements</span></pre></td></tr></table></figure><h2 id=\"while语句\"><a class=\"anchor\" href=\"#while语句\">#</a> while 语句</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstatements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\"># while 中支持 break 和 continue 来跳出循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>还有 <code>do-while</code>  语句：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tstatements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span>while <span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"for语句\"><a class=\"anchor\" href=\"#for语句\">#</a> for 语句</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>for<span class=\"token punctuation\">(</span> var assignment<span class=\"token punctuation\">;</span> condition<span class=\"token punctuation\">;</span> iteration process<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 其实跟普通的 for 循环没啥区别</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 大概就是这样</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">></span> for<span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span>     total <span class=\"token operator\">+=</span> <span class=\"token variable\">$i</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>最后还是举个例子</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> commands.awk</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token assign-left variable\">total</span><span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        for<span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i++<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                print <span class=\"token variable\">$1</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token parameter variable\">-f</span> commands.awk data</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dog</pre></td></tr></table></figure><h1 id=\"格式化打印\"><a class=\"anchor\" href=\"#格式化打印\">#</a> 格式化打印</h1>\n<p>和 <code>c</code>  语言的 <code>printf</code>  差不多，通过格式化字符来控制。</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>d/i--都是表示整数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>f--浮点数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>e--科学计数法</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>g--科学计数法表示，或浮点数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o--八进制</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>x--十六进制</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>X--十六进制，字母大写</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>printf \"The answer is:%e\",val</pre></td></tr></table></figure><ul>\n<li>\n<p><code>width</code> -- 指定输出字段最小宽度的数字值，如果输出小于这个值，文本右对齐，并用空格填充，否则按实际宽度输出。</p>\n</li>\n<li>\n<p><code>prec</code> -- 指定了浮点数中小数点后面的位数，或者文本字符串中显示的最大字符数。</p>\n</li>\n<li>\n<p><code>-</code> (减号)：指明在向格式化空间中放入数据时采取左对齐而不是右对齐。</p>\n</li>\n</ul>\n<p>通过一个例子来讲解，<strong>FS 是一行数据中各个字段的分隔符，RS 是行数据之间的分隔符</strong>。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 数据文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Riley Mullen,<span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Frank Williams,<span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Haley Snell,<span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 先试一下 printf 打印</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\";RS=\"\\n\"&#125; &#123;printf \"%s %s\\n\",$1,$2&#125;'</span> data</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Riley Mullen <span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Frank Williams <span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Haley Snell <span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr></table></figure><p>我们希望打印结果对齐一点，但是默认的是右对齐</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\";RS=\"\\n\"&#125; &#123;printf \"%20s %s\\n\",$1,$2&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        Riley Mullen <span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      Frank Williams <span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         Haley Snell <span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr></table></figure><p>所以要使用 <code>-</code> ，指定左对齐，完美。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN&#123;FS=\",\";RS=\"\\n\"&#125; &#123;printf \"%-20s %s\\n\",$1,$2&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Riley Mullen         <span class=\"token punctuation\">(</span><span class=\"token number\">312</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-1234</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Frank Williams       <span class=\"token punctuation\">(</span><span class=\"token number\">317</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-9876</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Haley Snell          <span class=\"token punctuation\">(</span><span class=\"token number\">313</span><span class=\"token punctuation\">)</span><span class=\"token number\">555</span>-4938</pre></td></tr></table></figure><h1 id=\"内建函数\"><a class=\"anchor\" href=\"#内建函数\">#</a> 内建函数</h1>\n<h2 id=\"数学函数\"><a class=\"anchor\" href=\"#数学函数\">#</a> 数学函数</h2>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>atan2(x,y)--x/y反正切，x和y是弧度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cos(x),log(x),sin(x),sqrt(x),srand(x)为计算机随机数指定种子值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rand()--产生0~1之间的随机小数(不含0,1)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>exp(x)--x的指数函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>int(x)--取整</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>除了一般的数学运算外，gawk还提供位运算：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>and(x,y),compl(x)--x的补运算</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>lshift(x,count)--左移,rshift(x,count)--右移</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>or(x,y),xor(x,y)</pre></td></tr></table></figure><h2 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h2>\n<p>具体详细的，要使用时，自己去查</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>length([s])--长度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>index(s,t)</pre></td></tr></table></figure><h2 id=\"时间函数\"><a class=\"anchor\" href=\"#时间函数\">#</a> 时间函数</h2>\n<ul>\n<li><code>mktime(datespec)</code>  按 <code>YYYY-MM-DD-HH-MM-SS[DST]</code>  格式指定的日期转换成时间戳值。</li>\n<li><code>strftime(formate [,timestamp])</code>  将当前时间的时间戳或 <code>timestamp</code>  转换为格式化日期 (采用 <code>shell</code>  的 <code>date()</code> )<br />\n <code>systime()</code>  返回当前时间的时间戳</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> date=systime()</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> date=strftime(\"%A, %B %d, %Y\",date)</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> print date</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;'</span></pre></td></tr></table></figure><h1 id=\"自定义函数\"><a class=\"anchor\" href=\"#自定义函数\">#</a> 自定义函数</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>varuables<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#可以传参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    statements</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> value <span class=\"token comment\">#可以使用 return 返回值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#在自定义函数时，必须出现在所有代码前 (包括 BEGIN 代码块)，有助于将函数代码和 gawk 程序其他部分分开</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">gawk</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>> function fun()</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>> &#123;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>>   printf \"%-16s - %s\\n\",$1,$4</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>> &#125;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>> BEGIN&#123;FS=\"\\n\"; RS=\"\"&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>> &#123;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>>   fun()    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>> &#125;'</span> data</pre></td></tr></table></figure><h1 id=\"创建函数库\"><a class=\"anchor\" href=\"#创建函数库\">#</a> 创建函数库</h1>\n<p>如果函数经常使用，可以将这些函数放在专门的函数库文件中，文件可以通过 <code>-f</code>  参数来使用。但是， <code>-f</code>  命令行参数不能和内联 <code>gawk</code>  脚本放到一起使用，所以在同一行命令行需要使用多个 <code>-f</code>  参数 (也就是，将 <code>gawk</code>  脚本程序也放到文件中)。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token parameter variable\">-f</span> funclib <span class=\"token parameter variable\">-f</span> script data</pre></td></tr></table></figure><h1 id=\"结束语\"><a class=\"anchor\" href=\"#结束语\">#</a> 结束语</h1>\n<p>至此，暑假开的 <code>shell</code>  系列更新结束（2022.7.28--20228.6），<strong>所有文章大致参考《Linux 命令行与 shell 脚本编程大全》，作者是 [美] 布鲁姆（Richard Blum），布雷斯纳汉（Christine Bresnahan）</strong>。为什么说大致呢？首先，这本书是我在大二寒假看完的，当时笔记做的不是很完善而且还有很多错误，所以这次博客更新，我并不只是单纯从之前的笔记粘贴复制。你们现在看到的，很多例子，都是我自己想的，问题的引入和思考花费了较多时间，但是绝对不能否认的是，这本书让我收获极大。</p>\n<p>本文开始推荐的博客，其实就是《Linux 命令行与 shell 脚本编程大全》的 gawk 进阶的原文（作者在文末也说了参考了此书），我并不喜欢照着书抄笔记，一个是我懒，另一个是这样我还不如让你直接买一本。</p>\n<p>送君千里，终有一别。在 CUI（不会到现在你还不知道什么是 CUI 吧？）学习的路上，我们都还差得远呢，剩下的，也是唯一需要记住的就是，保持学习，尊重原创。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/05/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%9B%E9%98%B6/",
            "url": "https://cecilia.cool/2022/08/05/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E8%BF%9B%E9%98%B6/",
            "title": "sed编辑器进阶",
            "date_published": "2022-08-05T13:49:28.000Z",
            "content_html": "<h1 id=\"多行命令\"><a class=\"anchor\" href=\"#多行命令\">#</a> 多行命令</h1>\n<p><code>n</code>  命令 -- <code>next</code> ，会将 <code>sed</code>  编辑器移动到数据流中的<strong>下一行</strong>文本，而不用重新回到命令的最开始执行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/head/&#123;n;d&#125;'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 当匹配到 head 一行，sed 会马上移动到下一行开头，执行 d 命令</span></pre></td></tr></table></figure><p><code>N</code>  命令，将数据流中两个文本行合并到同一个<strong>模式空间</strong>中，两行文本仍以换行符相隔，但是会将两行文本当作一行处理。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">'/cat/&#123;N;s/\\n/ /&#125;'</span> data</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span> end</pre></td></tr></table></figure><p>但是这个命令存在局限，比如前四行， <code>sed</code>  会将第 1，2 行看作整体，第 3，4 行看作整体，如果最后一行是第五行单行， <code>sed</code>  不会检查第五行，直接结束。</p>\n<p><code>N,d</code>  两个命令配合可以实现多行删除，对于匹配到的，模式空间中两行都会删除， <code>D</code>  就只会删除模式空间第一行，第二行被保留。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">\"N;/[c,e]*/d\"</span> data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>end</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># N 和 D 的配合使用，可以删除行前的空白行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>mouse</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>monkey</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">\"N;/ /D\"</span> data</pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>mouse</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>monkey</pre></td></tr></table></figure><p><code>N,P</code>  命令可以实现多行打印， <code>P</code>  命令只打印模式空间的第一行。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>mouse</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>monkey</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"4&#123;N;P&#125;\"</span> data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mouse</pre></td></tr></table></figure><p>关于 <code>sed</code>  中 <code>p,P</code>  命令的区别，可以参考这篇文章</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4xMzYubGEvc2hpZGEvc2hvdy00MTA1NTkuaHRtbA==\">http://www.136.la/shida/show-410559.html</span></p>\n</blockquote>\n<h1 id=\"保持空间\"><a class=\"anchor\" href=\"#保持空间\">#</a> 保持空间</h1>\n<p>模式空间是一块活跃的缓冲区，sed 编辑器还有另一块称作<strong>保持空间</strong>的缓冲区。对于保持空间，存在 5 条命令，用来将文本从模式空间复制到保持空间。这可以清空模式空间来加载其他要处理的字符串。</p>\n<figure class=\"highlight txt\"><figcaption data-lang=\"txt\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>h--将模式空间复制到保持空间</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>H--将模式空间附加到保持空间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>g--将保持空间复制到模式空间</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>G--将保持空间附加到模式空间</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>x--交换两个空间的内容</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>sed -n '/first/ &#123;h;p;n;p;g;p&#125;' data</pre></td></tr></table></figure><p>现在你不用太理解，只需要有这么个空间即可。</p>\n<h1 id=\"排除命令\"><a class=\"anchor\" href=\"#排除命令\">#</a> 排除命令</h1>\n<p>在 <code>sed</code>  基础那篇文章中，提到 <code>!</code>  可以代替 <code>/</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/dog/'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s!cat!dog!'</span> data</pre></td></tr></table></figure><p>在 <code>sed</code>  中，使用感叹号 <code>!</code>  还可以排除命令，让原本会起作用的命令不起作用，比如在最后一行取消使用 <code>N</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'$!N;其他命令'</span> data</pre></td></tr></table></figure><p>现在给出一个例子，通过这个例子，我们会用到模式空间，保持空间以及排除命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 逆序打印文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"first</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> second</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> third</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> \"</span> <span class=\"token operator\">></span> data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;1!G;h;$p&#125;'</span> data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>third</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>second</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>first</pre></td></tr></table></figure><p>上述命令， <code>G,h</code>  是关于保持空间的命令，每次将数据读取到模式空间，保持空间中的数据都会附加到模式空间 (第一行除外)，然后再复制到保持空间。当然， <code>Linux</code>  命令 <code>tac</code>  可以直接逆序文本，其实 <code>tac</code>  就是 <code>cat</code>  反着写。</p>\n<p>等一下，我好像还没讲过什么是模式空间： <code>sed</code>  每次读一行，都会把这一行数据读到模式空间，在使用命令处理数据，在打印到标准输出。</p>\n<p>关于逆序打印文本，具体我们可以看下图</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/08/06/759084cf022ed038.png\" alt=\"image-20220806111008122\" /></p>\n<p>如果你真的理解了，那么你就知道，这个命令也可以实现逆序</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;1!G;$!h;$p&#125;'</span> data</pre></td></tr></table></figure><h1 id=\"分支\"><a class=\"anchor\" href=\"#分支\">#</a> 分支</h1>\n<p>分支命令共有两条：分支（b）和替代分支（t）。</p>\n<h2 id=\"b命令\"><a class=\"anchor\" href=\"#b命令\">#</a> b 命令</h2>\n<p>基于地址，地址模式或地址区间<strong>排除</strong>整块命令： <code>[address]b [label]</code> 。</p>\n<p><code>address</code>  决定哪些行触发分支命令。 <code>label</code>  参数定义了要跳转的位置，如果此处没有 <code>label</code>  参数，跳转命令会跳转到脚本结尾（注意，是命令脚本的结尾）。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'&#123;2,3b ; s/This is/Is this/ ;s/line./test?/&#125;'</span> data</pre></td></tr></table></figure><p><code>sed</code>  还可以使用标签，使用标签后，只会跳过部分命令，也就是标签之前的命令。直到这里你可能不是很懂，我要提醒的是，在 <code>sed</code>  中引入分支，我建议将命令放在 <code>.sed</code>  命令脚本中，这样使用起来才方便。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 假设我们需要都数据文件进行处理，一行数据中一旦出现 cat 这个单词，我们就打印其所在行号</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 否则，就打印该行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># command.sed</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/cat/b error_print</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/**/b true_print</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">:</span> error_print</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>b <span class=\"token comment\"># 跳到结尾，不然会执行 true_print 的语句</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token builtin class-name\">:</span> true_print</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>p</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>b</pre></td></tr></table></figure><p>更改一下 <code>data</code>  的内容，执行 <code>sed</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"dog</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> monkey</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> cat</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> mouse</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> \"</span> <span class=\"token operator\">></span> data</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token parameter variable\">-f</span> command.sed data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>monkey</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>mouse</pre></td></tr></table></figure><p>如果你把标签放到分支跳转的前面，很容易形成死循环。比如，通过 <code>sed</code>  将数据中的 <code>,</code>  全部删除</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> :start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> s/,//p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> b start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> &#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>This is, a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>This is a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>This is a test, to, remove, commas.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to, remove, commas.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove, commas.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove commas.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>^C</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 每次去掉一个，然后跳回 start 标签处</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\"># 当然，直接使用 g 选项</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cyan@cyan-virtual-machine:~$  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'s/,//gp'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove commas.</pre></td></tr></table></figure><p>上述例子，为了解决死循环，可以指定一个地址模式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s/,//p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/,/b start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 只有再次匹配到，才会跳转</span></pre></td></tr></table></figure><p>你也可以看一下这篇文章。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzUxNjQyODE0L2FydGljbGUvZGV0YWlscy8xMTE0NjExMzc=\">https://blog.csdn.net/m0_51642814/article/details/111461137</span></p>\n</blockquote>\n<h1 id=\"t命令\"><a class=\"anchor\" href=\"#t命令\">#</a> t 命令</h1>\n<p>测试命令 ( <code>t</code> ) 也可以用来改变 <code>sed</code>  执行流程，根据测试条件跳转，而不是地址： <code>[address]t [label]</code> 。</p>\n<p>如果替换命令匹配并替换了一个模式，测试命令就会跳转到指定标签，否则不会跳转。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This, is, a, test, to, remove, commas.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>:start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s/,//p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>&#125;'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>This is, a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>This is a, test, to, remove, commas.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>This is a test, to, remove, commas.</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to, remove, commas.</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove, commas.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>This is a <span class=\"token builtin class-name\">test</span> to remove commas.</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 最后一次匹配失败，停止跳转</span></pre></td></tr></table></figure><h1 id=\"模式替代\"><a class=\"anchor\" href=\"#模式替代\">#</a> 模式替代</h1>\n<p><code>&amp;</code>  符号，该符号可以用来代表替换命令中的匹配的模式，比如我需要匹配 <code>hello</code>  这个字符串，那么我就可以用 <code>&amp;</code>  来代替 <code>hello</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The cat is cute.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/cu[^\\.\\ ]*/\"&amp;\"/'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The <span class=\"token function\">cat</span> is <span class=\"token string\">\"cute\"</span><span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p><code>&amp;</code>  在使用正则表达式时十分方便，因为我们也不知道匹配到的模式到底是什么，我们可以直接通过 <code>&amp;</code>  拿到我们匹配到的模式。</p>\n<p>替代单独单词： <code>&amp;</code>  符号提取匹配替换命令指定模式的整个字符串，如果想要提取独立的单词，需要使用 <code>()</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The system Adminstrator manual\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> s/\\(system\\) Adminstrator/\\1 user/'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>The system User manual</pre></td></tr></table></figure><p>被使用时，圆括号定义了替换模式中的子模式，并使用 <code>\\1,2,3..</code>  来表示，在替换命令中使用圆括号时，<br />\n必须使用转义字符将它们标示为分组字符而不是普通的圆括号。</p>\n<p>所以最开始的例子我们也可以这么写</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"The cat is cute.\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'s/\\(cu[^\\.\\ ]*\\)/\"\\1\"/'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>The <span class=\"token function\">cat</span> is <span class=\"token string\">\"cute\"</span><span class=\"token builtin class-name\">.</span></pre></td></tr></table></figure><p>最后再举一个例子：每三位添加逗号 (类似于，金钱金额分隔计数)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$input</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> : start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> s/\\(.*[0-9]\\)\\([0-9]\\&#123;3\\&#125;\\)/\\1,\\2/</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> t start</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> &#125;'</span></pre></td></tr></table></figure><p>这里说明一下， <code>grep</code>  和 <code>sed</code>  默认不支持 <code>ERE</code> -- 扩展正则表达式，如果要使用， <code>grep</code>  需要加 <code>-E</code>  选项， <code>sed</code>  需要使用 <code>-r</code>  选项。如果不加选项还想使用 <code>&#123;&#125;</code> ，就要加转义字符 <code>\\&#123;m\\&#125;</code> 。</p>\n<p>在给例子之前，我需要提示一下，我们上面使用 <code>()</code>  其实就是扩展正则表达式里面的东西，因为之前没有使用 <code>-r</code>  选项，所以需要使用转义字符。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$input</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-r</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>: start;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s/(.*[0-9])([0-9]&#123;3&#125;)/\\1,\\2/;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>t start;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">10,913</span>,013</pre></td></tr></table></figure><h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>这里有一篇求问博客，是关于 <code>sed</code>  和正则表达式问题的，你能先不看评论区，自己找到博主提出的问题吗？要是你能自己解决，那更是最好的。</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9vb21ha2UuY29tL3F1ZXN0aW9uLzQyOTY1MzA=\">https://oomake.com/question/4296530</span></p>\n</blockquote>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/05/Shell/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "https://cecilia.cool/2022/08/05/Shell/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "正则表达式",
            "date_published": "2022-08-05T08:06:02.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>本文不会为你介绍所有正则表达式规则，一是我比较懒，二是你记不住。还不如上网去查。</p>\n<h1 id=\"定义\"><a class=\"anchor\" href=\"#定义\">#</a> 定义</h1>\n<p>关于正则表达式与数据之间的关系，你可以这么理解</p>\n<pre><code>数据 --&gt; 正则表达式 --&gt; 匹配的数据\n            |\n            v\n        滤掉的数据\n</code></pre>\n<p>自定义的模式模板 (pattern template)， <code>Linux</code>  工具 (sed,gawk) 用来过滤文本。</p>\n<p>正则表达式是通过正则表达式引擎 ( <code>regular expression engine</code> ) 实现的，该引擎是一套底层软件，负责解释正则表达式并使用这些模式进行<strong>文本匹配</strong>。</p>\n<p>在 <code>Linux</code>  中，存在两种流行的正则表达式引擎：</p>\n<ul>\n<li><code>POSIX</code>  基础的正则表达式 ( <code>basic regular expression,BRE</code> ) 引擎。</li>\n<li><code>POSIX</code>  扩展的正则表达式 ( <code>extended regular expression,ERE</code> ) 引擎。</li>\n</ul>\n<p>大多数 <code>Linux</code>  工具都至少符合 <code>BRE</code> , 像 <code>sed</code>  等部分工具，出于速度方面的考虑，只能符合 <code>BRE</code> 。 <code>ERE</code>  通常出现依赖正则表达式进行文本过滤的编程语言中，为常见模式提供了高级模式符号和特殊符号。 <code>gawk</code>  程序用 <code>ERE</code>  引擎来处理它的正则表达式模式。</p>\n<h1 id=\"定义bre模式\"><a class=\"anchor\" href=\"#定义bre模式\">#</a> 定义 BRE 模式</h1>\n<p>正则表达式并不关心模式在数据流中的位置，也不关心模式出现了多少次，一旦匹配到文本字符串中任意位置上的模式，就会将该字符串传回 <code>Linux</code>  工具，值得注意的是，在正则表达式中，空格和其他字符并没有什么区别。</p>\n<h2 id=\"特殊字符\"><a class=\"anchor\" href=\"#特殊字符\">#</a> 特殊字符</h2>\n<p>正则表达式存在特殊字符： <code>.*[]^$&#123;&#125;\\+?|()</code> 。要想在文本中使用这些特殊符号，需要在前加上 <code>\\</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"/\\$/p\"</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 尽管正斜线 / 并不是正则表达式中的特殊字符，但是要是出现在 sed 和 gawk 的正则表达式中，也要使用转义</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"/\\//p\"</span> data</pre></td></tr></table></figure><p>这些特殊字符具体是什么含义，后面讲解。</p>\n<h2 id=\"锚字符\"><a class=\"anchor\" href=\"#锚字符\">#</a> 锚字符</h2>\n<p>默认情况下，当指定一个正则表达式模式时，只要模式出现在数据流中的任何地方，就能匹配。</p>\n<ul>\n<li>锁定行首， <code>^</code> -- 脱字符，定义从数据流中文本行的行首开始的模式，如果模式出现在行首之外，就无法匹配。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the book store\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/^the/p'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>the book store</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 如果是 ^book，就无法匹配</span></pre></td></tr></table></figure><ul>\n<li>锁定行尾，使用 <code>$</code>  符号，我记得我在 <code>sed</code>  还是 <code>gawk</code>  那篇文章讲过。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"the book\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/book$/p'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 只有以 book 结尾的，才会被匹配</span></pre></td></tr></table></figure><h2 id=\"其他字符\"><a class=\"anchor\" href=\"#其他字符\">#</a> 其他字符</h2>\n<ul>\n<li>点字符 <code>.</code> ，相当于占位符，但是该位置也必须要有字符才行。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'at the'</span> <span class=\"token operator\">|</span> <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/.at/p'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 匹配失败</span></pre></td></tr></table></figure><ul>\n<li>字符组 <code>[]</code> ，该位置如果出现字符组中的任意字符，匹配： <code>echo &quot;to ac&quot; | sed -n '/[ab]c/p'</code> 。可以连续使用多个字符组，但是一个字符组只能占一位。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 过滤错误的邮政编码（由 5 位数字组成）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> /^[0123456789][0123456789][0123456789][0123456789][0123456789]$/p</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> '</span> data</pre></td></tr></table></figure><ul>\n<li>排除型字符组，在字符组中开头加上 <code>^</code> ，代表反转，如果该位置没有字符组中的字符，匹配成功。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'/[^ch]at/p'</span> data</pre></td></tr></table></figure><ul>\n<li>区间，对字符组的优化，比如从 <code>a</code>  到 <code>z</code>  不用再挨个列出： <code>[a-z]</code> , 区间顺序是根据 <code>Linux</code>  采用的字符集也可以多次使用，形成不连续的区间并集： <code>[a-ch-m]</code> , 区间范围为 <code>a-c,h-m</code> 。</li>\n<li>特殊字符组（记不住没关系，我也记不住）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:alpha:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意字母字符，不管是大写还是小写 (alphabet-- 全部字母；字母表)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:alnum:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意字母数字字符，0-9,a-z,A-Z</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:blank:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配空格和制表符</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:digit:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配 0-9 之间的数字</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:lower:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配 a-z</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:upper:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配 A-Z</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:print:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意可打印字符</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:punct:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配标点符号</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>:sapce:<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\t\t<span class=\"token comment\"># 匹配任意空白字符：空格，制表符，NL，FF，VT，CR</span></pre></td></tr></table></figure><ul>\n<li>星号，在字符后面放置星号，表明<strong>该字符</strong>必须在匹配模式的文本中出现 0 次或多次（我觉得这个大家应该都知道吧）， <code>echo 'ik' | sed -n '/ie*k/p</code> 。星号也可以和字符组同时使用， <code>[ac]*</code> 。</li>\n</ul>\n<h1 id=\"扩展正则表达式ere\"><a class=\"anchor\" href=\"#扩展正则表达式ere\">#</a> 扩展正则表达式 (ERE)</h1>\n<p><code>gawk</code>  程序能够识别 <code>ERE</code>  模式，但是 <code>sed</code>  不能。 <code>gawk</code>  具备这些扩展的功能，但是正因为如此， <code>gawk</code>  程序在处理数据流时通常比较慢。</p>\n<ul>\n<li>问号 <code>?</code> ，类似于 *, 但是前面的字符只是 0 次或 1 次，也就是，不会匹配多次出现的字符。</li>\n<li>加号 <code>+</code> ，仍然类似于 *, 但是必须出现 1 次。</li>\n<li>花括号 <code>&#123;&#125;</code> ，允许为可重复的正则表达式指定一个上限，通常称为间隔 ( <code>interval</code> ), 可以用两种格式来指定区间。  <code>&#123;m&#125;</code> ：正则表达式准确出现 <code>m</code>  次， <code>&#123;m,n&#125;</code> ：正则表达式至少出现 <code>m</code>  次，至多出现 <code>n</code>  次。对于 <code>gawk</code>  来说，默认情况下， <code>gawk</code>  不会识别正则表达式间隔，必须指定 <code>gawk</code>  程序的 <code>--re- interval</code>  命令行选项才能识别正则表达式间隔。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"bt\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> --re-interval <span class=\"token string\">'/be&#123;1&#125;t/&#123;print $0&#125;'</span> <span class=\"token comment\"># 匹配失败</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"bt\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> --re-interval <span class=\"token string\">'/be&#123;0,1&#125;t/&#123;print $0&#125;'</span> <span class=\"token comment\"># 匹配成功</span></pre></td></tr></table></figure><ul>\n<li>管道符号 <code>|</code> ，符号管道允许在检查数据流时，用逻辑 <code>OR</code>  指定正则表达式要用的两个或多个模式，如果任何一个模式匹配了数据流文本，文本通过测试</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># expr1|expr2...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'the cat is asleep'</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'/cat|dog/&#123;print $0&#125;'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 你还记得 lsof 命令的 - a 选项吗</span></pre></td></tr></table></figure><ul>\n<li>表达式分组 <code>()</code> ，该组会被视为一个标准字符，可以像对普通字符一样给该组使用特殊字符。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"sta\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'/sta(urday)?/&#123;print $0&#125;'</span>\t\t<span class=\"token comment\"># $0 表示整行数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 和管道一起使用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"cat\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'/(c|b)a(t|d)/&#123;print $0&#125;'</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/05/Shell/gawk%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/08/05/Shell/gawk%E7%A8%8B%E5%BA%8F%E5%9F%BA%E7%A1%80/",
            "title": "gawk程序基础",
            "date_published": "2022-08-05T02:29:39.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>gawk</code>  程序是 <code>Unix</code>  中原始 <code>gawk</code>  程序的 <code>GNU</code>  版本，让流编辑迈上了一个新的台阶，其作用为：</p>\n<ul>\n<li>定义变量保存数据。</li>\n<li>使用算数和字符串操作符处理数据。</li>\n<li>使用结构化编程概念来为数据处理增加处理逻辑。</li>\n<li>通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告</li>\n</ul>\n<p>格式： <code>gawk options program file</code> 。</p>\n<p><code>gawk</code>  强大之处在于程序脚本，可以写脚本来读取文本行的数据，处理并显示数据，创建任何类型的输出报告。</p>\n<p>如果你没有下载 <code>gwak</code> ，执行命令： <code>sudo apt install gawk</code> 。</p>\n<h1 id=\"从命令行读取脚本程序\"><a class=\"anchor\" href=\"#从命令行读取脚本程序\">#</a> 从命令行读取脚本程序</h1>\n<p><code>gawk</code>  程序脚本用一对花括号定义 <code>&#123;&#125;</code> , 必须将脚本命令放在花括号中：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;print \"Hello World\"&#125;'</span></pre></td></tr></table></figure><p><code>print</code>  命令会将文本打印到 <code>STDOUT</code>  中，由于没有在命令行中指定文件，所以输入默认是接收 <code>STDIN</code> 。由于该命令固定显示 <code>Hello World</code> ，所以不论输入什么，都只会显示这个。希望结束程序，必须表明数据流已经结束， <code>ctrl+d</code>  会产生一个 <code>EOF</code>  字符，能够终止 <code>gawk</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;print \"Hello world\"&#125;'</span> testfile   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 使用文件作为输入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 由于 gawk 命令行假定脚本是个单个文本字符串，所以要使用 ''</span></pre></td></tr></table></figure><p>如果要使用多命令，还是使用分号</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"this is rich\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;$4=\"Mike\";print $0&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\"># 也可以分行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token function\">gawk</span> <span class=\"token string\">'&#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  > $3='</span><span class=\"token number\">123</span><span class=\"token string\">'</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  > print $0</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  > &#125;'</span></pre></td></tr></table></figure><p>这个与 <code>sed</code>  的多命令相似，两者的格式区别在于， <code>sed</code>  的命令直接使用 <code>''</code> ， <code>gawk</code>  使用 <code>'&#123;&#125;'</code> ，如果将命令放在文件中，两者是相同的，都是使用 <code>-f</code>  参数，文件名为了避免混淆，也会以. <code>gawk</code>  后缀命名。在 <code>gawk</code>  命令文件中，可以定义变量，同时，使用时不需要 <code>$</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">text</span><span class=\"token operator\">=</span><span class=\"token string\">'213'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>print text</pre></td></tr></table></figure><h1 id=\"数据字段变量\"><a class=\"anchor\" href=\"#数据字段变量\">#</a> 数据字段变量</h1>\n<p><code>gawk</code>  会给一行中每个数据元素分配一个变量（默认数据分隔符是空格） <code>$0</code> -- 整行数据     <code>$n</code> -- 第 <code>n</code>  个数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">gawk</span> -F: <span class=\"token string\">'&#123;print $1&#125;'</span> data</pre></td></tr></table></figure><p>打印 data 每行第一个数据， <code>-F</code>  指定分隔符，以 <code>:</code>  为分隔符。</p>\n<h1 id=\"程序脚本的运行\"><a class=\"anchor\" href=\"#程序脚本的运行\">#</a> 程序脚本的运行</h1>\n<p><code>gawk</code>  允许指定程序脚本<strong>何时运行</strong>，默认情况下， <code>gawk</code>  会从输入读取一行脚本，然后针对该行数据运行程序脚本，但是，有时需要在处理数据前运行脚本，有时在之后处理脚本。</p>\n<ul>\n<li><code>BEGIN</code>  关键字：会强制 <code>gawk</code>  在读取数据前执行 <code>BEIGIN</code>  关键字后指定的程序脚本</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN &#123;print \"hello\"&#125;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hello</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 因为没有其他处理数据的命令，直接退出</span></pre></td></tr></table></figure><p><code>print</code>  显示完文本后会快速退出，不等待任何数据，如果想使用正常的程序脚本中处理数据，必须使用另一个脚本区域来定义程序：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN &#123;print \"hello\"&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> &#123;print $1&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> '</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hello</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr></table></figure><ul>\n<li><code>END</code>  关键字：会在读取数据 (是所有数据) 处理完之后，执行 <code>END</code>  后面的程序脚本</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">gawk</span> <span class=\"token string\">'BEGIN &#123;print \"The data file content:\"&#125;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> &#123;print $1&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> END &#123;print \"END of file\"&#125;'</span> data</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>The data <span class=\"token function\">file</span> content:</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">cat</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>END of <span class=\"token function\">file</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/04/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E5%9F%BA%E7%A1%80/",
            "url": "https://cecilia.cool/2022/08/04/Shell/sed%E7%BC%96%E8%BE%91%E5%99%A8%E5%9F%BA%E7%A1%80/",
            "title": "sed编辑器基础",
            "date_published": "2022-08-04T15:27:23.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>sed</code>  编辑器被称作<strong>流编辑器</strong> ( <code>stream editor</code> )，流编辑器会在编辑器处理数据之前基于预先提供的一组<strong>数据规则</strong>来编辑数据流。根据命令来处理数据，这些命令要么从命令行输入，要么存储在一个命令文本文件中。</p>\n<p><code>sed</code>  编辑器处理事务：</p>\n<ol>\n<li>一次从输入中读取一行数据。</li>\n<li>根据提供的编辑器命令匹配数据。</li>\n<li>按照命令修改流中的数据。</li>\n<li>将新的数据输出到 <code>STDOUT</code> 。</li>\n</ol>\n<p><code>sed</code>  将所有命令与一行数据匹配完毕后，读取下一行数据并重复该过程，处理完所有数据，终止。</p>\n<h1 id=\"基本格式\"><a class=\"anchor\" href=\"#基本格式\">#</a> 基本格式</h1>\n<p>格式： <code>sed options script file</code> 。</p>\n<p>为了更好理解，举个例子。</p>\n<p>先创建一个数据文件 <code>data</code> ，其中包含<strong> 6 行 'cat'</strong>。然后我们希望将 'cat' 替换为 'dog'。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/dog/'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dog</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># ‘s/cat/dog/’是后者替换前者</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 此次命令没有使用选项，scirpt 就是's/cat/dog' file 就是 data</span></pre></td></tr></table></figure><p><code>sed</code>  命令非常快。处理一行显示一行，但是 <code>sed</code>  并不会修改文件原始数据，只是将结果传给 <code>STDOUT</code>  而已，当然，也可以重定向。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/big cat/'</span> data <span class=\"token operator\">></span> result</pre></td></tr></table></figure><p><code>sed</code>  可以执行多个命令，使用 <code>-e</code>  选项，多个命令分号隔开，并且分号紧靠上一个命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'s/brown/green/; s/dog/cat/'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者是这样，shell 一旦发现封尾的单引号，就会执行命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-e</span> <span class=\"token string\">'</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>> s/brown/green</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>> s/fox/cat</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>> '</span> data</pre></td></tr></table></figure><p>如果要执行的命令太多，可以放在文件中，使用 <code>-f</code>  选项，该选项会在处理输入时，将文件中指定的命令添加到已有的命令中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-f</span> script.sed data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 为避免混淆，一般将 sed 的命令文件后缀写为.sed</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 例子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> command.sed</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s/cat/dog/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s/Jack/Mark/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">cat</span> Jack</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-f</span> command.sed data</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>dog Mark</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>dog Mark</pre></td></tr></table></figure><p>关于 <code>s</code>  替换命令，还有其他选项</p>\n<ul>\n<li><code>sed 's/cat/dog/' data</code>  只会替换每行第一处 <code>cat</code> 。如果想在第 <code>n</code>  处替换， <code>s/cat/dog/n'</code> 。</li>\n<li><code>g</code>  选项，所有匹配到的标记都会被替换。</li>\n<li><code>p</code>  选项，文本原先行内容替换后要打印出来： <code>sed -n 's/cat/dog/p' data</code> , 一般和 <code>-n</code>  配合使用， <code>-n</code>  禁止 <code>sed</code>  输出，配合 <code>p</code>  使用，就只会打印含有标记的文本。</li>\n<li><code>w file</code> , 将替换的结果写到文件中： <code>sed 's/cat/dog/w aim.txt' data</code> 。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sed</span> <span class=\"token string\">'s/cat/dog/w test_data'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> test_data</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>dog Jack</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>dog Jack</pre></td></tr></table></figure><p>有时候， <code>/</code>  使用起来比较麻烦，可以使用 <code>!</code>  来代替： <code>s!cat!dog!</code> 。</p>\n<h1 id=\"使用地址\"><a class=\"anchor\" href=\"#使用地址\">#</a> 使用地址</h1>\n<p>可以指定命令对某些特定的行数进行处理， <code>sed</code>  编辑器的行寻址有两种形式：</p>\n<ul>\n<li>数字表示行区间</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 1. 对单行指定修改</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2s/cat/dog/'</span> data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 2. 对行区间进行执行修改</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,5s/cat/dog'</span> data <span class=\"token comment\"># 2~5 行被修改</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 3. 美元符号 $</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,$s/cat/dog/'</span> data   <span class=\"token comment\"># 对 2 行及以下的数据执行命令</span></pre></td></tr></table></figure><ul>\n<li>文本模式来过滤出行， <code>/pattern/command</code> 。比如修改用户 <code>cyan</code>  的默认 <code>shell</code> 。匹配模式十分类似 <code>grep</code> ，固定文本作用有限，最常用的是使用正则表达式。 匹配模式十分类似 grep，固定文本作用有限，最常用的是使用正则表达式。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">grep</span> cyan /etc/passwd</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan:x:1000:1000:cyan,,,:/home/cyan:/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">$sed</span> <span class=\"token string\">'/cyan/s/bash/csh/'</span> /etc/psswd</pre></td></tr></table></figure><ul>\n<li>当有多条命令时候。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>address <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">#多条命令时，需要用 &#123;&#125; 来限定作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        command1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        command2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2&#123;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>> commands    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;'</span> data.txt</pre></td></tr></table></figure><h1 id=\"删除与修改\"><a class=\"anchor\" href=\"#删除与修改\">#</a> 删除与修改</h1>\n<p><code>sed</code>  可以替换，也可以删除，使用 <code>d</code>  命令： <code>sed '3d' data</code> ，和行寻址一起使用发挥最大作用。输出到 STDOUT 的结果是删除指定行之后的剩余文本。</p>\n<p>如果我希望删除某个区间的文本（使用文本匹配）</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num start</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>num <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>num end</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>num <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>num start again</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>kk</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>nn</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 执行命令：sed '/start/,/end/d' data</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 结果 num 4</span></pre></td></tr></table></figure><p>一开始遇到 <code>start</code> ，打开删除模式，持续删除，直到遇到 <code>end</code> ，关闭删除模式 (没遇到就一直删除）。再次遇到 <code>start</code>  时 ( <code>num start again</code> )，打开删除模式，并持续删除。</p>\n<p><code>sed</code>  编辑器是不会修改原始文件的，修改的只是从 <code>sed</code>  编辑器的输出中消失了。</p>\n<p>至于修改行的内容，之前的 <code>s</code>  命令需要匹配，而 <code>c</code>  命令是直接修改整行内容， <code>c--change</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'1c\\this is changed line'</span> data.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'/num 1/c\\this is changed line'</span> data.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'2,3c\\this is changed line'</span> data.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># c 命令之后用的是反斜杠 \\, 并且没有封尾，也就是 line 后没有 \\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 第三个使用区间修改行，并不是将区间的每一行都修改为指定行，而是用该指定行替换数据流中区间的所有文本</span></pre></td></tr></table></figure><h1 id=\"插入和附加文本\"><a class=\"anchor\" href=\"#插入和附加文本\">#</a> 插入和附加文本</h1>\n<p>插入 <code>insert--i</code> : 会在指定行<strong>前</strong>增加一个行， <code>echo &quot;test line 2&quot; | sed 'i\\test line 1'</code> 。<br />\n附加 <code>append--a</code> : 会在指定行<strong>后</strong>增加一个行， <code>echo &quot;test line 2&quot; | sed 'a\\test line 1'</code> 。</p>\n<p>如果想要附加到行尾，只需要使用美元符号： <code>sed '$a\\new line' data</code> 。<strong>个人觉得美元符号是数据流最后一行的意思</strong>。<br />\n要插入（附加）多行数据，需要在每行之间使用 <code>\\</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'1i\\</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>> line 1\\</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>> line 2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>> '</span> data</pre></td></tr></table></figure><h1 id=\"转换命令\"><a class=\"anchor\" href=\"#转换命令\">#</a> 转换命令</h1>\n<p><code>y</code>  命令是唯一可以处理单个字符的 <code>sed</code>  编辑器命令   <code>[address]y/inchars/outchars/</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'y/123/789/'</span> data</pre></td></tr></table></figure><p><code>inchars</code>  的第一个字符会被映射为 <code>outchars</code>  的第一个字符，以此类推，直到处理完指定字符。其中，如果两者长度不一样，会报错。<br />\n转换命令是全局命令，无法限定只转换在特定地方出现的字符 (以行为单位)，也就是<strong>一行所有的字符都要被转换</strong>。</p>\n<h1 id=\"打印命令\"><a class=\"anchor\" href=\"#打印命令\">#</a> 打印命令</h1>\n<p>之前使用 <code>s</code>  替换命令时，配合 <code>-n</code>  和 <code>p</code>  选项，打印出修改的行，还有些命令也能打印数据流信息。</p>\n<p><code>=</code>  命令打印<strong>行号</strong>，<strong>行号由数据流中的换行符来决定</strong>，每出现一个换行符，sed 编辑器就认为一行结束了。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'='</span> data</pre></td></tr></table></figure><p><code>l</code>  命令可以打印出数据流中的文本和不可打印的 ASCII 字符 (一般是标准 C 风格或八进制)， <code>l</code>  就是 <code>list</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'l'</span> data</pre></td></tr></table></figure><h1 id=\"处理文件\"><a class=\"anchor\" href=\"#处理文件\">#</a> 处理文件</h1>\n<ul>\n<li>写入文件： <code>[address]w filename</code> 。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">'1,2w aim.txt'</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token comment\"># 在 aim.txt 追加</span></pre></td></tr></table></figure><ul>\n<li>读取文件： <code>[address]r filename</code> 。 允许将一个独立文件中的数据插入到数据流中，插入到指定行后。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sed</span> <span class=\"token string\">'3r sources.txt'</span> data</pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/04/Shell/%E5%87%BD%E6%95%B0/",
            "url": "https://cecilia.cool/2022/08/04/Shell/%E5%87%BD%E6%95%B0/",
            "title": "函数",
            "date_published": "2022-08-03T16:46:24.000Z",
            "content_html": "<h1 id=\"创建函数\"><a class=\"anchor\" href=\"#创建函数\">#</a> 创建函数</h1>\n<p>格式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 格式 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function-name function\">name</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcommands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 格式 2, 更推荐使用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function-name function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tcommands</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 使用时只需要使用函数名即可 --name</span></pre></td></tr></table></figure><p>默认情况下，函数退出状态码是函数中最后一条命令返回的退出状态码，函数执行结束后，可以用标准变量 <code>$?</code>  来确定函数退出状态码。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># return 语句</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token builtin class-name\">read</span> <span class=\"token parameter variable\">-p</span> <span class=\"token string\">\"please input the value:\"</span> value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token variable\">$value</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>退出状态码在 <code>0~255</code> ，否则就会返回错误值</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token string\">'abc'</span> <span class=\"token comment\"># 会报错：line 5: return: abc: numeric argument required</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fun</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 如果中间有其他命令，$? 就会被置 0</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$?</span></pre></td></tr></table></figure><p>当然，如果希望从函数那得到一个任意对象，就像强类型语言那样 <code>return</code>  语句返回值可以用变量接收</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> $<span class=\"token punctuation\">[</span><span class=\"token variable\">$value</span>*2<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">reslut</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>fun<span class=\"token variable\">`</span></span> <span class=\"token comment\">#或者是 $(fun)</span></pre></td></tr></table></figure><p>如此可以获得任何类型的函数输出，并将其保存在变量中。</p>\n<h1 id=\"函数中使用变量\"><a class=\"anchor\" href=\"#函数中使用变量\">#</a> 函数中使用变量</h1>\n<p><strong>传参：</strong></p>\n<ul>\n<li><code>bash shell</code>  会将函数当成一个小型脚本来对待，也就是说，可以传递参数，如同脚本一样。</li>\n<li>如同脚本一样，对于传入参数，依旧是使用 <code>$0,$1...</code> ， <code>$#</code> 是传入参数数量。 <code>value=$(fun 10 15)</code> , 参数直接写在后面即可。</li>\n<li>由于函数使用特殊参数环境变量作为自己的参数值，因此他无法直接获取脚本在命令行获取的参数值。</li>\n</ul>\n<p><strong>处理变量：</strong></p>\n<p>比较麻烦的就是变量的作用域。默认情况下，<strong>定义的变量都是全局变量</strong>，函数外定义的变量，函数内部也可以正常使用。函数内定义的变量函数外也可以使用。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">return</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>fun</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr></table></figure><p>函数内部使用的任何变量都可以被声明成局部变量，只需要加上 <code>local</code>  关键字即可。</p>\n<p><code>local temp=$[$value + 2]</code> , 在函数内使用 <code>temp</code> ，不会影响主体脚本的 <code>temp</code>  的值。</p>\n<h1 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>one two three<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>直接 <code>$arr</code>  只会显示 <code>one</code> ，使用格式为： <code>$&#123;arr[1]&#125;</code> , 一次性全部显示，就是 <code>$&#123;arr[*]&#125;</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token builtin class-name\">local</span> <span class=\"token assign-left variable\">arr</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1,2</span>,3,4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">i</span> <span class=\"token keyword\">in</span> <span class=\"token variable\">$&#123;arr<span class=\"token punctuation\">[</span>*<span class=\"token punctuation\">]</span>&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$i</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token builtin class-name\">echo</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>fun</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#结果：1,2,3,4</span></pre></td></tr></table></figure><h1 id=\"创建库\"><a class=\"anchor\" href=\"#创建库\">#</a> 创建库</h1>\n<p>总有一些方法，我在很多脚本文件中都会使用，为了避免每个脚本文件都写一次， <code>bash shell</code>  允许创建函数库文件，然后在多个脚本中引用。</p>\n<p>我们在运行一个脚本文件时，当前的 <code>shell</code>  会创建一个新的 <code>shell</code>  运行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./testfile <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">89708</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--forest</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token number\">88948</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token number\">89708</span> pts/1    00:00:08  <span class=\"token punctuation\">\\</span>_ testfile</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token number\">89710</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr></table></figure><p><code>shell</code>  函数仅仅在定义它的 <code>shell</code>  会内有效，所以如果在 <code>shell</code>  命令行界面的提示符下运行库函数脚本， <code>shell</code>  会创建一个新的 <code>shell</code>  运行。这个 <code>shell</code>  会重新定义库函数，当其他脚本想用时，是不能的。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>./funs_file</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">..</span></pre></td></tr></table></figure><p>哪怕在 <code>test</code>  中运行 <code>funs_file</code>  库文件，这些库函数，也只能在运行库文件的 <code>shell</code>  里面才会生效。</p>\n<h2 id=\"source命令\"><a class=\"anchor\" href=\"#source命令\">#</a> source 命令</h2>\n<p>该命令会在当前 <code>shell</code>  上下文执行命令，而不是创建一个新的 <code>shell</code> ，并且 <code>source</code>  命令有个快捷别名 -- 点操作符.  <code>./fun_file</code> 。</p>\n<p>编写一个脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr></table></figure><p>如果不使用 <code>source</code>  命令，那么 <code>var</code>  对于当前 <code>shell</code>  是不可见的</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr></table></figure><p>使用之后</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">.</span> ./testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><h1 id=\"终端使用函数\"><a class=\"anchor\" href=\"#终端使用函数\">#</a> 终端使用函数</h1>\n<p>格式</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 格式 1，分号结尾</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>echo <span class=\"token string\">\"ok\"</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">read</span> value<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 格式 2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-name function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"adc\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>.bashrc</code>  文件定义函数：函数定义放在一个特殊的位置，每次启动新 <code>shell</code>  都会由 <code>shell</code>  重新在 <code>.bashrc</code>  中定义的函数，甚至可以在自己写的脚本中直接使用。</p>\n<p>关于 <code>.bashrc</code> ，就是个启动文件， <code>shell</code>  启动时会执行一下。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/04/Shell/%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/",
            "url": "https://cecilia.cool/2022/08/04/Shell/%E6%8E%A7%E5%88%B6%E8%84%9A%E6%9C%AC/",
            "title": "控制脚本",
            "date_published": "2022-08-03T16:21:37.000Z",
            "content_html": "<h1 id=\"信号\"><a class=\"anchor\" href=\"#信号\">#</a> 信号</h1>\n<p><code>Linux</code>  利用信号与运行在系统中的进程进行通信，常见的 <code>Linux</code>  系统信号：</p>\n<ul>\n<li>1-- <code>SIGHUP</code> -- 挂起进程</li>\n<li>2-- <code>SIGINT</code> -- 终止进程</li>\n<li>3-- <code>SIGQUIT</code> -- 停止进程</li>\n<li>9-- <code>SIGLIKILL</code> -- 无条件终止进程</li>\n<li>15-- <code>SIHTERM</code> -- 尽可能终止进程</li>\n<li>17-- <code>SIGSTOP</code> -- 无条件停止进程，但不是终止</li>\n<li>18-- <code>SIGTSTP</code> -- 停止或暂停进程，但不是终止</li>\n<li>19-- <code>SIGCONT</code> -- 继续运行停止的进程</li>\n</ul>\n<p><code>crtl+c</code>  会生成 <code>SIGINT</code>  信号，停止 <code>shell</code>  当前运行的所有进程。<br />\n <code>ctrl+z</code>  会生成 <code>SIGTSTP</code>  信号，停止 <code>shell</code>  中运行的任何进程。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>^Z</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>F S   <span class=\"token environment constant\">UID</span>     PID    <span class=\"token environment constant\">PPID</span>  C PRI  NI ADDR SZ WCHAN  TTY          TIME CMD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0</span> S  <span class=\"token number\">1000</span>   <span class=\"token number\">30447</span>   <span class=\"token number\">30445</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">3559</span> do_wai pts/0    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0</span> T  <span class=\"token number\">1000</span>   <span class=\"token number\">33293</span>   <span class=\"token number\">30447</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">2789</span> do_sig pts/0    00:00:00 <span class=\"token function\">sleep</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">0</span> R  <span class=\"token number\">1000</span>   <span class=\"token number\">33294</span>   <span class=\"token number\">30447</span>  <span class=\"token number\">0</span>  <span class=\"token number\">80</span>   <span class=\"token number\">0</span> -  <span class=\"token number\">3623</span> -      pts/0    00:00:00 <span class=\"token function\">ps</span></pre></td></tr></table></figure><p><code>S</code>  列中， <code>T</code>  标志就是进程被暂停。使用 <code>ps</code>  获得希望杀死的进程的 <code>PID</code> ，使用 <code>kill -9 PID</code> 。</p>\n<h2 id=\"trap命令\"><a class=\"anchor\" href=\"#trap命令\">#</a> trap 命令</h2>\n<p><code>trap</code>  命令：允许指定 <code>shell</code>  脚本监看并从 <code>shell</code>  中拦截的 <code>Linux</code>  信号。如果脚本收到了 <code>trap</code>  命令中列出的信号，该信号不再由 <code>shell</code>  处理。而是本地处理。</p>\n<p>其使用格式为： <code>trap commands signals</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo 'I have trapped ctrl-c'\"</span> SIGINT</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sleep</span> <span class=\"token number\">1000</span></pre></td></tr></table></figure><p>在睡眠期间使用 <code>ctrl+c</code>  就会打印这句话。</p>\n<p>在很多程序中，想要实现程序正常运行结束或者外部发送信号退出，都会打印 <code>Goodby...</code> ，可以加上这句话</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token string\">\"echo 'Goodby...'\"</span> Exit</pre></td></tr></table></figure><p><code>trap</code>  可以修改或是移除，其重点就是<strong>先到先占位</strong>，比如第一行设置了 <code>trap</code>  指令，在第 20 行修改或移除了该信号，那么第一行 <code>trap</code>  的只会在 1~19 行生效。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 删除，单（双）短横线都可以</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">trap</span> <span class=\"token parameter variable\">--SIGINT</span></pre></td></tr></table></figure><h1 id=\"后台模式\"><a class=\"anchor\" href=\"#后台模式\">#</a> 后台模式</h1>\n<p>最开始就提到过，在运行脚本时加上 <code>&amp;</code> ，就能将进程置入后台。后台模式中，进程不会和终端会话上的 <code>STDIN</code> ， <code>STDOUT</code> ， <code>STDERR</code>  关联 。</p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p><code>shell</code>  脚本的基本编程到此为止，之后我们会进入高级 <code>shell</code>  脚本编程，其中会涉及到函数，著名的流编辑器 <code>sed</code>  和 <code>gawk</code> ，以及正则表达式四个主要部分。然后就可以结束此次 <code>Linux</code>  与 <code>shell</code>  编程的学习了。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/03/Shell/%E5%91%88%E7%8E%B0%E6%95%B0%E6%8D%AE/",
            "url": "https://cecilia.cool/2022/08/03/Shell/%E5%91%88%E7%8E%B0%E6%95%B0%E6%8D%AE/",
            "title": "呈现数据",
            "date_published": "2022-08-03T03:30:29.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>之前关于标准输入，输出重定向的文章，我提到开始接触流，并且在文中讲解时使用也是以流来具体化重定向的作用，但是讲解的非常不严谨。本文相当于对重定向深入讲解，甚至可以自定义重定向。</p>\n<h1 id=\"标准文件描述符\"><a class=\"anchor\" href=\"#标准文件描述符\">#</a> 标准文件描述符</h1>\n<p><code>Linux</code>  系统将每个对象当作文件处理（有句话就是一切皆文件），包括输入和输出，用文件描述符<strong>标识</strong>每个文件对象。文件描述符是一个<strong>非负整数</strong>，可以唯一表示会话中打开的文件。出于特殊目的， <code>bash shell</code>  在每个进程，只保留了 3 个文件标识符 (0,1,2)</p>\n<ul>\n<li><code>STDIN</code> -- 标准输<strong>入</strong>。对于终端界面，<strong>标准输入是键盘</strong>。 <code>shell</code>  从 <code>STDIN</code>  对应的键盘获得输入。使用输入重定向符号 <code>&lt;</code> ， <code>Linux</code>  会使用重定向指定的文件来替换标准文件描述符，会读取文件并提取数据，如同是在键盘上键入的。</li>\n<li><code>STDOUT</code> -- 标准输<strong>出</strong>。同标准输入类似，shell 所有输出都会被定向到标准输出中，也就是显示器。</li>\n<li><code>STDERR</code> -- 错误消息对于错误消息，<strong>也是重定向到显示器的</strong>，但是错误消息和一般标准输出是分开的。比如： <code>ls -l badfile &gt; test</code> ，如果没有 <code>badfile</code>  就会报错，但是错误信息并没有给 <code>test</code> 。</li>\n</ul>\n<p>我们之前知道如何重定向标准输入和标准输出，现在讲解如何重定向错误信息。</p>\n<ul>\n<li>只重定向错误：将 <code>STDERR</code>  文件描述符的值 <code>(2)</code>  紧紧放在重定向符号前， <code>ls -al badfile 2&gt; test</code> 。但是这种方法，如果该命令的输出既包含错误信息，也包含标准输出，那么标准输出还是会输出到屏幕中。</li>\n<li>重定向错误和数据：我们肯定不希望重定向的数据和错误信息在同一文件中（难道你希望错误日志里面还给你保存几句莫名其妙的打印语句吗），所以必须使用两个重定向符号，需要在符号面前放上各自文件描述符值： <code>ls -al test test2 test3 badtest 2&gt; testSTDERR 1&gt; testSTDOUT</code> （其中 <code>test*</code>  文件都存在， <code>badtest</code>  不存在）。   当然，也可以将数据和错误重定向到同一文件：  <code>ll n_File bad_File new_File &amp;&gt; STD_ALL</code> 。 <code>bash shell</code>  自动赋予了错误消息更高的优先级，方便集中浏览错误信息，也就是说， <code>ll A B C</code>  中 <code>B</code>  文件不存在，那么输出时会优先输出关于 <code>B</code>  的错误信息。</li>\n</ul>\n<h1 id=\"脚本中的标准重定向输出和输入\"><a class=\"anchor\" href=\"#脚本中的标准重定向输出和输入\">#</a> 脚本中的标准重定向输出和输入</h1>\n<p>对于三个标准文件描述符，一定要记住，使用 <code>exec</code>  命令时数字放在箭头左边。当数字出现在右边，要用 <code>&amp;</code>  符号。</p>\n<h2 id=\"临时重定向\"><a class=\"anchor\" href=\"#临时重定向\">#</a> 临时重定向</h2>\n<p>在脚本中生成错误消息，可以将单独的一行输出重定向到 <code>STDERR</code> ，不同的是，在脚本中，格式为 <code>&gt;&amp;2</code> 。 <code>echo &quot;This is error&quot; &gt;&amp;2</code> ，这样，该行就会指向 <code>STDERR</code>  的位置，也就类似于终端上的错误信息一样。</p>\n<p>这种操作可以用于检测脚本运行时传入的选型或者参数是否正确，如果不正确就可以通过 <code>&gt;&amp;2</code>  来生成错误信息。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is error\"</span> <span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is normal\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 运行脚本，并将脚本的错误信息重定向到 result1 文件中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>./test <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span> result1</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>This is normal</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cat</span> result1</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>This is an error</pre></td></tr></table></figure><h2 id=\"永久重定向\"><a class=\"anchor\" href=\"#永久重定向\">#</a> 永久重定向</h2>\n<p>上面的临时重定向，比如我一个脚本有很多行生成错误信息并需要重定向，而每一行都是用 <code>&gt;&amp;2</code>  太麻烦了，那么就可以使用 <code>exec</code>  命令来进行永久重定向。</p>\n<p><code>exec</code>  命令告诉 <code>shell</code>  在脚本中执行期间重定向某个特定文件描述符。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span> STD_output_file</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 那么脚本中该命令之下的所有标准输出都重定向到了 STD_output_file 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 同理，改变标准输入，这对于从待处理文件中读取数据有很大帮助</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">0</span>&lt;</span> STD_input_file</pre></td></tr></table></figure><h1 id=\"自定义重定向\"><a class=\"anchor\" href=\"#自定义重定向\">#</a> 自定义重定向</h1>\n<p><code>Linux</code>  系统本来每个进程都有<strong> 9 个</strong>文件描述符，3 个标准，剩下 6 个都可以用于自定义，<strong>这 6 个可以任意作为输入还是输出</strong>。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">6</span>></span> testout</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"This is a data\"</span><span class=\"token operator\">></span><span class=\"token file-descriptor important\">&amp;6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果使用 >> 就是追加模式</span></pre></td></tr></table></figure><p>如果你想恢复一个被重定向的文件描述符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">3</span>></span><span class=\"token file-descriptor important\">&amp;1</span>   <span class=\"token comment\">#3 指向 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span>testout</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">1</span>></span><span class=\"token file-descriptor important\">&amp;3</span></pre></td></tr></table></figure><p>创建<strong>读写</strong>文件描述符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>&lt;></span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 输入输出时，文件指针是共享的。同时注意 >> 的追加模式与该特性的使用</span></pre></td></tr></table></figure><p>关闭文件描述符时，一般创建了新的输入输出文件描述符，脚本退出时， <code>shell</code>  就会自动关闭它们。手动关闭： <code>exec 3&gt;&amp;-</code> 。一旦关闭，就不能在写入 / 读取数据，否则就会报错。</p>\n<h1 id=\"lsof命令\"><a class=\"anchor\" href=\"#lsof命令\">#</a> lsof 命令</h1>\n<p>网上给的知识有些凌乱，甚至有些错误，所以我会总结几篇文章，最后给一下参考。</p>\n<p><code>lsof--list open files</code> ，列出当前系统已经打开的所有文件，一般 <code>lsof</code>  命令位于 <code>/usr/bin/losf</code>  或者是 <code>/usr/sbin/lsof</code> 。因为终端运行时，会有很多文件被打开使用，如果直接使用 <code>lsof</code>  会出现很多结果，我们在使用时一定要灵活使用相关的选项来控制输出。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-a</td>\n<td style=\"text-align:center\">对给的选项进行<strong>与</strong>运算</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-p&lt;pid&gt;</td>\n<td style=\"text-align:center\">列出指定进程号所打开的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-d &lt;文件号&gt;</td>\n<td style=\"text-align:center\">列出占用该文件号的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+d &lt;目录&gt;</td>\n<td style=\"text-align:center\">列出目录下被打开的文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-c &lt;进程名&gt;</td>\n<td style=\"text-align:center\">列出指定进程所打开的文件</td>\n</tr>\n</tbody>\n</table>\n<p>根据上面的部分选项，我们使用一下该命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$$</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">0,1</span>,2</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>COMMAND   PID <span class=\"token environment constant\">USER</span>   FD   TYPE DEVICE SIZE/OFF NODE NAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">bash</span>    <span class=\"token number\">29075</span> cyan    0u   CHR  <span class=\"token number\">136,0</span>      0t0    <span class=\"token number\">3</span> /dev/pts/0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">bash</span>    <span class=\"token number\">29075</span> cyan    1u   CHR  <span class=\"token number\">136,0</span>      0t0    <span class=\"token number\">3</span> /dev/pts/0</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">bash</span>    <span class=\"token number\">29075</span> cyan    2u   CHR  <span class=\"token number\">136,0</span>      0t0    <span class=\"token number\">3</span> /dev/pts/0</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 变量 $$ 表示当前 shell 的 pid</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># COMMAND: 正在运行的命令名的前 9 个字符</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># FD: 文件描述符号以及访问类型 (r-- 读，w-- 写，u-- 读写)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># TYPE: 文件的类型 (CHR-- 字符型，BLK-- 块型，DIR-- 目录，REG-- 常规文件)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># NAME：文件描述符所使用的文件的完整路径名</span></pre></td></tr></table></figure><p>现在编写一个简单的脚本 <code>test</code> ，本文主要是讲解文件描述符。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exec</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">4</span>></span> four_data</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#死循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>使用 <code>&amp;</code>  将该脚本置入后台运行： <code>./test&amp;</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./test<span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">88214</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">88084</span> pts/3    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">88214</span> pts/3    00:00:19 <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">88218</span> pts/3    00:00:00 <span class=\"token function\">ps</span></pre></td></tr></table></figure><p>再使用 <code>lsof</code>  来查看使用了哪些文件描述符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">88214</span> <span class=\"token parameter variable\">-d</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>COMMAND   PID <span class=\"token environment constant\">USER</span>   FD   TYPE DEVICE SIZE/OFF   NODE NAME</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">test</span>    <span class=\"token number\">88214</span> cyan    4w   REG    <span class=\"token number\">8,5</span>        <span class=\"token number\">0</span> <span class=\"token number\">935362</span> /home/cyan/Templates/four_data</pre></td></tr></table></figure><p><code>-p 88214</code>  是寻找进程为 <code>pid=88214</code>  的进程打开的文件， <code>-d 4</code>  找到使用 <code>4</code>  文件描述符的文件， <code>-a</code>  对 <code>-p 88214</code>  和 <code>-d 4</code>  进行与运算。</p>\n<p>所以，你也可以尝试以下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">lsof</span> <span class=\"token parameter variable\">-p</span> pid</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 查看这个进程的文件到底占用了哪些描述符</span></pre></td></tr></table></figure><p>完成案例讲解，将 <code>test</code>  的进程杀死</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">kill</span> <span class=\"token number\">88214</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">88084</span> pts/3    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">88243</span> pts/3    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Terminated              ./test</pre></td></tr></table></figure><p><code>lsof</code>  命令很强大，这里我们只是用来查看文件描述符，如果你想要深入了解，可以参考以下文章</p>\n<blockquote>\n<p>Linux 查看端口占用情况：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2xpbnV4LWNoZWNrLXBvcnQtdXNhZ2UuaHRtbA==\">https://www.runoob.com/w3cnote/linux-check-port-usage.html</span></p>\n<p>lsof 命令详解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20va2xhdXNhZ2UvcC8xNDk5NTA0Mi5odG1s\">https://www.cnblogs.com/klausage/p/14995042.html</span> （其实并不是很详细）</p>\n<p>lsof 入门：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucWllc2VvLmNvbS8xNjI4OTYuaHRtbA==\">https://www.qieseo.com/162896.html</span></p>\n</blockquote>\n<h1 id=\"阻止命令输出\"><a class=\"anchor\" href=\"#阻止命令输出\">#</a> 阻止命令输出</h1>\n<p><code>Linux</code>  有一个文件叫 <code>null(/dev/null)</code> ， <code>shell</code>  输出到 <code>null</code>  文件的任何数据都不会被保存，全部都被丢掉。所以，不希望后台输出错误信息时， <code>shell</code>  发送电子邮件给进程属主的话，就将 <code>STDERR</code>  重定向到 <code>null</code> 。 <code>null</code>  文件可以快速清除现有文件中的数据而不需要删除文件再重新创建 <code>cat /dev/null &gt; testfile</code> ，类似于清空日志文件。哦，其实我个人更喜欢 <code>echo &quot;&quot; &gt; testfile</code> 。</p>\n<h1 id=\"创建临时文件\"><a class=\"anchor\" href=\"#创建临时文件\">#</a> 创建临时文件</h1>\n<p><code>/tmp</code>  目录是 <code>Linux</code>  用来存放不永久保留的文件，大部分 <code>Linux</code>  发行版配置了系统在启动时自动删除 <code>/tmp</code>  目录的所有文件。任何用户账户都有权限在 <code>/tmp</code>  读写。<br />\n单独 <code>mktemp</code>  命令可以在 <code>/tmp</code>  目录中创建一个唯一的临时文件。 <code>shell</code>  会创建该文件，但不是使用默认的 <code>umask</code> ，会将文件读和写权限分给属主，并将你设为属主。但是其他人没法访问 (root 除外)。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/tmp/tmp.thPVXNPVJp</pre></td></tr></table></figure><p>也可以自定义文件名，但是会在当前目录下创建该文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># mktemp 会用 6 个字符替换 6 个 X，保证文件名唯一</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp test.XXXXXX</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>test.k5CvV0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 在脚本中，一般将创建的文件名保存在变量中</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\">filename</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>mktemp test.XXXXXX<span class=\"token variable\">)</span></span></pre></td></tr></table></figure><p>还可以使用选项</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 在 /tmp 下创建，返回全路径名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp <span class=\"token parameter variable\">-t</span> test.XXXXXX</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>/tmp/test.LRNlpY</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># -d 选项创建临时目录</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp <span class=\"token parameter variable\">-d</span> dir.XXXXXX</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>dir.Adr0Q6</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ mktemp <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">-t</span> dir.XXXXXX</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>/tmp/dir.H9rIut</pre></td></tr></table></figure><h1 id=\"记录消息\"><a class=\"anchor\" href=\"#记录消息\">#</a> 记录消息</h1>\n<p><code>tee</code>  命令：<br />\n相当于管道的 <code>T</code>  型接头，将从 <code>STDIN</code>  过来的数据同时发送到 <code>STDOUT</code>  和 <code>tee</code>  命令行所指定的文件名： <code>tee testfile</code> 。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$  <span class=\"token function\">date</span> <span class=\"token operator\">|</span> <span class=\"token function\">tee</span> testfile</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">2022</span>年 08月 03日 星期三 <span class=\"token number\">15</span>:51:57 CST</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> testfile</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2022</span>年 08月 03日 星期三 <span class=\"token number\">15</span>:51:57 CST</pre></td></tr></table></figure><p><code>tee</code>  每次都会覆盖文件内容， <code>-a</code>  选型是追加模式： <code>who | tee -a testfile</code> 。</p>\n<h1 id=\"实例\"><a class=\"anchor\" href=\"#实例\">#</a> 实例</h1>\n<p>下面脚本涉及 <code>sql</code>  语句，如果你不会，可以跳过。该脚本主要是从.csv 文件中读取数据快速生成 <code>sql</code>  执行文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 文件名 create_sql_file</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">outfile</span><span class=\"token operator\">=</span><span class=\"token string\">'members.sql'</span> <span class=\"token comment\"># 要输出的文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">','</span> <span class=\"token comment\"># 重新定义分隔符</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> lname fname address city state <span class=\"token function\">zip</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">cat</span> <span class=\"token operator\">>></span> <span class=\"token variable\">$outfile</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">EOF</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>INSERT INTO members (lname,fname,address,city,state,zip) VALUES</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>('<span class=\"token variable\">$lname</span>','<span class=\"token variable\">$fname</span>','<span class=\"token variable\">$address</span>','<span class=\"token variable\">$city</span>','<span class=\"token variable\">$state</span>','<span class=\"token variable\">$zip</span>')</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>EOF</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">done</span> <span class=\"token operator\">&lt;</span> <span class=\"token variable\">$&#123;1&#125;</span> <span class=\"token comment\"># read 的标准输入重定向到 $&#123;1&#125; 文件。</span></pre></td></tr></table></figure><p>直接使用 <code>cat &lt;&lt; file</code>  可以追加数据到文件中，然后使用 <code>ctrl+d</code>  结束。也可以使用 <code>&lt;&lt; 结束符</code> ，通过输入结束符来结束输入。</p>\n<p>我们写一个 <code>mebers.csv</code>  数据</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> members.csv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Cyan,Jack,US,qiqo,iasui,iwah</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Mike,Smith,Japen,isaui,uwif,ianas</pre></td></tr></table></figure><p>然后运行脚本生成 <code>sql</code>  文件。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./create_sql_file members.csv</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> members.sql</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>INSERT INTO members <span class=\"token punctuation\">(</span>lname,fname,address,city,state,zip<span class=\"token punctuation\">)</span> VALUES</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'Cyan'</span>,<span class=\"token string\">'Jack'</span>,<span class=\"token string\">'US'</span>,<span class=\"token string\">'qiqo'</span>,<span class=\"token string\">'iasui'</span>,<span class=\"token string\">'iwah'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>INSERT INTO members <span class=\"token punctuation\">(</span>lname,fname,address,city,state,zip<span class=\"token punctuation\">)</span> VALUES</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token string\">'Mike'</span>,<span class=\"token string\">'Smith'</span>,<span class=\"token string\">'Japen'</span>,<span class=\"token string\">'isaui'</span>,<span class=\"token string\">'uwif'</span>,<span class=\"token string\">'ianas'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/02/Shell/%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/",
            "url": "https://cecilia.cool/2022/08/02/Shell/%E5%A4%84%E7%90%86%E7%94%A8%E6%88%B7%E8%BE%93%E5%85%A5/",
            "title": "处理用户输入",
            "date_published": "2022-08-02T14:44:02.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>我们之前只是讲了脚本如何输出，也就是 <code>echo</code> ，本文会讲解脚本如何处理用户的输入。同时我们会涉及到另外一些变量的讲解。</p>\n<h1 id=\"位置参数\"><a class=\"anchor\" href=\"#位置参数\">#</a> 位置参数</h1>\n<p>我们之前使用过许多命令，他们有些可以接收若干个参数，这其实是通过位置参数来实现的。</p>\n<p><code>$0</code>  是程序名， <code>$1~$9</code>  是第 <code>1~9</code>  个参数，超过 9 时，就要使用 <code>$&#123;&#125;</code> ，比如 <code>$&#123;10&#125;</code> ，这样，就允许在运行时加入任意个参数。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt var1 var2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>./tmp.txt</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>var1</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>var2</pre></td></tr></table></figure><p><code>$0</code>  是命令行输入的程序名，以绝对 (相对) 路径运行， <code>$0</code>  就是绝对 (相对) 路径。该特性会对脚本造成不同程度的影响，所以可以使用 <code>basename</code>  命令，只会返回不包含路径的脚本名： <code>name=$(basename $0)</code>        ​ <code>$()</code>  是命令替换。<br />\n注：</p>\n<ul>\n<li>在位置参数使用时，有可能并没有输入这个参数，所以在使用前需要测试参数： <code>if [ -n &quot;$1&quot; ]</code>   测试变量是否存在，<strong> 必须要加引号</strong>。</li>\n<li><code>$#</code> 是含有脚本运行时携带的命令行参数个数， <code>$@</code> 包含所有参数，当作同一字符串多个独立单词， <code>$*</code>  是同一字符串，所有参数看作一个单词。</li>\n<li>位置变量中，想要将数字使用变量代替 (比如 <code>$1</code> )： <code>$(!var)</code>  其中 var 值为 1, <code>$&#123;!#&#125;</code>  表示最后一个参数， <code>$&#123;&#125;</code>  中不能使用 <code>$</code>  而是使用 <code>!</code>  代替。</li>\n</ul>\n<p>这几个参数的使用和上述例子差不多，此处不再赘述。</p>\n<h1 id=\"移动变量\"><a class=\"anchor\" href=\"#移动变量\">#</a> 移动变量</h1>\n<p><code>shift</code>  命令会默认将所有位置参数都向左移动一位，也就是 <code>$1</code>  的值变成了 <code>$2</code> 。 <code>$0</code>  的值始终不会变。使用 shift 是遍历位置参数的一个好方法</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># demonstrating the shift command </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Parameter #<span class=\"token variable\">$count</span> = <span class=\"token variable\">$1</span>\"</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span> <span class=\"token variable\">$count</span> + <span class=\"token number\">1</span> <span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token builtin class-name\">shift</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>也可以给 shift 传递一个参数，指明参数移动的距离。</p>\n<h1 id=\"getopt命令\"><a class=\"anchor\" href=\"#getopt命令\">#</a> getopt 命令</h1>\n<p>说实话，这部分当时书上讲得挺让我难受的，痛苦.jpg。</p>\n<p><code>getopt</code>  命令可以接受一系列任意形式的<strong>命令行选项和参数</strong>，并将它们转换成适当的格式。说白了，该函数就是用来<strong>解析</strong>命令行选项参数的。</p>\n<p>使用： <code>getopt optstring parameters</code> 。</p>\n<p><code>optstring</code>  定义了命令可以接受的命令行有效的<strong>选项字母</strong>（要分析的参数），在每个需要参数值的选项字母后面加一个冒号，其参数紧跟在选项后面或者隔一个空格；如果选项字母后面加了 2 个冒号，则参数和选项之间不能有空格。 <code>getopt</code>  会基于定义的 <code>optstring</code>  解析提供的参数。</p>\n<p><code>paramters</code>  是实际的参数列表。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 举个例子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~$ getopt ab:cd <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-b</span> test1 <span class=\"token parameter variable\">-cd</span> test2 test3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-b</span> test1 <span class=\"token parameter variable\">-c</span> <span class=\"token parameter variable\">-d</span> -- test2 test3</pre></td></tr></table></figure><p>上面例子可以看到， <code>optstring</code>  是 <code>ab:cd</code> ，规定了命令可以接受的有效的选项 <code>a,b,c,d</code> 。 <code>b</code>  的后面有冒号，所以 <code>-b</code>  选项后面必须跟一个参数，例子中是 <code>test1</code> 。 <code>-a -b test1 -cd test2 test3</code>  是 <code>parameters</code> ，里面出现的选项不能是 <code>optstring</code>  之外的选项。</p>\n<p>注意，它会自动将 <code>-cd</code>  选项分为两个单独的选项，并<strong>插入双破折号</strong>来分隔行中的额外参数。</p>\n<p>为了帮你更好理解这个命令，我们会写一个脚本，但是在这之前，我希望你能知道 <code>set</code>  命令。该命令会将位置参数设置为固定的值</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span> <span class=\"token variable\">$3</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> -- 参数1 参数2 参数3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span> <span class=\"token variable\">$3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./new_File para1 para2 para3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>para1 para2 para3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>参数1 参数2 参数3</pre></td></tr></table></figure><p>现在写一个脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#set -- 会将命令行参数替换成 set 命令的命令行值，挺重要的</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#-q 可以去掉报错信息，$@是得到脚本后面跟着的参数（字符串形式，同一个字符串多个单词）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token builtin class-name\">set</span> -- <span class=\"token variable\"><span class=\"token variable\">$(</span>getopt <span class=\"token parameter variable\">-q</span> ab:cd <span class=\"token string\">\"<span class=\"token variable\">$@</span>\"</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$1</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span>\"</span> <span class=\"token keyword\">in</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    -a<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -a option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    -b<span class=\"token punctuation\">)</span> <span class=\"token assign-left variable\">param</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$2</span>\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -b option,with parameter value <span class=\"token variable\">$param</span>\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token builtin class-name\">shift</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    -c<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -c option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    --<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">shift</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token builtin class-name\">break</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    *<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$1</span> is not an option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token builtin class-name\">shift</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>所以，我们平时使用的命令的选项 + 参数，其原理差不多就是这样的（当然不排除更复杂的）。(⊙﹏⊙)，我觉得加上这个脚本例子，你应该很明白 <code>getopt</code>  到底是干什么的了吧。</p>\n<h1 id=\"getopts命令\"><a class=\"anchor\" href=\"#getopts命令\">#</a> getopts 命令</h1>\n<p>没错，我当时也很难受，费工夫理解 <code>getopt</code>  之后，又来一个。</p>\n<p>该命令内建于 <code>bash shell</code> ，比 <code>getopt</code>  多了一些扩展功能。使用格式为： <code>getopts optstring variable</code> <br />\n<strong> 每次只处理命令行一个参数</strong>，处理完所有参数后，就会退出并返回一个大于 0 的退出码。</p>\n<ol>\n<li>如果要想 <code>getiopt -q</code>  那样去掉错误信息，需要在 <code>optstring</code>  前加上一个冒号。</li>\n<li><code>getopts</code>  命令会将当前参数（选项）保存在命令行中定义的 <code>variable</code>  中</li>\n<li><code>getopts</code>  命令会用到两个环境变量。选项如果需要一个参数值， <code>OPTARG</code>  环境变量就会保存这个值。 <code>OPTIND</code>  环境变量保存参数列表中 <code>getopts</code>  正在处理的参数位置。</li>\n</ol>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 根据第 2 点，当前选项会被保存在 opt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">getopts</span> :ab:c opt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token string\">\"<span class=\"token variable\">$opt</span>\"</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># 我写的是 a 而不是 - a</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        a<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -a option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        b<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -b option,with value <span class=\"token variable\">$OPTARG</span>\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\"># 选项后的参数值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        c<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Found the -c option\"</span> <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        *<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Unkown option:<span class=\"token variable\">$opt</span>\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">esac</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>如果我给的真实的参数列表为：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-btest1</span> <span class=\"token parameter variable\">-c</span> test2 test3</pre></td></tr></table></figure><p>得到的结果就是</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Found the <span class=\"token parameter variable\">-a</span> option</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Found the <span class=\"token parameter variable\">-b</span> option,with value test1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:3</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Found the <span class=\"token parameter variable\">-c</span> option</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:4</pre></td></tr></table></figure><p>从该脚本中，我们看到了 <code>getopts</code>  如何根据两个系统变量进行参数控制的。我们不妨将脚本内容改一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 根据第 2 点，当前选项会被保存在 opt 中</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">getopts</span> :ab:c opt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token comment\"># case \"$opt\" in</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">#    a) echo \"Found the -a option\" ;;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">#    b) echo \"Found the -b option,with value $OPTARG\" ;; # 选项后的参数值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">#    c) echo \"Found the -c option\" ;;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">#   *) echo \"Unkown option:$opt\";;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">#esac</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$opt</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"OPTIND的值为:<span class=\"token environment constant\">$OPTIND</span>\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>参数列表不变</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt <span class=\"token parameter variable\">-a</span> <span class=\"token parameter variable\">-btest1</span> <span class=\"token parameter variable\">-c</span> test2 test3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>b</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:3</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>c</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token environment constant\">OPTIND</span>的值为:4</pre></td></tr></table></figure><p>在 <code>opt=c</code>  之后还进行了一次循环，此时 opt 应该是到了其他参数（ <code>test2,test3</code> ）那里，但是不会存储相应的值， <code>opt</code>  只存储选项的值。</p>\n<h1 id=\"read命令\"><a class=\"anchor\" href=\"#read命令\">#</a> read 命令</h1>\n<p><code>read</code>  命令用于获取用户输入：</p>\n<ul>\n<li><code>read name</code>  输入的数据就会保存在 <code>name</code>  中。</li>\n<li><code>read -p &quot;Please enter your age:&quot; age</code> ，  <code>-p</code>  参数允许指定输入提示语句。</li>\n<li><code>read -p &quot;Please enter your name:&quot; firstname lastname</code>  可以指定多个变量，如果输入大于变量个数，就会将剩下的输入全部保存在最后一个变量中。</li>\n<li>不指定保存变量时，会将输入保存在环境变量 <code>REPLY</code>  中。</li>\n<li><code>read -t 5 age</code>  设置超时选项，如果规定时间没有完成输入，就会继续执行，单位是秒。</li>\n<li><code>read -n1 -p &quot;Please enter [Y/N] to continue:&quot; ans</code> ，可以通过 <code>-n</code>  对输入长度进行限制，数字可以与选项 <code>-n</code>  一起使用。给的例子中并且只要按下单个字符后，不需要按回车就会继续执行。</li>\n<li><code>read -s -p &quot;Please enter the password:&quot; passwd</code> ， <code>-s</code>  会让输入时数据隐藏。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 从文件中读取，每次调用 read 命令就会读取一行文本，当文件没有内容时，read 就会退出并返回非 0 退出状态码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 文件数据传给 read，最常见的就是使用 cat，将结果通过管道直接传给含有 read 命令的 while 命令</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">cat</span> data.txt <span class=\"token operator\">|</span> <span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">read</span> line</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Line <span class=\"token variable\">$count</span>:<span class=\"token variable\">$line</span>\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token assign-left variable\">count</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token variable\">$count</span> + <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Finished proceessign the file\"</span></pre></td></tr></table></figure><h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>请多加练习。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(2)/",
            "url": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(2)/",
            "title": "构建基本脚本(2)",
            "date_published": "2022-08-01T10:09:46.000Z",
            "content_html": "<h1 id=\"数学运算\"><a class=\"anchor\" href=\"#数学运算\">#</a> 数学运算</h1>\n<p>在脚本中进行数学运算有很多种方式，你可以从下面选几种喜欢的</p>\n<ul>\n<li><code>exper</code>  命令，支持基本的（逻辑、比较）运算符，对于有歧义的符号 (如 <code>*</code> )，需要用 <code>\\*</code> ，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWV4cHIuaHRtbA==\">传送门</span>。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># expr 表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">expr</span> length “this is a test”\t<span class=\"token comment\">#计算字串长度</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">expr</span> <span class=\"token number\">14</span> % <span class=\"token number\">9</span>\t\t<span class=\"token comment\">#整数运算</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">expr</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">\\</span>* <span class=\"token number\">10</span>\t<span class=\"token comment\">#注意。参数和符号之间必须要有空格</span></pre></td></tr></table></figure><ul>\n<li><code>$[表达式]</code> ，更加方便，符号不会出现歧义，但是只能整数运算。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span>$<span class=\"token punctuation\">[</span><span class=\"token number\">1</span>+5<span class=\"token punctuation\">]</span></pre></td></tr></table></figure><ul>\n<li><code>bc</code>  计算器，实际上是一种编程语言， <code>-q</code>  可以不显示 <code>bash</code>  计算器冗长的欢迎信息。浮点运算是由内建变量 <code>scale</code>  控制的，必须将这个值设置为计算结果希望保留的小数位数 <code>scale</code>  默认是 0。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">bc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 欢迎信息</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">bc</span> <span class=\"token number\">1.07</span>.1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Copyright <span class=\"token number\">1991</span>-1994, <span class=\"token number\">1997</span>, <span class=\"token number\">1998</span>, <span class=\"token number\">2000</span>, <span class=\"token number\">2004</span>, <span class=\"token number\">2006</span>, <span class=\"token number\">2008</span>, <span class=\"token number\">2012</span>-2017 Free Software Foundation, Inc.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>This is <span class=\"token function\">free</span> software with ABSOLUTELY NO WARRANTY.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>For details <span class=\"token builtin class-name\">type</span> `warranty<span class=\"token string\">'.</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>1+3</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>4</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>319+42</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>361</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cyan@cyan-virtual-machine:~$ bc -q</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>21/3</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>7</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>#内建变量不能在外面修改</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cyan@cyan-virtual-machine:~$ echo $scale</pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>cyan@cyan-virtual-machine:~$ bc -q</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>scale=3 #进入bc修改内建变量</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>21/3</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>7.000</pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre># 还有一种修改内建变量的方法，常用于脚本中，格式为echo \"options;expression\" | bc</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>cyan@cyan-virtual-machine:~$ echo '</span><span class=\"token number\">21</span>/4<span class=\"token string\">' | bc</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>5</pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>cyan@cyan-virtual-machine:~$ echo '</span>scale<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span><span class=\"token number\">21</span>/4' <span class=\"token operator\">|</span> <span class=\"token function\">bc</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token number\">5.2500</span></pre></td></tr></table></figure><p>可见，通过管道， <code>bc</code>  计算器还是挺好用的。再看一个输入重定向的例子</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">cat</span> math.dat</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">scale</span><span class=\"token operator\">=</span><span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">var1</span><span class=\"token operator\">=</span><span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">var2</span><span class=\"token operator\">=</span><span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">var3</span><span class=\"token operator\">=</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>var1/var3+var2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token assign-left variable\">result</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">bc</span> <span class=\"token operator\">&lt;</span> math.dat<span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$result</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">29.2000</span></pre></td></tr></table></figure><p>有一点你可以看到，我们在 <code>bc</code>  中使用变量没有加 <code>$</code>  符号。最后，你也可以试试<strong>内联输入重定向</strong>，我想，应该没什么问题吧？</p>\n<h1 id=\"结构化语句\"><a class=\"anchor\" href=\"#结构化语句\">#</a> 结构化语句</h1>\n<p>该部分我就直接给格式了，你记住了就会使用。</p>\n<h2 id=\"选择语句\"><a class=\"anchor\" href=\"#选择语句\">#</a> 选择语句</h2>\n<p>我们如何对 <code>if</code>  中的条件进行判断？</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> condition1      <span class=\"token comment\">#(退出状态码是 0)   </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands_1</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">elif</span> condition2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    commands_2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    commands_3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr></table></figure><p><code>condition</code>  可以是一个命令的正确执行，也可以是字符串比较，数值比较，文件比较。</p>\n<p>判断 <code>condition</code>  的命令为 <code>test condtion</code>  或者 <code>[ condition ](必须有空格)</code> 。同样的，如果有多个 <code>condition</code>  可以使用 <code>&amp;&amp; , ||</code> 。</p>\n<p>举个例子</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token parameter variable\">-ge</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$var</span> <span class=\"token parameter variable\">-le</span> <span class=\"token number\">190</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">then</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'执行if语句块'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'执行else语句块'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">fi</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>执行if语句块</pre></td></tr></table></figure><p>再次声明，使用 <code>[]</code>  要加<strong>空格</strong>。</p>\n<h2 id=\"比较方式\"><a class=\"anchor\" href=\"#比较方式\">#</a> 比较方式</h2>\n<p><strong>数值比较</strong>： <code>n1 -eq n2</code></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号选项</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-eq</td>\n<td style=\"text-align:center\">equals(==)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-gt</td>\n<td style=\"text-align:center\">greater than(&gt;)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ge</td>\n<td style=\"text-align:center\">greater equals(&gt;=)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-lt</td>\n<td style=\"text-align:center\">less than(&lt;)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-le</td>\n<td style=\"text-align:center\">less equals(&lt;=)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-ne</td>\n<td style=\"text-align:center\">not equals(!=)</td>\n</tr>\n</tbody>\n</table>\n<p><code>if [ $val -gt 5]</code>  ，注意，bash shell 只能使用整数。</p>\n<p><strong>字符串比较</strong>：</p>\n<p>直接使用 <code>=,!=,\\&gt;,\\&lt;</code> (大于小于，必须使用转义，否则就会被认为是重定向)。 在比较测试中，<strong>大写字母 &lt; 小写字母</strong>，如 <code>a&gt;z&gt;A</code> 。而 <code>sort</code>  命令恰好相反， <code>sort</code>  使用的是系统本地化语言设置中定义的排序顺序。对于英语，<strong>本地化设置指定在排序顺序中，小写字母出现在大写字母前</strong>。</p>\n<p><code>-n</code>  和 <code>-z</code>  可以检查一个变量是否含有数据 (未被定义的变量默认长度为 0)</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>if<span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-n</span> <span class=\"token variable\">$val</span> <span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#如果 val 长度不为 0，就执行 then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>if<span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token variable\">$val</span> <span class=\"token punctuation\">]</span>\t<span class=\"token comment\">#如果 val 长度为 0，就执行 then，z--zero</span></pre></td></tr></table></figure><p><strong>文件比较</strong>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">符号选项</th>\n<th style=\"text-align:center\">含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-d file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是一个目录 (directory)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-e file</td>\n<td style=\"text-align:center\">检查 file 是否存在 (exits)</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-f file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否是一个文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-r file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否可读</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-s file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否非空</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否可写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-x file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否可执行</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-G file</td>\n<td style=\"text-align:center\">检查 file 是否存在并且默认组与当前用户相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-O file</td>\n<td style=\"text-align:center\">检查 file 是否存在并是否并属当前用户所有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">file1 -nt file2</td>\n<td style=\"text-align:center\">检查 file1 是否比 file2 新</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">file1 -ot file2</td>\n<td style=\"text-align:center\">检查 file1 是否比 file2 旧</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"case语句\"><a class=\"anchor\" href=\"#case语句\">#</a> case 语句</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">case</span> variable <span class=\"token keyword\">in</span>                            </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pattern1 <span class=\"token operator\">|</span> pattern2<span class=\"token punctuation\">)</span>    commands1<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pattern3<span class=\"token punctuation\">)</span>   commands2<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>                         </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*<span class=\"token punctuation\">)</span> defalut commands3<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>                      </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">esac</span>                                       </pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 例子</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">case</span> <span class=\"token environment constant\">$USER</span> <span class=\"token keyword\">in</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Bob <span class=\"token operator\">|</span> Mike<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Number one\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Cyan<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cyan\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>*<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Have not found\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">esac</span></pre></td></tr></table></figure><h2 id=\"循环语句\"><a class=\"anchor\" href=\"#循环语句\">#</a> 循环语句</h2>\n<h3 id=\"for循环\"><a class=\"anchor\" href=\"#for循环\">#</a> for 循环</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">var</span> <span class=\"token keyword\">in</span> list         </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands                </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span>                    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#例子</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">test</span> <span class=\"token keyword\">in</span> Alabama Alaska Arizona Arkansas California</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token builtin class-name\">echo</span> The state is <span class=\"token variable\">$test</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>$test</code>  变量在剩余的 <code>shell</code>  脚本一直有效并且保持着最后一个变量的值 (当然是可以修改的)</p>\n</li>\n<li>\n<p><code>list</code>  中单个元素出现了单引号，空格等，要么在这个单独变量外部直接再使用一对引号，要么直接使用 <code>\\</code>  转义字符</p>\n</li>\n<li>\n<p><code>list</code>  的获取，也可以用<strong>命令的输出 + 命令替换</strong>： <code>for var in $(cat file)</code> ，甚至是 <code>/home/cyan/test/*</code>  路径。当然，如果变量是文件名，要考虑文件名可能出现空格，那么在使用时就要使用引号： <code>&quot;$file&quot;</code> 。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 模拟 ls 指令，打印指定目录下的所有文件（当然这里目录固定为 home/cyan）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 如果想像 ls 路径那样传参数，需要用到之后的知识</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file_name</span> <span class=\"token keyword\">in</span> /home/cyan/*</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$file_name</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>/home/cyan/Desktop</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>/home/cyan/Documents</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>/home/cyan/Downloads</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>/home/cyan/Files</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>/home/cyan/Music</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>/home/cyan/OSIntroduction</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>/home/cyan/Pictures</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>/home/cyan/Public</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>/home/cyan/shtool-2.0.8</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>/home/cyan/shtool-2.0.8.tar.gz</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>/home/cyan/snap</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>/home/cyan/Templates</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>/home/cyan/Videos</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>/home/cyan/vmware-tools-distrib</pre></td></tr></table></figure><ul>\n<li>在 <code>list</code>  中，各个元素之间的分隔符是由 <code>IFS</code> -- 内部字段分隔符决定的，一般会将<strong>空格，制表符，换行符</strong>作为默认字段分隔符如果想要更改分隔符，就必须在 <code>shell</code>  脚本 <code>for</code>  循环前面更改 <code>IFS</code> 。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> data</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>jack bob cyan mike</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>mary smith</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">name</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> data<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$name</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#得到的结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>jack</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>bob</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>cyan</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>mike</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>mary</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>smith</pre></td></tr></table></figure><p>这是因为 <code>IFS</code>  默认的是空格，制表符，换行符。在遇到第一个空格时，就已经分隔了。如果想要只以换行符为分隔符</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">oldIFS</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$IFS</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">$'<span class=\"token entity\" title=\"\\n\">\\n</span>'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">file_name</span> <span class=\"token keyword\">in</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">cat</span> data<span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$file_name</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token variable\">$oldIFS</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./tmp.txt</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>jack bob cyan mike</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mary smith</pre></td></tr></table></figure><p>C 语言风格的 for 循环</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token variable\"><span class=\"token punctuation\">((</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span> <span class=\"token punctuation\">))</span></span> <span class=\"token comment\"># i=$(expr $i+1)  i=$[$i + 1]   i=$(echo \"scale=0;$i + 1\" | bc)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><h3 id=\"while循环\"><a class=\"anchor\" href=\"#while循环\">#</a> while 循环</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">test</span> conitions</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># test 的替代物 [] 需要两边空格，而 expr 的替代物 $[] 不需要两边空格</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># while 命令允许执行多个测试命令，但是只有最后一个测试命令的退出状态码会被用于决定什么时候结束循环</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#   比如：while [$var1 -ge 0]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#               echo $var1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#   就是一个死循环</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#注意，每个测试命令单独一行</span></pre></td></tr></table></figure><h3 id=\"until命令\"><a class=\"anchor\" href=\"#until命令\">#</a> until 命令</h3>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">until</span> <span class=\"token builtin class-name\">test</span> commands</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    commands</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># until 语句，只有测试条件的退出码非 0，才会执行循环中列出的命令。</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(1)/",
            "url": "https://cecilia.cool/2022/08/01/Shell/%E6%9E%84%E5%BB%BA%E5%9F%BA%E6%9C%AC%E8%84%9A%E6%9C%AC(1)/",
            "title": "构建基本脚本(1)",
            "date_published": "2022-08-01T02:11:11.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>之前在 <code>shell</code>  快速入门中已经讲了如何构建一个脚本，我们回顾一下：</p>\n<ul>\n<li>第一行要指定 shell 类型 <code>#!/bin/bash</code> 。</li>\n<li>完成基本的脚本构建后，增加执行权限 <code>chmod u+x 文件名(u是属主)</code> 。</li>\n<li>要取消 <code>echo</code>  的换行，就要使用 <code>-n</code>  参数 <code>echo -n &quot;abcd&quot;</code> 。</li>\n<li>使用美元符号 <code>$</code>  来引用变量，如果想单纯使用这个符号，要加上转义符 <code>\\$</code> 。</li>\n<li>在脚本中自行设置变量时，= 之间不能有空格，不然 shell 会认为是命令而不是变量 <code>var=100</code> 。</li>\n</ul>\n<p>本文会接着介绍其他与脚本编程相关的知识。</p>\n<h1 id=\"命令替换\"><a class=\"anchor\" href=\"#命令替换\">#</a> 命令替换</h1>\n<p><code>shell</code>  脚本最有用的特性之一就是可以<strong>从命令输出中提取信息</strong>，请 <code>get</code>  关键词，<strong>命令输出</strong>和<strong>提取信息</strong>。</p>\n<p>该特性有两种实现方式：</p>\n<ul>\n<li>使用反引号（就是 <code>Tab</code>  键上面那个）</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#date 命令可以得到当前时间 cyan@cyan-virtual-machine:~/Templates$ cat new_File</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span> <span class=\"token operator\">></span> new_File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:42:33 CST</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:21:55 CST</pre></td></tr></table></figure><ul>\n<li>使用 <code>$()</code> ，有些 <code>shell</code>  不支持这种</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span><span class=\"token variable\">)</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:23:19 CST</pre></td></tr></table></figure><p>命令替换会创建一个子 <code>shell</code>  来运行对应命令，子 <code>shell</code>  是由运行脚本的 <code>shell</code>  创建的一个独立的子 <code>shell</code> 。因此，该子 <code>shell</code>  所执行的命令是无法使用脚本中所创建的变量的。在命令行提示符下使用路径./ 来运行命令，也会创建子 <code>shell</code></p>\n<p>关于 <code>date</code>  命令，你如果希望得到自己希望的格式化结果</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">date</span> +%y-%m-%d<span class=\"token punctuation\">\\</span> %H:%M:%S</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">22</span>-08-01 <span class=\"token number\">10</span>:25:33</pre></td></tr></table></figure><h1 id=\"重定向\"><a class=\"anchor\" href=\"#重定向\">#</a> 重定向</h1>\n<p>从这里开始，你就算接触流这个东西了，输入流输出流，<strong>重定向就是对流的方向重新定义</strong>（你现在可以这么理解）。</p>\n<h2 id=\"标准输出重定向\"><a class=\"anchor\" href=\"#标准输出重定向\">#</a> 标准输出重定向</h2>\n<p>举一个例子， <code>echo</code>  将数据打印到屏幕上（标准输出流），那么我们可以对 <code>echo</code>  的流的方向重新<strong>指向</strong></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">214391248</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">`</span><span class=\"token function\">date</span><span class=\"token variable\">`</span></span> <span class=\"token operator\">></span> new_File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> new_File</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">2022</span>年 08月 01日 星期一 <span class=\"token number\">10</span>:42:33 CST</pre></td></tr></table></figure><p>从上面代码可以看到， <code>echo</code>  通过 <code>&gt;</code>  符号，将输出重定向到 <code>new_File</code>  这个文件里面了。并且<strong>先清空文件原本内容</strong>。</p>\n<p><code>command &gt;&gt; outputfile</code>   是追加模式。</p>\n<h2 id=\"标准输入重定向\"><a class=\"anchor\" href=\"#标准输入重定向\">#</a> 标准输入重定向</h2>\n<p>将文件内容重定向到命令： <code>command &lt; inputfile</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># wc 命令可以对数据文本进行计数：文本行数  文本字数  文本字节数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">wc</span> <span class=\"token operator\">&lt;</span> new_File</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span>  <span class=\"token number\">6</span> <span class=\"token number\">43</span></pre></td></tr></table></figure><p>这里有个需要注意的地方就是， <code>&lt;</code>  是改变标准输出（屏幕）， <code>&gt;</code>  是改变标准输入（键盘）。<strong>重定向不是代替参数，而是改变标准输入输出</strong>。</p>\n<p>比如以下命令就不行</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">&lt;</span> new_File</pre></td></tr></table></figure><p><code>echo</code>  的使用格式是 <code>echo 参数</code> ，重定向不能替代参数。</p>\n<p><code>wc</code>  后面接收的可以是标准输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">wc</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>line1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>line2</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token number\">2</span>       <span class=\"token number\">2</span>      <span class=\"token number\">12</span> <span class=\"token comment\"># 使用 ctrl+d 结束命令并统计</span></pre></td></tr></table></figure><h2 id=\"内联重定向\"><a class=\"anchor\" href=\"#内联重定向\">#</a> 内联重定向</h2>\n<blockquote>\n<p>可以参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTU2MTA0L2FydGljbGUvZGV0YWlscy8xMTAzNzU4ODk=\">https://blog.csdn.net/qq_38156104/article/details/110375889</span></p>\n</blockquote>\n<p>替换文件为文本，数据流向命令： <code>command &lt;&lt; 特殊字符</code></p>\n<p>数据的开始和结束文本标记要一致。本质就是将开始符和结束符之间的数据传给命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">wc</span> <span class=\"token operator\">&lt;&lt;</span>EOF</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token number\">123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">></span> <span class=\"token number\">4142</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">></span> EOF</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token number\">2</span> <span class=\"token number\">9</span></pre></td></tr></table></figure><h1 id=\"管道\"><a class=\"anchor\" href=\"#管道\">#</a> 管道</h1>\n<p>一个命令的<strong>标准输出</strong>作为另一个命令的标准输入</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-qa</span> <span class=\"token operator\">></span> rpm.list</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sort</span> <span class=\"token operator\">&lt;</span> rpm.list</pre></td></tr></table></figure><p><code>rpm</code>  命令通过 <code>RedHat</code>  包管理系统 ( <code>RPM</code> ) 对系统上安装的软件包进行管理。配合 <code>-qa</code>  选项使用时，会生成已安装包的列表，尽管不会排序。(虽然我在终端执行上面两个命令没啥反应)</p>\n<p>重定向在命令之间数据传输比较繁琐，使用管道  <code>|</code>  解决。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">command</span> <span class=\"token operator\">|</span> <span class=\"token builtin class-name\">command</span></pre></td></tr></table></figure><p>为了更好了解管道，我写了一个 <code>c</code>  程序，文件为 <code>test.c</code> 。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./tmp\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">char</span> bf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>bf<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">//printf(\"%s\",bf);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>linux</code>  中可以用 <code>cat</code>  查看，如果在后面接上 <code>sort</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> test.c <span class=\"token operator\">|</span> <span class=\"token function\">sort</span></pre></td></tr></table></figure><p>其输出结果为</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">char</span> bf<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>end<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>start<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">int</span> fd <span class=\"token operator\">=</span> <span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./tmp\"</span><span class=\"token punctuation\">,</span>O_RDONLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">.</span>tv_usec <span class=\"token operator\">-</span> start<span class=\"token punctuation\">.</span>tv_usec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">//printf(\"%s\",bf);</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span>bf<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/31/Shell/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/",
            "url": "https://cecilia.cool/2022/07/31/Shell/Linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/",
            "title": "Linux文件权限",
            "date_published": "2022-07-31T11:19:13.000Z",
            "content_html": "<h1 id=\"linux安全性\"><a class=\"anchor\" href=\"#linux安全性\">#</a> Linux 安全性</h1>\n<p><code>Linux</code>  安全系统核心是用户账户，用户账户通过创建用户时分配的用户 <code>ID(UID)</code>  来跟踪。 <code>/etc/password</code>  文件将用户的登录名匹配到对应的 <code>UID</code>  的值<br />\n <code>root</code>  账户是 <code>Linux</code>  管理员，固定分配给的 <code>UID</code>  是 0。 <code>Linux</code>  会为各种各样的功能创建不同的用户账户，这些账户不是真正的用户，而是系统账户，是系统上运行各种服务进程访问资源用的特殊账户。所有运行在后台的服务都需要用一个系统用户账户登录到 Linux 系统上！！<strong>在意识到安全问题之前</strong>，许多服务都用 <code>root</code>  登陆，如果其中一个服务被攻陷， <code>root</code>  权限就会被入侵。</p>\n<p><code>/etc/shadow</code>  文件，该文件记录各个账户之间密码记录。该文件只有 <code>root</code>  才有权限操作，所以如果我们不是 <code>root</code>  用户登录，就需要使用 <code>sudo</code>  命令。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">sudo</span> <span class=\"token function\">cat</span> /etc/shadow</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>sudo<span class=\"token punctuation\">]</span> password <span class=\"token keyword\">for</span> cyan:</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>root:<span class=\"token operator\">!</span>:18999:0:99999:7:::</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 其他信息就不展示了</span></pre></td></tr></table></figure><p>每一行就是一个用户，分为九个字段，分别是:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoZXJsb2NrbWovYXJ0aWNsZS9kZXRhaWxzLzEwNjc4NjUyMA==\"> 参考文章传送门</span></p>\n<ul>\n<li>与 <code>/etc/passwd</code>  文件中对应的登录名。</li>\n<li><strong>加密后</strong>的密码，也就是说，你不能直接看到这个密码。</li>\n<li>自上次修改密码后过去的天数，上面的 <code>root</code>  是 18999，就是从 1970.1.1 不断累加得到的时间，可以使用命令  <code>date -d &quot;1970-01-01 18999 days&quot;</code>  查看具体时间。</li>\n<li>最小修改时间间隔，该字段规定了从第 3 字段（最后一次修改密码的日期）起，<strong>多长时间之内不能修改密码</strong>。如果是 0，则密码可以随时修改；如果是 10，则代表密码修改后 10 <strong>天</strong>之内不能再次修改密码。</li>\n<li>密码有效期，默认值为 99999，也就是 273 年。</li>\n<li>密码需要变更前的警告天数，当账户密码有效期快到时，系统会发出警告信息给此账户，提醒用户 &quot;再过 n 天你的密码就要过期了，请尽快重新设置你的密码！&quot;。</li>\n<li>密码过期后的宽限天数，过期后，在宽限天数内还是可以登录。</li>\n<li>账号失效时间，该字段通常被使用在具有收费服务的系统中。</li>\n<li>最后一个，保留，还没有使用。</li>\n</ul>\n<h1 id=\"添加新用户\"><a class=\"anchor\" href=\"#添加新用户\">#</a> 添加新用户</h1>\n<p>使用 <code>useradd</code>  命令，可以一次性创建新用户账户及设置用户 <code>HOME</code>  目录结构。 <code>useradd</code>  命令使用系统默认值以及命令行参数设置用户账户。</p>\n<p>系统默认值被设置在 <code>/etc/default/useradd</code> ，可以使用 <code>useradd -D</code>  检查默认值</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token function\">useradd</span> <span class=\"token parameter variable\">-D</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">GROUP</span><span class=\"token operator\">=</span><span class=\"token number\">100</span>\t\t<span class=\"token comment\"># 新用户被添加到 GID=100 的公共组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">HOME</span></span><span class=\"token operator\">=</span>/home\t\t<span class=\"token comment\"># 新的 home 目录位于 /home/loginname</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">INACTIVE</span><span class=\"token operator\">=</span>-1\t\t<span class=\"token comment\"># 密码过期后不会被禁用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token assign-left variable\">EXPIRE</span><span class=\"token operator\">=</span>\t\t\t<span class=\"token comment\"># 未设置过期日期</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token assign-left variable\"><span class=\"token environment constant\">SHELL</span></span><span class=\"token operator\">=</span>/bin/sh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token assign-left variable\">SKEL</span><span class=\"token operator\">=</span>/etc/skel\t<span class=\"token comment\"># 将 /etc/skel 目录下内容复制到用户的 home 下</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token assign-left variable\">CREATE_MAIL_SPOOL</span><span class=\"token operator\">=</span>no\t<span class=\"token comment\"># 是否为该用户在 mail 目录下创建一个接受邮件的文件</span></pre></td></tr></table></figure><p>上述的系统默认值是可以更改的，在 <code>useradd</code>  时，加入参数进行更改</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter variable\">-b</span>  default_home    <span class=\"token comment\"># 更改默认的创建用户 HOME 目录的位置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter variable\">-e</span>  expirtion_date  <span class=\"token comment\"># 更改默认的新账户的过期日期</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token parameter variable\">-f</span>  inactive        <span class=\"token comment\"># 更改默认的新用户从密码过期到账户被禁用的天数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-g</span>  group           <span class=\"token comment\"># 更改默认的组名称或 GID</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-s</span>  shell           <span class=\"token comment\"># 更改默认登录 shell</span></pre></td></tr></table></figure><h1 id=\"删除用户\"><a class=\"anchor\" href=\"#删除用户\">#</a> 删除用户</h1>\n<p><code>userdel</code>  命令，默认情况下只会删除 <code>/etc/passwd</code>  文件中的用户信息，而不会删除系统中属于该账户的任何文件， <code>userdel -r</code>  会删除用户的 HOME 目录以及邮件目录。</p>\n<h1 id=\"修改用户\"><a class=\"anchor\" href=\"#修改用户\">#</a> 修改用户</h1>\n<p><code>usermod,chsh,chfn,chage</code>  这几个指令要用到再自己百度，平时用不到，隔不了多久就会忘记。</p>\n<h1 id=\"linux组\"><a class=\"anchor\" href=\"#linux组\">#</a> Linux 组</h1>\n<p>linux 通过将具有相同特性的用户划归为一个组，可以大大简化用户的管理，方便用户之间文件的共享。任何一个用户都至少属于一个组，这个组称为初始组，可以同时属于多个附加组。用户不仅拥有初始组的权限，还拥有附加组的权限。</p>\n<p>在 <code>/etc/group</code>  文件中，包含系统上用到的每个组的信息，4 个字段：<strong>组名：组密码：GID: 属于该组的用户列表</strong></p>\n<p>用户列表中某些组没有列出用户，并不代表没有成员，只是加入了成员，不会出现在该文件中。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 创建组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">groupadd</span> 组名</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 后期将成员加入到指定组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">usermod</span> <span class=\"token parameter variable\">-G</span> 组名 成员名</pre></td></tr></table></figure><h1 id=\"文件权限\"><a class=\"anchor\" href=\"#文件权限\">#</a> 文件权限</h1>\n<p>在本系列第一篇文章中，为了运行一个新建脚本，需要使用 <code>chmod u+x 文件名</code> 。查看一个文件，我们可以使用 <code>ll</code></p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>total <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>drwxr-xr-x  <span class=\"token number\">2</span> cyan cyan <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">30</span> <span class=\"token number\">19</span>:09 ./</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>drwxr-xr-x <span class=\"token number\">21</span> cyan cyan <span class=\"token number\">4096</span> <span class=\"token number\">7</span>月  <span class=\"token number\">30</span> <span class=\"token number\">19</span>:09 <span class=\"token punctuation\">..</span>/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>-rw-rw-r--  <span class=\"token number\">1</span> cyan cyan    <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">28</span> <span class=\"token number\">15</span>:50 new_File</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>-rwxrw-r--  <span class=\"token number\">1</span> cyan cyan   <span class=\"token number\">49</span> <span class=\"token number\">7</span>月  <span class=\"token number\">30</span> <span class=\"token number\">19</span>:09 test*</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>-rwxrw-r--  <span class=\"token number\">1</span> cyan cyan   <span class=\"token number\">31</span> <span class=\"token number\">7</span>月  <span class=\"token number\">29</span> <span class=\"token number\">16</span>:18 test_1.sh*</pre></td></tr></table></figure><p>得到的结果中，第一位有些是 <code>d</code> ，有些是 <code>-</code> 。第一个代表了文件 (-)/ 目录 (d)/ 链接 (l)/ 字符型设备 (c)/ 块设备 (b)/ 网络设备 (n)。</p>\n<p>后面一共是 9 位，每 3 位为一个部分（分别表示 rwx），这<strong>三个部分</strong>依次属于<strong>文件属主（创建文件的用户）</strong>，<strong>属组成员</strong>，<strong>其他用户</strong>权限。</p>\n<p>目录或者文件一开始创建时，会授予默认权限，默认权限与 <code>umask</code>  值有关。三个用户权限（<strong>三个部分</strong>）各自占用一个八进制位（0-7），一个部分的权限从 <code>'---'</code>  到 <code>'rwx'</code>  在八进制位中表示为 <code>0-7</code> ，如 <code>rw-</code>  就是 6。三个部分合在一个，就是 <code>000-777</code> ，也就是 <code>---------到rwxrwxrwx</code> 。</p>\n<p><code>umask</code>  命令用于<strong>设置</strong>创建文件或是目录的<strong>默认权限</strong>，我们先在终端输入 <code>umask</code>  命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">umask</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>0002</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 你的终端可能会输出 0022，我好像是在环境文件做过持久化更改（有点记不清了）</span></pre></td></tr></table></figure><p>第一位是一个关于特殊权限的位，可以暂时不管。后面三个与默认权限有关。</p>\n<p>对于文件而言，默认的最大权限就是 <code>666</code> ，也就是 <code>rw-rw-rw-</code> ，目录的默认最大权限是 <code>777</code> 。如果你学过计算机网络，你会知道<strong>掩码</strong>这个东西。这里就是，最大默认权限<strong>减去</strong>掩码就会得到文件（目录）创建时赋予的权限。</p>\n<p>比如我的掩码 <code>umask=0002</code> ，那么创建文件时， <code>666-002=664</code> ，得到的权限就是 <code>rw-rw-r--</code></p>\n<p>验证一下</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">touch</span> tmp.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll tmp.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-rw-rw-r-- <span class=\"token number\">1</span> cyan cyan <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">31</span> <span class=\"token number\">21</span>:30 tmp.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">umask</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>0002</pre></td></tr></table></figure><p>这里有一篇<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLjUxY3RvLmNvbS91XzE1MTI3NjczLzI4MDM1MTc=\">文章</span>参考。</p>\n<h1 id=\"更改权限\"><a class=\"anchor\" href=\"#更改权限\">#</a> 更改权限</h1>\n<p>通过 <code>chmod</code>  命令，可以修改文件的权限</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># chmod 3 位八进制权限码 文件名</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">chmod</span> <span class=\"token number\">777</span> tmp.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll tmp.txt</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">-rwxrwxrwx</span> <span class=\"token number\">1</span> cyan cyan <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">31</span> <span class=\"token number\">21</span>:30 tmp.txt*</pre></td></tr></table></figure><p>如果你只是想改变某一部分（属主，组内用户，其他用户）的权限，可以使用</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> u+x 文件名 <span class=\"token comment\"># 属主增加执行权限</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> g-rx 文件名 <span class=\"token comment\"># 组内用户减少</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token assign-left variable\">o</span><span class=\"token operator\">=</span>rwx 文件名 <span class=\"token comment\"># 其他用户的权限为 rwx</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 举例</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">chmod</span> g-rx tmp.txt</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ll tmp.txt</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>-rwx-w-rwx <span class=\"token number\">1</span> cyan cyan <span class=\"token number\">0</span> <span class=\"token number\">7</span>月  <span class=\"token number\">31</span> <span class=\"token number\">21</span>:30 tmp.txt*</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 说明</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># u: 表示用户 (属主)  g: 表示组  o: 表示其他  a: 表示所有</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># +: 增加  -: 减少  =: 赋值</span></pre></td></tr></table></figure>",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/31/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "url": "https://cecilia.cool/2022/07/31/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8/",
            "title": "B+树索引的使用",
            "date_published": "2022-07-31T03:57:38.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>本文主要讲解索引的具体工作原理以及代价，如何正确的建立索引才能使查询变快。在阅读本文前，请一定保证对之前更新的内容（B + 树索引）理解明白。</p>\n<p>现在我们先创建一个表，之后方便举例</p>\n<pre><code class=\"language-mysql\">create table single_table (\n    id int not null auto_increment\n    key1 varchar(100),\n    key2 int\n    key3 varchar(100),\n    key_part1 varchar(100),\n    key_part2 varchar(100),\n    key_part3 varchar(100),\n    common_field varchar(100),\n    primary key(id),\n    key idx_key1(key1),\n    unique key uk_key2(key2),\n    key idx_key3(key3),\n    key idx_key_part(key_part1,key_part2,key_part3)\n) engine=InnoDB character set=utf8; \n</code></pre>\n<h1 id=\"简化b树示意图\"><a class=\"anchor\" href=\"#简化b树示意图\">#</a> 简化 B + 树示意图</h1>\n<p>我们知道，B + 树的非叶子节点是目录项，它是为了定位下一层节点，直到在叶子节点找到对应的记录。其查询算法的本质还是在每个页中使用<strong>二分查找</strong>找到下一层对应的页。那么我们不如将 B + 树直接简化，只剩下叶子节点。</p>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/30/Shell/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3shell/",
            "url": "https://cecilia.cool/2022/07/30/Shell/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3shell/",
            "title": "深入理解shell",
            "date_published": "2022-07-30T10:36:32.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>以下是维基百科对 <code>shell</code>  的定义</p>\n<blockquote>\n<p>普通意义上的 shell 就是可以接受用户输入命令的程序，Unix 操作系统下的 shell 既是用户交互的界面，也是控制系统的脚本语言。</p>\n</blockquote>\n<p>所以我们可以理解，当你打开终端时，其实就是启动了一个 <code>shell</code> ， <code>shell</code>  有很多种，如 <code>bash,zsh,csh</code>  等。</p>\n<p>在 <code>/etc/passwd</code>  中列出了当前用户默认的 <code>shell</code> ：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:/etc$ <span class=\"token function\">cat</span> <span class=\"token function\">passwd</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>root:x:0:0:root:/root:/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan:x:1000:1000:cyan,,,:/home/cyan:/bin/bash</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>mysql:x:127:133:MySQL Server,,,:/nonexistent:/bin/false</pre></td></tr></table></figure><p>我们只看部分，可以看到使用的是 <code>bash shell</code> 。</p>\n<h1 id=\"父子shell\"><a class=\"anchor\" href=\"#父子shell\">#</a> 父子 shell</h1>\n<p>系统一开始启动的 <code>shell</code>  是父 <code>shell</code> ，在此基础上启动其他 <code>shell</code>  或是使用命令 <code>/bin/bash</code> ，被称为子 <code>shell</code> 。当前进程下的 <code>shell</code> ，在生成子 <code>shell</code>  进程时，父进程的部分环境被复制到子 <code>shell</code>  中。</p>\n<p>结合 <code>ps -f / ps --forest</code>  命令我们可以查看当前 <code>shell</code>  的关系</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 首先进入终端，然后使用 bash 开启一个新的 shell</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 ps -f 查看当前 shell，在 18:42 打开终端（父 shell，PID=67792），在 18:49 调用 bash，进入子</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># shell(PID=69555,PPID=67792,PPID--Parent PID)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-f</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token environment constant\">UID</span>          PID    <span class=\"token environment constant\">PPID</span>  C STIME TTY          TIME CMD</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan       <span class=\"token number\">67792</span>   <span class=\"token number\">67791</span>  <span class=\"token number\">0</span> <span class=\"token number\">18</span>:42 pts/1    00:00:00 <span class=\"token parameter variable\">-bash</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>cyan       <span class=\"token number\">69555</span>   <span class=\"token number\">67792</span>  <span class=\"token number\">0</span> <span class=\"token number\">18</span>:49 pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan       <span class=\"token number\">69562</span>   <span class=\"token number\">69555</span>  <span class=\"token number\">0</span> <span class=\"token number\">18</span>:49 pts/1    00:00:00 <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-f</span></pre></td></tr></table></figure><p>这么看不是很形象，可以使用 <code>--forest</code>  选项</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--forest</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">69555</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">69564</span> pts/1    00:00:00      <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr></table></figure><p>这里很明显 <code>PID=69555</code>  的 <code>bash</code>  是 <code>PID=67792</code>  的 <code>bash</code>  的子 <code>shell</code> 。可是更下面为什么还有个 <code>ps</code> ，这是后话。</p>\n<h1 id=\"进程列表\"><a class=\"anchor\" href=\"#进程列表\">#</a> 进程列表</h1>\n<p>如果你想一次性执行一系列命令，而不是执行一个输入一个，就可以在命令之间使用分号</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:/$ <span class=\"token builtin class-name\">pwd</span><span class=\"token punctuation\">;</span><span class=\"token function\">ls</span><span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">cd</span> /etc<span class=\"token punctuation\">;</span><span class=\"token builtin class-name\">pwd</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/ <span class=\"token comment\">#第一个 pwd 指令结果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>bin   cdrom  etc   lib    lib64   lost+found  mnt  proc  run   snap  swapfile  tmp  var</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>boot  dev    home  lib32  libx32  media       opt  root  sbin  srv   sys       usr</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>/etc <span class=\"token comment\"># 第二个 pwd 指令结果</span></pre></td></tr></table></figure><p>还有一种方式就是使用<strong>进程列表</strong>，需要将这些命令加入括号中， <code>(pwd;ls;cd /etc;pwd;ps -f)</code> 。这样会<strong>创建一个子 shell 来执行对应命令</strong>，其实进程列表是一种命令分组。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ls</span><span class=\"token punctuation\">;</span><span class=\"token function\">ps</span> --forest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>new_File  <span class=\"token builtin class-name\">test</span>  test_1.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">69654</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">;</span><span class=\"token function\">ps</span> --forest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>new_File  <span class=\"token builtin class-name\">test</span>  test_1.sh</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token number\">69641</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token number\">69643</span> pts/1    00:00:00      <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr></table></figure><p>很明显， <code>（ls;ps --forest)</code>  是在子 <code>shell</code>  中运行的。</p>\n<p>其实，也可以通过查看环境变量 <code>BASH_SUBSHELL</code>  查看子 shell 是否创建，该环境变量返回子 shell 的个数。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token punctuation\">(</span>echo <span class=\"token variable\">$BASH_SUBSHELL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span></pre></td></tr></table></figure><p>另一种进程分组： <code>&#123; pwd;ls;cd ~; &#125;</code>  花括号 + 末尾分号，但是<strong>不会创建子 shell</strong>, 需要注意的是，<strong>花括号与命令和分号之间存在空格</strong>。</p>\n<blockquote>\n<p>退出一个 <code>shell</code>  需要使用 <code>exit</code> ，要是使用 <code>exit</code>  时出现： <code>logout There are stopped jobs.</code> ，说明这个子 <code>shell</code>  中还存在 <code>stopped</code>  的进程，可以通过 <code>kill -9 pid</code>  强制杀死进程。</p>\n</blockquote>\n<p>为了使读者对这个问题有更好的认识，现在编写以下脚本</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#脚本文件名 test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 很明显，这是一个死循环</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>然后进入子 <code>shell</code>  执行该脚本，你会看到脚本在不断循环而不会结束，此时使用 <code>ctrl+z</code>  挂起这个线程</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ ./test</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>^Z</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Stopped                 ./test</pre></td></tr></table></figure><p>现在你就退不出子 <code>shell</code>  了，试试 <code>exit</code>  语句</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>There are stopped jobs.</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token number\">69675</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token number\">69681</span> pts/1    00:00:01 <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token number\">69683</span> pts/1    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>There are stopped jobs.</pre></td></tr></table></figure><p>很明显， <code>exit</code>  没有让你退出子 <code>shell</code> ，我们看到 <code>test</code>  进程的 <code>PID</code>  为 69681</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">kill</span> <span class=\"token parameter variable\">-9</span> <span class=\"token number\">69681</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">69675</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">69689</span> pts/1    00:00:00 <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Killed                  ./test</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr></table></figure><p>哦～有没有觉得自己一下子学了很多东西。</p>\n<h1 id=\"后台模式\"><a class=\"anchor\" href=\"#后台模式\">#</a> 后台模式</h1>\n<p>在命令后使用 <code>&amp;</code> , 将其置入后台模式，并且可以用 <code>ps / jobs</code>  来显示后台作业信息。 <code>jobs</code>  命令可以显示出当前运行在后台模式中的所有用户的进程。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">69698</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">jobs</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+ <span class=\"token number\">69698</span> Running                 <span class=\"token function\">sleep</span> <span class=\"token number\">1000</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>1 是作业号， <code>shell</code>  中运行的每个进程被称为作业。后显示作业状态以及命令，-l 显示命令 PID。使用 &amp; 将命令置入后台不会创建子 <code>shell</code> 。</p>\n<p>你应该知道为什么要将命令执行置入后台，假设你有一个一直在循环的脚本，如果这个脚本不执行完，那你就不能输入其他命令。</p>\n<h2 id=\"协程\"><a class=\"anchor\" href=\"#协程\">#</a> 协程</h2>\n<p>会后台生成子 <code>shell</code> ，子 <code>shell</code>  执行指令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ coproc <span class=\"token function\">sleep</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token number\">69704</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ps</span> <span class=\"token parameter variable\">--forest</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    PID TTY          TIME CMD</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token number\">67792</span> pts/1    00:00:00 <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token number\">69706</span> pts/1    00:00:00  <span class=\"token punctuation\">\\</span>_ <span class=\"token function\">ps</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>+  Done                    coproc COPROC <span class=\"token function\">sleep</span> <span class=\"token number\">10</span></pre></td></tr></table></figure><p>当然也可以和进程列表一起使用，还可以命名</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>coproc My_Job <span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">;</span><span class=\"token function\">sleep</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>My_Job 是进程的名字，默认是 COPROC。协程 coproc 与进程列表一起使用，会产生嵌套子 shell。<strong>需要牢记的是，生成子 shell 的成本不低</strong>。</p>\n<h1 id=\"内建命令\"><a class=\"anchor\" href=\"#内建命令\">#</a> 内建命令</h1>\n<p>现在不想更这个，鸽一下</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/29/Shell/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "url": "https://cecilia.cool/2022/07/29/Shell/Linux%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/",
            "title": "Linux环境变量",
            "date_published": "2022-07-29T07:21:39.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>在了解 <code>Linux</code>  的环境变量前，我们先了解一下变量。</p>\n<p>在脚本中使用以下代码</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">echo</span> val</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" testing... \"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">#会循环打印：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#val</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#testing...</span></pre></td></tr></table></figure><p>在脚本中我们直接定义一个变量，该怎么用呢？直接在终端定义变量，此时变量是什么？</p>\n<h1 id=\"环境变量\"><a class=\"anchor\" href=\"#环境变量\">#</a> 环境变量</h1>\n<p>划分为局部和全局变量，局部变量只对创建他们的 shell 可见，<strong>系统环境变量基本都是大写字母</strong>，区别于普通用户的环境变量，查看全局变量可以使用命令 <code>env </code> 或者 <code>printenv</code> 。</p>\n<p>查看单个变量的值： <code>printenv $HOME</code>  或者 <code>echo $HOME</code> 。这里给出几个常见的系统环境变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HOME</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/home/cyan</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>/bin/bash</pre></td></tr></table></figure><p>你可以把变量前面的美元符号 <code>$</code>  看作取值，在变量前加上 <code>$</code>  可以区分它到底是变量还是字符串。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$SHELL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/bin/bash</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">SHELL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token environment constant\">SHELL</span></pre></td></tr></table></figure><p>我们要定义自己的变量，直接定义即可</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 通过 cat 命令查看 test 文件内容</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> <span class=\"token builtin class-name\">test</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token builtin class-name\">echo</span> val</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 自定义变量 value</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token assign-left variable\">value</span><span class=\"token operator\">=</span>./test</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#尝试使用 value 来运行./test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ value</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>value: <span class=\"token builtin class-name\">command</span> not found</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#尝试使用 value 的值来运行./test，但是打印出来的不是 10，而是 val</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token variable\">$value</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>val</pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">#可见，在脚本中，变量前也需要使用 $</span></pre></td></tr></table></figure><p>看到这里你应该对变量有了大概的了解。 <code>$</code>  相当于取出变量的值，想要定义一个变量，直接定义即可。但是这里有个<strong>致命的坑</strong>，我们平时写代码，为了有较高的可读性，一般在变量和 <code>=</code>  以及值之间都会加上<strong>空格</strong>，但是这在终端里面是致命的错误</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ val <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Command <span class=\"token string\">'val'</span> not found, did you mean:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'pal'</span> from deb pal <span class=\"token punctuation\">(</span><span class=\"token number\">0.4</span>.3-8.1build4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'cal'</span> from deb bsdmainutils <span class=\"token punctuation\">(</span><span class=\"token number\">11.1</span>.2ubuntu3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vala'</span> from deb valac-bin <span class=\"token punctuation\">(</span><span class=\"token number\">0.48</span>.6-0ubuntu1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'fal'</span> from deb dnet-progs <span class=\"token punctuation\">(</span><span class=\"token number\">2</span>.65build2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vax'</span> from deb simh <span class=\"token punctuation\">(</span><span class=\"token number\">3.8</span>.1-6<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'al'</span> from deb mono-devel <span class=\"token punctuation\">(</span><span class=\"token number\">6.8</span>.0.105+dfsg-2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vam'</span> from deb vim-addon-manager <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span>.10<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'pval'</span> from deb snacc <span class=\"token punctuation\">(</span><span class=\"token number\">1.3</span>.1-7build2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token builtin class-name\">command</span> <span class=\"token string\">'vl'</span> from deb atfs <span class=\"token punctuation\">(</span><span class=\"token number\">1</span>.4pl6-14<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>Try: <span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token operator\">&lt;</span>deb name<span class=\"token operator\">></span></pre></td></tr></table></figure><p>因为加上空格， <code>shell</code> （我的是 <code>bash</code> ）就会认为，你的 <code>val</code> （变量名）是一个命令，空格后面的是该命令的参数。而 <code>shell</code>  没有找到 <code>val</code>  这个命令就会报错。</p>\n<p>其实随着之后的学习，你会越来越理解 <code>Linux</code>  中各种设计的巧妙，我们调用的一个又一个命令（大部分），说穿了其实是一个又一个可执行文件，如果你之前在给 <code>IDEA</code> ， <code>VsCode</code>  这些工具配置环境变量时好好了解过到底为什么需要环境变量，那么你很清楚我刚才在说什么。</p>\n<p>对于局部环境变量，bash 并没有什么指令可以单独显示， <code>set</code>  命令会显示为某个特定进程设置的所有环境变量，输出时会按照字母顺序排序</p>\n<h2 id=\"设置用户定义变量\"><a class=\"anchor\" href=\"#设置用户定义变量\">#</a> 设置用户定义变量</h2>\n<p>上面已经讲得差不多了，这里再给出几个需要注意的点</p>\n<ul>\n<li>如果变量的值中含有空格，请使用用单（双）引号， <code>val = &quot;hello world&quot;</code> 。</li>\n<li>定义用户变量，请坚持使用<strong>小写</strong>字母。</li>\n<li>变量名，等号，值之间不能有空格。</li>\n</ul>\n<h2 id=\"设置全局环境变量\"><a class=\"anchor\" href=\"#设置全局环境变量\">#</a> 设置全局环境变量</h2>\n<p>我们之前直接创建的变量是局部变量，对其他 <code>shell</code> （父子 <code>shell</code> ）是不可见得。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">bash</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token builtin class-name\">exit</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$var</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">10</span></pre></td></tr></table></figure><p>关于父子 <code>shell</code> ，我不会在这篇文章过多讲解，你要是求知心切，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlkdS5jb20=\">传送门</span>。</p>\n<p>你现在可以这么理解， <code>bash shell</code>  也是一个程序，我们打开终端时， <code>bash</code>  也启动了，既然 <code>bash</code>  是程序，那我们在终端也可以运行 <code>bash</code> ，这样我们就处于<strong>子 shell</strong>，<strong>父子 shell</strong> 使用不同的内存空间，所以在<strong>父 shell</strong> 创建的局部变量对<strong>子 shell</strong> 是不可见的。</p>\n<p>创建全局环境变量的方法：先创建局部环境变量，再导出到全局变量</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token assign-left variable\">var</span><span class=\"token operator\">=</span><span class=\"token string\">'global'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token string\">'global'</span> <span class=\"token comment\">#export 就是导出命令，也可以直接导出：export var=global</span></pre></td></tr></table></figure><p>在<strong>子 shell</strong> 中修改全局变量不会影响<strong>父 shell</strong> 中该变量的值。根据该性质，在<strong>子 shell</strong> 中设置全局变量是没有意义的，因为其设置的值，根本不传给父 shell。</p>\n<h2 id=\"删除环境变量\"><a class=\"anchor\" href=\"#删除环境变量\">#</a> 删除环境变量</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">unset</span> var</pre></td></tr></table></figure><p>解释：</p>\n<ul>\n<li>使用 <code>unset</code>  指令，可以直接删除变量，不需要加<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>。</mtext></mrow><annotation encoding=\"application/x-tex\">。</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord cjk_fallback\">。</span></span></span></span>的本质是，得到环境变量的值！</li>\n<li><code>printenv</code>  指定了，传入的参数就是一个环境变量（自定义变量不行），可以直接使用。</li>\n<li>在子 shell 中对全局变量的修改无能反映到父 shell，哪怕是删除</li>\n</ul>\n<h2 id=\"设置path环境变量\"><a class=\"anchor\" href=\"#设置path环境变量\">#</a> 设置 PATH 环境变量</h2>\n<p><code>PATH</code>  环境变量定义了用于进行命令和程序查找的目录。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cyan@cyan-virtual-machine:~$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$PATH</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</pre></td></tr></table></figure><ul>\n<li>如果命令或程序位置没有包含在 <code>PATH</code>  中，如果不使用路径， <code>shell</code>  是没法找到并运行的。就像上一篇文章，我们必须使用 <code>./test.sh</code>  才能运行该文件，使用 <code>test.sh</code>  是不行的。</li>\n<li>短暂的修改 <code>PATH</code>  命令就是： <code>PATH=$PATH:.</code> ，一般加 <code>.</code>  就是包含当前目录，当然也可以加其他路径。这种修改，在 <code>exit</code>  后会失效。</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看当前文件夹下文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>new_File  <span class=\"token builtin class-name\">test</span>  test_1.sh</pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 查看文件 test_1.sh 脚本内容 -- 打印 Hello World</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token function\">cat</span> test_1.sh</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello World\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># 希望直接使用这个脚本名作为命令</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ test_1.sh</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>test_1.sh: <span class=\"token builtin class-name\">command</span> not found</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\"># 将当前目录加到 PATH 中</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span>:.</pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>cyan@cyan-virtual-machine:~/Templates$ test_1.sh</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>Hello World</pre></td></tr></table></figure><p>如果你还没明白，可以参考以下这个（我觉得和我讲的差不多）<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYW5vbmdqYy5jb20vZGV0YWlsLzI0LWJyYXhocnpnY3pma3B3dC5odG1s\">如何理解 PATH</span>。如果还是不懂，真拿你没办法，就再给个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlkdS5jb20=\">真正的传送门</span>。</p>\n<h1 id=\"最后\"><a class=\"anchor\" href=\"#最后\">#</a> 最后</h1>\n<p>关于如何持久化创建一个环境变量，这涉及到修改一些系统文件，文件权限以及 <code>shell</code>  进程的一些知识，之后再说吧。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/29/Tools/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/",
            "url": "https://cecilia.cool/2022/07/29/Tools/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%8C%87%E5%8D%97/",
            "title": "Hexo搭建博客指南",
            "date_published": "2022-07-29T06:16:57.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>使用 Hexo+Github 搭建博客，因为涉及到部分插件或者安装包的下载，<sub>建议使用魔法上网</sub>。</p>\n<blockquote>\n<p>推荐文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjYyNTI0OQ==\">https://zhuanlan.zhihu.com/p/26625249</span></p>\n<p>推荐视频：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMW1VNHkxajcybj9zcG1faWRfZnJvbT0zMzMuMzM3LnNlYXJjaC1jYXJkLmFsbC5jbGljayZhbXA7dmRfc291cmNlPTVhY2Y1YTdiMjNkMjhlNzYzM2U1YTliMzgxYzU3YzQy\">https://www.bilibili.com/video/BV1mU4y1j72n?spm_id_from=333.337.search-card.all.click&amp;vd_source=5acf5a7b23d28e7633e5a9b381c57c42</span></p>\n</blockquote>\n<h1 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<h2 id=\"下载nodejs\"><a class=\"anchor\" href=\"#下载nodejs\">#</a> 下载 Node.js</h2>\n<p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vdjgv\">Chrome V8</span> 引擎的 <strong>JavaScript 运行环境</strong>。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tLw==\">npm</span>，是全球最大的开源库生态系统。</p>\n<p>官网下载:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuL2Rvd25sb2FkLw==\">https://nodejs.org/en/download/</span></p>\n<p>安装完成后，可以通过命令行查看： <code>node -v</code>  显示安装版本， <code>npm -v</code>  显示 npm 版本。新版的 Node.js 已自带 npm，安装 Node.js 时会一起安装，<strong>npm 的作用就是对 Node.js 依赖的包进行管理，也可以理解为用来安装 / 卸载 Node.js 需要的东西。</strong></p>\n<h3 id=\"环境配置\"><a class=\"anchor\" href=\"#环境配置\">#</a> 环境配置</h3>\n<p>npm 在安装 node.js 需要的依赖时，会默认放在 C 盘 <code>C:|Users|用户名\\AppData\\Roaming\\npm</code> ，所以此处我们需要手动设置 npm 安装的全局模块所在的路径，以及缓存 cache 得路径。</p>\n<p>在 nodejs 文件夹下创建 node_cache,node_global 即可。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/90aec5c64426e20a.png\" alt=\"image-20220729144241266\" /></p>\n<p>拿到相应的路径，在终端执行以下命令：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> prefix <span class=\"token string\">\"S:\\DevTools\\Nodejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_global\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> cache <span class=\"token string\">\"S:\\DevTools\\Nodejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_cache\"</span></pre></td></tr></table></figure><p>然后再配置环境变量，先配置系统变量</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/b18f9f922882f863.png\" alt=\"image-20220729144419380\" /></p>\n<p>然后再配置用户变量中的 path，之前的值为：  <code>C:\\Users\\Cyan\\AppData\\Roaming\\npm</code> ，将其改为下面的值</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/71d161b1f67a1e9f.png\" alt=\"image-20220729144448110\" /></p>\n<h2 id=\"下载git\"><a class=\"anchor\" href=\"#下载git\">#</a> 下载 Git</h2>\n<p>不多说</p>\n<h2 id=\"下载hexo\"><a class=\"anchor\" href=\"#下载hexo\">#</a> 下载 Hexo</h2>\n<p>在终端执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli <span class=\"token parameter variable\">--location</span><span class=\"token operator\">=</span>global</pre></td></tr></table></figure><p>如果下载失败，错误信息显示权限不足，那么请使用管理员身份运行 cmd。</p>\n<p>下载完成后，使用 <code>hexo -v</code>  查看 hexo 版本</p>\n<h2 id=\"github相关操作\"><a class=\"anchor\" href=\"#github相关操作\">#</a> Github 相关操作</h2>\n<p>下面操作以我的 Github 为例进行讲解。</p>\n<h3 id=\"建立仓库\"><a class=\"anchor\" href=\"#建立仓库\">#</a> 建立仓库</h3>\n<p>我的 Github 的昵称是 <code>Cyan-N</code> ，所以要建立一个仓库叫做： <code>Cyan-N.github.io</code> 。<strong>后缀名统一，前面必须是账号的昵称</strong>。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/29/87a0634c1fc7f4b2.png\" alt=\"image-20220729144929165\" /></p>\n<h3 id=\"生成ssh密钥\"><a class=\"anchor\" href=\"#生成ssh密钥\">#</a> 生成 ssh 密钥</h3>\n<p>随便进入文件夹，然后右键进入  <code>Git Bash Here</code> ，调用命令： <code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code> ，<strong>此时不要关闭 Git</strong>。然后就会在  <code>C:\\Users\\Cyan\\.ssh</code>  里面生成 <code>id_rsa</code>  和 <code>id_rsa.pub</code>  文件，记事本进入 <code>id_rsa.pub</code> ， <code>ctrl+a，ctrl+c</code>  复制全部指令。</p>\n<p>在 <code>Github</code>  中，进入 <code>setting-&gt;SSH and GPG keys</code>  创建 <code>SSH Key</code> ， <code>title</code>  随便取，然后在 <code>key</code>  中粘贴刚才复制的内容。然后在刚才的 Git 界面输入以下命令： <code>ssh -T git@github.com</code> 。测试 ssh 是否绑定成功。</p>\n<p>再次强调， <code>Github</code>  是国外网站，会抽风。</p>\n<h1 id=\"使用hexo\"><a class=\"anchor\" href=\"#使用hexo\">#</a> 使用 Hexo</h1>\n<h2 id=\"生成本地网页\"><a class=\"anchor\" href=\"#生成本地网页\">#</a> 生成本地网页</h2>\n<p>找一个文件夹，用于存放你的博客文件，此处我命名为 Blog。然后在这个界面中  <code>Git Bash Here</code> 。其实建议以管理员身份运行 <code>Git</code> 。然后输入命令： <code>hexo init</code>  用于初始化。</p>\n<p><code>hexo s</code>  用于启动服务，此时会弹出一个网址，就可以通过浏览器来查看， <code>ctrl+c</code>  关闭本地服务器，就不能再访问了。</p>\n<h2 id=\"修改配置\"><a class=\"anchor\" href=\"#修改配置\">#</a> 修改配置</h2>\n<p>在存放博客文件的文件夹，找到_config.yml 文件，在最后面修改为下面代码：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Deployment</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Docs: https://hexo.io/docs/one-command-deployment</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">repository</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/Cyan<span class=\"token punctuation\">-</span>N/Cyan<span class=\"token punctuation\">-</span>N.github.io.git <span class=\"token comment\">#此处就是仓库地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main</pre></td></tr></table></figure><h2 id=\"下载工具\"><a class=\"anchor\" href=\"#下载工具\">#</a> 下载工具</h2>\n<p>在存放博客文件的文件夹，进入 Git，这里还是建议管理员身份。执行命令： <code>npm install hexo-deployer-git --save</code>  安装 Git 部署插件。</p>\n<p>然后执行： <code>hexo g</code>  生成网页文件，再执行： <code>hexo d</code>  提交到 Github 上，这一步可能会连接超时，多试几次。</p>\n<h1 id=\"结尾\"><a class=\"anchor\" href=\"#结尾\">#</a> 结尾</h1>\n<p>现在你已经完成了博客的搭建，你可以通过访问你的仓库地址，就是<strong>修改配置</strong>里面的那个网址来访问你的博客。其实还有一些我没有讲，比如域名替换和 https 使用，更换主题，通过修改主题中的_config.yml 实现个性化博客。</p>\n<p>还神起爪子啊，个人赶门去搜一哈（翻译：还愣着干什么，自己马上去搜一下）</p>\n",
            "tags": [
                "tools"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/28/Shell/shell%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "url": "https://cecilia.cool/2022/07/28/Shell/shell%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "title": "shell快速入门",
            "date_published": "2022-07-28T06:58:49.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>本文及后续文章都是基于 <code>bash shell</code>  讲解， <code>Linux</code>  发行版本为 <code>Ubuntu</code> 。本文指导读者快速入门 <code>shell</code>  脚本编程而刻意模糊化其他基本概念，本系列于 <code>2022-07-28</code>  开始更新，每天更新一个小节，直到结束，主要是讲解 <code>shell</code>  编程，其中也会涉及到相关的 <code>Linux</code>  知识。</p>\n<p>整个 <code>shell</code>  系列不会讲解如何安装双系统，也不会讲解如何安装虚拟机以及 <code>Linux</code>  相关版本的镜像文件。如果你需要相关的虚拟机和 Linux 的安装视频，我推荐这个：</p>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThVNHkxVzdhdj9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMCZhbXA7dmRfc291cmNlPTVhY2Y1YTdiMjNkMjhlNzYzM2U1YTliMzgxYzU3YzQy\">https://www.bilibili.com/video/BV18U4y1W7av?spm_id_from=333.999.0.0&amp;vd_source=5acf5a7b23d28e7633e5a9b381c57c42</span></p>\n</blockquote>\n<p>B 站关注<strong> Micro_Frank</strong>。</p>\n<h1 id=\"ssh连接ubuntu\"><a class=\"anchor\" href=\"#ssh连接ubuntu\">#</a> ssh 连接 Ubuntu</h1>\n<p>我不是很喜欢在虚拟机里面使用命令行，所以就在外部通过终端来访问虚拟机上的 <code>Ubuntu</code> 。</p>\n<ul>\n<li>在 <code>Ubuntu</code>  中使用命令 <code>ifcofig</code>  查看系统 <code>IP</code>  地址。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/e434cc286d6c0917.png\" alt=\"image-20220728152200134\" /></p>\n<p>当然，有可能使用了 <code>ipconfig</code>  查不到 <code>IP</code>  地址，那么请使用 <code>sudo dhclient ens33</code>  命令，具体你可以百度。</p>\n<ul>\n<li>在自己桌面使用 <code>win+r</code> ，输入 <code>cmd</code> 。使用 <code>ssh</code>  连接： <code>ssh 用户名@IP地址</code> 。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/573c6233451b027a.png\" alt=\"image-20220728152655411\" /></p>\n<p>之前因为某些原因，我的 <code>Ubuntu</code>  修改过 <code>ssh</code>  连接的端口号，所以在连接时需要通过 <code>-p</code>  选项来指定端口号。如果你没有改过，就不需要指定了。</p>\n<h1 id=\"下载vim\"><a class=\"anchor\" href=\"#下载vim\">#</a> 下载 Vim</h1>\n<p><code>Vim</code>  是一个超级强大的编辑器，我也不是很熟练，主要就是用的少。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span></pre></td></tr></table></figure><p>我已经下载过了，就不截图了，实在不会你就去百度。</p>\n<h1 id=\"创建脚本文件\"><a class=\"anchor\" href=\"#创建脚本文件\">#</a> 创建脚本文件</h1>\n<p>作为学习使用，我建议你先创建一个文件夹用来存放你平时写的练习脚本，文件名可以叫 <code>Shell_Files</code> ，随便你啦。</p>\n<ul>\n<li>进入你刚才创建的文件夹： <code>cd Shell_Files</code> 。</li>\n<li>创建一个文件： <code>touch test_1</code> ，不需要跟后缀。文件后缀的作用无非就是打开这个文件的方式（你现在可以这么理解），也可以跟 <code>sh</code>  后缀，比如 <code>touch test_1.sh</code> 。</li>\n<li>使用 <code>vim</code>  来编写脚本程序： <code>vim test_1.sh</code> 。进入到编辑界面后，请不要乱动键盘，你现在并没有处于编辑模式。敲击 <code>i</code>  键进入 <code>insert</code>  模式，你就可以编辑了，你可以输入以下代码</li>\n</ul>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token shebang important\">#!/bin/bash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token assign-left variable\">val</span><span class=\"token operator\">=</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\" testing... \"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">done</span></pre></td></tr></table></figure><p>在 <code>shell</code>  中， <code>#</code> 后面跟的是注释，但是在编写脚本时，你必须加上第一行的注释来指定你要是用的 <code>shell</code> ，你不会以为 <code>shell</code>  里面只有 <code>bash</code>  吧？第二行是定义一个变量（弱类型语言）， <code>while</code>  里面应该跟上判断条件，条件为 <code>true</code>  继续执行，为 <code>false</code>  结束执行。但是 <code>echo</code>  是自动换行的<strong>打印语句</strong>，所以<strong>成功执行</strong>了 <code>echo &quot;&quot;</code> ， <code>while</code>  里面就判断为 <code>true</code> 。然后执行 <code>echo &quot;testing... &quot;</code> 。</p>\n<p>代码编写完后，敲击 <code>Esc</code> ，再输入冒号，再输入 <code>wq</code> ， <code>w</code>  是 <code>write</code> ， <code>q</code>  是 <code>quit</code> 。回车，即可保存退出。同学，我劝你不要乱点啊🐶。</p>\n<h1 id=\"修改文件权限\"><a class=\"anchor\" href=\"#修改文件权限\">#</a> 修改文件权限</h1>\n<p>一般来说，你刚创建的文件只有读 <code>r</code>  和写 <code>w</code>  的权限，并没有执行 <code>x</code>  该文件的权限。请按顺序调用以下命令：</p>\n<ul>\n<li><code>chmod u+x test_1.sh</code> ，该命令为脚本文件赋予可执行的权限，其实到这里，你的脚本文件就可以执行了。</li>\n<li><code>touch new_file</code>  创建一个新的文件，该文件只有读和写的权限</li>\n<li><code>ll</code> ，其实该命令就是 <code>ls -al</code>  的简写。</li>\n</ul>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/2a7d3da1cb4c1b84.png\" alt=\"image-20220728155413986\" /></p>\n<p>从上图可以看出，下面两个可执行文件（绿色）比 <code>new_File</code>  多了一个 <code>x</code> ，这其实就是执行权限。</p>\n<h1 id=\"运行脚本文件\"><a class=\"anchor\" href=\"#运行脚本文件\">#</a> 运行脚本文件</h1>\n<p>运行文件，只需要执行以下命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>./test_1.sh</pre></td></tr></table></figure><p>其中 <code>./</code>  表示当前目录下， <code>test_1.sh</code>  是指定文件名。为什么非要加 <code>./</code>  呢？我明明已经在当前目录下了，能不能直接使用 <code>test_1.sh</code>  来运行呢？可以，这个涉及到环境变量，这是后话，nice，又挖一个坑，你要是求知心切，就去百度吧。</p>\n<p>哦，你想要停下你的脚本运行，使用 <code>ctrl+c</code>  即可。</p>\n",
            "tags": [
                "shell"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/28/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95/",
            "url": "https://cecilia.cool/2022/07/28/Database/MySQL/B-%E6%A0%91%E7%B4%A2%E5%BC%95/",
            "title": "B+树索引",
            "date_published": "2022-07-28T01:42:18.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>我们使用 sql 语句查询某条记录时</p>\n<pre><code class=\"language-mysql\">select * from 表名 where 列名 = xxx;\n</code></pre>\n<p><code>where</code>  后面跟着的是查询条件，我们之前学的，页中的记录是根据主键排序的（如果没有主键，就根据不能为 NULL 的唯一的数据排序，如果这样的属性也没有，就按照 <code>row_id</code>  排序）。</p>\n<p>那么在没有创建索引的情况下，如果我们的查询条件是根据主键查询，那么在页中就可以通过二分查找快速获取数据，但是如果 <code>where</code>  后面跟着的是一个非主键属性，那么在页中就只能从 <code>Infimum</code>  到 <code>Supremum</code>  一条一条的<strong>顺序查找</strong>，<strong>一下子就慢很多</strong>。</p>\n<p>所以我们必须找到一种高效的搜索方法 —— 索引。</p>\n<h1 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h1>\n<p>先建一个表，后面方便演示例子。</p>\n<pre><code class=\"language-mysql\">create table index_demo (\n    c1 int,\n    c2 int,\n    c3 char(1)，\n    primary key (c1)\n) row_format = COMPACT;\n</code></pre>\n<p>我们知道，一个页默认只有 16KB，存储的记录是有限的，所以一个表往往需要很多个页，<strong>页之间的记录也必须保持顺序</strong>，也就是说，<strong>页 A 的记录主键值必须大于上一个页的记录主键值，小于下一页的记录的主键值</strong>（当然，这里面不包含 <code>Infimum</code>  和 <code>Supremum</code> ）。</p>\n<p>前文讲页结构时， <code>File Header</code>  中对于页号的规定使得<strong>数据页之间连成双向链表</strong>，我们期望为快速定位记录所在的数据页而建立一个别的目录，该目录实现：</p>\n<ul>\n<li>下一个数据页的记录的主键 &gt; 上一个数据页记录的主键。</li>\n</ul>\n<p>为了实现这个状态，存在<strong>页分裂</strong>的机制。假设上一个页已经满了，最后一条记录主键是 100，现在又加入一条记录，主键为 90。那么新加入的这条记录就会放到该页末尾，主键为 100 的记录会被分到新的一个页。</p>\n<ul>\n<li>给所有页建立一个<strong>目录项</strong></li>\n</ul>\n<p>此处是关于页的目录其实对于页的查找也是二分（就是根据页目录，之前的槽 <code>Slot</code>  是关于记录的 <code>Page Directory</code> ）。<strong>每个页对应一个目录项</strong>，每个<strong>目录项</strong>包括两部分：<strong>页的最小主键值</strong> +<strong> 页号</strong> <code>page_no</code> 。插入记录时，根据主键值，在所有<strong>目录项</strong>下进行二分查找，找到合适的页后，根据页中的 <code>Page Directory</code>  进行二分查找，然后页分裂（如果有的话）。最重要的就是，这个目录就叫 ——<strong> 索引</strong>。</p>\n<h2 id=\"简单的索引方案\"><a class=\"anchor\" href=\"#简单的索引方案\">#</a> 简单的索引方案</h2>\n<p>为了实现通过<strong>目录项</strong>来进行二分查找，我们也要<strong>管理目录项</strong>，使其在增删改查时保持有序，所以也把它们放在页中进行管理，这种记录就是<strong>目录项记录</strong> <code>record_type = 1</code> （你还记得 <code>record_type</code>  为 0，2，3 时是什么意思吗）, 该记录也就只有主键值和页号，<strong>当然头信息也是存在的</strong>，因为只有主键值（如果不是变长字段或变长字符集），所以没有变长字段长度列表，也没有 NULL 列表。</p>\n<p>不断累积，目录项页也存在目录项，这样的目录项又被放进新的目录项页（只不过在上一层），不断向上递归，形成 B + 树。</p>\n<p>说了那么多，不看图总是懵逼的。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/28/f4fdab5241230111.png\" alt=\"image-20220728104845461\" /></p>\n<p>这个图画的我难受。。。。</p>\n<p>上图为了简略，一个记录的内容我只画了： <code>record_type</code> + <code>next_record</code> + <code>c1</code> + <code>c2</code> + <code>c3</code> 。</p>\n<p>从图中可以看出，我们真正的记录是放在 B + 树中的叶子节点，存放目录项记录的都是内节点。</p>\n<p><code>Page Header</code>  里面有个属性就是 <code>PAGE_LEVEL</code>  表示该页在 B + 树中的层级。其实我们谈索引，什么对某个属性 A 创建索引，其实就是创建以 A 排序的 B + 树（当然，这么说不准确，B + 树内容不同，但是你可以这么理解）。我们一开始创建表，指定 <code>c1</code>  为主键，那么我们插入记录时， <code>InnoDB</code>  就会维护上图的 B + 树，使其有序。如果我们创建关于 <code>c2</code>  的索引，我们就会得到一个关于 <code>c2</code>  排序的 B + 树。</p>\n<blockquote>\n<p>索引的 B + 树和真正的主键的 B + 树有什么不同，之后讲到回表你就懂了</p>\n</blockquote>\n<h2 id=\"索引种类\"><a class=\"anchor\" href=\"#索引种类\">#</a> 索引种类</h2>\n<p><strong>聚簇索引</strong>：在 InnoDB 中，聚簇索引就是数据的存储方式，所有记录都存在叶子节点，“索引即数据，数据即索引”</p>\n<p>二级索引：聚簇索引只有在搜索条件为主键时才能发挥作用，如果以其他列为搜索条件，就要创建关于他们的索引（B + 树）才行，这就是二级索引。假设对 <code>c2</code>  创建索引，该二级索引 B + 树的叶子节点的记录存储的就是<strong> c2 + 主键值</strong>。当我们在二级索引中找到对应的 <code>c2</code> ，我们就可以拿到对应的主键值，然后<strong>再去聚簇索引中找到真正完整的数据，这就是回表</strong>。二级索引之所以不存储完整的记录，<strong>那肯定是为了节省空间啊</strong>。</p>\n<p>联合索引：其本质就是二级索引，因为有时我们会这么查询</p>\n<pre><code class=\"language-mysql\">select * from index_demo where c2 = 1 and c3 = '1';\n</code></pre>\n<p>所以我们此时就要创建关于 <code>c2,c3</code>  的联合索引。</p>\n<p>一个索引的根页面，一旦被创建，其页号就不会改变。一开始是没有数据的，每当存在数据插入，都是在这个根节点下插入</p>\n<h1 id=\"sql语句\"><a class=\"anchor\" href=\"#sql语句\">#</a> sql 语句</h1>\n<pre><code class=\"language-mysql\"># key和index是同义词，随便指定一个即可\ncreate table 表名 (\n    各个列信息\n    (key|index) 索引名 (要指定的列)\n)\n\nalter table 表名 add (key|index) 索引名 (要指定的列)\n\n# 删除索引\nalter table drop (index|key) 索引名\n</code></pre>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/26/Database/MySQL/InnoDB%E9%A1%B5%E7%BB%93%E6%9E%84/",
            "url": "https://cecilia.cool/2022/07/26/Database/MySQL/InnoDB%E9%A1%B5%E7%BB%93%E6%9E%84/",
            "title": "InnoDB页结构",
            "date_published": "2022-07-26T02:49:58.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>之前说过，页是 InnoDB<strong> 管理磁盘空间</strong>的基本单位，一个页的大小基本上是 16KB。MySQL 规定一页至少存两条记录。我们从客户端写入表中的记录会被存在页中，其实还有一种记录，它存在于 B + 树的非叶子节点的页中，其头信息中的 <code>record_type=1</code> 。</p>\n<p>目前你只需理解，页中存储的记录要么是我们从客户端写入的真实的记录 <code>record_type=0</code> 。这样的页称为<strong>索引页</strong>；另一个是 B + 树非叶子节点的目录项记录 <code>record_type=1</code> 。</p>\n<h2 id=\"页结构\"><a class=\"anchor\" href=\"#页结构\">#</a> 页结构</h2>\n<p>本节内容主要是就要了解页的大致结构和其存储记录的方式，下图为一个页的基本结构。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/26/55c753f812c612e5.png\" alt=\"image-20220726110822415\" /></p>\n<p>之后我们会对其中的结构一 一讲解。但是直接给出很多概念会让你失去阅读兴趣，所以我们先看一下记录怎么在页中存储。</p>\n<h2 id=\"记录在页中的存储\"><a class=\"anchor\" href=\"#记录在页中的存储\">#</a> 记录在页中的存储</h2>\n<p>请看上图的 <code>User Records</code>  和 <code>Free Space</code> ，我们的记录就存放在 <code>User Records</code> ，如果 <code>User Records</code>  的空间不够了，就向 <code>Free Space</code>  去申请空间。所以一个页刚开始创建的时候，是没有 <code>User Records</code>  的。当 <code>Free Space</code>  全部被 <code>User Record</code>  代替时，该页就满了。恭喜，页结构七个概念你已经懂了两个。</p>\n<p>我们的记录在 <code>User Record</code>  里面是一条一条摆放进去的，但是我现在要提一下一条记录里的<strong>头信息</strong>（你不会已经忘了什么是头信息了吧，不会吧，不会吧）。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/26/81205e50ebf500f5.png\" alt=\"image-20220725112044762\" /></p>\n<p><code>record_type</code>  可以是，0-- 普通记录，1--B + 树非叶子节点的目录项记录，2--Infimum，3--supremum。请看页结构图，红色区域就是 <code>Infimum,supremum</code> ，也就是说，每个页固定都有这两条记录，他们代表所有记录中的最小记录（链表头节点）以及所有记录中的最大记录（链表尾节点），** 尽管它们没有主键值，但它们就是最小和最大。** 这两条记录没有实际内容，但这是规定！这样每次查询记录时，都能从一个固定的起点查询。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/26/986c7070b2da0836.png\" alt=\"image-20220726131306378\" /></p>\n<p><code>User Record</code>  里面的记录排列紧密，一条紧接另一条。这个其实就是堆， <code>heap_no</code>  就是该记录在堆中的相对位置。比如我顺序写入了 a,b,c 三条记录，它们的 <code>heap_no</code>  就是 2，3，4。至于 0 和 1，它们是 <code>Infimum,supremum</code>  的 <code>heap_no</code>  值。其实从图就可以看出， <code>Infimum,supremum</code>  在 <code>User_record</code>  上面。</p>\n<h3 id=\"next_record的计算\"><a class=\"anchor\" href=\"#next_record的计算\">#</a> next_record 的计算</h3>\n<p>很好，进入到了喜闻乐见的计算环节，我会尽量让你懂的。</p>\n<p><code>next_record</code>  不就是指向下一条记录嘛，那它指向下一条记录的那个部位呢？我们知道，头信息右边是默认添加数据（就是 row_id,trx_id,roll_pointer)，接着是真实信息。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/26/e4c3645b69edae43.png\" alt=\"image-20220726115106879\" /></p>\n<p><code>next_record</code>  指向的是下一条记录的真实信息，其实存储的是一个以字节为单位的偏移量。比如第四条记录的 <code>next_record=-111</code> , 就是指从第四条记录的真实数据的地址开始，上前找 111 个字节就是下一条记录的真实数据的地址。</p>\n<p>所以，页中的记录因为 <code>next_record</code>  而形成了链表，在插入新的记录时，InnoDB 始终维护链表中节点的从小到大的顺序（维护顺序当然是为了二分查找）。</p>\n<p>为了让读者感受一下 <code>next_record</code>  的计算过程，我们创建一个表玩一下</p>\n<pre><code class=\"language-mysql\">create table test_next_record (\n\tc1 int,\n    c2 int,\n    c3 varchar(10000),\n    primary key (c1)\n) character set acsii,row_format=COMPACT；\n#使用 ascii字符集，一个字符用一个字节表示 \n\n#插入一条数据\ninsert into test_next_record values(1,100,'aaaa');\n</code></pre>\n<p>那么在页中实际是这个样子的</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/26/71735b9e7f52f0b7.png\" alt=\"image-20220726130854616\" /></p>\n<p><code>Infimum</code>  中的 41 是如何计算的： <code>Infimum</code> 8 字节 <code>+Supremum</code>  整条记录 13 字节 + 变长字段 1 字节 + NULL 值列表 1 字节 + 头信息 5 字节 + <code>trx_id</code> 6 字节 + <code>roll_pointer</code> 7 字节 = 41 字节。</p>\n<p><code>next_record</code>  指向真实信息和头信息中间，这个位置刚刚好，向左是 NULL 值列表（逆序存放）和变长字段长度列表（逆序存放），向右是真实信息。逆序可以使得记录中靠前的字段和它们对应的字段长度列表在内存中靠得更近，可能会<strong>提高缓存命中率</strong>。</p>\n<h2 id=\"file-header\"><a class=\"anchor\" href=\"#file-header\">#</a> File Header</h2>\n<p>校验和：对于一个很长的字符串，通过算法计算出比较短的值代表这个长字符串，这个值就是校验和。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FIL_PAGE_SPACE_OR_CHKSUM</td>\n<td>(4Byte) 空间或校验和，MySQL 版本低于 4.0.14 时，该属性表示本页面所在的<strong>表空间 ID</strong>；之后的版本表示页的<strong>校验和</strong></td>\n</tr>\n<tr>\n<td>FIL_PAGE_OFFSET</td>\n<td><strong>页号</strong>，对于页号的分配，并不是连续的，也就是说<strong>使用的页在磁盘上可能并不挨着（当然是尽可能挨着）</strong></td>\n</tr>\n<tr>\n<td>FIL_PAGE_PREV</td>\n<td>上页的页号</td>\n</tr>\n<tr>\n<td>FIL_PAGE_NEXT</td>\n<td>下页的页号（形成双向链表）</td>\n</tr>\n<tr>\n<td>FIL_PAGE_TYPE</td>\n<td><strong>页的类型</strong></td>\n</tr>\n<tr>\n<td>FIL_PAGE_ARCH_LOG_NO_OR_SPACE_ID</td>\n<td>页属于哪个表空间</td>\n</tr>\n<tr>\n<td>FIL_PAGE_LSN</td>\n<td>页面被最后修改时对应的 LSN（Log Sequence Number，日志序列号）</td>\n</tr>\n</tbody>\n</table>\n<p>表格中内容看起来比较多，但是梳理一下就很清晰。</p>\n<p>首先，MySQL 具有良好的健壮性，比如内存中的页<strong>正在</strong>被刷新到磁盘中，但是此时突然断电了，导致刷新时只刷了一部分。我们就需要使用校验和来判断一个页是否被完整的刷新到磁盘中，这个在 <code>File Trailer</code>  部分会讲解到。</p>\n<p>其实，B + 树的节点就是页，页与页之间形成一个多叉树的同时，同一层的节点又形成双向链表。</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/26/d5d6dec569020c94.png\" alt=\"image-20220726112224302\" /></p>\n<p>这样，我们就记住了中间三个属性。最后的 <code>FIL_PAGE_TYPE</code>  表示页的类型，肯定啊，MySQL 这么大，肯定不可能只有 1 种页。</p>\n<h2 id=\"page-directory\"><a class=\"anchor\" href=\"#page-directory\">#</a> Page Directory</h2>\n<p>现在记录通过 <code>next_record</code>  连成了一个有序单向链表，对链表使用二分查找过程大致如下：</p>\n<ul>\n<li>将记录分为若干组，每个组最大的那个记录，其 <code>n_owned</code>  表示该组记录数。</li>\n<li>将每组最大记录的地址偏移量拿出来，按顺序排列在 <code>Page Dierctory</code>  中。</li>\n<li>这些偏移量被称为槽 -- <code>slot</code> ，每个槽位 2 字节， <code>Page Dierctory</code>  就是由若干个槽组成。</li>\n<li>你可以把一个个顺序排列的槽看作一个数组，槽对应的记录越小，就越接近 <code>File Trailer</code> 。</li>\n</ul>\n<p>关键的问题是怎么分组，机制为：</p>\n<ul>\n<li>对于 <code>Infimum</code>  记录所在的分组，只能有一条记录。即最靠近 <code>File Trailer</code>  的槽始终是 <code>Infimum</code> 。</li>\n<li>对于 <code>supermum</code>  记录所在的分组，可以有 1~8 条记录。</li>\n<li>其余组只能有 4~8 条记录，如果组中记录大于 8 条，会 4,5 分为两组，并生成一个新的 <code>slot</code> 。</li>\n<li>每次插入一条记录，该记录都会从页目录中寻找对应记录的主键值比待插入记录主键值大且差值最小的 <code>slot</code> （然后找到前一个槽 A，A 对应的记录开始遍历插入即可）</li>\n</ul>\n<p>配合这种机制，哪怕记录插入表中，记录在每个槽中也会保持有序，并且每个组中记录的主键逐渐紧凑。</p>\n<p>下图省略了记录之间的连接：</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/27/350085bbd3bc62f9.png\" alt=\"image-20220727133511829\" /></p>\n<p>上图相当于是： <code>slot_0=Infimum</code> ， <code>slot_1=4</code> ， <code>slot_2=Supremum</code> 。假设要查询记录 7，就相当于在数组 <code>[Min,4,Max]</code>  里面进行二分查找，最后找到 4，记录 4 的下一条记录就是槽 2 的组的记录，就相当于遍历槽 2 的组，直到找到目标记录。</p>\n<h2 id=\"page-header\"><a class=\"anchor\" href=\"#page-header\">#</a> Page Header</h2>\n<p>总共 56 字节，该结构是存储数据页中记录的状态信息，比如页中的记录数， <code>Free Space</code>  的偏移量，页目录有多少个槽等。下图只是部分结构，没有写完，记不住问题也不大，但是看到这里，下面的部分属性你肯定很熟悉。</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>长度</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PAGE_HEAP_TOP</td>\n<td>2Byte</td>\n<td>还未使用的空间的最小地址，向后走就是 Free Space</td>\n</tr>\n<tr>\n<td>PAGE_N_HEAP</td>\n<td>2Byte</td>\n<td>第 1 位表示是否为紧凑型记录，剩余的 15 位表示本页的堆中的记录（包括 Infimumu,supermum 和已删除记录）</td>\n</tr>\n<tr>\n<td>PAGE_FREE</td>\n<td>2Byte</td>\n<td>垃圾链表头节点对应记录在页面中的偏移量</td>\n</tr>\n<tr>\n<td>PAGE_GARBAGE</td>\n<td>2Byte</td>\n<td>已删除记录占用的字节数</td>\n</tr>\n<tr>\n<td>PAGE_DIRECTION</td>\n<td>2Byte</td>\n<td>记录插入的方向，向后是 right</td>\n</tr>\n<tr>\n<td>PAGE_N_DIRECTION</td>\n<td>2Byte</td>\n<td>记录连续插入同一个方向的记录条数，当插入方向不同时，马上重置刷新</td>\n</tr>\n<tr>\n<td>PAGE_N_RECS</td>\n<td>2Byte</td>\n<td>该页用户记录的数量（不包括 Infimumu,supermum 和已删除记录）</td>\n</tr>\n<tr>\n<td>PAGE_MAX_TRX_ID</td>\n<td>8Byte</td>\n<td>修改当前页的最大事务 id，该值仅在二级索引页面中定义</td>\n</tr>\n<tr>\n<td>PAGE_LEVEL</td>\n<td>2Byte</td>\n<td>2Byte, 该页在 B + 树中的层级</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"file-trailer\"><a class=\"anchor\" href=\"#file-trailer\">#</a> File Trailer</h1>\n<p>在 <code>File Header</code>  提到过校验和。如果页从内存刷新到磁盘中断电了，导致之刷新了一部分到磁盘中该怎么办？ <code>File Trailer</code>  就是为了<strong>检验</strong>一个页是否刷新完整（至于如何恢复，那就的学到日志那才知道了）</p>\n<p>该部分由 8 个字节组成：</p>\n<ul>\n<li>前四个字节代表页的校验和，该部分与 <code>File Header</code>  的校验和相对应。 <strong>每次</strong>页在内存中发生<strong>修改</strong>时，在刷新前就要把校验和算出来。以页 A（假设校验和为 1）刚从磁盘读到内存为例，修改之后校验和为 2，那么此时磁盘中的页 A 和内存中的页 A 校验和不一样。刷新到磁盘时， <code>File Header</code>  的磁盘先被刷新到磁盘中，如果断电导致 <code>File Trailer</code>  的校验和没有刷新进去，那么磁盘中的 <code>File Header</code>  与 <code>File  trailer</code>  的校验和就不一样。</li>\n<li>后四个字节是页面最后被修改时对应的 LSN 的后 4 个字节，与 <code>File Header</code>  相对应，也是检验页完整性。</li>\n</ul>\n<h1 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h1>\n<blockquote>\n<p>本文总结于《从根上理解 MySQL》第五章 p72-p89，作者：小孩子 4919。对于有能力或者兴趣的读者，鄙人强烈推荐这本书，如果您能够通过正规渠道购买，支持作者，支持正版，支持每一颗热爱技术的心，我将感激不尽。</p>\n</blockquote>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/25/Java/%E5%B9%B6%E5%8F%91/JUC_%E5%8E%9F%E5%AD%90%E7%B1%BB1-CAS%E4%B8%8EUnsafe/",
            "url": "https://cecilia.cool/2022/07/25/Java/%E5%B9%B6%E5%8F%91/JUC_%E5%8E%9F%E5%AD%90%E7%B1%BB1-CAS%E4%B8%8EUnsafe/",
            "title": "J.U.C原子类(1)--CAS与Unsafe",
            "date_published": "2022-07-25T07:06:33.000Z",
            "content_html": "<h1 id=\"线程安全的实现方法\"><a class=\"anchor\" href=\"#线程安全的实现方法\">#</a> 线程安全的实现方法</h1>\n<h2 id=\"互斥同步\"><a class=\"anchor\" href=\"#互斥同步\">#</a> 互斥同步</h2>\n<p>使用 <code>synchronized</code>  和 <code>ReentrantLock</code></p>\n<h2 id=\"非阻塞同步\"><a class=\"anchor\" href=\"#非阻塞同步\">#</a> 非阻塞同步</h2>\n<p>互斥同步最主要的问题是<strong>线程阻塞和唤醒所带来的性能问题</strong>，因此这种同步也称为阻塞同步。</p>\n<p>互斥同步属于一种悲观的并发策略，总是认为只要不去做正确的同步措施，那就肯定会出现问题。无论共享数据是否真的会出现竞争，它都要进行加锁 (这里讨论的是概念模型，实际上虚拟机会优化掉很大一部分不必要的加锁)、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程需要唤醒等操作。</p>\n<h3 id=\"atomicinteger\"><a class=\"anchor\" href=\"#atomicinteger\">#</a> AtomicInteger</h3>\n<p>该类是整数原子类，其中很多方法都使用了 Unsafe 类的 CAS 操作，以 <code>incrementAndGet()</code>  为例</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//AtomicInteger 类的 increment () 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">getAndAddInt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> valueOffset<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//Unsafe 类的 getAndInt (Object var1,long var2,int var4) 方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndAddInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> var4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//var1 指示对象内存地址，var2 指示该字段相对对象内存地址的偏移，var4 是要加的数值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> var5<span class=\"token punctuation\">;</span><span class=\"token comment\">//step1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 通过 var1,var2 拿到旧值，step2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        var5 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIntVolatile</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">,</span> var5<span class=\"token punctuation\">,</span> var5 <span class=\"token operator\">+</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token comment\">// 进行 CAS 操作，比较期望的旧值 var5 和当前内存的值是否相同。进行相加操作</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> var5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>上述代码中， <code>step1</code>  和 <code>step2</code>  以及 <code>step2-&gt;step3</code>  过程都可能出现并发问题，有可能 <code>step2</code>  拿到 <code>var5</code>  之后，那片内存的值又被修改，于是 <code>while</code>  条件中的 CAS 操作返回 <code>false</code> ，继续循环，不断冲突检测，直到将数加到内存中。</p>\n<h2 id=\"无同步方案\"><a class=\"anchor\" href=\"#无同步方案\">#</a> 无同步方案</h2>\n<p>涉及线程池，暂不加讲解</p>\n<h1 id=\"cas\"><a class=\"anchor\" href=\"#cas\">#</a> CAS</h1>\n<p>我们希望在并发的过程中，先进行操作，如果没有其他线程争用共享数据，那么操作就成功了，否则就采取补偿措施。这种<strong>基于冲突检测的乐观的操作</strong>许多实现都不需要将线程阻塞，因此这种同步操作称为非阻塞同步。</p>\n<p><strong>乐观锁</strong>需要操作和冲突检测这两个步骤具备原子性，这里的原子性不能够使用互斥同步来保证，只能靠<strong>硬件</strong>来完成。硬件支持的原子性操作最典型的是: <strong>比较并交换</strong> ( <code>Compare-and-Swap，CAS</code> )。 <code>CAS</code>  指令需要有 3 个操作数，分别是内存地址  <code>V</code> 、旧的预期值  <code>A</code>  和新值  <code>B</code> 。当执行操作时，只有当  <code>V</code>  的值等于  <code>A</code> ，才将  <code>V</code>  的值更新为  <code>B</code> 。</p>\n<p>因为 <code>CAS</code>  操作时原子性的，所以多线程并发使用 <code>CAS</code>  更新数据时不用锁。类似 <code>sql</code>  中的条件更新一样： <code>update set id=3 from table where id=2</code> 。因为单条 <code>sql</code>  执行具有原子性，如果有多个线程同时执行此 <code>sql</code>  语句，只有一条能更新成功（就是最后一个执行的那个）。</p>\n<p><code>CAS</code>  方式为乐观锁， <code>synchronized</code>  为悲观锁。因此使用  <code>CAS</code>  解决并发问题通常情况下性能更优。</p>\n<p>在应用方面，比如 <code>Unsafe</code>  类， <code>AtomicInteger</code>  类等，之后会一 一讲解。</p>\n<p>问题：</p>\n<ul>\n<li><code>ABA</code>  问题，如果一个变量初次读取的时候是  <code>A</code>  值，它的值被改成了  <code>B</code> ，后来又被改回为・，那  <code>CAS</code>  操作就会误认为它从来没有被改变过。 <code>J.U.C</code>  包提供了一个带有标记的原子引用类  <code>AtomicStampedReference</code>  来解决这个问题，它可以通过控制变量值的<strong>版本</strong>来保证  <code>CAS</code>  的正确性。在变量前加上版本号，每次变量更新的时候把版本加 1，那么 <code>A-&gt;B-&gt;A</code>  就会变成 <code>1A-&gt;2B-&gt;3A</code> ，从前是比较期望的旧值和当前值，现在多比较一个版本号（ <code>compareAndSet</code>  方法），更新时两个一起更新。<strong>大部分情况下 ABA 问题不会影响程序并发的正确性</strong>，如果需要解决 ABA 问题，<strong>改用传统的互斥同步可能会比原子类更高效</strong>。</li>\n<li>不断循环其实就是自旋，自旋 <code>CAS</code>  如果长时间不成功，会给 <code>CPU</code>  带来非常大的执行开销。</li>\n<li>只能保证一个共享变量的原子操作，多了就可以用锁。</li>\n</ul>\n<h1 id=\"unsafe类详解\"><a class=\"anchor\" href=\"#unsafe类详解\">#</a> Unsafe 类详解</h1>\n<p>Unsafe 是位于 <code>sun.misc</code>  包下的一个类，主要提供一些用于执行<strong>低级别</strong>、<strong>不安全</strong>操作的方法，如直接访问系统内存资源、自主管理内存资源等，这些方法在提升 Java 运行效率、增强 Java 语言底层资源操作能力方面起到了很大的作用。但由于 Unsafe 类使 Java 语言拥有了类似 C 语言指针一样操作内存空间的能力，这无疑也增加了程序发生相关指针问题的风险。在程序中过度、不正确使用 Unsafe 类会使得程序出错的概率变大，使得 Java 这种安全的语言变得不再 “安全”，因此对 Unsafe 的使用一定要慎重。</p>\n<p>该类的构造方法是私有的，只有通过反射才能拿到其实例化对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//Unsafe 构造方法私有，不能被实例化，通过反射获得对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"theUnsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Unsafe 类提供的 API 大致可分为：内存操作，CAS，Class 相关，对象操作，线程调度，系统信息获取，内存屏障，数组操作。</p>\n<p>通过查看源码，其实 Unsafe 只提供三种 CAS 方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//paramObject1:int 字段所在的对象，paramLong：该字段在该对象中的偏移量，paramObject2：期望的旧值，paramObject3：要更新的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObject1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> paramObject2<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> paramObject3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> paramInt1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> paramInt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">compareAndSwapLong</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> paramObject<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这几个都是 <code>native</code>  方法，由 C++ 代码实现，都位于 <code>unsafe.cpp</code>  文件中</p>\n<pre><code class=\"language-c++\">UNSAFE_ENTRY(jboolean, Unsafe_CompareAndSwapInt(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))\n  //之前的代码展示我们看到，CAS函数是放在while循环中的，也就是说，返回值是一个布尔值。\n  UnsafeWrapper(&quot;Unsafe_CompareAndSwapInt&quot;);\n  oop p = JNIHandles::resolve(obj);\n\n  //该函数要更新的是一个jint,所以要先根据对象引用+偏移量得到其地址，也就是对应的指针\n  jint* addr = (jint *) index_oop_from_field_offset_long(p, offset);\n\n  //很明显，Atomic::cmpxhg才是进行CAS操作（比较+替换）的那一步，x是即将更新的值，e是期望的旧值\n  return (jint)(Atomic::cmpxchg(x, addr, e)) == e;\nUNSAFE_END\n</code></pre>\n<p>当然，Unsafe 类还提供了许多硬件级别的操作</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取给定的 paramField 的内存地址偏移量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">staticFieldOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Field</span> paramField<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 分配内存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">allocateMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 扩充内存</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">long</span> <span class=\"token function\">reallocateMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> paramLong1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> paramLong2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 释放内存</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">freeMemory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> paramLong<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取数组第一个元素的偏移地址</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">int</span> <span class=\"token function\">arrayBaseOffset</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Class</span> paramClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><blockquote>\n<p>关于 Unsafe 类的更多知识，可以参考美团技术团队的文章：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTkvMDIvMTQvdGFsay1hYm91dC1qYXZhLW1hZ2ljLWNsYXNzLXVuc2FmZS5odG1s\">Java 魔法类：Unsafe 应用解析</span></p>\n</blockquote>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1qdWMtQXRvbWljSW50ZWdlci5odG1s\">https://pdai.tech/md/java/thread/java-thread-x-juc-AtomicInteger.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoLm1laXR1YW4uY29tLzIwMTkvMDIvMTQvdGFsay1hYm91dC1qYXZhLW1hZ2ljLWNsYXNzLXVuc2FmZS5odG1s\">https://tech.meituan.com/2019/02/14/talk-about-java-magic-class-unsafe.html</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/25/Database/MySQL/InnoDB%E8%A1%8C%E6%A0%BC%E5%BC%8F%E5%AD%98%E5%82%A8%E8%AE%B0%E5%BD%95/",
            "url": "https://cecilia.cool/2022/07/25/Database/MySQL/InnoDB%E8%A1%8C%E6%A0%BC%E5%BC%8F%E5%AD%98%E5%82%A8%E8%AE%B0%E5%BD%95/",
            "title": "InnoDB行格式存储记录",
            "date_published": "2022-07-25T02:11:43.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>MySQL 服务器中负责对表中数据进行读取和写入工作的部分是<strong>存储引擎</strong>，而服务器支持不同类型的存储引擎，如 InnoDB，MyISAM，MEMORY 等。<strong>真实数据在不同存储引擎的存放格式可能不同</strong>。因为 InnoDB 现在是 MySQL 默认的存储引擎，所以会介绍其相关特性。</p>\n<p>在 MySQL 中，表中的一行数据被称为一条记录，记录保存在页中，页组成 B + 树，通过二分查找迅速找到记录。如果你还看不太懂，也没太大关系，这句话只是想告诉你 InnoDB 存储数据的本质。</p>\n<h1 id=\"innodb页\"><a class=\"anchor\" href=\"#innodb页\">#</a> InnoDB 页</h1>\n<p>数据库会频繁发生数据的读取和写入，这就像操作系统的文件系统一样，会发生大量的与磁盘的交互。但是从磁盘中直接读写数据非常慢，也就是说数据库不可能每次读写数据都直接和磁盘交互，所以就将数据分为若干个页，<strong>以页作为磁盘与内存之间交互的基本单位</strong>，其实页的本质也就是一个固定大小的内存。</p>\n<p>InnoDB 中的页大小一般是 16KB，也就是说，一次从磁盘中读取的数据最少是 16KB，每次将内存中的数据刷新到磁盘中最少也是 16KB。</p>\n<pre><code class=\"language-mysql\">mysql&gt; show variables like 'innodb_page_size';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| innodb_page_size | 16384 |\n+------------------+-------+\n1 row in set, 1 warning (0.00 sec)\n# 16 * 1024 = 16384\n#该系统变量不能在服务器运行时修改。\n</code></pre>\n<h1 id=\"innodb行格式\"><a class=\"anchor\" href=\"#innodb行格式\">#</a> InnoDB 行格式</h1>\n<p><strong>一条记录的存放格式被称为为行格式或者记录格式</strong>，InnoDB 目前有四种行格式： <code>COMPACT</code> ， <code>REDUNDANT</code> ， <code>DYNAMIC</code> ， <code>COMPRESSED</code> 。</p>\n<pre><code class=\"language-mysql\"># 指定行格式\ncreate table 表名 (列信息) row_format=行格式名\nalter table 表名 row_format=行格式\n</code></pre>\n<h2 id=\"compact行格式\"><a class=\"anchor\" href=\"#compact行格式\">#</a> COMPACT 行格式</h2>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/25/49b544009f43872c.png\" alt=\"image-20220725103902849\" /></p>\n<h3 id=\"变长字段长度列表\"><a class=\"anchor\" href=\"#变长字段长度列表\">#</a> 变长字段长度列表</h3>\n<p>我们先创建一个表，用于之后的示例讲解</p>\n<pre><code class=\"language-mysql\">create table record_format_demo (\n\tt1 varchar(10),\n    t2 varchar(256),\n    t3 varchar(20) not null\n) character set = ascii row_format = COMPACT;\n</code></pre>\n<p>变长字段指的就是 varchar (10) 这种，不能预先确定存储的数据的大小。在 InnoDB 读取数据时，如果是一个确定大小的数据，那么就能根据其大小确定偏移量从而读取出正确的数据，但是变长数据是不确定的，所以就需要保存这个变长字段（不为 NULL）的长度，来告诉 InnoDB 这个数据的大小。</p>\n<p>所以变长字段占用的存储空间分为两部分：</p>\n<ul>\n<li>真正的数据内容</li>\n<li>该数据占用的字节数</li>\n</ul>\n<p>在 COMPACT 行格式中，所有变长字段的真实数据占用字节数都存放在记录的开头位置 (十六进制，各字段长度之间没有空格)，从而形成一个变长字段长度列表。各字段占用<strong>字节数</strong>按列的顺序逆序存放，是逆序存放！</p>\n<p>有时用于表示长度的数据，需要占据不止一个字节。比如某一变长字段占字节 <code>n=700</code> , 那么就需要用到多个字节来表示 <code>n</code> ，<strong>因为一个字节哪怕加上符号位也表示不了 n</strong>。关于使用几个字节，InnoDB 有属于自己的规则，此处引入 <code>W，M，L</code>  三个符号：</p>\n<ul>\n<li>\n<p>W：假设某个<strong>字符集</strong>中最多需要 <code>W</code>  字节表示一个字符 (也就是 <code>show charset;</code>  中的 <code>MaxLen</code>  列)</p>\n</li>\n<li>\n<p>M：对于变长类型 <code>VARCHAR(M)</code>  来说，这种类型表示能存储最多<strong> M 个字符</strong> (是字符，不是字节)，所以该类型最多能存储 <code>M*W</code>  个字节</p>\n</li>\n<li>\n<p>L：该变长字段<strong>实际存储</strong>的字符数占用的字节数是 L</p>\n</li>\n</ul>\n<p>InnoDB 在读取记录变长字段长度列表时，<strong>会先查看表结构</strong>，如果某个字段允许存储最大字节数 <code>M*W&lt;=255</code> ，就认为只是用 1 字节表示真实数据占用的字节数。</p>\n<p>如果 <code>M*W &gt; 255</code> :</p>\n<ul>\n<li>若 <code>L &lt;= 127</code>  使用 1 字节</li>\n<li>若 <code>L &gt; 127</code>   使用 2 字节</li>\n</ul>\n<blockquote>\n<p>255 是 1 个字节（无符号整型）能表示的最大数，即 8 位全为 1，2^8-1=255。</p>\n<p>127 是 1 个字节（有符号整型）能表示的最大数，即最高位 0，其他 7 位为 1，2^7-1=127</p>\n</blockquote>\n<p>该规则主要就是用于区分长度列表中，当 <code>M*W &gt; 255</code>  时，一个字节到底是一个单独的字段长度 **（L &lt;= 127）<strong>，还是半个字段长度</strong>（L &gt; 127)**。设计者使用该字节的第一个二进制位作为标志位：如果该字节的第一个位是 0，该字节就是一个单独的字段长度，这也就是 0~127 的第一位都是 0。如果第一位为 1，那么该字节就是半个字段长度。</p>\n<blockquote>\n<p>其实可以设定，只要 M*W &gt; 255 就使用两个字节存储变长字段长度。之所以分的这么细，是想要节省空间，设计者的良苦用心可见一斑</p>\n</blockquote>\n<p>如果某个字段占用字节特别多，InnoDB 可能会把该字段的值的一部分数据存放到<strong>溢出页</strong>中，变长度列表只记录留在本页中的数据长度，<br />\n所以<strong> 2 字节表示变长字段长度是完全足够的</strong>。同时，长度列表只有在<strong>有必要存在时</strong>，才会存在（存在不为 NULL 的变长字段）</p>\n<p>对于 <code>CHAR(M)</code>  而言，如果使用的<strong>字符集</strong>是变长编码字符集，那么该属性也会被加入到变长列表中，并且长度为 <code>M*W</code>  (该字符集的 MaxLen=W)。</p>\n<h3 id=\"null值列表\"><a class=\"anchor\" href=\"#null值列表\">#</a> NULL 值列表</h3>\n<p>COMPACT 把一条记录的值为 NULL 的统一管理起来，存储到 NULL 列表中。处理过程：</p>\n<ul>\n<li>统计表中允许储存 NULL 的列有哪些 (比如主键和 NOT NULL 会被排除)</li>\n<li>如果表中所有列都不能存储 NULL，那么 NULL 值列表也就不存在。否则将每个允许存储 NULL 的列对应一个二进制位，位按照列的顺序<strong>逆序</strong>排列，位值为 1 时，代表该列的值为 NULL</li>\n<li>MySQL 规定 NULL 列表必须用整数个字节的位表示，不足高位补 0</li>\n</ul>\n<blockquote>\n<p>为什么是逆序之后会提到，先不要着急。</p>\n</blockquote>\n<h3 id=\"记录头信息\"><a class=\"anchor\" href=\"#记录头信息\">#</a> 记录头信息</h3>\n<p>记录头信息由固定的 5 个字节（40bit）组成，用于描述记录的一些信息</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/25/75ddfe7a3d59a65d.png\" alt=\"image-20220725112044762\" /></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t各二进制位的详细信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">名称</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">预留位 1</td>\n<td style=\"text-align:center\">没有使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">预留位 2</td>\n<td style=\"text-align:center\">没有使用</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">deleted_flag</td>\n<td style=\"text-align:center\">标记该记录是否被删除</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">min_rec_flag</td>\n<td style=\"text-align:center\">B + 树的每层非叶子节点中最小目录项记录会添加该标记</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">n_owned</td>\n<td style=\"text-align:center\">页面中记录会被分为多个组，每个组最大的那个记录作为 “大哥”，“大哥 “的该标志位会记录组中记录条数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">heap_no</td>\n<td style=\"text-align:center\">当前记录在页面堆中的相对位置，记录紧密排列的结构称为堆，前面的记录该值小，后面的值更大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">record_type</td>\n<td style=\"text-align:center\">当前记录类型，0-- 普通记录，1--B + 树非叶子节点的目录项记录，2--Infimum，3--supremum</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">next_record</td>\n<td style=\"text-align:center\">表示下一条记录的相对位置</td>\n</tr>\n</tbody>\n</table>\n<p>这么多，看不懂无所谓，现在记不住无所谓。</p>\n<p>解释：</p>\n<ul>\n<li>deleted_flag 中，0 表示没有删除，1 表示已经删除。尽管一条记录被标志为删除，但是并不会马上从表中移除，<strong>这是避免移除后要重新排列其他记录，造成性能损耗</strong>。所以这些被标志删除的记录，会组成一个垃圾链表，这些空间又被称为可重用空间，如我新插入的记录，垃圾链表中某一个节点（记录）放得下，就会将新纪录覆盖的那条被标志为删除的记录。</li>\n<li>next_record 向我们表明记录会被排列成链表，链表是个好东西。</li>\n<li>record_type 表示记录的四种类型，在目前知晓的查询算法中，二分查找已非常优秀的，所以在 MySQL 中大量使用了二分查找。那么就涉及到记录之间的大小比较，一般是通过键值比较大小。规定 <code>record_type=2</code>  的记录是所有记录中最小的， <code>record_type=3</code>  的记录是所有记录中最大的。这两个记录实际不存储任何真实数据，但是它们分别是记录链表中的起点和终点，非常重要。 <code>record_type=1</code>  暂时不需要知道。之后会讲解</li>\n</ul>\n<h3 id=\"记录的真实数据\"><a class=\"anchor\" href=\"#记录的真实数据\">#</a> 记录的真实数据</h3>\n<p>我需要提醒一下，标题中的记录都是名词，不是动词。</p>\n<p>对于表来说，记录的真实数据除了我们自己设定的数据（比如 <code>name='cyan'</code>  之类的），MySQL 还会为每个记录默认地添加一些列 (也称为<strong>隐藏列</strong>)。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\tMySQL 为每个记录默认添加的列</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">列名</th>\n<th style=\"text-align:center\">是否必需</th>\n<th style=\"text-align:center\">占用空间</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">row_id</td>\n<td style=\"text-align:center\">非必需</td>\n<td style=\"text-align:center\">6 字节</td>\n<td style=\"text-align:center\">行 ID，唯一标识一条记录</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">trx_id</td>\n<td style=\"text-align:center\">必需</td>\n<td style=\"text-align:center\">6 字节</td>\n<td style=\"text-align:center\">事务 ID</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">roll_pointer</td>\n<td style=\"text-align:center\">必需</td>\n<td style=\"text-align:center\">7 字节</td>\n<td style=\"text-align:center\">回滚指针，形成版本链</td>\n</tr>\n</tbody>\n</table>\n<p>其实上述列名都是大写！并且这三列数据位于额外信息和真实数据中间</p>\n<p>解释：</p>\n<ul>\n<li>row_id 是唯一表示一条记录。如果在创建表时没有指定主键或者没有<strong>不能为 NULL 的唯一属性</strong>，反正就是，没有一个属性能够唯一表示一条记录，那么 row_id 就会被添加。</li>\n<li>trx_id 与事务有关，暂时不需要了解</li>\n<li>roll_pointer 是回滚指针，为了方便大家理解，这里不那么准确的讲，MySQL 支持回滚操作，也就是说我们改动一条记录后，如果想要回滚到上一个版本，就需要保存上一个版本的数据，那么 roll_pointer 就是指向上一个版本（改动前）的内存。</li>\n</ul>\n<h1 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h1>\n<blockquote>\n<p>本文总结于《从根上理解 MySQL》第四章 p55-p63，作者：小孩子 4919。对于有能力或者兴趣的读者，鄙人强烈推荐这本书，如果您能够通过正规渠道购买，支持作者，支持正版，支持每一颗热爱技术的心，我将感激不尽。</p>\n</blockquote>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/24/Database/MySQL/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/",
            "url": "https://cecilia.cool/2022/07/24/Database/MySQL/%E5%AD%97%E7%AC%A6%E9%9B%86%E4%B8%8E%E6%AF%94%E8%BE%83%E8%A7%84%E5%88%99/",
            "title": "字符集与比较规则",
            "date_published": "2022-07-24T08:13:45.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p>计算机中存储的实际上是二进制数据，想要存储字符串，就要建立字符与二进制数据的映射关系。将字符映射为二进制数据的过程叫做<strong>编码</strong>，将二进制数据映射为字符的过程就是<strong>解码</strong>。</p>\n<p>为了容易记忆，你需要知道，解码就是把看不懂的数据（二进制数据）解析为看得懂的数据（字符）。</p>\n<p>因为每个字符实际上是二进制数据，所以他们是可以比较大小的，由此衍生出比较规则。以最经典的 ASCII 字符集为例，该字符集一共收录<strong> 128 个字符</strong>，<strong>每个字符由一个字节保存</strong>。字符<strong> a</strong> 的二进制编码为 <code>1100001</code> ，字符<strong> b</strong> 的二进制编码为 <code>1100010</code> ，通过比较就可以看出 <code>a&gt;b</code> 。</p>\n<p>需要记住几种重要的字符集：</p>\n<ul>\n<li>GBK 字符集：在字符范围上对 GB2312 字符集进行扩充，编码方式兼容 GB2312 字符集。记住其应用广泛即可</li>\n<li>UTF-8 字符集：几乎收录各国（地区）使用的字符，并且在不断扩充。使用变长编码方式，一个字符需要使用 1~4 个字节</li>\n</ul>\n<p>其实 UTF-8 只是 Unicode 字符集的一种<strong>编码方案</strong>，其他的还有 UTF-16（2 或 4 字节编码一个字符），UTF-32（4 字节）。</p>\n<h1 id=\"mysql支持的字符集与比较规则\"><a class=\"anchor\" href=\"#mysql支持的字符集与比较规则\">#</a> MySQL 支持的字符集与比较规则</h1>\n<h2 id=\"utf8mb3和utf8mb4\"><a class=\"anchor\" href=\"#utf8mb3和utf8mb4\">#</a> utf8mb3 和 utf8mb4</h2>\n<p>我们平常使用的字符一般用 1~3 个字节就可以表示，在 MySQL 中，<strong>字符集表示一个字符所用的最大字节数会影响系统存储和性能</strong>（比如一条记录中变长数据的存储，之后的文章会讲到）。</p>\n<p>总之，你需要记住的是 UTF-8 使用 1-4 个字节存储方式有点浪费，所以就有了 utf8mb3。</p>\n<ul>\n<li>utf8mb3：阉割版的 UTF-8 字符集，使用 1~3 个字节表示一个字符。</li>\n<li>utf8mb4：就是 UTF-8 字符集，使用 1~4 个字节。</li>\n</ul>\n<p>在 MySQL 中，<strong>utf8 是 utf8mb3 的别名</strong>。同时，在 MySQL8.0 中，utf8mb4 被极大优化，成为了默认的字符集。</p>\n<h2 id=\"字符集的查看\"><a class=\"anchor\" href=\"#字符集的查看\">#</a> 字符集的查看</h2>\n<pre><code class=\"language-mysql\">mysql&gt; show charset;\n+----------+---------------------------------+---------------------+--------+\n| Charset  | Description                     | Default collation   | Maxlen |\n+----------+---------------------------------+---------------------+--------+\n| big5     | Big5 Traditional Chinese        | big5_chinese_ci     |      2 |\n| dec8     | DEC West European               | dec8_swedish_ci     |      1 |\n| cp850    | DOS West European               | cp850_general_ci    |      1 |\n| hp8      | HP West European                | hp8_english_ci      |      1 |\n| utf8     | UTF-8 Unicode                   | utf8_general_ci     |      3 |\n+----------+---------------------------------+---------------------+--------+\n</code></pre>\n<p>命令  <code>show (character set | charset) [like 匹配模式];</code>  （ <code>[]</code>  里的内容可以省略）</p>\n<p><code>Maxlen</code>  表示该字符集最多需要几个字节表示一个字符。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>表 1  常用字符集与 Maxlen</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Charset</th>\n<th style=\"text-align:center\">Maxlen</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">ascii</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">latin1</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gb2312</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gbk</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">utf8</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">utf8mb4</td>\n<td style=\"text-align:center\">4</td>\n</tr>\n</tbody>\n</table>\n<p><code>Default collation</code>  表示默认的比较规则，<strong>一个字符集可能对应多种比较规则</strong>。</p>\n<pre><code class=\"language-mysql\">mysql&gt; show collation like 'utf8\\_%';\n+--------------------------+---------+-----+---------+----------+---------+\n| Collation                | Charset | Id  | Default | Compiled | Sortlen |\n+--------------------------+---------+-----+---------+----------+---------+\n| utf8_general_ci          | utf8    |  33 | Yes     | Yes      |       1 |\n| utf8_bin                 | utf8    |  83 |         | Yes      |       1 |\n| utf8_unicode_ci          | utf8    | 192 |         | Yes      |       8 |\n| utf8_icelandic_ci        | utf8    | 193 |         | Yes      |       8 |\n| utf8_latvian_ci          | utf8    | 194 |         | Yes      |       8 |\n| utf8_romanian_ci         | utf8    | 195 |         | Yes      |       8 |\n| utf8_slovenian_ci        | utf8    | 196 |         | Yes      |       8 |\n| utf8_polish_ci           | utf8    | 197 |         | Yes      |       8 |\n| utf8_estonian_ci         | utf8    | 198 |         | Yes      |       8 |\n| utf8_spanish_ci          | utf8    | 199 |         | Yes      |       8 |\n| utf8_swedish_ci          | utf8    | 200 |         | Yes      |       8 |\n| utf8_turkish_ci          | utf8    | 201 |         | Yes      |       8 |\n| utf8_czech_ci            | utf8    | 202 |         | Yes      |       8 |\n| utf8_danish_ci           | utf8    | 203 |         | Yes      |       8 |\n| utf8_lithuanian_ci       | utf8    | 204 |         | Yes      |       8 |\n| utf8_slovak_ci           | utf8    | 205 |         | Yes      |       8 |\n| utf8_spanish2_ci         | utf8    | 206 |         | Yes      |       8 |\n| utf8_roman_ci            | utf8    | 207 |         | Yes      |       8 |\n| utf8_persian_ci          | utf8    | 208 |         | Yes      |       8 |\n| utf8_esperanto_ci        | utf8    | 209 |         | Yes      |       8 |\n| utf8_hungarian_ci        | utf8    | 210 |         | Yes      |       8 |\n| utf8_sinhala_ci          | utf8    | 211 |         | Yes      |       8 |\n| utf8_german2_ci          | utf8    | 212 |         | Yes      |       8 |\n| utf8_croatian_ci         | utf8    | 213 |         | Yes      |       8 |\n| utf8_unicode_520_ci      | utf8    | 214 |         | Yes      |       8 |\n| utf8_vietnamese_ci       | utf8    | 215 |         | Yes      |       8 |\n| utf8_general_mysql500_ci | utf8    | 223 |         | Yes      |       1 |\n+--------------------------+---------+-----+---------+----------+---------+\n27 rows in set (0.00 sec)\n</code></pre>\n<p>命令： <code>show collation [like 匹配模式];</code></p>\n<p>从命名中可以看出有些与地域有关系，如 <code>utf8_spanish_ci</code>  是西班牙语的比较规则， <code>utf8_polish_ci</code>  则是波兰语的比较规则。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>表 2  比较规则后缀英文释义及描述</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">后缀</th>\n<th style=\"text-align:center\">英文释义</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">_ai</td>\n<td style=\"text-align:center\">accent insensitive</td>\n<td style=\"text-align:center\">不区分重音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">_as</td>\n<td style=\"text-align:center\">accent sensitive</td>\n<td style=\"text-align:center\">区分重音</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">_ci</td>\n<td style=\"text-align:center\">case insensitive</td>\n<td style=\"text-align:center\">不区分大小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">_cs</td>\n<td style=\"text-align:center\">case (大小写) sensitive</td>\n<td style=\"text-align:center\">区分大小写</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">_bin</td>\n<td style=\"text-align:center\">binary</td>\n<td style=\"text-align:center\">以二进制方式比较</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"应用\"><a class=\"anchor\" href=\"#应用\">#</a> 应用</h1>\n<p>MySQL 有四个级别的字符集和比较规则，分别是服务器级别，数据库级别，表级别，列级别。下面解释如何设置和查看不同级别的字符集和比较规则。</p>\n<h3 id=\"服务器级别\"><a class=\"anchor\" href=\"#服务器级别\">#</a> 服务器级别</h3>\n<p>MySQL 提供两个变量来表示服务器级别的字符集和比较规则。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>表 3  服务器对应的系统变量</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统变量</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">character_set_server</td>\n<td style=\"text-align:center\">服务器级别的字符集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">collation_server</td>\n<td style=\"text-align:center\">服务器级别的比较规则</td>\n</tr>\n</tbody>\n</table>\n<p>相关命令</p>\n<pre><code class=\"language-mysql\">mysql&gt; show variables like '%_server';\n+----------------------+-------------------+\n| Variable_name        | Value             |\n+----------------------+-------------------+\n| character_set_server | latin1            |\n| collation_server     | latin1_swedish_ci |\n+----------------------+-------------------+\n2 rows in set, 1 warning (0.00 sec)\n</code></pre>\n<p>如果想要修改这两个系统变量，需要通过启动选项或者使用 set 语句修改  <code>set global/session varName = value</code> （如果看不懂命令，之后的文章会提到 <code>global/session</code> ）</p>\n<h3 id=\"数据库级别\"><a class=\"anchor\" href=\"#数据库级别\">#</a> 数据库级别</h3>\n<p>字符集和比较规则在创建和修改数据库时可以指定该数据库的字符集和比较规则</p>\n<pre><code class=\"language-mysql\">create database 数据库名\n\t[[default] character set 字符集名称]\n\t[[default] collation 比较规则名称]\n\t\nalter database 数据库名\n\t[[default] character set 字符集名称]\n\t[[default] collation 比较规则名称]\n</code></pre>\n<p>数据库级别也有两个系统变量，当我们使用 <code>use</code>  语句选择一个数据库时，这两个系统变量的值就是该数据库的字符集和比较规则。<strong>如果没有选择数据库，它们的值和服务器级别的系统变量值相同</strong>。</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<strong>表 4  数据库对应的系统变量</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">系统变量</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">character_set_database</td>\n<td style=\"text-align:center\">当前数据库的字符集</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">collation_databased</td>\n<td style=\"text-align:center\">当前数据库的比较规则</td>\n</tr>\n</tbody>\n</table>\n<p>我们不能通过修改这两个系统变量的值来改变当前数据库的字符集和比较规则。</p>\n<pre><code class=\"language-mysql\">mysql&gt; show variables like '%_server';\n+----------------------+-------------------+\n| Variable_name        | Value             |\n+----------------------+-------------------+\n| character_set_server | latin1            |\n| collation_server     | latin1_swedish_ci |\n+----------------------+-------------------+\n2 rows in set, 1 warning (0.00 sec)\n\nmysql&gt; create database test;\nQuery OK, 1 row affected (0.01 sec)\n\nmysql&gt; use test;\nDatabase changed\n\nmysql&gt; show variables like '%_database';\n+------------------------+-------------------+\n| Variable_name          | Value             |\n+------------------------+-------------------+\n| character_set_database | latin1            |\n| collation_database     | latin1_swedish_ci |\n| skip_show_database     | OFF               |\n+------------------------+-------------------+\n3 rows in set, 1 warning (0.00 sec)\n</code></pre>\n<p>可以看到，如果<strong>在创建数据库时没有指定字符集和比较规则，就会使用服务器级别的字符集和比较规则</strong>。</p>\n<h3 id=\"表级别\"><a class=\"anchor\" href=\"#表级别\">#</a> 表级别</h3>\n<p>表级别和数据库级别差不多，都是在创建，修改表时可以修改表的字符集和比较规则，如果没有在创建表时指明其字符集和比较规则，就会使用当前数据库的字符集和比较规则。</p>\n<pre><code class=\"language-mysql\">create table t(\n\tcol varchar(10)\n) character set utf8,collate utf8_general_ci;\n\nalter table t character set utf8;\n</code></pre>\n<p>表查看比较规则</p>\n<pre><code class=\"language-mysql\"># 使用\\G是将输出结果旋转90度输出，方便观看\nmysql&gt; show table status from test like 't' \\G;\n*************************** 1. row ***************************\n           Name: t\n         Engine: InnoDB\n        Version: 10\n     Row_format: Dynamic\n           Rows: 0\n Avg_row_length: 0\n    Data_length: 16384\nMax_data_length: 0\n   Index_length: 0\n      Data_free: 0\n Auto_increment: NULL\n    Create_time: 2022-07-24 17:44:59\n    Update_time: NULL\n     Check_time: NULL\n      Collation: utf8_general_ci #比较规则\n       Checksum: NULL\n Create_options:\n        Comment:\n1 row in set (0.00 sec)\n\nERROR:\nNo query specified\n</code></pre>\n<p>可以看到，表 <code>t</code>  的比较规则为 <code>utf8_general_ci</code> ，则字符集为  <code>utf8</code> （为什么知道比较规则之后就知道了字符集，请继续看）。</p>\n<h3 id=\"列级别\"><a class=\"anchor\" href=\"#列级别\">#</a> 列级别</h3>\n<p>同一个表中，不同列也可以有不同的比较规则。</p>\n<pre><code class=\"language-mysql\">create table 表名(\n\t列名 字符串类型 [character set 字符集名称] [collate 比较规则名称],\n    其他列....\n);\n\nalter table 表名 modify 列名 [character set 字符集名称] [collate 比较规则名称];\n</code></pre>\n<p>需要注意的是，<strong>对于任何一个级别</strong>，存在两条修改规则：</p>\n<ul>\n<li>只修改字符集，则比较规则将会变为修改后的字符集默认的比较规则。</li>\n<li>只修改比较规则，则字符集会变为比较规则对应的字符集。</li>\n</ul>\n<p>如果想要同时修改字符集和比较规则，他们两个一定要适配，比如下列命令</p>\n<pre><code class=\"language-mysql\">mysql&gt; alter table t character set utf8 collate utf8mb4_general_ci;\nERROR 1253 (42000): COLLATION 'utf8mb4_general_ci' is not valid for CHARACTER SET 'utf8'\n</code></pre>\n<p>报错信息为比较规则 <code>utf8mb4_general_ci</code>  对于字符集 <code>utf8</code>  是无效的，所以，我们知道了一个表的比较规则，一般也就知道了其字符集。</p>\n<h1 id=\"引用\"><a class=\"anchor\" href=\"#引用\">#</a> 引用</h1>\n<blockquote>\n<p>本文总结于《从根上理解 MySQL》第三章 p32-p43，作者：小孩子 4919。对于有能力或者兴趣的读者，鄙人强烈推荐这本书，如果您能够通过正规渠道购买，支持作者，支持正版，支持每一颗热爱技术的心，我将感激不尽。</p>\n</blockquote>\n",
            "tags": [
                "MySQL"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/21/Java/%E5%B9%B6%E5%8F%91/JUC_locks1-LockSupport/",
            "url": "https://cecilia.cool/2022/07/21/Java/%E5%B9%B6%E5%8F%91/JUC_locks1-LockSupport/",
            "title": "J.U.C.locks(1)--LockSupport",
            "date_published": "2022-07-21T08:39:21.000Z",
            "content_html": "<h1 id=\"源码分析\"><a class=\"anchor\" href=\"#源码分析\">#</a> 源码分析</h1>\n<h2 id=\"实例字段\"><a class=\"anchor\" href=\"#实例字段\">#</a> 实例字段</h2>\n<p>静态变量保存 Thread 指定的字段的内存偏移量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LockSupport</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// Hotspot implementation via intrinsics API</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span>Unsafe</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 下面属性都是获取内存偏移地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> parkBlockerOffset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">SEED</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">PROBE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> <span class=\"token constant\">SECONDARY</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token constant\">UNSAFE</span> <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">sun<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span></span>Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token function\">getUnsafe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> tk <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token comment\">// 获取 Thread 的指定字段的内存偏移地址</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            parkBlockerOffset <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token punctuation\">(</span>tk<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parkBlocker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token constant\">SEED</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token punctuation\">(</span>tk<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadLocalRandomSeed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token constant\">PROBE</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">(</span>tk<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadLocalRandomProbe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token constant\">SECONDARY</span> <span class=\"token operator\">=</span> <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span>objectFieldOffset</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token punctuation\">(</span>tk<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadLocalRandomSecondarySeed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>LockSupport 的构造方法被 private 修饰，不能在外部实例化。</p>\n<h2 id=\"重要函数\"><a class=\"anchor\" href=\"#重要函数\">#</a> 重要函数</h2>\n<h3 id=\"parkunpark\"><a class=\"anchor\" href=\"#parkunpark\">#</a> park/unpark</h3>\n<p>从源码可知，LockSupport 的 park 和 unpark 都是基于 sun.misc.Unsafe 实现，sun.misc.Unsafe 对于这两个函数相关的定义为</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> isAbsolute<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>park 中的第一个参数 isAbsolute，表示第二个参数是绝对时间（isAbsolute==true）还是相对时间（false），绝对时间的单位是毫秒，相对时间的单位是纳秒，其本质都是传入一个 long 的字段。</p>\n<p>简单地说，park 的作用就是让一个线程进入等待队列，当 time 是 0 时，就是无限等待，直到其他线程调用 unpark。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">NoSuchFieldException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalAccessException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">//Unsafe 构造方法私有，不能被实例化，通过反射获得对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">Field</span> f <span class=\"token operator\">=</span> <span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"theUnsafe\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        f<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Unsafe</span> unsafe <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Unsafe</span><span class=\"token punctuation\">)</span> f<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">// 绝对时间，单位为毫秒</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>       <span class=\"token class-name\">Thread</span> t1 <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park绝对时间测试，单位毫秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"绝对时间测试结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"park相对时间测试，单位纳秒\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token number\">300000000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"相对时间测试结束\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        t1<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        t2<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>park</code>  函数有两个重载版本。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> blocker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> blocker<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取当前线程</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 设置 Blocker</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">setBlocker</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> blocker<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取许可</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 重新可运行后再此设置 Blocker</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">setBlocker</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBlocker</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span> t<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 设置线程 t 的 parkBlocker 字段的值为 arg</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token constant\">UNSAFE</span><span class=\"token punctuation\">.</span><span class=\"token function\">putObject</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> parkBlockerOffset<span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>第二次 <code>setBlocker</code>  时，是其他线程调用了 <code>unpark</code>  后，该线程从 <code>park</code>  中恢复，将线程中的 <code>parkBlocker</code>  字段重新置为 <code>null</code> 。在 <code>setBlocker</code>  中，传入的第二个参数就是 <code>LockSupport</code>  静态代码块中，通过 <code>Unsafe</code>  获得的 <code>parkBlocker</code>  在 <code>Thread</code>  中的地址偏移量。</p>\n<p><code>LockSupport</code>  还有其他函数，此处稍微列举一下。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">parkNanos</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> blocker<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> nanos<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">parkUntil</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> blocker<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> deadline<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h1>\n<p><code>LockSupport.park()</code>  和 <code>LockSupport.unpark()</code>  用于指定线程的等待和唤醒</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TimeUnit</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>locks<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LockSupport</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"main线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">Thread</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程开始运行...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">park</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 线程进入阻塞</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程阻塞结束...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"t线程\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        t<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SECONDS</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 主线程先休眠两秒，保证另一个线程一定先执行 LockSupport.park ()</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">LockSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">unpark</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在 <code>main</code>  函数中的 <code>LockSupport.unpark()</code>  一行代码打断点，选择下栏的 Debug-&gt;Layout setting-&gt;Frames 查看 t 线程的状态（WAIT）</p>\n<p><img data-src=\"https://s3.bmp.ovh/imgs/2022/07/24/576db05114ca5c7d.png\" alt=\"image-20220724125734871\" /></p>\n<h1 id=\"深入理解\"><a class=\"anchor\" href=\"#深入理解\">#</a> 深入理解</h1>\n<h2 id=\"objectwait和conditionawait的区别\"><a class=\"anchor\" href=\"#objectwait和conditionawait的区别\">#</a> Object.wait () 和 Condition.await () 的区别</h2>\n<p><code>Object.wait()</code>  和 <code>Condition.await()</code>  的原理是基本一致的，不同的是 <code>Condition.await()</code>  底层是调用 <code>LockSupport.park()</code>  来实现阻塞当前线程的。</p>\n<p>实际上，它在阻塞当前线程之前还干了两件事，一是把当前线程添加到条件队列中，二是 “完全” 释放锁，也就是让 <code>state</code>  状态变量变为 0，然后才是调用 <code>LockSupport.park()</code>  阻塞当前线程。</p>\n<h2 id=\"关于park的点\"><a class=\"anchor\" href=\"#关于park的点\">#</a> 关于 park 的点</h2>\n<ul>\n<li><code>park</code>  不会释放锁资源。</li>\n<li><code>park</code>  可以被 <code>interrupt</code>  打断，但是不需要处理 <code>InterruptedException</code>  异常。</li>\n<li><code>LockSupport.park()</code>  底层是调用的 <code>Unsafe</code>  的 <code>native</code>  方法。</li>\n</ul>\n<h1 id=\"参考文章\"><a class=\"anchor\" href=\"#参考文章\">#</a> 参考文章</h1>\n<blockquote>\n<p>Java 全栈知识体系：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wZGFpLnRlY2gvbWQvamF2YS90aHJlYWQvamF2YS10aHJlYWQteC1sb2NrLUxvY2tTdXBwb3J0Lmh0bWw=\">https://pdai.tech/md/java/thread/java-thread-x-lock-LockSupport.html</span></p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        },
        {
            "id": "https://cecilia.cool/2022/07/21/Java/%E5%B9%B6%E5%8F%91/Java%E5%85%B3%E9%94%AE%E5%AD%97-synchronized/",
            "url": "https://cecilia.cool/2022/07/21/Java/%E5%B9%B6%E5%8F%91/Java%E5%85%B3%E9%94%AE%E5%AD%97-synchronized/",
            "title": "Java关键字--synchronized",
            "date_published": "2022-07-21T08:10:35.000Z",
            "content_html": "<h1 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h1>\n<p><code>synchronized</code>  关键字是 <code>JVM</code>  实现的，只能是非公平锁。在等待队列中只能随机唤醒一个线程或者全部唤醒。此处可以对比 <code>Conditon</code> ，在基于 <code>AQS</code>  的同步器可以唤醒等待队列队首的线程。</p>\n<p><code>synchronized</code>  的优势</p>\n<ul>\n<li>不用手动释放锁， <code>JVM</code>  自动处理，如果出现异常， <code>JVM</code>  也会自动释放锁。</li>\n<li><code>JVM</code>  用 <code>synchronized</code>  进行管理锁定请求和释放时， <code>JVM</code>  在生成线程转储时能够锁定信息，这些对调试非常有价值，因为它们能 标识死锁或者其他异常行为的来源。而 <code>ReentrantLock</code>  只是普通的类， <code>JVM</code>  不知道具体哪个线程拥有 <code>lock</code>  对象。</li>\n<li><code>synchronized</code>  可以在所有 <code>JVM</code>  版本中工作， <code>ReentrantLock</code>  在某些 1.5 之前版本的 <code>JVM</code>  中可能不支持。</li>\n</ul>\n<p>下面看一个最简单的使用</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"count = \"</span><span class=\"token operator\">+</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">synchronized</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Main</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<blockquote>\n<p>冰河《深入理解高并发编程》第一版</p>\n</blockquote>\n",
            "tags": [
                "并发"
            ]
        }
    ]
}